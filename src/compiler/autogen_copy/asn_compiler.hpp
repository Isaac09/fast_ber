/* Generated by re2c 1.1.1 */
#line 1 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
// A Bison parser, made by GNU Bison 3.0.4.

// Skeleton implementation for Bison LALR(1) parsers in C++

// Copyright (C) 2002-2015 Free Software Foundation, Inc.

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// As a special exception, you may create a larger work that contains
// part or all of the Bison parser skeleton and distribute that work
// under terms of your choice, so long as that work isn't itself a
// parser generator using the skeleton or a modified version thereof
// as a parser skeleton.  Alternatively, if you modify or redistribute
// the parser skeleton itself, you may (at your option) remove this
// special exception, which will cause the skeleton and the resulting
// Bison output files to be licensed under the GNU General Public
// License without this special exception.

// This special exception was added by the Free Software Foundation in
// version 2.2 of Bison.


// First part of user declarations.

#line 37 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:404

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

// //                    "%code requires" blocks.
#line 10 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:408

    #include "fast_ber/compiler/CompilerTypes.hpp"

#line 52 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:408

# include <cassert>
# include <cstdlib> // std::abort
# include <iostream>
# include <stdexcept>
# include <string>
# include <vector>
#include <typeinfo>
#ifndef YYASSERT
# include <cassert>
# define YYASSERT assert
#endif


#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif


namespace yy {
#line 127 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:408

  template <class T, class S = std::vector<T> >
  class stack
  {
  public:
    // Hide our reversed order.
    typedef typename S::reverse_iterator iterator;
    typedef typename S::const_reverse_iterator const_iterator;

    stack ()
      : seq_ ()
    {
      seq_.reserve (200);
    }

    stack (unsigned int n)
      : seq_ (n)
    {}

    inline
    T&
    operator[] (unsigned int i)
    {
      return seq_[seq_.size () - 1 - i];
    }

    inline
    const T&
    operator[] (unsigned int i) const
    {
      return seq_[seq_.size () - 1 - i];
    }

    /// Steal the contents of \a t.
    ///
    /// Close to move-semantics.
    inline
    void
    push (T& t)
    {
      seq_.push_back (T());
      operator[](0).move (t);
    }

    inline
    void
    pop (unsigned int n = 1)
    {
      for (; n; --n)
        seq_.pop_back ();
    }

    void
    clear ()
    {
      seq_.clear ();
    }

    inline
    typename S::size_type
    size () const
    {
      return seq_.size ();
    }

    inline
    const_iterator
    begin () const
    {
      return seq_.rbegin ();
    }

    inline
    const_iterator
    end () const
    {
      return seq_.rend ();
    }

  private:
    stack (const stack&);
    stack& operator= (const stack&);
    /// The wrapped container.
    S seq_;
  };

  /// Present a slice of the top of a stack.
  template <class T, class S = stack<T> >
  class slice
  {
  public:
    slice (const S& stack, unsigned int range)
      : stack_ (stack)
      , range_ (range)
    {}

    inline
    const T&
    operator [] (unsigned int i) const
    {
      return stack_[range_ - i];
    }

  private:
    const S& stack_;
    unsigned int range_;
  };

  /// Abstract a position.
  class position
  {
  public:
    /// Construct a position.
    explicit position (std::string* f = YY_NULLPTR,
                       unsigned int l = 1u,
                       unsigned int c = 1u)
      : filename (f)
      , line (l)
      , column (c)
    {
    }


    /// Initialization.
    void initialize (std::string* fn = YY_NULLPTR,
                     unsigned int l = 1u,
                     unsigned int c = 1u)
    {
      filename = fn;
      line = l;
      column = c;
    }

    /** \name Line and Column related manipulators
     ** \{ */
    /// (line related) Advance to the COUNT next lines.
    void lines (int count = 1)
    {
      if (count)
        {
          column = 1u;
          line = add_ (line, count, 1);
        }
    }

    /// (column related) Advance to the COUNT next columns.
    void columns (int count = 1)
    {
      column = add_ (column, count, 1);
    }
    /** \} */

    /// File name to which this position refers.
    std::string* filename;
    /// Current line number.
    unsigned int line;
    /// Current column number.
    unsigned int column;

  private:
    /// Compute max(min, lhs+rhs) (provided min <= lhs).
    static unsigned int add_ (unsigned int lhs, int rhs, unsigned int min)
    {
      return (0 < rhs || -static_cast<unsigned int>(rhs) < lhs
              ? rhs + lhs
              : min);
    }
  };

  /// Add \a width columns, in place.
  inline position&
  operator+= (position& res, int width)
  {
    res.columns (width);
    return res;
  }

  /// Add \a width columns.
  inline position
  operator+ (position res, int width)
  {
    return res += width;
  }

  /// Subtract \a width columns, in place.
  inline position&
  operator-= (position& res, int width)
  {
    return res += -width;
  }

  /// Subtract \a width columns.
  inline position
  operator- (position res, int width)
  {
    return res -= width;
  }

  /// Compare two position objects.
  inline bool
  operator== (const position& pos1, const position& pos2)
  {
    return (pos1.line == pos2.line
            && pos1.column == pos2.column
            && (pos1.filename == pos2.filename
                || (pos1.filename && pos2.filename
                    && *pos1.filename == *pos2.filename)));
  }

  /// Compare two position objects.
  inline bool
  operator!= (const position& pos1, const position& pos2)
  {
    return !(pos1 == pos2);
  }

  /** \brief Intercept output stream redirection.
   ** \param ostr the destination output stream
   ** \param pos a reference to the position to redirect
   */
  template <typename YYChar>
  inline std::basic_ostream<YYChar>&
  operator<< (std::basic_ostream<YYChar>& ostr, const position& pos)
  {
    if (pos.filename)
      ostr << *pos.filename << ':';
    return ostr << pos.line << '.' << pos.column;
  }

  /// Abstract a location.
  class location
  {
  public:

    /// Construct a location from \a b to \a e.
    location (const position& b, const position& e)
      : begin (b)
      , end (e)
    {
    }

    /// Construct a 0-width location in \a p.
    explicit location (const position& p = position ())
      : begin (p)
      , end (p)
    {
    }

    /// Construct a 0-width location in \a f, \a l, \a c.
    explicit location (std::string* f,
                       unsigned int l = 1u,
                       unsigned int c = 1u)
      : begin (f, l, c)
      , end (f, l, c)
    {
    }


    /// Initialization.
    void initialize (std::string* f = YY_NULLPTR,
                     unsigned int l = 1u,
                     unsigned int c = 1u)
    {
      begin.initialize (f, l, c);
      end = begin;
    }

    /** \name Line and Column related manipulators
     ** \{ */
  public:
    /// Reset initial location to final location.
    void step ()
    {
      begin = end;
    }

    /// Extend the current location to the COUNT next columns.
    void columns (int count = 1)
    {
      end += count;
    }

    /// Extend the current location to the COUNT next lines.
    void lines (int count = 1)
    {
      end.lines (count);
    }
    /** \} */


  public:
    /// Beginning of the located region.
    position begin;
    /// End of the located region.
    position end;
  };

  /// Join two locations, in place.
  inline location& operator+= (location& res, const location& end)
  {
    res.end = end.end;
    return res;
  }

  /// Join two locations.
  inline location operator+ (location res, const location& end)
  {
    return res += end;
  }

  /// Add \a width columns to the end position, in place.
  inline location& operator+= (location& res, int width)
  {
    res.columns (width);
    return res;
  }

  /// Add \a width columns to the end position.
  inline location operator+ (location res, int width)
  {
    return res += width;
  }

  /// Subtract \a width columns to the end position, in place.
  inline location& operator-= (location& res, int width)
  {
    return res += -width;
  }

  /// Subtract \a width columns to the end position.
  inline location operator- (location res, int width)
  {
    return res -= width;
  }

  /// Compare two location objects.
  inline bool
  operator== (const location& loc1, const location& loc2)
  {
    return loc1.begin == loc2.begin && loc1.end == loc2.end;
  }

  /// Compare two location objects.
  inline bool
  operator!= (const location& loc1, const location& loc2)
  {
    return !(loc1 == loc2);
  }

  /** \brief Intercept output stream redirection.
   ** \param ostr the destination output stream
   ** \param loc a reference to the location to redirect
   **
   ** Avoid duplicate information.
   */
  template <typename YYChar>
  inline std::basic_ostream<YYChar>&
  operator<< (std::basic_ostream<YYChar>& ostr, const location& loc)
  {
    unsigned int end_col = 0 < loc.end.column ? loc.end.column - 1 : 0;
    ostr << loc.begin;
    if (loc.end.filename
        && (!loc.begin.filename
            || *loc.begin.filename != *loc.end.filename))
      ostr << '-' << loc.end.filename << ':' << loc.end.line << '.' << end_col;
    else if (loc.begin.line < loc.end.line)
      ostr << '-' << loc.end.line << '.' << end_col;
    else if (loc.begin.column < end_col)
      ostr << '-' << end_col;
    return ostr;
  }


  /// A char[S] buffer to store and retrieve objects.
  ///
  /// Sort of a variant, but does not keep track of the nature
  /// of the stored data, since that knowledge is available
  /// via the current state.
  template <size_t S>
  struct variant
  {
    /// Type of *this.
    typedef variant<S> self_type;

    /// Empty construction.
    variant ()
      : yytypeid_ (YY_NULLPTR)
    {}

    /// Construct and fill.
    template <typename T>
    variant (const T& t)
      : yytypeid_ (&typeid (T))
    {
      YYASSERT (sizeof (T) <= S);
      new (yyas_<T> ()) T (t);
    }

    /// Destruction, allowed only if empty.
    ~variant ()
    {
      YYASSERT (!yytypeid_);
    }

    /// Instantiate an empty \a T in here.
    template <typename T>
    T&
    build ()
    {
      YYASSERT (!yytypeid_);
      YYASSERT (sizeof (T) <= S);
      yytypeid_ = & typeid (T);
      return *new (yyas_<T> ()) T;
    }

    /// Instantiate a \a T in here from \a t.
    template <typename T>
    T&
    build (const T& t)
    {
      YYASSERT (!yytypeid_);
      YYASSERT (sizeof (T) <= S);
      yytypeid_ = & typeid (T);
      return *new (yyas_<T> ()) T (t);
    }

    /// Accessor to a built \a T.
    template <typename T>
    T&
    as ()
    {
      YYASSERT (*yytypeid_ == typeid (T));
      YYASSERT (sizeof (T) <= S);
      return *yyas_<T> ();
    }

    /// Const accessor to a built \a T (for %printer).
    template <typename T>
    const T&
    as () const
    {
      YYASSERT (*yytypeid_ == typeid (T));
      YYASSERT (sizeof (T) <= S);
      return *yyas_<T> ();
    }

    /// Swap the content with \a other, of same type.
    ///
    /// Both variants must be built beforehand, because swapping the actual
    /// data requires reading it (with as()), and this is not possible on
    /// unconstructed variants: it would require some dynamic testing, which
    /// should not be the variant's responsability.
    /// Swapping between built and (possibly) non-built is done with
    /// variant::move ().
    template <typename T>
    void
    swap (self_type& other)
    {
      YYASSERT (yytypeid_);
      YYASSERT (*yytypeid_ == *other.yytypeid_);
      std::swap (as<T> (), other.as<T> ());
    }

    /// Move the content of \a other to this.
    ///
    /// Destroys \a other.
    template <typename T>
    void
    move (self_type& other)
    {
      build<T> ();
      swap<T> (other);
      other.destroy<T> ();
    }

    /// Copy the content of \a other to this.
    template <typename T>
    void
    copy (const self_type& other)
    {
      build<T> (other.as<T> ());
    }

    /// Destroy the stored \a T.
    template <typename T>
    void
    destroy ()
    {
      as<T> ().~T ();
      yytypeid_ = YY_NULLPTR;
    }

  private:
    /// Prohibit blind copies.
    self_type& operator=(const self_type&);
    variant (const self_type&);

    /// Accessor to raw memory as \a T.
    template <typename T>
    T*
    yyas_ ()
    {
      void *yyp = yybuffer_.yyraw;
      return static_cast<T*> (yyp);
     }

    /// Const accessor to raw memory as \a T.
    template <typename T>
    const T*
    yyas_ () const
    {
      const void *yyp = yybuffer_.yyraw;
      return static_cast<const T*> (yyp);
     }

    union
    {
      /// Strongest alignment constraints.
      long double yyalign_me;
      /// A buffer large enough to store any of the semantic values.
      char yyraw[S];
    } yybuffer_;

    /// Whether the content is built: if defined, the name of the stored type.
    const std::type_info *yytypeid_;
  };


  /// A Bison parser.
  class asn1_parser
  {
  public:
#ifndef YYSTYPE
    /// An auxiliary type to compute the largest semantic type.
    union union_type
    {
      // Assignment
      // TypeAssignment
      // ValueAssignment
      char dummy1[sizeof(Assignment)];

      // BuiltinType
      char dummy2[sizeof(BuiltinType)];

      // ChoiceType
      char dummy3[sizeof(ChoiceType)];

      // Class
      char dummy4[sizeof(Class)];

      // ComponentType
      char dummy5[sizeof(ComponentType)];

      // ComponentTypeLists
      // RootComponentTypeList
      // ComponentTypeList
      char dummy6[sizeof(ComponentTypeList)];

      // DefinedType
      char dummy7[sizeof(DefinedType)];

      // DefinedValue
      char dummy8[sizeof(DefinedValue)];

      // EnumeratedType
      // Enumerations
      // Enumeration
      char dummy9[sizeof(EnumeratedType)];

      // EnumerationItem
      char dummy10[sizeof(EnumerationValue)];

      // SymbolsFromModule
      char dummy11[sizeof(Import)];

      // ModuleBody
      char dummy12[sizeof(Module)];

      // NamedNumber
      char dummy13[sizeof(NamedNumber)];

      // NamedType
      char dummy14[sizeof(NamedType)];

      // ObjIdComponents
      // NameForm
      // NumberForm
      // NameAndNumberForm
      char dummy15[sizeof(ObjectIdComponentValue)];

      // PrefixedType
      char dummy16[sizeof(PrefixedType)];

      // SequenceOfType
      char dummy17[sizeof(SequenceOfType)];

      // SequenceType
      char dummy18[sizeof(SequenceType)];

      // SetOfType
      char dummy19[sizeof(SetOfType)];

      // SetType
      char dummy20[sizeof(SetType)];

      // Tag
      char dummy21[sizeof(Tag)];

      // TaggedType
      char dummy22[sizeof(TaggedType)];

      // TagDefault
      char dummy23[sizeof(TaggingMode)];

      // Type
      char dummy24[sizeof(Type)];

      // Value
      char dummy25[sizeof(Value)];

      // realnumber
      char dummy26[sizeof(double)];

      // ClassNumber
      char dummy27[sizeof(int)];

      // number
      // SignedNumber
      char dummy28[sizeof(long long)];

      // bstring
      // xmlbstring
      // hstring
      // xmlhstring
      // cstring
      // xmlcstring
      // simplestring
      // xmltstring
      // typefieldreference
      // valuefieldreference
      // GENERIC_IDENTIFIER_UPPERCASE
      // GENERIC_IDENTIFIER_LOWERCASE
      // ModuleIdentifier
      // GlobalModuleReference
      // Symbol
      // Reference
      // typereference
      // identifier
      // valuereference
      // modulereference
      // objectclassreference
      // word
      char dummy29[sizeof(std::string)];

      // AssignmentList
      char dummy30[sizeof(std::vector<Assignment>)];

      // Exports
      char dummy31[sizeof(std::vector<Export>)];

      // Imports
      // SymbolsImported
      // SymbolsFromModuleList
      char dummy32[sizeof(std::vector<Import>)];

      // AlternativeTypeLists
      // RootAlternativeTypeList
      // AlternativeTypeList
      char dummy33[sizeof(std::vector<NamedType>)];

      // ObjectIdentifierValue
      // ObjIdComponentsList
      char dummy34[sizeof(std::vector<ObjectIdComponentValue>)];

      // SequenceOfValues
      char dummy35[sizeof(std::vector<Value>)];

      // SymbolList
      char dummy36[sizeof(std::vector<std::string>)];
};

    /// Symbol semantic values.
    typedef variant<sizeof(union_type)> semantic_type;
#else
    typedef YYSTYPE semantic_type;
#endif
    /// Symbol locations.
    typedef location location_type;

    /// Syntax errors thrown from user actions.
    struct syntax_error : std::runtime_error
    {
      syntax_error (const location_type& l, const std::string& m);
      location_type location;
    };

    /// Tokens.
    struct token
    {
      enum yytokentype
      {
        END_OF_FILE = 0,
        comment = 258,
        number = 259,
        realnumber = 260,
        bstring = 261,
        xmlbstring = 262,
        hstring = 263,
        xmlhstring = 264,
        cstring = 265,
        xmlcstring = 266,
        simplestring = 267,
        xmltstring = 268,
        psname = 269,
        encodingreference = 270,
        integerUnicodeLabel = 271,
        tstring = 274,
        objectreference = 276,
        objectsetreference = 277,
        typefieldreference = 278,
        valuefieldreference = 279,
        valuesetfieldreference = 280,
        objectfieldreference = 281,
        objectsetfieldreference = 282,
        ABSENT = 283,
        ABSTRACT_SYNTAX = 284,
        ALL = 285,
        APPLICATION = 286,
        ASN_NULL = 287,
        AUTOMATIC = 288,
        BEGIN = 289,
        BIT = 290,
        BMPString = 291,
        BOOLEAN = 292,
        BY = 293,
        CHARACTER = 294,
        CHOICE = 295,
        CLASS = 296,
        COMPONENT = 297,
        COMPONENTS = 298,
        CONSTRAINED = 299,
        CONTAINING = 300,
        DATE = 301,
        DATE_TIME = 302,
        DEFAULT = 303,
        DEFINITIONS = 304,
        DURATION = 305,
        EMBEDDED = 306,
        ENCODED = 307,
        ENCODING_CONTROL = 308,
        END = 309,
        ENUMERATED = 310,
        EXCEPT = 311,
        EXPLICIT = 312,
        EXPORTS = 313,
        EXTENSIBILITY = 314,
        EXTERNAL = 315,
        FALSE = 316,
        FROM = 317,
        GeneralizedTime = 318,
        GeneralString = 319,
        GraphicString = 320,
        IA5String = 321,
        IDENTIFIER = 322,
        IMPLICIT = 323,
        IMPLIED = 324,
        IMPORTS = 325,
        INCLUDES = 326,
        INSTANCE = 327,
        INSTRUCTIONS = 328,
        INTEGER = 329,
        INTERSECTION = 330,
        ISO646String = 331,
        MAX = 332,
        MIN = 333,
        MINUS_INFINITY = 334,
        NOT_A_NUMBER = 335,
        NumericString = 336,
        OBJECT = 337,
        ObjectDescriptor = 338,
        OCTET = 339,
        OF = 340,
        OID_IRI = 341,
        OPTIONAL = 342,
        PATTERN = 343,
        PDV = 344,
        PLUS_INFINITY = 345,
        PRESENT = 346,
        PrintableString = 347,
        PRIVATE = 348,
        REAL = 349,
        RELATIVE_OID = 350,
        RELATIVE_OID_IRI = 351,
        SEQUENCE = 352,
        SET = 353,
        SETTINGS = 354,
        SIZE = 355,
        STRING = 356,
        SYNTAX = 357,
        T61String = 358,
        TAGS = 359,
        TeletexString = 360,
        TIME = 361,
        TIME_OF_DAY = 362,
        TRUE = 363,
        TYPE_IDENTIFIER = 364,
        UNION = 365,
        UNIQUE = 366,
        UNIVERSAL = 367,
        UniversalString = 368,
        UTCTime = 369,
        UTF8String = 370,
        VideotexString = 371,
        VisibleString = 372,
        WITH = 373,
        DEFINED_AS = 374,
        ELIPSIS = 375,
        RANGE = 376,
        OPEN_BRACE = 377,
        CLOSE_BRACE = 378,
        OPEN_PARENTHESIS = 379,
        CLOSE_PARENTHESIS = 380,
        OPEN_SQUARE_BRACKET = 381,
        CLOSE_SQUARE_BRACKET = 382,
        LESS_THAN = 383,
        GREATER_THAN = 384,
        EXCLAMATION_MARK = 385,
        QUOTATION_MARK = 386,
        AMPERSAND = 387,
        APOSTROPHE = 388,
        ASTERISK = 389,
        COMMA = 390,
        FULL_STOP = 391,
        HYPHEN_MINUS = 392,
        SOLIDUS = 393,
        COLON = 394,
        SEMICOLON = 395,
        EQUALS_SIGN = 396,
        AT = 397,
        VERTICAL_LINE = 398,
        ACCENT = 399,
        PLUS = 400,
        STAR = 401,
        GENERIC_IDENTIFIER_UPPERCASE = 402,
        GENERIC_IDENTIFIER_LOWERCASE = 403,
        GENERIC_INTEGER = 404,
        xmlasn1typename = 405
      };
    };

    /// (External) token type, as returned by yylex.
    typedef token::yytokentype token_type;

    /// Symbol type: an internal symbol number.
    typedef int symbol_number_type;

    /// The symbol type number to denote an empty symbol.
    enum { empty_symbol = -2 };

    /// Internal symbol number for tokens (subsumed by symbol_number_type).
    typedef unsigned char token_number_type;

    /// A complete symbol.
    ///
    /// Expects its Base type to provide access to the symbol type
    /// via type_get().
    ///
    /// Provide access to semantic value and location.
    template <typename Base>
    struct basic_symbol : Base
    {
      /// Alias to Base.
      typedef Base super_type;

      /// Default constructor.
      basic_symbol ();

      /// Copy constructor.
      basic_symbol (const basic_symbol& other);

      /// Constructor for valueless symbols, and symbols from each type.

  basic_symbol (typename Base::kind_type t, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Assignment v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const BuiltinType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ChoiceType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Class v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ComponentType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ComponentTypeList v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const DefinedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const DefinedValue v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const EnumeratedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const EnumerationValue v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Import v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Module v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const NamedNumber v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const NamedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ObjectIdComponentValue v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const PrefixedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const SequenceOfType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const SequenceType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const SetOfType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const SetType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Tag v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const TaggedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const TaggingMode v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Type v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Value v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const double v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const int v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const long long v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::string v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<Assignment> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<Export> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<Import> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<NamedType> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<ObjectIdComponentValue> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<Value> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<std::string> v, const location_type& l);


      /// Constructor for symbols with semantic value.
      basic_symbol (typename Base::kind_type t,
                    const semantic_type& v,
                    const location_type& l);

      /// Destroy the symbol.
      ~basic_symbol ();

      /// Destroy contents, and record that is empty.
      void clear ();

      /// Whether empty.
      bool empty () const;

      /// Destructive move, \a s is emptied into this.
      void move (basic_symbol& s);

      /// The semantic value.
      semantic_type value;

      /// The location.
      location_type location;

    private:
      /// Assignment operator.
      basic_symbol& operator= (const basic_symbol& other);
    };

    /// Type access provider for token (enum) based symbols.
    struct by_type
    {
      /// Default constructor.
      by_type ();

      /// Copy constructor.
      by_type (const by_type& other);

      /// The symbol type as needed by the constructor.
      typedef token_type kind_type;

      /// Constructor from (external) token numbers.
      by_type (kind_type t);

      /// Record that this symbol is empty.
      void clear ();

      /// Steal the symbol type from \a that.
      void move (by_type& that);

      /// The (internal) type number (corresponding to \a type).
      /// \a empty when empty.
      symbol_number_type type_get () const;

      /// The token.
      token_type token () const;

      /// The symbol type.
      /// \a empty_symbol when empty.
      /// An int, not token_number_type, to be able to store empty_symbol.
      int type;
    };

    /// "External" symbols: returned by the scanner.
    typedef basic_symbol<by_type> symbol_type;

    // Symbol constructors declarations.
    static inline
    symbol_type
    make_END_OF_FILE (const location_type& l);

    static inline
    symbol_type
    make_comment (const location_type& l);

    static inline
    symbol_type
    make_number (const long long& v, const location_type& l);

    static inline
    symbol_type
    make_realnumber (const double& v, const location_type& l);

    static inline
    symbol_type
    make_bstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_xmlbstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_hstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_xmlhstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_cstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_xmlcstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_simplestring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_xmltstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_psname (const location_type& l);

    static inline
    symbol_type
    make_encodingreference (const location_type& l);

    static inline
    symbol_type
    make_integerUnicodeLabel (const location_type& l);

    static inline
    symbol_type
    make_tstring (const location_type& l);

    static inline
    symbol_type
    make_objectreference (const location_type& l);

    static inline
    symbol_type
    make_objectsetreference (const location_type& l);

    static inline
    symbol_type
    make_typefieldreference (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_valuefieldreference (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_valuesetfieldreference (const location_type& l);

    static inline
    symbol_type
    make_objectfieldreference (const location_type& l);

    static inline
    symbol_type
    make_objectsetfieldreference (const location_type& l);

    static inline
    symbol_type
    make_ABSENT (const location_type& l);

    static inline
    symbol_type
    make_ABSTRACT_SYNTAX (const location_type& l);

    static inline
    symbol_type
    make_ALL (const location_type& l);

    static inline
    symbol_type
    make_APPLICATION (const location_type& l);

    static inline
    symbol_type
    make_ASN_NULL (const location_type& l);

    static inline
    symbol_type
    make_AUTOMATIC (const location_type& l);

    static inline
    symbol_type
    make_BEGIN (const location_type& l);

    static inline
    symbol_type
    make_BIT (const location_type& l);

    static inline
    symbol_type
    make_BMPString (const location_type& l);

    static inline
    symbol_type
    make_BOOLEAN (const location_type& l);

    static inline
    symbol_type
    make_BY (const location_type& l);

    static inline
    symbol_type
    make_CHARACTER (const location_type& l);

    static inline
    symbol_type
    make_CHOICE (const location_type& l);

    static inline
    symbol_type
    make_CLASS (const location_type& l);

    static inline
    symbol_type
    make_COMPONENT (const location_type& l);

    static inline
    symbol_type
    make_COMPONENTS (const location_type& l);

    static inline
    symbol_type
    make_CONSTRAINED (const location_type& l);

    static inline
    symbol_type
    make_CONTAINING (const location_type& l);

    static inline
    symbol_type
    make_DATE (const location_type& l);

    static inline
    symbol_type
    make_DATE_TIME (const location_type& l);

    static inline
    symbol_type
    make_DEFAULT (const location_type& l);

    static inline
    symbol_type
    make_DEFINITIONS (const location_type& l);

    static inline
    symbol_type
    make_DURATION (const location_type& l);

    static inline
    symbol_type
    make_EMBEDDED (const location_type& l);

    static inline
    symbol_type
    make_ENCODED (const location_type& l);

    static inline
    symbol_type
    make_ENCODING_CONTROL (const location_type& l);

    static inline
    symbol_type
    make_END (const location_type& l);

    static inline
    symbol_type
    make_ENUMERATED (const location_type& l);

    static inline
    symbol_type
    make_EXCEPT (const location_type& l);

    static inline
    symbol_type
    make_EXPLICIT (const location_type& l);

    static inline
    symbol_type
    make_EXPORTS (const location_type& l);

    static inline
    symbol_type
    make_EXTENSIBILITY (const location_type& l);

    static inline
    symbol_type
    make_EXTERNAL (const location_type& l);

    static inline
    symbol_type
    make_FALSE (const location_type& l);

    static inline
    symbol_type
    make_FROM (const location_type& l);

    static inline
    symbol_type
    make_GeneralizedTime (const location_type& l);

    static inline
    symbol_type
    make_GeneralString (const location_type& l);

    static inline
    symbol_type
    make_GraphicString (const location_type& l);

    static inline
    symbol_type
    make_IA5String (const location_type& l);

    static inline
    symbol_type
    make_IDENTIFIER (const location_type& l);

    static inline
    symbol_type
    make_IMPLICIT (const location_type& l);

    static inline
    symbol_type
    make_IMPLIED (const location_type& l);

    static inline
    symbol_type
    make_IMPORTS (const location_type& l);

    static inline
    symbol_type
    make_INCLUDES (const location_type& l);

    static inline
    symbol_type
    make_INSTANCE (const location_type& l);

    static inline
    symbol_type
    make_INSTRUCTIONS (const location_type& l);

    static inline
    symbol_type
    make_INTEGER (const location_type& l);

    static inline
    symbol_type
    make_INTERSECTION (const location_type& l);

    static inline
    symbol_type
    make_ISO646String (const location_type& l);

    static inline
    symbol_type
    make_MAX (const location_type& l);

    static inline
    symbol_type
    make_MIN (const location_type& l);

    static inline
    symbol_type
    make_MINUS_INFINITY (const location_type& l);

    static inline
    symbol_type
    make_NOT_A_NUMBER (const location_type& l);

    static inline
    symbol_type
    make_NumericString (const location_type& l);

    static inline
    symbol_type
    make_OBJECT (const location_type& l);

    static inline
    symbol_type
    make_ObjectDescriptor (const location_type& l);

    static inline
    symbol_type
    make_OCTET (const location_type& l);

    static inline
    symbol_type
    make_OF (const location_type& l);

    static inline
    symbol_type
    make_OID_IRI (const location_type& l);

    static inline
    symbol_type
    make_OPTIONAL (const location_type& l);

    static inline
    symbol_type
    make_PATTERN (const location_type& l);

    static inline
    symbol_type
    make_PDV (const location_type& l);

    static inline
    symbol_type
    make_PLUS_INFINITY (const location_type& l);

    static inline
    symbol_type
    make_PRESENT (const location_type& l);

    static inline
    symbol_type
    make_PrintableString (const location_type& l);

    static inline
    symbol_type
    make_PRIVATE (const location_type& l);

    static inline
    symbol_type
    make_REAL (const location_type& l);

    static inline
    symbol_type
    make_RELATIVE_OID (const location_type& l);

    static inline
    symbol_type
    make_RELATIVE_OID_IRI (const location_type& l);

    static inline
    symbol_type
    make_SEQUENCE (const location_type& l);

    static inline
    symbol_type
    make_SET (const location_type& l);

    static inline
    symbol_type
    make_SETTINGS (const location_type& l);

    static inline
    symbol_type
    make_SIZE (const location_type& l);

    static inline
    symbol_type
    make_STRING (const location_type& l);

    static inline
    symbol_type
    make_SYNTAX (const location_type& l);

    static inline
    symbol_type
    make_T61String (const location_type& l);

    static inline
    symbol_type
    make_TAGS (const location_type& l);

    static inline
    symbol_type
    make_TeletexString (const location_type& l);

    static inline
    symbol_type
    make_TIME (const location_type& l);

    static inline
    symbol_type
    make_TIME_OF_DAY (const location_type& l);

    static inline
    symbol_type
    make_TRUE (const location_type& l);

    static inline
    symbol_type
    make_TYPE_IDENTIFIER (const location_type& l);

    static inline
    symbol_type
    make_UNION (const location_type& l);

    static inline
    symbol_type
    make_UNIQUE (const location_type& l);

    static inline
    symbol_type
    make_UNIVERSAL (const location_type& l);

    static inline
    symbol_type
    make_UniversalString (const location_type& l);

    static inline
    symbol_type
    make_UTCTime (const location_type& l);

    static inline
    symbol_type
    make_UTF8String (const location_type& l);

    static inline
    symbol_type
    make_VideotexString (const location_type& l);

    static inline
    symbol_type
    make_VisibleString (const location_type& l);

    static inline
    symbol_type
    make_WITH (const location_type& l);

    static inline
    symbol_type
    make_DEFINED_AS (const location_type& l);

    static inline
    symbol_type
    make_ELIPSIS (const location_type& l);

    static inline
    symbol_type
    make_RANGE (const location_type& l);

    static inline
    symbol_type
    make_OPEN_BRACE (const location_type& l);

    static inline
    symbol_type
    make_CLOSE_BRACE (const location_type& l);

    static inline
    symbol_type
    make_OPEN_PARENTHESIS (const location_type& l);

    static inline
    symbol_type
    make_CLOSE_PARENTHESIS (const location_type& l);

    static inline
    symbol_type
    make_OPEN_SQUARE_BRACKET (const location_type& l);

    static inline
    symbol_type
    make_CLOSE_SQUARE_BRACKET (const location_type& l);

    static inline
    symbol_type
    make_LESS_THAN (const location_type& l);

    static inline
    symbol_type
    make_GREATER_THAN (const location_type& l);

    static inline
    symbol_type
    make_EXCLAMATION_MARK (const location_type& l);

    static inline
    symbol_type
    make_QUOTATION_MARK (const location_type& l);

    static inline
    symbol_type
    make_AMPERSAND (const location_type& l);

    static inline
    symbol_type
    make_APOSTROPHE (const location_type& l);

    static inline
    symbol_type
    make_ASTERISK (const location_type& l);

    static inline
    symbol_type
    make_COMMA (const location_type& l);

    static inline
    symbol_type
    make_FULL_STOP (const location_type& l);

    static inline
    symbol_type
    make_HYPHEN_MINUS (const location_type& l);

    static inline
    symbol_type
    make_SOLIDUS (const location_type& l);

    static inline
    symbol_type
    make_COLON (const location_type& l);

    static inline
    symbol_type
    make_SEMICOLON (const location_type& l);

    static inline
    symbol_type
    make_EQUALS_SIGN (const location_type& l);

    static inline
    symbol_type
    make_AT (const location_type& l);

    static inline
    symbol_type
    make_VERTICAL_LINE (const location_type& l);

    static inline
    symbol_type
    make_ACCENT (const location_type& l);

    static inline
    symbol_type
    make_PLUS (const location_type& l);

    static inline
    symbol_type
    make_STAR (const location_type& l);

    static inline
    symbol_type
    make_GENERIC_IDENTIFIER_UPPERCASE (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_GENERIC_IDENTIFIER_LOWERCASE (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_GENERIC_INTEGER (const location_type& l);

    static inline
    symbol_type
    make_xmlasn1typename (const location_type& l);


    /// Build a parser object.
    asn1_parser (Context& context_yyarg);
    virtual ~asn1_parser ();

    /// Parse.
    /// \returns  0 iff parsing succeeded.
    virtual int parse ();

#if YYDEBUG
    /// The current debugging stream.
    std::ostream& debug_stream () const YY_ATTRIBUTE_PURE;
    /// Set the current debugging stream.
    void set_debug_stream (std::ostream &);

    /// Type for debugging levels.
    typedef int debug_level_type;
    /// The current debugging level.
    debug_level_type debug_level () const YY_ATTRIBUTE_PURE;
    /// Set the current debugging level.
    void set_debug_level (debug_level_type l);
#endif

    /// Report a syntax error.
    /// \param loc    where the syntax error is found.
    /// \param msg    a description of the syntax error.
    virtual void error (const location_type& loc, const std::string& msg);

    /// Report a syntax error.
    void error (const syntax_error& err);

  private:
    /// This class is not copyable.
    asn1_parser (const asn1_parser&);
    asn1_parser& operator= (const asn1_parser&);

    /// State numbers.
    typedef int state_type;

    /// Generate an error message.
    /// \param yystate   the state where the error occurred.
    /// \param yyla      the lookahead token.
    virtual std::string yysyntax_error_ (state_type yystate,
                                         const symbol_type& yyla) const;

    /// Compute post-reduction state.
    /// \param yystate   the current state
    /// \param yysym     the nonterminal to push on the stack
    state_type yy_lr_goto_state_ (state_type yystate, int yysym);

    /// Whether the given \c yypact_ value indicates a defaulted state.
    /// \param yyvalue   the value to check
    static bool yy_pact_value_is_default_ (int yyvalue);

    /// Whether the given \c yytable_ value indicates a syntax error.
    /// \param yyvalue   the value to check
    static bool yy_table_value_is_error_ (int yyvalue);

    static const short int yypact_ninf_;
    static const short int yytable_ninf_;

    /// Convert a scanner token number \a t to a symbol number.
    static token_number_type yytranslate_ (token_type t);

    // Tables.
  // YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
  // STATE-NUM.
  static const short int yypact_[];

  // YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
  // Performed when YYTABLE does not specify something else to do.  Zero
  // means the default is an error.
  static const unsigned short int yydefact_[];

  // YYPGOTO[NTERM-NUM].
  static const short int yypgoto_[];

  // YYDEFGOTO[NTERM-NUM].
  static const short int yydefgoto_[];

  // YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
  // positive, shift that token.  If negative, reduce the rule whose
  // number is the opposite.  If YYTABLE_NINF, syntax error.
  static const short int yytable_[];

  static const short int yycheck_[];

  // YYSTOS[STATE-NUM] -- The (internal number of the) accessing
  // symbol of state STATE-NUM.
  static const unsigned short int yystos_[];

  // YYR1[YYN] -- Symbol number of symbol that rule YYN derives.
  static const unsigned short int yyr1_[];

  // YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.
  static const unsigned char yyr2_[];


    /// Convert the symbol name \a n to a form suitable for a diagnostic.
    static std::string yytnamerr_ (const char *n);


    /// For a symbol, its name in clear.
    static const char* const yytname_[];
#if YYDEBUG
  // YYRLINE[YYN] -- Source line where rule number YYN was defined.
  static const unsigned short int yyrline_[];
    /// Report on the debug stream that the rule \a r is going to be reduced.
    virtual void yy_reduce_print_ (int r);
    /// Print the state stack on the debug stream.
    virtual void yystack_print_ ();

    // Debugging.
    int yydebug_;
    std::ostream* yycdebug_;

    /// \brief Display a symbol type, value and location.
    /// \param yyo    The output stream.
    /// \param yysym  The symbol.
    template <typename Base>
    void yy_print_ (std::ostream& yyo, const basic_symbol<Base>& yysym) const;
#endif

    /// \brief Reclaim the memory associated to a symbol.
    /// \param yymsg     Why this token is reclaimed.
    ///                  If null, print nothing.
    /// \param yysym     The symbol.
    template <typename Base>
    void yy_destroy_ (const char* yymsg, basic_symbol<Base>& yysym) const;

  private:
    /// Type access provider for state based symbols.
    struct by_state
    {
      /// Default constructor.
      by_state ();

      /// The symbol type as needed by the constructor.
      typedef state_type kind_type;

      /// Constructor.
      by_state (kind_type s);

      /// Copy constructor.
      by_state (const by_state& other);

      /// Record that this symbol is empty.
      void clear ();

      /// Steal the symbol type from \a that.
      void move (by_state& that);

      /// The (internal) type number (corresponding to \a state).
      /// \a empty_symbol when empty.
      symbol_number_type type_get () const;

      /// The state number used to denote an empty symbol.
      enum { empty_state = -1 };

      /// The state.
      /// \a empty when empty.
      state_type state;
    };

    /// "Internal" symbol: element of the stack.
    struct stack_symbol_type : basic_symbol<by_state>
    {
      /// Superclass.
      typedef basic_symbol<by_state> super_type;
      /// Construct an empty symbol.
      stack_symbol_type ();
      /// Steal the contents from \a sym to build this.
      stack_symbol_type (state_type s, symbol_type& sym);
      /// Assignment, needed by push_back.
      stack_symbol_type& operator= (const stack_symbol_type& that);
    };

    /// Stack type.
    typedef stack<stack_symbol_type> stack_type;

    /// The stack.
    stack_type yystack_;

    /// Push a new state on the stack.
    /// \param m    a debug message to display
    ///             if null, no trace is output.
    /// \param s    the symbol
    /// \warning the contents of \a s.value is stolen.
    void yypush_ (const char* m, stack_symbol_type& s);

    /// Push a new look ahead token on the state on the stack.
    /// \param m    a debug message to display
    ///             if null, no trace is output.
    /// \param s    the state
    /// \param sym  the symbol (for its value and location).
    /// \warning the contents of \a s.value is stolen.
    void yypush_ (const char* m, state_type s, symbol_type& sym);

    /// Pop \a n symbols the three stacks.
    void yypop_ (unsigned int n = 1);

    /// Constants.
    enum
    {
      yyeof_ = 0,
      yylast_ = 3209,     ///< Last index in yytable_.
      yynnts_ = 227,  ///< Number of nonterminal symbols.
      yyfinal_ = 6, ///< Termination state number.
      yyterror_ = 1,
      yyerrcode_ = 256,
      yyntokens_ = 151  ///< Number of tokens.
    };


    // User arguments.
    Context& context;
  };

  // Symbol number corresponding to token number t.
  inline
  asn1_parser::token_number_type
  asn1_parser::yytranslate_ (token_type t)
  {
    static
    const token_number_type
    translate_table[] =
    {
     0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150
    };
    const unsigned int user_token_number_max_ = 405;
    const token_number_type undef_token_ = 2;

    if (static_cast<int>(t) <= yyeof_)
      return yyeof_;
    else if (static_cast<unsigned int> (t) <= user_token_number_max_)
      return translate_table[t];
    else
      return undef_token_;
  }

  inline
  asn1_parser::syntax_error::syntax_error (const location_type& l, const std::string& m)
    : std::runtime_error (m)
    , location (l)
  {}

  // basic_symbol.
  template <typename Base>
  inline
  asn1_parser::basic_symbol<Base>::basic_symbol ()
    : value ()
  {}

  template <typename Base>
  inline
  asn1_parser::basic_symbol<Base>::basic_symbol (const basic_symbol& other)
    : Base (other)
    , value ()
    , location (other.location)
  {
      switch (other.type_get ())
    {
      case 249: // Assignment
      case 258: // TypeAssignment
      case 259: // ValueAssignment
        value.copy< Assignment > (other.value);
        break;

      case 261: // BuiltinType
        value.copy< BuiltinType > (other.value);
        break;

      case 291: // ChoiceType
        value.copy< ChoiceType > (other.value);
        break;

      case 301: // Class
        value.copy< Class > (other.value);
        break;

      case 287: // ComponentType
        value.copy< ComponentType > (other.value);
        break;

      case 284: // ComponentTypeLists
      case 285: // RootComponentTypeList
      case 286: // ComponentTypeList
        value.copy< ComponentTypeList > (other.value);
        break;

      case 250: // DefinedType
        value.copy< DefinedType > (other.value);
        break;

      case 251: // DefinedValue
        value.copy< DefinedValue > (other.value);
        break;

      case 273: // EnumeratedType
      case 274: // Enumerations
      case 275: // Enumeration
        value.copy< EnumeratedType > (other.value);
        break;

      case 276: // EnumerationItem
        value.copy< EnumerationValue > (other.value);
        break;

      case 242: // SymbolsFromModule
        value.copy< Import > (other.value);
        break;

      case 236: // ModuleBody
        value.copy< Module > (other.value);
        break;

      case 271: // NamedNumber
        value.copy< NamedNumber > (other.value);
        break;

      case 262: // NamedType
        value.copy< NamedType > (other.value);
        break;

      case 305: // ObjIdComponents
      case 306: // NameForm
      case 307: // NumberForm
      case 308: // NameAndNumberForm
        value.copy< ObjectIdComponentValue > (other.value);
        break;

      case 296: // PrefixedType
        value.copy< PrefixedType > (other.value);
        break;

      case 288: // SequenceOfType
        value.copy< SequenceOfType > (other.value);
        break;

      case 283: // SequenceType
        value.copy< SequenceType > (other.value);
        break;

      case 290: // SetOfType
        value.copy< SetOfType > (other.value);
        break;

      case 289: // SetType
        value.copy< SetType > (other.value);
        break;

      case 298: // Tag
        value.copy< Tag > (other.value);
        break;

      case 297: // TaggedType
        value.copy< TaggedType > (other.value);
        break;

      case 234: // TagDefault
        value.copy< TaggingMode > (other.value);
        break;

      case 260: // Type
        value.copy< Type > (other.value);
        break;

      case 263: // Value
        value.copy< Value > (other.value);
        break;

      case 5: // realnumber
        value.copy< double > (other.value);
        break;

      case 300: // ClassNumber
        value.copy< int > (other.value);
        break;

      case 4: // number
      case 272: // SignedNumber
        value.copy< long long > (other.value);
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 23: // typefieldreference
      case 24: // valuefieldreference
      case 147: // GENERIC_IDENTIFIER_UPPERCASE
      case 148: // GENERIC_IDENTIFIER_LOWERCASE
      case 225: // ModuleIdentifier
      case 243: // GlobalModuleReference
      case 246: // Symbol
      case 247: // Reference
      case 372: // typereference
      case 373: // identifier
      case 374: // valuereference
      case 375: // modulereference
      case 376: // objectclassreference
      case 377: // word
        value.copy< std::string > (other.value);
        break;

      case 248: // AssignmentList
        value.copy< std::vector<Assignment> > (other.value);
        break;

      case 237: // Exports
        value.copy< std::vector<Export> > (other.value);
        break;

      case 239: // Imports
      case 240: // SymbolsImported
      case 241: // SymbolsFromModuleList
        value.copy< std::vector<Import> > (other.value);
        break;

      case 292: // AlternativeTypeLists
      case 293: // RootAlternativeTypeList
      case 294: // AlternativeTypeList
        value.copy< std::vector<NamedType> > (other.value);
        break;

      case 303: // ObjectIdentifierValue
      case 304: // ObjIdComponentsList
        value.copy< std::vector<ObjectIdComponentValue> > (other.value);
        break;

      case 266: // SequenceOfValues
        value.copy< std::vector<Value> > (other.value);
        break;

      case 245: // SymbolList
        value.copy< std::vector<std::string> > (other.value);
        break;

      default:
        break;
    }

  }


  template <typename Base>
  inline
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const semantic_type& v, const location_type& l)
    : Base (t)
    , value ()
    , location (l)
  {
    (void) v;
      switch (this->type_get ())
    {
      case 249: // Assignment
      case 258: // TypeAssignment
      case 259: // ValueAssignment
        value.copy< Assignment > (v);
        break;

      case 261: // BuiltinType
        value.copy< BuiltinType > (v);
        break;

      case 291: // ChoiceType
        value.copy< ChoiceType > (v);
        break;

      case 301: // Class
        value.copy< Class > (v);
        break;

      case 287: // ComponentType
        value.copy< ComponentType > (v);
        break;

      case 284: // ComponentTypeLists
      case 285: // RootComponentTypeList
      case 286: // ComponentTypeList
        value.copy< ComponentTypeList > (v);
        break;

      case 250: // DefinedType
        value.copy< DefinedType > (v);
        break;

      case 251: // DefinedValue
        value.copy< DefinedValue > (v);
        break;

      case 273: // EnumeratedType
      case 274: // Enumerations
      case 275: // Enumeration
        value.copy< EnumeratedType > (v);
        break;

      case 276: // EnumerationItem
        value.copy< EnumerationValue > (v);
        break;

      case 242: // SymbolsFromModule
        value.copy< Import > (v);
        break;

      case 236: // ModuleBody
        value.copy< Module > (v);
        break;

      case 271: // NamedNumber
        value.copy< NamedNumber > (v);
        break;

      case 262: // NamedType
        value.copy< NamedType > (v);
        break;

      case 305: // ObjIdComponents
      case 306: // NameForm
      case 307: // NumberForm
      case 308: // NameAndNumberForm
        value.copy< ObjectIdComponentValue > (v);
        break;

      case 296: // PrefixedType
        value.copy< PrefixedType > (v);
        break;

      case 288: // SequenceOfType
        value.copy< SequenceOfType > (v);
        break;

      case 283: // SequenceType
        value.copy< SequenceType > (v);
        break;

      case 290: // SetOfType
        value.copy< SetOfType > (v);
        break;

      case 289: // SetType
        value.copy< SetType > (v);
        break;

      case 298: // Tag
        value.copy< Tag > (v);
        break;

      case 297: // TaggedType
        value.copy< TaggedType > (v);
        break;

      case 234: // TagDefault
        value.copy< TaggingMode > (v);
        break;

      case 260: // Type
        value.copy< Type > (v);
        break;

      case 263: // Value
        value.copy< Value > (v);
        break;

      case 5: // realnumber
        value.copy< double > (v);
        break;

      case 300: // ClassNumber
        value.copy< int > (v);
        break;

      case 4: // number
      case 272: // SignedNumber
        value.copy< long long > (v);
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 23: // typefieldreference
      case 24: // valuefieldreference
      case 147: // GENERIC_IDENTIFIER_UPPERCASE
      case 148: // GENERIC_IDENTIFIER_LOWERCASE
      case 225: // ModuleIdentifier
      case 243: // GlobalModuleReference
      case 246: // Symbol
      case 247: // Reference
      case 372: // typereference
      case 373: // identifier
      case 374: // valuereference
      case 375: // modulereference
      case 376: // objectclassreference
      case 377: // word
        value.copy< std::string > (v);
        break;

      case 248: // AssignmentList
        value.copy< std::vector<Assignment> > (v);
        break;

      case 237: // Exports
        value.copy< std::vector<Export> > (v);
        break;

      case 239: // Imports
      case 240: // SymbolsImported
      case 241: // SymbolsFromModuleList
        value.copy< std::vector<Import> > (v);
        break;

      case 292: // AlternativeTypeLists
      case 293: // RootAlternativeTypeList
      case 294: // AlternativeTypeList
        value.copy< std::vector<NamedType> > (v);
        break;

      case 303: // ObjectIdentifierValue
      case 304: // ObjIdComponentsList
        value.copy< std::vector<ObjectIdComponentValue> > (v);
        break;

      case 266: // SequenceOfValues
        value.copy< std::vector<Value> > (v);
        break;

      case 245: // SymbolList
        value.copy< std::vector<std::string> > (v);
        break;

      default:
        break;
    }
}


  // Implementation of basic_symbol constructor for each type.

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const location_type& l)
    : Base (t)
    , value ()
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Assignment v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const BuiltinType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ChoiceType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Class v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ComponentType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ComponentTypeList v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const DefinedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const DefinedValue v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const EnumeratedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const EnumerationValue v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Import v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Module v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const NamedNumber v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const NamedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ObjectIdComponentValue v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const PrefixedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const SequenceOfType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const SequenceType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const SetOfType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const SetType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Tag v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const TaggedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const TaggingMode v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Type v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Value v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const double v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const int v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const long long v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::string v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<Assignment> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<Export> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<Import> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<NamedType> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<ObjectIdComponentValue> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<Value> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<std::string> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}


  template <typename Base>
  inline
  asn1_parser::basic_symbol<Base>::~basic_symbol ()
  {
    clear ();
  }

  template <typename Base>
  inline
  void
  asn1_parser::basic_symbol<Base>::clear ()
  {
    // User destructor.
    symbol_number_type yytype = this->type_get ();
    basic_symbol<Base>& yysym = *this;
    (void) yysym;
    switch (yytype)
    {
   default:
      break;
    }

    // Type destructor.
    switch (yytype)
    {
      case 249: // Assignment
      case 258: // TypeAssignment
      case 259: // ValueAssignment
        value.template destroy< Assignment > ();
        break;

      case 261: // BuiltinType
        value.template destroy< BuiltinType > ();
        break;

      case 291: // ChoiceType
        value.template destroy< ChoiceType > ();
        break;

      case 301: // Class
        value.template destroy< Class > ();
        break;

      case 287: // ComponentType
        value.template destroy< ComponentType > ();
        break;

      case 284: // ComponentTypeLists
      case 285: // RootComponentTypeList
      case 286: // ComponentTypeList
        value.template destroy< ComponentTypeList > ();
        break;

      case 250: // DefinedType
        value.template destroy< DefinedType > ();
        break;

      case 251: // DefinedValue
        value.template destroy< DefinedValue > ();
        break;

      case 273: // EnumeratedType
      case 274: // Enumerations
      case 275: // Enumeration
        value.template destroy< EnumeratedType > ();
        break;

      case 276: // EnumerationItem
        value.template destroy< EnumerationValue > ();
        break;

      case 242: // SymbolsFromModule
        value.template destroy< Import > ();
        break;

      case 236: // ModuleBody
        value.template destroy< Module > ();
        break;

      case 271: // NamedNumber
        value.template destroy< NamedNumber > ();
        break;

      case 262: // NamedType
        value.template destroy< NamedType > ();
        break;

      case 305: // ObjIdComponents
      case 306: // NameForm
      case 307: // NumberForm
      case 308: // NameAndNumberForm
        value.template destroy< ObjectIdComponentValue > ();
        break;

      case 296: // PrefixedType
        value.template destroy< PrefixedType > ();
        break;

      case 288: // SequenceOfType
        value.template destroy< SequenceOfType > ();
        break;

      case 283: // SequenceType
        value.template destroy< SequenceType > ();
        break;

      case 290: // SetOfType
        value.template destroy< SetOfType > ();
        break;

      case 289: // SetType
        value.template destroy< SetType > ();
        break;

      case 298: // Tag
        value.template destroy< Tag > ();
        break;

      case 297: // TaggedType
        value.template destroy< TaggedType > ();
        break;

      case 234: // TagDefault
        value.template destroy< TaggingMode > ();
        break;

      case 260: // Type
        value.template destroy< Type > ();
        break;

      case 263: // Value
        value.template destroy< Value > ();
        break;

      case 5: // realnumber
        value.template destroy< double > ();
        break;

      case 300: // ClassNumber
        value.template destroy< int > ();
        break;

      case 4: // number
      case 272: // SignedNumber
        value.template destroy< long long > ();
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 23: // typefieldreference
      case 24: // valuefieldreference
      case 147: // GENERIC_IDENTIFIER_UPPERCASE
      case 148: // GENERIC_IDENTIFIER_LOWERCASE
      case 225: // ModuleIdentifier
      case 243: // GlobalModuleReference
      case 246: // Symbol
      case 247: // Reference
      case 372: // typereference
      case 373: // identifier
      case 374: // valuereference
      case 375: // modulereference
      case 376: // objectclassreference
      case 377: // word
        value.template destroy< std::string > ();
        break;

      case 248: // AssignmentList
        value.template destroy< std::vector<Assignment> > ();
        break;

      case 237: // Exports
        value.template destroy< std::vector<Export> > ();
        break;

      case 239: // Imports
      case 240: // SymbolsImported
      case 241: // SymbolsFromModuleList
        value.template destroy< std::vector<Import> > ();
        break;

      case 292: // AlternativeTypeLists
      case 293: // RootAlternativeTypeList
      case 294: // AlternativeTypeList
        value.template destroy< std::vector<NamedType> > ();
        break;

      case 303: // ObjectIdentifierValue
      case 304: // ObjIdComponentsList
        value.template destroy< std::vector<ObjectIdComponentValue> > ();
        break;

      case 266: // SequenceOfValues
        value.template destroy< std::vector<Value> > ();
        break;

      case 245: // SymbolList
        value.template destroy< std::vector<std::string> > ();
        break;

      default:
        break;
    }

    Base::clear ();
  }

  template <typename Base>
  inline
  bool
  asn1_parser::basic_symbol<Base>::empty () const
  {
    return Base::type_get () == empty_symbol;
  }

  template <typename Base>
  inline
  void
  asn1_parser::basic_symbol<Base>::move (basic_symbol& s)
  {
    super_type::move(s);
      switch (this->type_get ())
    {
      case 249: // Assignment
      case 258: // TypeAssignment
      case 259: // ValueAssignment
        value.move< Assignment > (s.value);
        break;

      case 261: // BuiltinType
        value.move< BuiltinType > (s.value);
        break;

      case 291: // ChoiceType
        value.move< ChoiceType > (s.value);
        break;

      case 301: // Class
        value.move< Class > (s.value);
        break;

      case 287: // ComponentType
        value.move< ComponentType > (s.value);
        break;

      case 284: // ComponentTypeLists
      case 285: // RootComponentTypeList
      case 286: // ComponentTypeList
        value.move< ComponentTypeList > (s.value);
        break;

      case 250: // DefinedType
        value.move< DefinedType > (s.value);
        break;

      case 251: // DefinedValue
        value.move< DefinedValue > (s.value);
        break;

      case 273: // EnumeratedType
      case 274: // Enumerations
      case 275: // Enumeration
        value.move< EnumeratedType > (s.value);
        break;

      case 276: // EnumerationItem
        value.move< EnumerationValue > (s.value);
        break;

      case 242: // SymbolsFromModule
        value.move< Import > (s.value);
        break;

      case 236: // ModuleBody
        value.move< Module > (s.value);
        break;

      case 271: // NamedNumber
        value.move< NamedNumber > (s.value);
        break;

      case 262: // NamedType
        value.move< NamedType > (s.value);
        break;

      case 305: // ObjIdComponents
      case 306: // NameForm
      case 307: // NumberForm
      case 308: // NameAndNumberForm
        value.move< ObjectIdComponentValue > (s.value);
        break;

      case 296: // PrefixedType
        value.move< PrefixedType > (s.value);
        break;

      case 288: // SequenceOfType
        value.move< SequenceOfType > (s.value);
        break;

      case 283: // SequenceType
        value.move< SequenceType > (s.value);
        break;

      case 290: // SetOfType
        value.move< SetOfType > (s.value);
        break;

      case 289: // SetType
        value.move< SetType > (s.value);
        break;

      case 298: // Tag
        value.move< Tag > (s.value);
        break;

      case 297: // TaggedType
        value.move< TaggedType > (s.value);
        break;

      case 234: // TagDefault
        value.move< TaggingMode > (s.value);
        break;

      case 260: // Type
        value.move< Type > (s.value);
        break;

      case 263: // Value
        value.move< Value > (s.value);
        break;

      case 5: // realnumber
        value.move< double > (s.value);
        break;

      case 300: // ClassNumber
        value.move< int > (s.value);
        break;

      case 4: // number
      case 272: // SignedNumber
        value.move< long long > (s.value);
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 23: // typefieldreference
      case 24: // valuefieldreference
      case 147: // GENERIC_IDENTIFIER_UPPERCASE
      case 148: // GENERIC_IDENTIFIER_LOWERCASE
      case 225: // ModuleIdentifier
      case 243: // GlobalModuleReference
      case 246: // Symbol
      case 247: // Reference
      case 372: // typereference
      case 373: // identifier
      case 374: // valuereference
      case 375: // modulereference
      case 376: // objectclassreference
      case 377: // word
        value.move< std::string > (s.value);
        break;

      case 248: // AssignmentList
        value.move< std::vector<Assignment> > (s.value);
        break;

      case 237: // Exports
        value.move< std::vector<Export> > (s.value);
        break;

      case 239: // Imports
      case 240: // SymbolsImported
      case 241: // SymbolsFromModuleList
        value.move< std::vector<Import> > (s.value);
        break;

      case 292: // AlternativeTypeLists
      case 293: // RootAlternativeTypeList
      case 294: // AlternativeTypeList
        value.move< std::vector<NamedType> > (s.value);
        break;

      case 303: // ObjectIdentifierValue
      case 304: // ObjIdComponentsList
        value.move< std::vector<ObjectIdComponentValue> > (s.value);
        break;

      case 266: // SequenceOfValues
        value.move< std::vector<Value> > (s.value);
        break;

      case 245: // SymbolList
        value.move< std::vector<std::string> > (s.value);
        break;

      default:
        break;
    }

    location = s.location;
  }

  // by_type.
  inline
  asn1_parser::by_type::by_type ()
    : type (empty_symbol)
  {}

  inline
  asn1_parser::by_type::by_type (const by_type& other)
    : type (other.type)
  {}

  inline
  asn1_parser::by_type::by_type (token_type t)
    : type (yytranslate_ (t))
  {}

  inline
  void
  asn1_parser::by_type::clear ()
  {
    type = empty_symbol;
  }

  inline
  void
  asn1_parser::by_type::move (by_type& that)
  {
    type = that.type;
    that.clear ();
  }

  inline
  int
  asn1_parser::by_type::type_get () const
  {
    return type;
  }

  inline
  asn1_parser::token_type
  asn1_parser::by_type::token () const
  {
    // YYTOKNUM[NUM] -- (External) token number corresponding to the
    // (internal) symbol number NUM (which must be that of a token).  */
    static
    const unsigned short int
    yytoken_number_[] =
    {
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405
    };
    return static_cast<token_type> (yytoken_number_[type]);
  }
  // Implementation of make_symbol for each symbol type.
  asn1_parser::symbol_type
  asn1_parser::make_END_OF_FILE (const location_type& l)
  {
    return symbol_type (token::END_OF_FILE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_comment (const location_type& l)
  {
    return symbol_type (token::comment, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_number (const long long& v, const location_type& l)
  {
    return symbol_type (token::number, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_realnumber (const double& v, const location_type& l)
  {
    return symbol_type (token::realnumber, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_bstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::bstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmlbstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::xmlbstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_hstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::hstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmlhstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::xmlhstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_cstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::cstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmlcstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::xmlcstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_simplestring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::simplestring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmltstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::xmltstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_psname (const location_type& l)
  {
    return symbol_type (token::psname, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_encodingreference (const location_type& l)
  {
    return symbol_type (token::encodingreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_integerUnicodeLabel (const location_type& l)
  {
    return symbol_type (token::integerUnicodeLabel, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_tstring (const location_type& l)
  {
    return symbol_type (token::tstring, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_objectreference (const location_type& l)
  {
    return symbol_type (token::objectreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_objectsetreference (const location_type& l)
  {
    return symbol_type (token::objectsetreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_typefieldreference (const std::string& v, const location_type& l)
  {
    return symbol_type (token::typefieldreference, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_valuefieldreference (const std::string& v, const location_type& l)
  {
    return symbol_type (token::valuefieldreference, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_valuesetfieldreference (const location_type& l)
  {
    return symbol_type (token::valuesetfieldreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_objectfieldreference (const location_type& l)
  {
    return symbol_type (token::objectfieldreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_objectsetfieldreference (const location_type& l)
  {
    return symbol_type (token::objectsetfieldreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ABSENT (const location_type& l)
  {
    return symbol_type (token::ABSENT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ABSTRACT_SYNTAX (const location_type& l)
  {
    return symbol_type (token::ABSTRACT_SYNTAX, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ALL (const location_type& l)
  {
    return symbol_type (token::ALL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_APPLICATION (const location_type& l)
  {
    return symbol_type (token::APPLICATION, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ASN_NULL (const location_type& l)
  {
    return symbol_type (token::ASN_NULL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_AUTOMATIC (const location_type& l)
  {
    return symbol_type (token::AUTOMATIC, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BEGIN (const location_type& l)
  {
    return symbol_type (token::BEGIN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BIT (const location_type& l)
  {
    return symbol_type (token::BIT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BMPString (const location_type& l)
  {
    return symbol_type (token::BMPString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BOOLEAN (const location_type& l)
  {
    return symbol_type (token::BOOLEAN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BY (const location_type& l)
  {
    return symbol_type (token::BY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CHARACTER (const location_type& l)
  {
    return symbol_type (token::CHARACTER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CHOICE (const location_type& l)
  {
    return symbol_type (token::CHOICE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CLASS (const location_type& l)
  {
    return symbol_type (token::CLASS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_COMPONENT (const location_type& l)
  {
    return symbol_type (token::COMPONENT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_COMPONENTS (const location_type& l)
  {
    return symbol_type (token::COMPONENTS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CONSTRAINED (const location_type& l)
  {
    return symbol_type (token::CONSTRAINED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CONTAINING (const location_type& l)
  {
    return symbol_type (token::CONTAINING, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DATE (const location_type& l)
  {
    return symbol_type (token::DATE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DATE_TIME (const location_type& l)
  {
    return symbol_type (token::DATE_TIME, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DEFAULT (const location_type& l)
  {
    return symbol_type (token::DEFAULT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DEFINITIONS (const location_type& l)
  {
    return symbol_type (token::DEFINITIONS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DURATION (const location_type& l)
  {
    return symbol_type (token::DURATION, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EMBEDDED (const location_type& l)
  {
    return symbol_type (token::EMBEDDED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ENCODED (const location_type& l)
  {
    return symbol_type (token::ENCODED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ENCODING_CONTROL (const location_type& l)
  {
    return symbol_type (token::ENCODING_CONTROL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_END (const location_type& l)
  {
    return symbol_type (token::END, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ENUMERATED (const location_type& l)
  {
    return symbol_type (token::ENUMERATED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXCEPT (const location_type& l)
  {
    return symbol_type (token::EXCEPT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXPLICIT (const location_type& l)
  {
    return symbol_type (token::EXPLICIT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXPORTS (const location_type& l)
  {
    return symbol_type (token::EXPORTS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXTENSIBILITY (const location_type& l)
  {
    return symbol_type (token::EXTENSIBILITY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXTERNAL (const location_type& l)
  {
    return symbol_type (token::EXTERNAL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_FALSE (const location_type& l)
  {
    return symbol_type (token::FALSE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_FROM (const location_type& l)
  {
    return symbol_type (token::FROM, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GeneralizedTime (const location_type& l)
  {
    return symbol_type (token::GeneralizedTime, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GeneralString (const location_type& l)
  {
    return symbol_type (token::GeneralString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GraphicString (const location_type& l)
  {
    return symbol_type (token::GraphicString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IA5String (const location_type& l)
  {
    return symbol_type (token::IA5String, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IDENTIFIER (const location_type& l)
  {
    return symbol_type (token::IDENTIFIER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IMPLICIT (const location_type& l)
  {
    return symbol_type (token::IMPLICIT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IMPLIED (const location_type& l)
  {
    return symbol_type (token::IMPLIED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IMPORTS (const location_type& l)
  {
    return symbol_type (token::IMPORTS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INCLUDES (const location_type& l)
  {
    return symbol_type (token::INCLUDES, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INSTANCE (const location_type& l)
  {
    return symbol_type (token::INSTANCE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INSTRUCTIONS (const location_type& l)
  {
    return symbol_type (token::INSTRUCTIONS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INTEGER (const location_type& l)
  {
    return symbol_type (token::INTEGER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INTERSECTION (const location_type& l)
  {
    return symbol_type (token::INTERSECTION, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ISO646String (const location_type& l)
  {
    return symbol_type (token::ISO646String, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_MAX (const location_type& l)
  {
    return symbol_type (token::MAX, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_MIN (const location_type& l)
  {
    return symbol_type (token::MIN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_MINUS_INFINITY (const location_type& l)
  {
    return symbol_type (token::MINUS_INFINITY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_NOT_A_NUMBER (const location_type& l)
  {
    return symbol_type (token::NOT_A_NUMBER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_NumericString (const location_type& l)
  {
    return symbol_type (token::NumericString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OBJECT (const location_type& l)
  {
    return symbol_type (token::OBJECT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ObjectDescriptor (const location_type& l)
  {
    return symbol_type (token::ObjectDescriptor, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OCTET (const location_type& l)
  {
    return symbol_type (token::OCTET, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OF (const location_type& l)
  {
    return symbol_type (token::OF, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OID_IRI (const location_type& l)
  {
    return symbol_type (token::OID_IRI, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OPTIONAL (const location_type& l)
  {
    return symbol_type (token::OPTIONAL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PATTERN (const location_type& l)
  {
    return symbol_type (token::PATTERN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PDV (const location_type& l)
  {
    return symbol_type (token::PDV, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PLUS_INFINITY (const location_type& l)
  {
    return symbol_type (token::PLUS_INFINITY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PRESENT (const location_type& l)
  {
    return symbol_type (token::PRESENT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PrintableString (const location_type& l)
  {
    return symbol_type (token::PrintableString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PRIVATE (const location_type& l)
  {
    return symbol_type (token::PRIVATE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_REAL (const location_type& l)
  {
    return symbol_type (token::REAL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_RELATIVE_OID (const location_type& l)
  {
    return symbol_type (token::RELATIVE_OID, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_RELATIVE_OID_IRI (const location_type& l)
  {
    return symbol_type (token::RELATIVE_OID_IRI, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SEQUENCE (const location_type& l)
  {
    return symbol_type (token::SEQUENCE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SET (const location_type& l)
  {
    return symbol_type (token::SET, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SETTINGS (const location_type& l)
  {
    return symbol_type (token::SETTINGS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SIZE (const location_type& l)
  {
    return symbol_type (token::SIZE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_STRING (const location_type& l)
  {
    return symbol_type (token::STRING, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SYNTAX (const location_type& l)
  {
    return symbol_type (token::SYNTAX, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_T61String (const location_type& l)
  {
    return symbol_type (token::T61String, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TAGS (const location_type& l)
  {
    return symbol_type (token::TAGS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TeletexString (const location_type& l)
  {
    return symbol_type (token::TeletexString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TIME (const location_type& l)
  {
    return symbol_type (token::TIME, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TIME_OF_DAY (const location_type& l)
  {
    return symbol_type (token::TIME_OF_DAY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TRUE (const location_type& l)
  {
    return symbol_type (token::TRUE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TYPE_IDENTIFIER (const location_type& l)
  {
    return symbol_type (token::TYPE_IDENTIFIER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UNION (const location_type& l)
  {
    return symbol_type (token::UNION, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UNIQUE (const location_type& l)
  {
    return symbol_type (token::UNIQUE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UNIVERSAL (const location_type& l)
  {
    return symbol_type (token::UNIVERSAL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UniversalString (const location_type& l)
  {
    return symbol_type (token::UniversalString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UTCTime (const location_type& l)
  {
    return symbol_type (token::UTCTime, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UTF8String (const location_type& l)
  {
    return symbol_type (token::UTF8String, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_VideotexString (const location_type& l)
  {
    return symbol_type (token::VideotexString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_VisibleString (const location_type& l)
  {
    return symbol_type (token::VisibleString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_WITH (const location_type& l)
  {
    return symbol_type (token::WITH, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DEFINED_AS (const location_type& l)
  {
    return symbol_type (token::DEFINED_AS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ELIPSIS (const location_type& l)
  {
    return symbol_type (token::ELIPSIS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_RANGE (const location_type& l)
  {
    return symbol_type (token::RANGE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OPEN_BRACE (const location_type& l)
  {
    return symbol_type (token::OPEN_BRACE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CLOSE_BRACE (const location_type& l)
  {
    return symbol_type (token::CLOSE_BRACE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OPEN_PARENTHESIS (const location_type& l)
  {
    return symbol_type (token::OPEN_PARENTHESIS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CLOSE_PARENTHESIS (const location_type& l)
  {
    return symbol_type (token::CLOSE_PARENTHESIS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OPEN_SQUARE_BRACKET (const location_type& l)
  {
    return symbol_type (token::OPEN_SQUARE_BRACKET, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CLOSE_SQUARE_BRACKET (const location_type& l)
  {
    return symbol_type (token::CLOSE_SQUARE_BRACKET, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_LESS_THAN (const location_type& l)
  {
    return symbol_type (token::LESS_THAN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GREATER_THAN (const location_type& l)
  {
    return symbol_type (token::GREATER_THAN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXCLAMATION_MARK (const location_type& l)
  {
    return symbol_type (token::EXCLAMATION_MARK, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_QUOTATION_MARK (const location_type& l)
  {
    return symbol_type (token::QUOTATION_MARK, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_AMPERSAND (const location_type& l)
  {
    return symbol_type (token::AMPERSAND, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_APOSTROPHE (const location_type& l)
  {
    return symbol_type (token::APOSTROPHE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ASTERISK (const location_type& l)
  {
    return symbol_type (token::ASTERISK, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_COMMA (const location_type& l)
  {
    return symbol_type (token::COMMA, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_FULL_STOP (const location_type& l)
  {
    return symbol_type (token::FULL_STOP, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_HYPHEN_MINUS (const location_type& l)
  {
    return symbol_type (token::HYPHEN_MINUS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SOLIDUS (const location_type& l)
  {
    return symbol_type (token::SOLIDUS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_COLON (const location_type& l)
  {
    return symbol_type (token::COLON, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SEMICOLON (const location_type& l)
  {
    return symbol_type (token::SEMICOLON, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EQUALS_SIGN (const location_type& l)
  {
    return symbol_type (token::EQUALS_SIGN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_AT (const location_type& l)
  {
    return symbol_type (token::AT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_VERTICAL_LINE (const location_type& l)
  {
    return symbol_type (token::VERTICAL_LINE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ACCENT (const location_type& l)
  {
    return symbol_type (token::ACCENT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PLUS (const location_type& l)
  {
    return symbol_type (token::PLUS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_STAR (const location_type& l)
  {
    return symbol_type (token::STAR, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GENERIC_IDENTIFIER_UPPERCASE (const std::string& v, const location_type& l)
  {
    return symbol_type (token::GENERIC_IDENTIFIER_UPPERCASE, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GENERIC_IDENTIFIER_LOWERCASE (const std::string& v, const location_type& l)
  {
    return symbol_type (token::GENERIC_IDENTIFIER_LOWERCASE, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GENERIC_INTEGER (const location_type& l)
  {
    return symbol_type (token::GENERIC_INTEGER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmlasn1typename (const location_type& l)
  {
    return symbol_type (token::xmlasn1typename, l);
  }



} // yy
#line 4044 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:408





// User implementation prologue.

#line 4052 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:412
// Unqualified %code blocks.
#line 15 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:413

    struct Context
    {
        const char* cursor;
        yy::location location;

        Asn1Tree asn1_tree;
    };
    void yy::asn1_parser::error(const location_type& l, const std::string& m)
    {
        std::cerr << (l.begin.filename ? l.begin.filename->c_str() : "(undefined)");
        std::cerr << ':' << l.begin.line << ':' << l.begin.column << '-' << l.end.column << ": " << m << '\n';
    }

    namespace yy { asn1_parser::symbol_type yylex(Context& c); }

#line 4071 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:413


#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> // FIXME: INFRINGES ON USER NAME SPACE.
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K].location)
/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

# ifndef YYLLOC_DEFAULT
#  define YYLLOC_DEFAULT(Current, Rhs, N)                               \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).begin  = YYRHSLOC (Rhs, 1).begin;                   \
          (Current).end    = YYRHSLOC (Rhs, N).end;                     \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).begin = (Current).end = YYRHSLOC (Rhs, 0).end;      \
        }                                                               \
    while (/*CONSTCOND*/ false)
# endif


// Suppress unused-variable warnings by "using" E.
#define YYUSE(E) ((void) (E))

// Enable debugging if requested.
#if YYDEBUG

// A pseudo ostream that takes yydebug_ into account.
# define YYCDEBUG if (yydebug_) (*yycdebug_)

# define YY_SYMBOL_PRINT(Title, Symbol)         \
  do {                                          \
    if (yydebug_)                               \
    {                                           \
      *yycdebug_ << Title << ' ';               \
      yy_print_ (*yycdebug_, Symbol);           \
      *yycdebug_ << std::endl;                  \
    }                                           \
  } while (false)

# define YY_REDUCE_PRINT(Rule)          \
  do {                                  \
    if (yydebug_)                       \
      yy_reduce_print_ (Rule);          \
  } while (false)

# define YY_STACK_PRINT()               \
  do {                                  \
    if (yydebug_)                       \
      yystack_print_ ();                \
  } while (false)

#else // !YYDEBUG

# define YYCDEBUG if (false) std::cerr
# define YY_SYMBOL_PRINT(Title, Symbol)  YYUSE(Symbol)
# define YY_REDUCE_PRINT(Rule)           static_cast<void>(0)
# define YY_STACK_PRINT()                static_cast<void>(0)

#endif // !YYDEBUG

#define yyerrok         (yyerrstatus_ = 0)
#define yyclearin       (yyla.clear ())

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYRECOVERING()  (!!yyerrstatus_)


namespace yy {
#line 4157 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:479

  /* Return YYSTR after stripping away unnecessary quotes and
     backslashes, so that it's suitable for yyerror.  The heuristic is
     that double-quoting is unnecessary unless the string contains an
     apostrophe, a comma, or backslash (other than backslash-backslash).
     YYSTR is taken from yytname.  */
  std::string
  asn1_parser::yytnamerr_ (const char *yystr)
  {
    if (*yystr == '"')
      {
        std::string yyr = "";
        char const *yyp = yystr;

        for (;;)
          switch (*++yyp)
            {
            case '\'':
            case ',':
              goto do_not_strip_quotes;

            case '\\':
              if (*++yyp != '\\')
                goto do_not_strip_quotes;
              // Fall through.
            default:
              yyr += *yyp;
              break;

            case '"':
              return yyr;
            }
      do_not_strip_quotes: ;
      }

    return yystr;
  }


  /// Build a parser object.
  asn1_parser::asn1_parser (Context& context_yyarg)
    :
#if YYDEBUG
      yydebug_ (false),
      yycdebug_ (&std::cerr),
#endif
      context (context_yyarg)
  {}

  asn1_parser::~asn1_parser ()
  {}


  /*---------------.
  | Symbol types.  |
  `---------------*/



  // by_state.
  inline
  asn1_parser::by_state::by_state ()
    : state (empty_state)
  {}

  inline
  asn1_parser::by_state::by_state (const by_state& other)
    : state (other.state)
  {}

  inline
  void
  asn1_parser::by_state::clear ()
  {
    state = empty_state;
  }

  inline
  void
  asn1_parser::by_state::move (by_state& that)
  {
    state = that.state;
    that.clear ();
  }

  inline
  asn1_parser::by_state::by_state (state_type s)
    : state (s)
  {}

  inline
  asn1_parser::symbol_number_type
  asn1_parser::by_state::type_get () const
  {
    if (state == empty_state)
      return empty_symbol;
    else
      return yystos_[state];
  }

  inline
  asn1_parser::stack_symbol_type::stack_symbol_type ()
  {}


  inline
  asn1_parser::stack_symbol_type::stack_symbol_type (state_type s, symbol_type& that)
    : super_type (s, that.location)
  {
      switch (that.type_get ())
    {
      case 249: // Assignment
      case 258: // TypeAssignment
      case 259: // ValueAssignment
        value.move< Assignment > (that.value);
        break;

      case 261: // BuiltinType
        value.move< BuiltinType > (that.value);
        break;

      case 291: // ChoiceType
        value.move< ChoiceType > (that.value);
        break;

      case 301: // Class
        value.move< Class > (that.value);
        break;

      case 287: // ComponentType
        value.move< ComponentType > (that.value);
        break;

      case 284: // ComponentTypeLists
      case 285: // RootComponentTypeList
      case 286: // ComponentTypeList
        value.move< ComponentTypeList > (that.value);
        break;

      case 250: // DefinedType
        value.move< DefinedType > (that.value);
        break;

      case 251: // DefinedValue
        value.move< DefinedValue > (that.value);
        break;

      case 273: // EnumeratedType
      case 274: // Enumerations
      case 275: // Enumeration
        value.move< EnumeratedType > (that.value);
        break;

      case 276: // EnumerationItem
        value.move< EnumerationValue > (that.value);
        break;

      case 242: // SymbolsFromModule
        value.move< Import > (that.value);
        break;

      case 236: // ModuleBody
        value.move< Module > (that.value);
        break;

      case 271: // NamedNumber
        value.move< NamedNumber > (that.value);
        break;

      case 262: // NamedType
        value.move< NamedType > (that.value);
        break;

      case 305: // ObjIdComponents
      case 306: // NameForm
      case 307: // NumberForm
      case 308: // NameAndNumberForm
        value.move< ObjectIdComponentValue > (that.value);
        break;

      case 296: // PrefixedType
        value.move< PrefixedType > (that.value);
        break;

      case 288: // SequenceOfType
        value.move< SequenceOfType > (that.value);
        break;

      case 283: // SequenceType
        value.move< SequenceType > (that.value);
        break;

      case 290: // SetOfType
        value.move< SetOfType > (that.value);
        break;

      case 289: // SetType
        value.move< SetType > (that.value);
        break;

      case 298: // Tag
        value.move< Tag > (that.value);
        break;

      case 297: // TaggedType
        value.move< TaggedType > (that.value);
        break;

      case 234: // TagDefault
        value.move< TaggingMode > (that.value);
        break;

      case 260: // Type
        value.move< Type > (that.value);
        break;

      case 263: // Value
        value.move< Value > (that.value);
        break;

      case 5: // realnumber
        value.move< double > (that.value);
        break;

      case 300: // ClassNumber
        value.move< int > (that.value);
        break;

      case 4: // number
      case 272: // SignedNumber
        value.move< long long > (that.value);
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 23: // typefieldreference
      case 24: // valuefieldreference
      case 147: // GENERIC_IDENTIFIER_UPPERCASE
      case 148: // GENERIC_IDENTIFIER_LOWERCASE
      case 225: // ModuleIdentifier
      case 243: // GlobalModuleReference
      case 246: // Symbol
      case 247: // Reference
      case 372: // typereference
      case 373: // identifier
      case 374: // valuereference
      case 375: // modulereference
      case 376: // objectclassreference
      case 377: // word
        value.move< std::string > (that.value);
        break;

      case 248: // AssignmentList
        value.move< std::vector<Assignment> > (that.value);
        break;

      case 237: // Exports
        value.move< std::vector<Export> > (that.value);
        break;

      case 239: // Imports
      case 240: // SymbolsImported
      case 241: // SymbolsFromModuleList
        value.move< std::vector<Import> > (that.value);
        break;

      case 292: // AlternativeTypeLists
      case 293: // RootAlternativeTypeList
      case 294: // AlternativeTypeList
        value.move< std::vector<NamedType> > (that.value);
        break;

      case 303: // ObjectIdentifierValue
      case 304: // ObjIdComponentsList
        value.move< std::vector<ObjectIdComponentValue> > (that.value);
        break;

      case 266: // SequenceOfValues
        value.move< std::vector<Value> > (that.value);
        break;

      case 245: // SymbolList
        value.move< std::vector<std::string> > (that.value);
        break;

      default:
        break;
    }

    // that is emptied.
    that.type = empty_symbol;
  }

  inline
  asn1_parser::stack_symbol_type&
  asn1_parser::stack_symbol_type::operator= (const stack_symbol_type& that)
  {
    state = that.state;
      switch (that.type_get ())
    {
      case 249: // Assignment
      case 258: // TypeAssignment
      case 259: // ValueAssignment
        value.copy< Assignment > (that.value);
        break;

      case 261: // BuiltinType
        value.copy< BuiltinType > (that.value);
        break;

      case 291: // ChoiceType
        value.copy< ChoiceType > (that.value);
        break;

      case 301: // Class
        value.copy< Class > (that.value);
        break;

      case 287: // ComponentType
        value.copy< ComponentType > (that.value);
        break;

      case 284: // ComponentTypeLists
      case 285: // RootComponentTypeList
      case 286: // ComponentTypeList
        value.copy< ComponentTypeList > (that.value);
        break;

      case 250: // DefinedType
        value.copy< DefinedType > (that.value);
        break;

      case 251: // DefinedValue
        value.copy< DefinedValue > (that.value);
        break;

      case 273: // EnumeratedType
      case 274: // Enumerations
      case 275: // Enumeration
        value.copy< EnumeratedType > (that.value);
        break;

      case 276: // EnumerationItem
        value.copy< EnumerationValue > (that.value);
        break;

      case 242: // SymbolsFromModule
        value.copy< Import > (that.value);
        break;

      case 236: // ModuleBody
        value.copy< Module > (that.value);
        break;

      case 271: // NamedNumber
        value.copy< NamedNumber > (that.value);
        break;

      case 262: // NamedType
        value.copy< NamedType > (that.value);
        break;

      case 305: // ObjIdComponents
      case 306: // NameForm
      case 307: // NumberForm
      case 308: // NameAndNumberForm
        value.copy< ObjectIdComponentValue > (that.value);
        break;

      case 296: // PrefixedType
        value.copy< PrefixedType > (that.value);
        break;

      case 288: // SequenceOfType
        value.copy< SequenceOfType > (that.value);
        break;

      case 283: // SequenceType
        value.copy< SequenceType > (that.value);
        break;

      case 290: // SetOfType
        value.copy< SetOfType > (that.value);
        break;

      case 289: // SetType
        value.copy< SetType > (that.value);
        break;

      case 298: // Tag
        value.copy< Tag > (that.value);
        break;

      case 297: // TaggedType
        value.copy< TaggedType > (that.value);
        break;

      case 234: // TagDefault
        value.copy< TaggingMode > (that.value);
        break;

      case 260: // Type
        value.copy< Type > (that.value);
        break;

      case 263: // Value
        value.copy< Value > (that.value);
        break;

      case 5: // realnumber
        value.copy< double > (that.value);
        break;

      case 300: // ClassNumber
        value.copy< int > (that.value);
        break;

      case 4: // number
      case 272: // SignedNumber
        value.copy< long long > (that.value);
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 23: // typefieldreference
      case 24: // valuefieldreference
      case 147: // GENERIC_IDENTIFIER_UPPERCASE
      case 148: // GENERIC_IDENTIFIER_LOWERCASE
      case 225: // ModuleIdentifier
      case 243: // GlobalModuleReference
      case 246: // Symbol
      case 247: // Reference
      case 372: // typereference
      case 373: // identifier
      case 374: // valuereference
      case 375: // modulereference
      case 376: // objectclassreference
      case 377: // word
        value.copy< std::string > (that.value);
        break;

      case 248: // AssignmentList
        value.copy< std::vector<Assignment> > (that.value);
        break;

      case 237: // Exports
        value.copy< std::vector<Export> > (that.value);
        break;

      case 239: // Imports
      case 240: // SymbolsImported
      case 241: // SymbolsFromModuleList
        value.copy< std::vector<Import> > (that.value);
        break;

      case 292: // AlternativeTypeLists
      case 293: // RootAlternativeTypeList
      case 294: // AlternativeTypeList
        value.copy< std::vector<NamedType> > (that.value);
        break;

      case 303: // ObjectIdentifierValue
      case 304: // ObjIdComponentsList
        value.copy< std::vector<ObjectIdComponentValue> > (that.value);
        break;

      case 266: // SequenceOfValues
        value.copy< std::vector<Value> > (that.value);
        break;

      case 245: // SymbolList
        value.copy< std::vector<std::string> > (that.value);
        break;

      default:
        break;
    }

    location = that.location;
    return *this;
  }


  template <typename Base>
  inline
  void
  asn1_parser::yy_destroy_ (const char* yymsg, basic_symbol<Base>& yysym) const
  {
    if (yymsg)
      YY_SYMBOL_PRINT (yymsg, yysym);
  }

#if YYDEBUG
  template <typename Base>
  void
  asn1_parser::yy_print_ (std::ostream& yyo,
                                     const basic_symbol<Base>& yysym) const
  {
    std::ostream& yyoutput = yyo;
    YYUSE (yyoutput);
    symbol_number_type yytype = yysym.type_get ();
    // Avoid a (spurious) G++ 4.8 warning about "array subscript is
    // below array bounds".
    if (yysym.empty ())
      std::abort ();
    yyo << (yytype < yyntokens_ ? "token" : "nterm")
        << ' ' << yytname_[yytype] << " ("
        << yysym.location << ": ";
    YYUSE (yytype);
    yyo << ')';
  }
#endif

  inline
  void
  asn1_parser::yypush_ (const char* m, state_type s, symbol_type& sym)
  {
    stack_symbol_type t (s, sym);
    yypush_ (m, t);
  }

  inline
  void
  asn1_parser::yypush_ (const char* m, stack_symbol_type& s)
  {
    if (m)
      YY_SYMBOL_PRINT (m, s);
    yystack_.push (s);
  }

  inline
  void
  asn1_parser::yypop_ (unsigned int n)
  {
    yystack_.pop (n);
  }

#if YYDEBUG
  std::ostream&
  asn1_parser::debug_stream () const
  {
    return *yycdebug_;
  }

  void
  asn1_parser::set_debug_stream (std::ostream& o)
  {
    yycdebug_ = &o;
  }


  asn1_parser::debug_level_type
  asn1_parser::debug_level () const
  {
    return yydebug_;
  }

  void
  asn1_parser::set_debug_level (debug_level_type l)
  {
    yydebug_ = l;
  }
#endif // YYDEBUG

  inline asn1_parser::state_type
  asn1_parser::yy_lr_goto_state_ (state_type yystate, int yysym)
  {
    int yyr = yypgoto_[yysym - yyntokens_] + yystate;
    if (0 <= yyr && yyr <= yylast_ && yycheck_[yyr] == yystate)
      return yytable_[yyr];
    else
      return yydefgoto_[yysym - yyntokens_];
  }

  inline bool
  asn1_parser::yy_pact_value_is_default_ (int yyvalue)
  {
    return yyvalue == yypact_ninf_;
  }

  inline bool
  asn1_parser::yy_table_value_is_error_ (int yyvalue)
  {
    return yyvalue == yytable_ninf_;
  }

  int
  asn1_parser::parse ()
  {
    // State.
    int yyn;
    /// Length of the RHS of the rule being reduced.
    int yylen = 0;

    // Error handling.
    int yynerrs_ = 0;
    int yyerrstatus_ = 0;

    /// The lookahead symbol.
    symbol_type yyla;

    /// The locations where the error started and ended.
    stack_symbol_type yyerror_range[3];

    /// The return value of parse ().
    int yyresult;

    // FIXME: This shoud be completely indented.  It is not yet to
    // avoid gratuitous conflicts when merging into the master branch.
    try
      {
    YYCDEBUG << "Starting parse" << std::endl;


    /* Initialize the stack.  The initial state will be set in
       yynewstate, since the latter expects the semantical and the
       location values to have been already stored, initialize these
       stacks with a primary value.  */
    yystack_.clear ();
    yypush_ (YY_NULLPTR, 0, yyla);

    // A new symbol was pushed on the stack.
  yynewstate:
    YYCDEBUG << "Entering state " << yystack_[0].state << std::endl;

    // Accept?
    if (yystack_[0].state == yyfinal_)
      goto yyacceptlab;

    goto yybackup;

    // Backup.
  yybackup:

    // Try to take a decision without lookahead.
    yyn = yypact_[yystack_[0].state];
    if (yy_pact_value_is_default_ (yyn))
      goto yydefault;

    // Read a lookahead token.
    if (yyla.empty ())
      {
        YYCDEBUG << "Reading a token: ";
        try
          {
            symbol_type yylookahead (yylex (context));
            yyla.move (yylookahead);
          }
        catch (const syntax_error& yyexc)
          {
            error (yyexc);
            goto yyerrlab1;
          }
      }
    YY_SYMBOL_PRINT ("Next token is", yyla);

    /* If the proper action on seeing token YYLA.TYPE is to reduce or
       to detect an error, take that action.  */
    yyn += yyla.type_get ();
    if (yyn < 0 || yylast_ < yyn || yycheck_[yyn] != yyla.type_get ())
      goto yydefault;

    // Reduce or error.
    yyn = yytable_[yyn];
    if (yyn <= 0)
      {
        if (yy_table_value_is_error_ (yyn))
          goto yyerrlab;
        yyn = -yyn;
        goto yyreduce;
      }

    // Count tokens shifted since error; after three, turn off error status.
    if (yyerrstatus_)
      --yyerrstatus_;

    // Shift the lookahead token.
    yypush_ ("Shifting", yyn, yyla);
    goto yynewstate;

  /*-----------------------------------------------------------.
  | yydefault -- do the default action for the current state.  |
  `-----------------------------------------------------------*/
  yydefault:
    yyn = yydefact_[yystack_[0].state];
    if (yyn == 0)
      goto yyerrlab;
    goto yyreduce;

  /*-----------------------------.
  | yyreduce -- Do a reduction.  |
  `-----------------------------*/
  yyreduce:
    yylen = yyr2_[yyn];
    {
      stack_symbol_type yylhs;
      yylhs.state = yy_lr_goto_state_(yystack_[yylen].state, yyr1_[yyn]);
      /* Variants are always initialized to an empty instance of the
         correct type. The default '$$ = $1' action is NOT applied
         when using variants.  */
        switch (yyr1_[yyn])
    {
      case 249: // Assignment
      case 258: // TypeAssignment
      case 259: // ValueAssignment
        yylhs.value.build< Assignment > ();
        break;

      case 261: // BuiltinType
        yylhs.value.build< BuiltinType > ();
        break;

      case 291: // ChoiceType
        yylhs.value.build< ChoiceType > ();
        break;

      case 301: // Class
        yylhs.value.build< Class > ();
        break;

      case 287: // ComponentType
        yylhs.value.build< ComponentType > ();
        break;

      case 284: // ComponentTypeLists
      case 285: // RootComponentTypeList
      case 286: // ComponentTypeList
        yylhs.value.build< ComponentTypeList > ();
        break;

      case 250: // DefinedType
        yylhs.value.build< DefinedType > ();
        break;

      case 251: // DefinedValue
        yylhs.value.build< DefinedValue > ();
        break;

      case 273: // EnumeratedType
      case 274: // Enumerations
      case 275: // Enumeration
        yylhs.value.build< EnumeratedType > ();
        break;

      case 276: // EnumerationItem
        yylhs.value.build< EnumerationValue > ();
        break;

      case 242: // SymbolsFromModule
        yylhs.value.build< Import > ();
        break;

      case 236: // ModuleBody
        yylhs.value.build< Module > ();
        break;

      case 271: // NamedNumber
        yylhs.value.build< NamedNumber > ();
        break;

      case 262: // NamedType
        yylhs.value.build< NamedType > ();
        break;

      case 305: // ObjIdComponents
      case 306: // NameForm
      case 307: // NumberForm
      case 308: // NameAndNumberForm
        yylhs.value.build< ObjectIdComponentValue > ();
        break;

      case 296: // PrefixedType
        yylhs.value.build< PrefixedType > ();
        break;

      case 288: // SequenceOfType
        yylhs.value.build< SequenceOfType > ();
        break;

      case 283: // SequenceType
        yylhs.value.build< SequenceType > ();
        break;

      case 290: // SetOfType
        yylhs.value.build< SetOfType > ();
        break;

      case 289: // SetType
        yylhs.value.build< SetType > ();
        break;

      case 298: // Tag
        yylhs.value.build< Tag > ();
        break;

      case 297: // TaggedType
        yylhs.value.build< TaggedType > ();
        break;

      case 234: // TagDefault
        yylhs.value.build< TaggingMode > ();
        break;

      case 260: // Type
        yylhs.value.build< Type > ();
        break;

      case 263: // Value
        yylhs.value.build< Value > ();
        break;

      case 5: // realnumber
        yylhs.value.build< double > ();
        break;

      case 300: // ClassNumber
        yylhs.value.build< int > ();
        break;

      case 4: // number
      case 272: // SignedNumber
        yylhs.value.build< long long > ();
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 23: // typefieldreference
      case 24: // valuefieldreference
      case 147: // GENERIC_IDENTIFIER_UPPERCASE
      case 148: // GENERIC_IDENTIFIER_LOWERCASE
      case 225: // ModuleIdentifier
      case 243: // GlobalModuleReference
      case 246: // Symbol
      case 247: // Reference
      case 372: // typereference
      case 373: // identifier
      case 374: // valuereference
      case 375: // modulereference
      case 376: // objectclassreference
      case 377: // word
        yylhs.value.build< std::string > ();
        break;

      case 248: // AssignmentList
        yylhs.value.build< std::vector<Assignment> > ();
        break;

      case 237: // Exports
        yylhs.value.build< std::vector<Export> > ();
        break;

      case 239: // Imports
      case 240: // SymbolsImported
      case 241: // SymbolsFromModuleList
        yylhs.value.build< std::vector<Import> > ();
        break;

      case 292: // AlternativeTypeLists
      case 293: // RootAlternativeTypeList
      case 294: // AlternativeTypeList
        yylhs.value.build< std::vector<NamedType> > ();
        break;

      case 303: // ObjectIdentifierValue
      case 304: // ObjIdComponentsList
        yylhs.value.build< std::vector<ObjectIdComponentValue> > ();
        break;

      case 266: // SequenceOfValues
        yylhs.value.build< std::vector<Value> > ();
        break;

      case 245: // SymbolList
        yylhs.value.build< std::vector<std::string> > ();
        break;

      default:
        break;
    }


      // Compute the default @$.
      {
        slice<stack_symbol_type, stack_type> slice (yystack_, yylen);
        YYLLOC_DEFAULT (yylhs.location, slice, yylen);
      }

      // Perform the reduction.
      YY_REDUCE_PRINT (yyn);
      try
        {
          switch (yyn)
            {
  case 4:
#line 282 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yystack_[2].value.as< Module > ().module_reference = yystack_[9].value.as< std::string > ();
      yystack_[2].value.as< Module > ().tagging_default = yystack_[6].value.as< TaggingMode > ();
      context.asn1_tree.modules.push_back(yystack_[2].value.as< Module > ()); }
#line 5074 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 127:
#line 597 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cout << "Simple constraint\n"; }
#line 5080 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 128:
#line 599 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cout << "Relation constraint\n"; }
#line 5086 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 141:
#line 641 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    {
    yylhs.value.as< std::string > () = yystack_[1].value.as< std::string > ();
}
#line 5094 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 156:
#line 680 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggingMode > () = TaggingMode::explicit_; }
#line 5100 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 157:
#line 682 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggingMode > () = TaggingMode::implicit; }
#line 5106 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 158:
#line 684 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggingMode > () = TaggingMode::automatic; }
#line 5112 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 159:
#line 686 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggingMode > () = TaggingMode::explicit_; }
#line 5118 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 162:
#line 694 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Module > () = Module{ {}, TaggingMode(), yystack_[2].value.as< std::vector<Export> > (), yystack_[1].value.as< std::vector<Import> > (), yystack_[0].value.as< std::vector<Assignment> > ()}; }
#line 5124 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 163:
#line 696 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { }
#line 5130 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 169:
#line 709 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Import> > () = yystack_[1].value.as< std::vector<Import> > (); }
#line 5136 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 171:
#line 714 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Import> > () = yystack_[0].value.as< std::vector<Import> > (); }
#line 5142 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 173:
#line 719 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Import> > ().push_back(yystack_[0].value.as< Import > ()); }
#line 5148 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 174:
#line 721 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Import> > () = yystack_[1].value.as< std::vector<Import> > (); yylhs.value.as< std::vector<Import> > ().push_back(yystack_[0].value.as< Import > ()); }
#line 5154 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 175:
#line 725 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Import > () = Import{ yystack_[0].value.as< std::string > (), yystack_[2].value.as< std::vector<std::string> > () }; }
#line 5160 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 176:
#line 729 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[1].value.as< std::string > (); }
#line 5166 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 180:
#line 738 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<std::string> > ().push_back(yystack_[0].value.as< std::string > ()); }
#line 5172 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 181:
#line 740 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<std::string> > () = yystack_[2].value.as< std::vector<std::string> > (); yylhs.value.as< std::vector<std::string> > ().push_back(yystack_[0].value.as< std::string > ()); }
#line 5178 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 182:
#line 744 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 5184 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 183:
#line 748 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 5190 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 184:
#line 750 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[2].value.as< std::string > (); }
#line 5196 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 185:
#line 752 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 5202 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 186:
#line 761 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Assignment> > ().push_back(yystack_[0].value.as< Assignment > ());}
#line 5208 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 187:
#line 763 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Assignment> > () = yystack_[1].value.as< std::vector<Assignment> > (); yylhs.value.as< std::vector<Assignment> > ().push_back(yystack_[0].value.as< Assignment > ()); }
#line 5214 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 188:
#line 767 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 5220 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 189:
#line 769 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 5226 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 194:
#line 779 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< DefinedType > () = DefinedType{yystack_[0].value.as< std::string > ()}; }
#line 5232 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 196:
#line 786 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< DefinedValue > () = DefinedValue{yystack_[0].value.as< std::string > ()}; }
#line 5238 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 206:
#line 845 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[2].value.as< std::string > (), yystack_[0].value.as< Type > (), absl::nullopt, {} }; }
#line 5244 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 207:
#line 852 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[3].value.as< std::string > (), yystack_[2].value.as< Type > (), yystack_[0].value.as< Value > (), {} }; }
#line 5250 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 208:
#line 856 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = yystack_[0].value.as< BuiltinType > (); }
#line 5256 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 209:
#line 858 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = Type(); }
#line 5262 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 210:
#line 860 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = yystack_[0].value.as< DefinedType > (); }
#line 5268 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 211:
#line 862 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cout << "Warning: Not handled - SelectionType\n"; }
#line 5274 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 212:
#line 864 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { throw std::runtime_error("Not handled - TypeFromObject"); }
#line 5280 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 213:
#line 868 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = BitStringType(); }
#line 5286 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 214:
#line 869 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = BooleanType(); }
#line 5292 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 215:
#line 870 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = CharacterStringType(); }
#line 5298 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 216:
#line 871 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< ChoiceType > (); }
#line 5304 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 217:
#line 872 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = DateType(); }
#line 5310 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 218:
#line 873 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = DateTimeType(); }
#line 5316 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 219:
#line 874 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = DurationType(); }
#line 5322 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 220:
#line 875 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = EmbeddedPDVType(); }
#line 5328 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 221:
#line 876 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< EnumeratedType > (); }
#line 5334 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 222:
#line 877 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = ExternalType(); }
#line 5340 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 223:
#line 878 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = GeneralizedTimeType(); }
#line 5346 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 224:
#line 879 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = InstanceOfType(); }
#line 5352 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 225:
#line 880 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = IntegerType(); }
#line 5358 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 226:
#line 881 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = IRIType(); }
#line 5364 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 227:
#line 882 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = NullType(); }
#line 5370 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 228:
#line 883 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = ObjectClassFieldType(); }
#line 5376 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 229:
#line 884 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = ObjectDescriptorType(); }
#line 5382 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 230:
#line 885 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = ObjectIdentifierType(); }
#line 5388 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 231:
#line 886 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = OctetStringType(); }
#line 5394 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 232:
#line 887 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = RealType(); }
#line 5400 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 233:
#line 888 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = RelativeIRIType(); }
#line 5406 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 234:
#line 889 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = RelativeOIDType(); }
#line 5412 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 235:
#line 890 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< SequenceType > (); }
#line 5418 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 236:
#line 891 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< SequenceOfType > (); }
#line 5424 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 237:
#line 892 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< SetType > (); }
#line 5430 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 238:
#line 893 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< SetOfType > (); }
#line 5436 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 239:
#line 894 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< PrefixedType > (); }
#line 5442 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 240:
#line 895 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = TimeType(); }
#line 5448 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 241:
#line 896 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = TimeOfDayType(); }
#line 5454 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 242:
#line 897 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = UTCTimeType(); }
#line 5460 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 243:
#line 901 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< NamedType > () = NamedType{ yystack_[1].value.as< std::string > (), yystack_[0].value.as< Type > () }; }
#line 5466 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 244:
#line 905 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { throw std::runtime_error("Unhandled field: BooleanValue"); }
#line 5472 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 245:
#line 907 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { throw std::runtime_error("Unhandled field: IRIValue"); }
#line 5478 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 246:
#line 909 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { throw std::runtime_error("Unhandled field: ASN_NULL"); }
#line 5484 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 247:
#line 911 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { throw std::runtime_error("Unhandled field: TimeValue"); }
#line 5490 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 248:
#line 913 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { throw std::runtime_error("Unhandled field: bstring"); }
#line 5496 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 249:
#line 915 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { throw std::runtime_error("Unhandled field: hstring"); }
#line 5502 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 250:
#line 917 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = yystack_[0].value.as< std::string > (); }
#line 5508 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 251:
#line 919 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { throw std::runtime_error("Unhandled field: CONTAINING"); }
#line 5514 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 252:
#line 921 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = yystack_[0].value.as< std::string > (); }
#line 5520 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 253:
#line 923 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = yystack_[0].value.as< std::string > (); }
#line 5526 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 254:
#line 925 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = NamedNumber{yystack_[3].value.as< std::string > (), yystack_[1].value.as< long long > ()}; }
#line 5532 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 256:
#line 928 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = yystack_[0].value.as< long long > (); }
#line 5538 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 257:
#line 930 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = yystack_[0].value.as< double > (); }
#line 5544 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 258:
#line 932 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { throw std::runtime_error("Unhandled field: ValueCommaListChoice"); }
#line 5550 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 259:
#line 934 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { throw std::runtime_error("Unhandled field: ValueCommaListChoice"); }
#line 5556 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 260:
#line 938 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = yystack_[1].value.as< std::vector<Value> > (); }
#line 5562 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 261:
#line 940 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { throw std::runtime_error("Unhandled field: ValueChoice"); }
#line 5568 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 262:
#line 942 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { throw std::runtime_error("Unhandled field: OPTIONAL"); }
#line 5574 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 263:
#line 944 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { throw std::runtime_error("Unhandled field: ValueCommaListChoice"); }
#line 5580 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 268:
#line 956 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Value> > ().push_back(yystack_[0].value.as< Value > ()); }
#line 5586 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 269:
#line 958 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Value> > () = yystack_[1].value.as< std::vector<Value> > (); yylhs.value.as< std::vector<Value> > ().push_back(yystack_[0].value.as< Value > ()); }
#line 5592 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 277:
#line 981 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< NamedNumber > () = NamedNumber{ yystack_[3].value.as< std::string > (), yystack_[1].value.as< long long > () }; }
#line 5598 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 278:
#line 983 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< NamedNumber > () = NamedNumber{ yystack_[3].value.as< std::string > (), 0 }; }
#line 5604 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 279:
#line 987 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< long long > () = yystack_[0].value.as< long long > (); }
#line 5610 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 280:
#line 989 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< long long > () = -yystack_[0].value.as< long long > (); }
#line 5616 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 281:
#line 993 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[1].value.as< EnumeratedType > (); }
#line 5622 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 282:
#line 997 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[0].value.as< EnumeratedType > ();
      yylhs.value.as< EnumeratedType > ().accept_anything = false; }
#line 5629 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 283:
#line 1000 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[3].value.as< EnumeratedType > ();
      yylhs.value.as< EnumeratedType > ().accept_anything = true; }
#line 5636 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 284:
#line 1003 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[5].value.as< EnumeratedType > ();
      yylhs.value.as< EnumeratedType > ().accept_anything = true;
      yylhs.value.as< EnumeratedType > ().enum_values.insert(yylhs.value.as< EnumeratedType > ().enum_values.end(), yystack_[0].value.as< EnumeratedType > ().enum_values.begin(), yystack_[0].value.as< EnumeratedType > ().enum_values.end()); }
#line 5644 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 286:
#line 1010 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > ().enum_values.push_back(yystack_[0].value.as< EnumerationValue > ()); }
#line 5650 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 287:
#line 1012 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[2].value.as< EnumeratedType > (); yylhs.value.as< EnumeratedType > ().enum_values.push_back(yystack_[0].value.as< EnumerationValue > ()); }
#line 5656 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 288:
#line 1016 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumerationValue > ().name  = yystack_[0].value.as< std::string > (); }
#line 5662 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 289:
#line 1018 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumerationValue > ().name  = yystack_[0].value.as< NamedNumber > ().name;
      yylhs.value.as< EnumerationValue > ().value = yystack_[0].value.as< NamedNumber > ().number; }
#line 5669 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 299:
#line 1058 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SequenceType > () = SequenceType(); }
#line 5675 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 300:
#line 1060 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SequenceType > () = SequenceType{yystack_[1].value.as< ComponentTypeList > ()}; }
#line 5681 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 301:
#line 1068 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[0].value.as< ComponentTypeList > (); }
#line 5687 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 302:
#line 1072 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[0].value.as< ComponentTypeList > (); }
#line 5693 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 303:
#line 1074 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[2].value.as< ComponentTypeList > (); }
#line 5699 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 304:
#line 1076 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[4].value.as< ComponentTypeList > (); yylhs.value.as< ComponentTypeList > ().insert(yylhs.value.as< ComponentTypeList > ().end(), yystack_[0].value.as< ComponentTypeList > ().begin(), yystack_[0].value.as< ComponentTypeList > ().end()); }
#line 5705 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 305:
#line 1078 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[6].value.as< ComponentTypeList > (); yylhs.value.as< ComponentTypeList > ().insert(yylhs.value.as< ComponentTypeList > ().end(), yystack_[2].value.as< ComponentTypeList > ().begin(), yystack_[2].value.as< ComponentTypeList > ().end()); }
#line 5711 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 306:
#line 1080 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[0].value.as< ComponentTypeList > (); }
#line 5717 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 307:
#line 1082 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[2].value.as< ComponentTypeList > (); }
#line 5723 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 308:
#line 1084 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = {}; }
#line 5729 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 309:
#line 1086 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = {}; }
#line 5735 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 310:
#line 1090 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = ComponentTypeList{yystack_[0].value.as< ComponentType > ()}; }
#line 5741 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 311:
#line 1092 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yystack_[2].value.as< ComponentTypeList > ().push_back(yystack_[0].value.as< ComponentType > ()); yylhs.value.as< ComponentTypeList > () = yystack_[2].value.as< ComponentTypeList > (); }
#line 5747 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 312:
#line 1096 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentType > () = ComponentType{yystack_[0].value.as< NamedType > (), false, absl::nullopt}; }
#line 5753 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 313:
#line 1098 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentType > () = ComponentType{yystack_[1].value.as< NamedType > (), true, absl::nullopt}; }
#line 5759 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 314:
#line 1100 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentType > () = ComponentType{yystack_[2].value.as< NamedType > (), false, yystack_[0].value.as< Value > ()}; }
#line 5765 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 316:
#line 1113 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SequenceOfType > () = SequenceOfType{ false, nullptr, std::make_shared<Type>(yystack_[0].value.as< Type > ()) }; }
#line 5771 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 317:
#line 1115 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SequenceOfType > () = SequenceOfType{ true, std::make_shared<NamedType>(yystack_[0].value.as< NamedType > ()), nullptr }; }
#line 5777 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 318:
#line 1119 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SetType > () = SetType{}; }
#line 5783 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 319:
#line 1121 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SetType > () = SetType{yystack_[1].value.as< ComponentTypeList > ()}; }
#line 5789 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 320:
#line 1125 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SetOfType > () = SetOfType{ false, nullptr, std::make_shared<Type>(yystack_[0].value.as< Type > ()) }; }
#line 5795 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 321:
#line 1127 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SetOfType > () = SetOfType{ true, std::make_shared<NamedType>(yystack_[0].value.as< NamedType > ()), nullptr }; }
#line 5801 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 322:
#line 1131 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ChoiceType > () = ChoiceType{ yystack_[1].value.as< std::vector<NamedType> > () }; }
#line 5807 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 323:
#line 1135 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedType> > () = yystack_[0].value.as< std::vector<NamedType> > (); }
#line 5813 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 324:
#line 1139 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedType> > () = yystack_[0].value.as< std::vector<NamedType> > (); }
#line 5819 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 325:
#line 1141 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedType> > () = yystack_[2].value.as< std::vector<NamedType> > (); }
#line 5825 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 326:
#line 1145 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedType> > () = std::vector<NamedType> { yystack_[0].value.as< NamedType > () }; }
#line 5831 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 327:
#line 1147 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yystack_[2].value.as< std::vector<NamedType> > ().push_back( yystack_[0].value.as< NamedType > () ); yylhs.value.as< std::vector<NamedType> > () = yystack_[2].value.as< std::vector<NamedType> > (); }
#line 5837 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 329:
#line 1157 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< PrefixedType > () = PrefixedType(yystack_[0].value.as< TaggedType > ()); }
#line 5843 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 330:
#line 1161 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggedType > () = TaggedType{ yystack_[1].value.as< Tag > (), TaggingMode::automatic, yystack_[0].value.as< Type > () }; }
#line 5849 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 331:
#line 1163 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggedType > () = TaggedType{ yystack_[2].value.as< Tag > (), TaggingMode::implicit, yystack_[0].value.as< Type > () }; }
#line 5855 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 332:
#line 1165 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggedType > () = TaggedType{ yystack_[2].value.as< Tag > (), TaggingMode::explicit_, yystack_[0].value.as< Type > () }; }
#line 5861 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 333:
#line 1169 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Tag > () = Tag{ yystack_[2].value.as< Class > (), yystack_[1].value.as< int > () }; }
#line 5867 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 336:
#line 1177 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< int > () = yystack_[0].value.as< long long > (); }
#line 5873 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 338:
#line 1182 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Class > () = Class::universal; }
#line 5879 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 339:
#line 1184 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Class > () = Class::application; }
#line 5885 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 340:
#line 1186 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Class > () = Class::private_; }
#line 5891 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 341:
#line 1188 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Class > () = Class::context_specific; }
#line 5897 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 343:
#line 1201 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<ObjectIdComponentValue> > () = yystack_[1].value.as< std::vector<ObjectIdComponentValue> > (); std::reverse(yylhs.value.as< std::vector<ObjectIdComponentValue> > ().begin(), yylhs.value.as< std::vector<ObjectIdComponentValue> > ().end()); }
#line 5903 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 344:
#line 1203 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<ObjectIdComponentValue> > () = yystack_[1].value.as< std::vector<ObjectIdComponentValue> > (); std::reverse(yylhs.value.as< std::vector<ObjectIdComponentValue> > ().begin(), yylhs.value.as< std::vector<ObjectIdComponentValue> > ().end()); }
#line 5909 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 345:
#line 1207 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<ObjectIdComponentValue> > ().push_back(yystack_[0].value.as< ObjectIdComponentValue > ()); }
#line 5915 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 346:
#line 1209 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<ObjectIdComponentValue> > () = yystack_[0].value.as< std::vector<ObjectIdComponentValue> > (); yylhs.value.as< std::vector<ObjectIdComponentValue> > ().push_back(yystack_[1].value.as< ObjectIdComponentValue > ()); }
#line 5921 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 347:
#line 1213 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > () = yystack_[0].value.as< ObjectIdComponentValue > (); }
#line 5927 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 348:
#line 1215 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > () = yystack_[0].value.as< ObjectIdComponentValue > (); }
#line 5933 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 349:
#line 1217 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > () = yystack_[0].value.as< ObjectIdComponentValue > (); }
#line 5939 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 350:
#line 1221 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > ().name = yystack_[0].value.as< std::string > (); }
#line 5945 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 351:
#line 1225 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > ().value = yystack_[0].value.as< long long > (); }
#line 5951 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 353:
#line 1230 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > () = yystack_[1].value.as< ObjectIdComponentValue > (); yylhs.value.as< ObjectIdComponentValue > ().name = yystack_[3].value.as< std::string > (); }
#line 5957 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 481:
#line 1515 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 5963 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 482:
#line 1519 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 5969 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 483:
#line 1523 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 5975 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 484:
#line 1527 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 5981 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 485:
#line 1531 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 5987 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;


#line 5991 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
            default:
              break;
            }
        }
      catch (const syntax_error& yyexc)
        {
          error (yyexc);
          YYERROR;
        }
      YY_SYMBOL_PRINT ("-> $$ =", yylhs);
      yypop_ (yylen);
      yylen = 0;
      YY_STACK_PRINT ();

      // Shift the result of the reduction.
      yypush_ (YY_NULLPTR, yylhs);
    }
    goto yynewstate;

  /*--------------------------------------.
  | yyerrlab -- here on detecting error.  |
  `--------------------------------------*/
  yyerrlab:
    // If not already recovering from an error, report this error.
    if (!yyerrstatus_)
      {
        ++yynerrs_;
        error (yyla.location, yysyntax_error_ (yystack_[0].state, yyla));
      }


    yyerror_range[1].location = yyla.location;
    if (yyerrstatus_ == 3)
      {
        /* If just tried and failed to reuse lookahead token after an
           error, discard it.  */

        // Return failure if at end of input.
        if (yyla.type_get () == yyeof_)
          YYABORT;
        else if (!yyla.empty ())
          {
            yy_destroy_ ("Error: discarding", yyla);
            yyla.clear ();
          }
      }

    // Else will try to reuse lookahead token after shifting the error token.
    goto yyerrlab1;


  /*---------------------------------------------------.
  | yyerrorlab -- error raised explicitly by YYERROR.  |
  `---------------------------------------------------*/
  yyerrorlab:

    /* Pacify compilers like GCC when the user code never invokes
       YYERROR and the label yyerrorlab therefore never appears in user
       code.  */
    if (false)
      goto yyerrorlab;
    yyerror_range[1].location = yystack_[yylen - 1].location;
    /* Do not reclaim the symbols of the rule whose action triggered
       this YYERROR.  */
    yypop_ (yylen);
    yylen = 0;
    goto yyerrlab1;

  /*-------------------------------------------------------------.
  | yyerrlab1 -- common code for both syntax error and YYERROR.  |
  `-------------------------------------------------------------*/
  yyerrlab1:
    yyerrstatus_ = 3;   // Each real token shifted decrements this.
    {
      stack_symbol_type error_token;
      for (;;)
        {
          yyn = yypact_[yystack_[0].state];
          if (!yy_pact_value_is_default_ (yyn))
            {
              yyn += yyterror_;
              if (0 <= yyn && yyn <= yylast_ && yycheck_[yyn] == yyterror_)
                {
                  yyn = yytable_[yyn];
                  if (0 < yyn)
                    break;
                }
            }

          // Pop the current state because it cannot handle the error token.
          if (yystack_.size () == 1)
            YYABORT;

          yyerror_range[1].location = yystack_[0].location;
          yy_destroy_ ("Error: popping", yystack_[0]);
          yypop_ ();
          YY_STACK_PRINT ();
        }

      yyerror_range[2].location = yyla.location;
      YYLLOC_DEFAULT (error_token.location, yyerror_range, 2);

      // Shift the error token.
      error_token.state = yyn;
      yypush_ ("Shifting", error_token);
    }
    goto yynewstate;

    // Accept.
  yyacceptlab:
    yyresult = 0;
    goto yyreturn;

    // Abort.
  yyabortlab:
    yyresult = 1;
    goto yyreturn;

  yyreturn:
    if (!yyla.empty ())
      yy_destroy_ ("Cleanup: discarding lookahead", yyla);

    /* Do not reclaim the symbols of the rule whose action triggered
       this YYABORT or YYACCEPT.  */
    yypop_ (yylen);
    while (1 < yystack_.size ())
      {
        yy_destroy_ ("Cleanup: popping", yystack_[0]);
        yypop_ ();
      }

    return yyresult;
  }
    catch (...)
      {
        YYCDEBUG << "Exception caught: cleaning lookahead and stack"
                 << std::endl;
        // Do not try to display the values of the reclaimed symbols,
        // as their printer might throw an exception.
        if (!yyla.empty ())
          yy_destroy_ (YY_NULLPTR, yyla);

        while (1 < yystack_.size ())
          {
            yy_destroy_ (YY_NULLPTR, yystack_[0]);
            yypop_ ();
          }
        throw;
      }
  }

  void
  asn1_parser::error (const syntax_error& yyexc)
  {
    error (yyexc.location, yyexc.what());
  }

  // Generate an error message.
  std::string
  asn1_parser::yysyntax_error_ (state_type yystate, const symbol_type& yyla) const
  {
    // Number of reported tokens (one for the "unexpected", one per
    // "expected").
    size_t yycount = 0;
    // Its maximum.
    enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
    // Arguments of yyformat.
    char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];

    /* There are many possibilities here to consider:
       - If this state is a consistent state with a default action, then
         the only way this function was invoked is if the default action
         is an error action.  In that case, don't check for expected
         tokens because there are none.
       - The only way there can be no lookahead present (in yyla) is
         if this state is a consistent state with a default action.
         Thus, detecting the absence of a lookahead is sufficient to
         determine that there is no unexpected or expected token to
         report.  In that case, just report a simple "syntax error".
       - Don't assume there isn't a lookahead just because this state is
         a consistent state with a default action.  There might have
         been a previous inconsistent state, consistent state with a
         non-default action, or user semantic action that manipulated
         yyla.  (However, yyla is currently not documented for users.)
       - Of course, the expected token list depends on states to have
         correct lookahead information, and it depends on the parser not
         to perform extra reductions after fetching a lookahead from the
         scanner and before detecting a syntax error.  Thus, state
         merging (from LALR or IELR) and default reductions corrupt the
         expected token list.  However, the list is correct for
         canonical LR with one exception: it will still contain any
         token that will not be accepted due to an error action in a
         later state.
    */
    if (!yyla.empty ())
      {
        int yytoken = yyla.type_get ();
        yyarg[yycount++] = yytname_[yytoken];
        int yyn = yypact_[yystate];
        if (!yy_pact_value_is_default_ (yyn))
          {
            /* Start YYX at -YYN if negative to avoid negative indexes in
               YYCHECK.  In other words, skip the first -YYN actions for
               this state because they are default actions.  */
            int yyxbegin = yyn < 0 ? -yyn : 0;
            // Stay within bounds of both yycheck and yytname.
            int yychecklim = yylast_ - yyn + 1;
            int yyxend = yychecklim < yyntokens_ ? yychecklim : yyntokens_;
            for (int yyx = yyxbegin; yyx < yyxend; ++yyx)
              if (yycheck_[yyx + yyn] == yyx && yyx != yyterror_
                  && !yy_table_value_is_error_ (yytable_[yyx + yyn]))
                {
                  if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                    {
                      yycount = 1;
                      break;
                    }
                  else
                    yyarg[yycount++] = yytname_[yyx];
                }
          }
      }

    char const* yyformat = YY_NULLPTR;
    switch (yycount)
      {
#define YYCASE_(N, S)                         \
        case N:                               \
          yyformat = S;                       \
        break
        YYCASE_(0, YY_("syntax error"));
        YYCASE_(1, YY_("syntax error, unexpected %s"));
        YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
        YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
        YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
        YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
#undef YYCASE_
      }

    std::string yyres;
    // Argument number.
    size_t yyi = 0;
    for (char const* yyp = yyformat; *yyp; ++yyp)
      if (yyp[0] == '%' && yyp[1] == 's' && yyi < yycount)
        {
          yyres += yytnamerr_ (yyarg[yyi++]);
          ++yyp;
        }
      else
        yyres += *yyp;
    return yyres;
  }


  const short int asn1_parser::yypact_ninf_ = -671;

  const short int asn1_parser::yytable_ninf_ = -485;

  const short int
  asn1_parser::yypact_[] =
  {
     -56,  -671,   100,   -56,    59,    33,  -671,  -671,   121,    25,
    -671,    87,  -671,   155,    31,  -671,  -671,   115,    25,  -671,
    -671,  -671,   129,   141,  -671,  -671,   196,   242,   253,   228,
    -671,  -671,   357,   387,   232,  -671,  -671,  -671,   329,   290,
     288,  -671,  -671,  -671,   387,   294,  -671,   401,  -671,   232,
    -671,   231,  -671,     1,  -671,   362,   297,  -671,  -671,   304,
     311,  -671,  -671,   336,  -671,   405,   282,    14,  -671,  -671,
     282,   338,  -671,   322,   282,  -671,     0,   270,   491,   317,
    -671,  -671,  -671,  -671,  -671,  -671,  -671,  -671,    14,  -671,
    -671,  -671,   159,  1982,  -671,  -671,  -671,  -671,  -671,   -56,
    -671,   343,  -671,  2279,   330,  -671,  -671,  -671,  -671,  -671,
     101,   332,  -671,  -671,   323,  -671,  2081,   654,   350,  -671,
    2180,  -671,   337,  -671,  -671,   373,  -671,  -671,   374,   356,
    -671,  -671,  -671,   390,   359,  -671,  -671,  -671,  -671,  -671,
     400,   361,  -671,  -671,   425,  -671,   397,  -671,  -671,  -671,
    -671,  -671,    21,   213,  -671,  -671,  -671,  -671,  -671,  -671,
    -671,  -671,  -671,   484,   209,  -671,  -671,  -671,  2576,   364,
    -671,  -671,   380,  -671,  -671,   381,   -34,  -671,  -671,  -671,
    -671,  -671,  -671,  -671,  -671,  -671,  -671,  -671,  -671,  -671,
    -671,  -671,  -671,  2378,  -671,  -671,  -671,  -671,  -671,  -671,
    -671,  -671,  -671,  -671,  -671,  -671,  -671,  -671,  -671,  -671,
     -38,   376,   370,   371,  -671,   -44,   388,  -671,   195,  -671,
     372,  -671,   375,   386,   192,   370,   394,   377,  -671,   383,
    -671,   386,   395,  2576,   403,   217,   379,   408,  -671,   385,
    -671,    43,   101,   385,  -671,  -671,  2576,   386,   -10,  1060,
     438,   442,  2576,    -1,   451,   453,   402,    30,   278,   404,
     396,  1540,  -671,  1813,  -671,  2576,  2576,   386,   396,  2576,
     396,    28,    24,  -671,  -671,  -671,    18,  1883,   101,   251,
    -671,  -671,  -671,  -671,  -671,  -671,  -671,  2279,   282,     9,
    -671,  -671,   317,  1183,  -671,   386,   395,  1813,  -671,   385,
    -671,   416,  -671,   407,  2576,   414,  -671,   427,   413,  -671,
     431,  -671,   254,  -671,   431,   386,  -671,  2477,  -671,   466,
     421,  -671,    29,   436,  -671,   426,  -671,  -671,  -671,  -671,
    -671,  -671,  -671,   504,   194,   524,  2576,   526,  -671,   386,
    -671,  -671,  1813,   553,  -671,   398,  1306,   563,   249,   432,
     447,  -671,  -671,  -671,  -671,   386,  -671,  -671,  -671,   414,
    -671,  -671,   435,  -671,   -28,   -17,   -32,   -12,  -671,   504,
     515,  -671,   219,  -671,  2576,  -671,   452,   446,  -671,  -671,
    -671,  -671,  -671,  -671,  2576,  2576,   386,  -671,  -671,   454,
    2576,  2576,  -671,  -671,  -671,  -671,    64,  1813,    39,  -671,
    -671,  -671,  -671,  -671,  -671,   440,  -671,  -671,  -671,  -671,
     456,  1813,  -671,  1813,  -671,   249,   160,  -671,   443,   455,
     386,   275,   458,   445,  -671,  -671,  -671,  -671,  -671,   459,
     263,  -671,   275,   460,   386,   386,   440,   386,   440,  -671,
    -671,  -671,   380,    24,  -671,  -671,   467,    24,  -671,  -671,
    -671,   470,   475,   465,  2576,  -671,    41,  -671,    54,   125,
     183,   485,   388,  -671,  -671,   812,  -671,  -671,  -671,  -671,
    -671,   468,   471,   482,   473,  -671,   275,   255,  -671,   488,
    -671,   138,   386,  1765,  -671,  -671,   149,    20,  -671,   385,
    2576,    58,  1813,  -671,  -671,   107,  1423,  -671,   494,     5,
    1813,  -671,   275,  -671,   386,   500,   501,  -671,   483,   502,
     508,  -671,  -671,  1423,  -671,  -671,  1423,  -671,   386,   444,
    -671,   386,  -671,   386,  -671,  -671,   386,  -671,   386,  -671,
    -671,  -671,   506,   275,   396,   275,   275,   579,   625,  -671,
    1813,  1813,  1813,  1813,  1813,  -671,  -671,   512,  -671,  -671,
      67,   493,   386,     9,  -671,  -671,  1813,  -671,  -671,  -671,
      54,  -671,  -671,  -671,   529,  -671,  -671,  -671,  -671,  -671,
    -671,   456,  -671,  -671,   373,  -671,  -671,  -671,   374,   356,
    -671,  -671,  -671,  -671,  1813,  -671,  -671,  -671,  -671,  -671,
     390,  -671,  -671,  -671,   359,  -671,  -671,  -671,  -671,  -671,
    -671,  -671,  -671,  -671,  -671,  -671,   571,   400,  -671,   361,
    -671,  -671,  -671,  -671,  -671,   425,   397,  -671,  -671,  -671,
    -671,  -671,  -671,  -671,  -671,  -671,  -671,  -671,    21,   213,
    -671,  -671,  -671,  -671,  -671,  -671,  -671,  -671,  -671,  -671,
    -671,  -671,  -671,  -671,   269,  1659,  -671,   511,   936,  -671,
    -671,   386,   275,  -671,   622,  1306,  -671,   527,  -671,   385,
      72,  -671,  -671,  -671,   -45,  -671,  -671,   185,   513,   414,
    -671,   523,   528,  -671,   386,  -671,   516,   275,   517,  -671,
    -671,  2279,   616,   275,  -671,  -671,   153,  -671,  -671,  -671,
    -671,   258,   272,  -671,  -671,   520,   -32,  -671,  -671,  -671,
    1879,  -671,  -671,  -671,  -671,  -671,  -671,  -671,  -671,   275,
     531,   275,   275,   275,   275,   275,  -671,   532,  -671,  -671,
     275,  -671,   537,  -671,   249,  -671,   514,  -671,  -671,  -671,
    -671,   530,  -671,   536,   538,  1813,    34,   533,  -671,  -671,
     109,    10,   539,   534,   546,   319,  1813,   535,   548,   543,
     386,   544,   545,  -671,  -671,   483,  1306,  -671,  -671,  -671,
    3062,  -671,   549,  1306,  -671,  -671,   275,   385,  -671,   551,
     613,  -671,   275,   385,  -671,   385,  -671,  -671,    46,   544,
     385,   385,  -671,  -671,  -671,  -671,  -671,  -671,  -671,  -671,
    -671,  -671,  -671,  -671,  -671,  -671,  -671,  -671,  -671,  -671,
    -671,  -671,  -671,  -671,  -671,  -671,  -671,  -671,  -671,  -671,
    -671,  -671,  3062,  -671,  2822,  -671,  -671,  -671,  2702,  -671,
    -671,  -671,   555,   190,   812,  -671,   275,   556,  -671,  -671,
    -671,  -671,  -671,  -671,   545,  -671,  2942,  -671,  -671,  -671,
    -671,   385,  -671,   275,  -671,  -671
  };

  const unsigned short int
  asn1_parser::yydefact_[] =
  {
       0,   484,     0,     2,     0,   144,     1,     3,   155,     0,
     141,   142,   143,     0,   159,   152,   482,     0,   147,   150,
     151,   149,   350,     0,   146,   154,     0,     0,     0,   161,
     145,   148,     0,     0,   359,   158,   156,   157,     0,     0,
       0,   360,   361,   357,     0,     0,   160,     0,   153,   359,
     356,   166,   358,   168,   140,   170,     0,   481,   483,     0,
     167,   180,   182,   183,   185,     0,   172,     0,   165,   164,
       0,     0,     4,     0,   171,   173,     0,     0,   485,     0,
     191,   192,    89,    90,    91,    92,    93,    94,   162,   186,
     188,   189,     0,     0,    98,   181,   184,   169,   174,     0,
      11,     0,    10,     0,   485,    13,     6,     8,    99,    14,
       0,     0,     7,   190,     0,   187,     0,   485,     0,    77,
       0,    78,     0,    62,   298,     0,   373,   270,     0,     0,
     367,   369,   370,     0,     0,   364,   223,   374,   375,   376,
       0,   273,   377,   378,     0,   229,     0,   355,   379,   290,
     354,   362,     0,     0,   381,   380,   365,   368,   382,   242,
     383,   384,   385,   335,   482,   111,    61,   228,     0,     0,
     212,   224,     0,   210,   195,   193,     0,   208,   214,   225,
     221,   232,   213,   231,   227,   235,   236,   237,   238,   216,
     211,   239,   329,     0,   230,   234,   226,   233,   220,   222,
     240,   217,   241,   218,   219,   215,   371,   372,   209,   388,
     194,     0,     0,     0,   175,   179,     0,   110,     0,   103,
       0,   107,   106,   109,   183,   185,     0,     0,   481,     0,
      12,   206,     0,     0,     0,     0,     0,   291,   386,     0,
     363,     0,     0,     0,   342,   297,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   341,     0,     0,
       0,     0,   198,     0,   387,     0,     0,   330,     0,     0,
       0,     0,     0,   176,   177,   178,    33,     0,     0,     0,
      16,    18,    19,    20,    21,    22,   102,     0,     0,     0,
     485,     9,     0,     0,    80,    95,     0,     0,    79,     0,
     326,     0,   323,   324,     0,   477,   289,     0,   282,   286,
     288,   113,     0,   275,     0,   316,   317,     0,   454,     0,
     308,   299,   312,     0,   301,   302,   310,   279,   442,   436,
     437,   438,   366,     0,   298,     0,     0,     0,   272,     0,
     444,   451,     0,     0,   271,     0,     0,     0,   439,   440,
     127,   399,   118,   119,   120,   455,   433,   441,   435,   477,
     398,   400,   401,   404,   406,     0,   408,     0,   411,     0,
     414,   422,   424,   425,     0,   426,     0,   446,   428,   429,
     427,   430,   431,   432,     0,     0,   320,   321,   318,     0,
       0,     0,   334,   339,   340,   338,     0,     0,     0,    23,
      24,    25,    26,    27,    28,   112,   257,   248,   249,   250,
     246,     0,   262,     0,   255,   252,   253,   203,   228,     0,
     201,   202,   263,   261,   244,   256,   245,   247,   246,   252,
     253,   258,   207,     0,   332,   331,    87,   328,    88,    63,
     204,   351,     0,   352,   197,   116,     0,   345,   347,   348,
     349,   350,   196,     0,     0,    31,    44,    30,    39,    35,
      48,    50,     0,   104,   105,     0,    64,   100,    65,    66,
      67,     0,    84,     0,    82,   101,    97,     0,   293,     0,
     322,     0,   243,     0,   285,   281,     0,     0,   274,     0,
       0,     0,     0,   313,   300,     0,     0,   407,     0,   137,
       0,   456,   474,   475,     0,     0,     0,   280,     0,     0,
       0,   419,   418,     0,   421,   420,     0,   415,   443,     0,
     447,   391,   395,   392,   396,   319,   389,   393,   390,   394,
     336,   337,     0,    96,     0,   251,   268,     0,     0,   200,
       0,     0,     0,     0,     0,   199,   352,     0,   343,   346,
       0,     0,    32,     0,    42,    41,     0,    37,    40,    34,
      39,    47,    46,    45,     0,    15,    17,   487,   488,   489,
     490,   246,   492,   493,   494,   373,   270,   497,   498,   499,
     500,   501,   502,   503,   504,   367,   369,   507,   508,   370,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   364,
     272,   521,   522,   523,   524,   525,     0,   527,   528,   273,
     530,   531,   532,   533,   534,   535,   536,   537,   355,   262,
     540,   541,   542,   543,   544,   290,   354,   362,   548,   549,
     550,   551,   552,   553,   554,   365,   368,   271,   558,   559,
     560,   561,   562,    60,   252,     0,    73,     0,     0,    71,
      74,    75,    76,    59,     0,     0,    81,     0,   292,     0,
       0,   325,   327,   479,     0,   478,   476,   196,     0,   477,
     287,     0,     0,   276,   315,   309,   306,   314,   303,   311,
     417,   126,     0,   138,   459,   457,     0,   458,   460,   461,
     423,     0,     0,   129,   397,   402,   409,   412,   434,   453,
       0,   439,   440,   452,   445,   448,   333,    29,   260,   269,
       0,   264,   259,   266,   265,   267,   344,     0,   205,    43,
      38,    36,     0,   526,   252,    69,     0,    70,    72,    85,
     405,    83,   294,     0,     0,     0,     0,   283,   278,   277,
       0,     0,   110,     0,     0,   109,     0,     0,     0,   464,
     469,   134,   131,   135,   128,     0,     0,   449,   254,   353,
       0,    49,     0,     0,   295,   296,   480,     0,   307,   304,
       0,   121,   139,     0,   462,     0,   468,   466,   473,   134,
       0,     0,   130,   403,   491,   494,   495,   496,   498,   499,
     504,   505,   506,   509,   510,   514,   519,   520,   527,   529,
     535,   536,   538,   539,   545,   546,   547,   548,   549,   555,
     556,   557,     0,   486,     0,    51,    54,    53,     0,    57,
      68,    86,   284,     0,     0,   123,   122,     0,   465,   471,
     472,   470,   467,   133,   132,   136,     0,     5,    52,    56,
      58,     0,   305,    76,   463,    55
  };

  const short int
  asn1_parser::yypgoto_[] =
  {
    -671,   681,  -671,  -671,  -102,  -671,  -671,  -671,   575,  -671,
    -671,   230,  -275,    49,  -671,  -671,  -671,  -671,   133,  -671,
    -671,  -671,  -671,  -671,  -671,  -118,  -670,  -671,  -671,  -671,
    -455,  -286,  -671,  -528,  -671,  -671,  -671,  -671,  -671,    47,
      51,  -671,  -671,   618,  -179,  -671,  -188,  -671,  -671,  -671,
    -671,  -671,   363,  -671,  -671,  -671,   411,  -671,    22,  -671,
    -671,  -671,  -671,  -671,  -671,  -671,  -671,  -671,  -671,   -51,
     -74,   -73,  -671,  -671,  -671,  -671,  -671,  -671,   688,  -671,
     677,  -671,  -671,  -671,  -671,  -671,  -671,  -671,  -671,  -671,
    -671,   637,  -671,  -671,   660,   644,   -86,  -671,   627,  -671,
    -236,  -671,  -671,   277,  -671,  -671,  -671,  -671,  -671,   -82,
    -671,  -187,  -217,  -671,  -671,  -671,  -671,   -80,  -671,  -671,
    -227,  -154,  -671,  -671,   -50,  -481,  -671,  -671,  -671,    63,
    -671,  -671,  -671,   472,  -671,  -477,  -480,  -671,  -671,  -671,
    -671,  -671,  -671,  -671,  -671,  -671,  -671,  -671,  -671,  -671,
    -671,  -671,  -671,   -59,  -671,    74,   174,  -671,  -671,  -671,
     717,  -671,   680,   686,  -671,  -671,  -671,  -671,    12,  -671,
    -671,  -671,  -671,  -671,  -671,  -671,  -671,  -671,  -113,  -671,
    -671,  -671,   441,  -610,   -72,  -671,  -671,   220,  -671,   221,
    -671,   367,  -671,  -671,   243,  -671,  -493,  -671,  -671,  -671,
    -671,  -671,  -671,    38,  -140,  -671,  -671,  -671,  -671,  -671,
    -671,  -671,  -347,  -671,  -671,  -671,  -671,  -671,  -671,  -337,
    -671,   -47,    -9,   -16,     4,   -19,  -671
  };

  const short int
  asn1_parser::yydefgoto_[] =
  {
      -1,     2,     3,   761,   105,   106,   107,    79,   108,   109,
     279,   280,   404,   405,   281,   457,   560,   282,   558,   283,
     284,   555,   285,   563,   565,   814,   815,   816,   817,   818,
     819,   165,   166,   467,   468,   469,   647,   470,   648,   649,
     650,   118,   119,    80,   294,   473,   167,    81,    82,    83,
      84,    85,   110,    86,    87,   218,   219,   220,   221,   169,
     170,   171,   172,   442,   351,   352,   744,   353,   692,   693,
     780,   752,   354,    65,     4,    10,    11,    12,    17,    18,
      19,    20,    14,    29,    39,    54,    55,    59,    67,    73,
      74,    75,   214,   273,    76,    61,    62,    88,    89,   173,
     546,   174,   444,   262,   419,   175,   445,    90,    91,   355,
     177,   322,   652,   422,   423,   537,   178,   424,   179,   312,
     306,   425,   180,   307,   308,   309,   181,   182,   477,   478,
     183,   184,   185,   323,   324,   325,   326,   186,   187,   188,
     189,   301,   302,   303,   190,   191,   192,   193,   257,   532,
     396,   194,   274,   446,   447,   448,   449,   450,   195,   196,
     426,    34,    45,    43,   197,   198,   199,   200,   427,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   264,   359,
     360,   361,   362,   729,   730,   364,   365,   366,   367,   368,
     369,   497,   513,   516,   370,   371,   372,   373,   374,   375,
     376,   704,   377,   705,   378,   379,   380,   381,   685,   687,
     688,   689,   748,   749,   777,   778,   832,   382,   383,   484,
     666,   210,   211,   212,   259,   112,   653
  };

  const short int
  asn1_parser::yytable_[] =
  {
      22,   217,   458,   466,     5,   670,    63,     5,   226,    22,
     646,   176,   251,   255,   676,   679,   313,   222,   234,    63,
      92,   223,   509,    63,   327,   719,   703,    63,   441,    15,
     123,    56,   114,   319,   231,    77,   443,    64,   235,   250,
     254,    92,   319,  -413,   421,   121,   432,   100,    94,   439,
      64,    93,   300,   319,    64,   439,   224,   682,    64,   316,
     439,   393,    99,   514,    26,   387,   454,   121,   530,    94,
     350,   441,    93,   418,   829,   431,   733,   492,   272,   249,
     476,   111,  -410,    21,  -115,   263,   258,   225,    27,   553,
     249,     1,    21,   511,   735,   357,   122,   213,   268,    28,
       6,   319,   556,   215,    58,   455,   246,   213,     8,   431,
     320,   267,  -413,   321,   111,  -410,   493,   475,   229,   320,
     213,   247,   388,   394,   213,   502,   512,   102,   554,   249,
     100,   465,   515,   830,   318,    70,    13,   831,    16,   357,
     311,   557,   395,   248,   838,   249,   783,    16,    57,    58,
     319,   295,   319,   821,   431,     9,     1,   347,    16,   417,
     531,    78,    58,   305,   315,   104,   838,     1,    58,   356,
     386,     1,   164,    16,   456,    78,   460,   363,   675,   420,
     533,    57,    58,   434,   435,   217,    57,   437,   100,   298,
     645,    16,   357,   646,   535,   459,   536,   522,   524,   275,
     101,   222,   464,   527,   529,   223,    16,   703,   291,   431,
     102,     1,    58,   356,     1,    58,   433,   291,    23,     1,
      58,   363,   482,   431,   440,   431,   501,   678,    25,   768,
     304,   561,   310,   319,   314,   482,   559,   317,    30,   304,
     224,    63,   825,   317,   304,   298,   111,   663,   104,   249,
     433,   671,   291,    32,   499,    16,   452,    16,   661,   707,
     679,   358,   673,   451,   769,   213,   356,   466,   102,   669,
     562,   225,    64,   747,   506,   677,   453,   418,   116,    33,
     111,   103,   111,   683,   538,  -163,    16,    38,  -482,    53,
     479,   213,   518,   471,   662,   433,  -483,    16,   252,   100,
      35,    16,   521,   523,   431,   358,   117,  -117,   526,   528,
     842,   101,   431,   247,    71,  -434,  -194,   436,   286,   438,
     709,   270,  -434,   711,   712,   713,   714,   715,   268,   665,
     287,  -483,   737,   672,  -483,   253,   297,   249,    16,   720,
    -450,   249,   357,   679,  -483,  -483,    36,  -450,  -483,   431,
     433,   440,   431,   431,   431,   431,   431,    37,   358,   357,
     670,    15,   357,   840,   433,   357,   433,   535,   431,   646,
      44,  -481,   552,  -481,   461,   317,   317,   488,   658,   102,
     452,   317,   317,   651,   547,  -481,   462,   538,   549,   489,
     659,   684,   103,  -481,   751,   754,   431,   397,    46,  -483,
     453,   664,   249,    41,    42,  -481,    16,   755,   674,    47,
     540,   276,   277,    48,   541,   278,   356,   104,   542,   399,
     400,   401,   402,   403,   734,    50,   827,   452,   828,    57,
      58,   452,    66,   356,   451,    51,   356,    68,   451,   356,
     504,   505,  -124,   249,    69,   433,    70,   453,   327,   328,
     329,   453,   330,   433,   331,   120,   168,   418,    71,    72,
     418,    96,    97,   332,    57,   216,  -484,   667,   227,   232,
     228,   452,   304,   236,   237,   238,   698,   310,   239,   240,
     314,   241,   304,   243,   466,   242,   304,   668,   251,   255,
     433,   453,   244,   433,   433,   433,   433,   433,   245,   256,
     260,   357,   261,  -114,   269,   338,   270,   271,   358,   433,
     249,   288,  -481,   289,  -108,   250,   254,   293,   766,   292,
    -481,   699,   296,   384,   290,   358,    78,   385,   358,   772,
     299,   358,  -481,    16,   452,   718,   390,   433,   391,   480,
     398,   392,   481,   839,   483,  -481,   357,   431,   486,   645,
     485,   490,   344,   826,   453,   487,   491,   471,   431,   494,
     496,   495,   498,   651,   500,   503,   651,   507,  -483,   508,
     510,  -416,   700,   519,   520,   356,   534,   525,   539,   742,
    -298,   347,   431,   327,   406,   407,  -258,   408,   544,   409,
     548,   701,   702,   543,   550,  -481,   268,  -117,   332,   745,
    -481,   551,   357,   564,   654,   656,   655,   843,   657,   357,
    -481,   428,   660,  -481,  -481,  -481,   681,   327,   406,   407,
     356,   408,   686,   409,   411,   691,   690,   694,   695,   710,
    -481,   722,   332,   706,   123,   716,   418,   776,  -481,  -481,
     338,    58,   723,   439,   452,   428,   726,   731,   738,   736,
     479,   740,   741,   739,   746,   756,   758,   759,   411,   760,
     762,   764,  -125,   765,   453,   763,   412,   358,   767,   771,
     773,   774,   820,   770,   338,  -481,   356,   750,   775,   844,
     779,   781,   753,   356,     7,   213,   823,   344,   433,   440,
     841,   230,   566,   721,   836,   728,   725,   113,   463,   433,
     412,   413,   708,   743,   782,   833,    31,   834,  -481,    40,
      23,    98,   358,    60,    95,   115,   347,   822,   414,   545,
     718,   344,   732,   433,   717,   389,   429,   430,    24,    52,
      49,   304,   304,   696,   474,   824,   517,   697,   757,   680,
       0,     0,   651,     0,    23,     0,     0,     0,     0,     0,
     347,     0,   414,     0,     0,     0,     0,     0,   310,     0,
     724,   430,     0,     0,   750,     0,   750,     0,   358,     0,
       0,   753,   835,  -481,   471,   358,  -481,  -481,  -481,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -481,
    -481,     0,     0,  -481,     0,     0,     0,     0,     0,     0,
       0,  -481,  -481,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   304,     0,   327,   406,   407,     0,
     408,     0,   409,     0,     0,     0,     0,     0,     0,     0,
       0,   332,   310,   123,     0,   399,   400,   401,   402,   403,
     567,   568,   569,   570,   571,   572,   573,   574,   575,   576,
     577,   578,   579,   580,   581,   582,   583,   584,   585,   586,
     587,   588,   589,   590,   591,   592,   593,   594,   595,   596,
     597,   598,   599,   600,   601,   136,   137,   138,   139,   602,
     603,   604,   605,   606,   607,   608,   609,   610,   142,   611,
     612,   613,   614,   143,   615,   145,   616,   617,   618,   619,
     620,   621,   622,   623,   148,   624,   625,   626,   627,   628,
     629,   630,   631,   632,   633,   154,   634,   155,   635,   636,
     637,   638,   639,   640,   641,   158,   159,   160,   161,   162,
     642,     0,     0,     0,   413,     0,     0,     0,   163,     0,
     327,   406,   407,    23,   408,     0,   409,   643,     0,   347,
       0,   414,     0,     0,     0,   332,     0,   123,     0,   644,
     416,     0,     0,     0,   567,   568,   569,   570,   571,   572,
     573,   574,   575,   576,   577,   578,   579,   580,   581,   582,
     583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
     593,   594,   595,   596,   597,   598,   599,   600,   601,   136,
     137,   138,   139,   602,   603,   604,   605,   606,   607,   608,
     609,   610,   142,   611,   612,   613,   614,   143,   615,   145,
     616,   617,   618,   619,   620,   621,   622,   623,   148,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   154,
     634,   155,   635,   636,   637,   638,   639,   640,   641,   158,
     159,   160,   161,   162,   642,     0,     0,     0,   413,   727,
       0,     0,   163,     0,   327,   328,   329,    23,   330,     0,
     331,   643,     0,   347,     0,   414,     0,     0,     0,   332,
       0,   123,     0,   644,   416,     0,     0,     0,     0,     0,
     333,     0,   334,     0,     0,   125,   126,   127,     0,   128,
     129,     0,     0,     0,   335,   336,   130,   131,     0,     0,
     132,   133,   337,     0,     0,   134,     0,     0,     0,     0,
     135,   338,   339,   136,   137,   138,   139,     0,     0,     0,
       0,   340,   140,     0,   141,     0,   142,     0,   341,     0,
       0,   143,   144,   145,   146,     0,   147,     0,   342,     0,
       0,     0,   148,     0,   149,   150,   151,   152,   153,   343,
     247,     0,     0,   154,     0,   155,   156,   157,   344,     0,
       0,     0,     0,   158,   159,   160,   161,   162,   345,     0,
       0,     0,   293,     0,   346,     0,   163,   327,   328,   329,
       0,   330,     0,   331,     0,     0,     0,   347,     0,     0,
       0,     0,   332,     0,   123,     0,     0,   348,   349,     0,
       0,     0,     0,   333,     0,   334,     0,     0,   125,   126,
     127,     0,   128,   129,     0,     0,     0,     0,     0,   130,
     131,     0,     0,   132,   133,     0,     0,     0,   134,     0,
       0,     0,     0,   135,   338,   339,   136,   137,   138,   139,
       0,     0,     0,     0,   340,   140,     0,   141,     0,   142,
       0,   341,     0,     0,   143,   144,   145,   146,     0,   147,
       0,   342,     0,     0,     0,   148,     0,   149,   150,   151,
     152,   153,   343,   247,     0,     0,   154,     0,   155,   156,
     157,   344,     0,     0,     0,     0,   158,   159,   160,   161,
     162,   345,     0,   472,     0,     0,     0,   346,     0,   163,
     327,   328,   329,     0,   330,     0,   331,     0,     0,     0,
     347,     0,     0,     0,     0,   332,     0,   123,     0,     0,
     348,   349,     0,     0,     0,     0,   333,     0,   334,     0,
       0,   125,   126,   127,     0,   128,   129,     0,     0,     0,
       0,     0,   130,   131,     0,     0,   132,   133,     0,     0,
       0,   134,     0,     0,     0,     0,   135,   338,   339,   136,
     137,   138,   139,     0,     0,     0,     0,   340,   140,     0,
     141,     0,   142,     0,   341,     0,     0,   143,   144,   145,
     146,     0,   147,     0,   342,     0,     0,     0,   148,     0,
     149,   150,   151,   152,   153,   343,   247,     0,     0,   154,
       0,   155,   156,   157,   344,     0,     0,     0,     0,   158,
     159,   160,   161,   162,   345,     0,     0,   327,   328,   329,
     346,   330,   163,   331,     0,     0,     0,     0,     0,     0,
       0,     0,   332,   347,   123,     0,     0,     0,     0,     0,
       0,     0,     0,   348,   349,   334,     0,     0,   125,   126,
     127,     0,   128,   129,     0,     0,     0,     0,     0,   130,
     131,     0,     0,   132,   133,     0,     0,     0,   134,     0,
       0,     0,     0,   135,   338,   339,   136,   137,   138,   139,
       0,     0,     0,     0,   340,   140,     0,   141,     0,   142,
       0,   341,     0,     0,   143,   144,   145,   146,     0,   147,
       0,   342,     0,     0,     0,   148,     0,   149,   150,   151,
     152,   153,   343,   247,     0,     0,   154,     0,   155,   156,
     157,   344,     0,     0,     0,     0,   158,   159,   160,   161,
     162,   345,     0,     0,   327,   406,   407,   346,   408,   163,
     409,     0,     0,     0,     0,     0,     0,     0,     0,   332,
     347,   123,     0,     0,     0,     0,     0,     0,     0,   100,
     348,   349,   410,     0,     0,   125,   126,   127,     0,   128,
     129,     0,     0,     0,     0,   411,   130,   131,     0,     0,
     132,   133,     0,     0,     0,   134,     0,     0,     0,     0,
     135,   338,     0,   136,   137,   138,   139,     0,     0,     0,
       0,     0,   140,     0,   141,     0,   142,     0,     0,     0,
       0,   143,   144,   145,   146,     0,   147,   412,     0,     0,
       0,     0,   148,     0,   149,   150,   151,   152,   153,     0,
       0,     0,     0,   154,     0,   155,   156,   157,   344,   102,
       0,     0,     0,   158,   159,   160,   161,   162,     0,     0,
       0,     0,   413,   327,   406,   407,   163,   408,     0,   409,
       0,    23,     0,     0,     0,     0,     0,   347,   332,   414,
     123,     0,     0,     0,     0,     0,     0,   415,   416,     0,
       0,   410,     0,     0,   125,   126,   127,     0,   128,   129,
       0,     0,     0,     0,   411,   130,   131,     0,     0,   132,
     133,     0,     0,     0,   134,     0,     0,     0,     0,   135,
     338,     0,   136,   137,   138,   139,     0,     0,     0,     0,
       0,   140,     0,   141,     0,   142,     0,     0,     0,     0,
     143,   144,   145,   146,     0,   147,   412,     0,     0,     0,
       0,   148,     0,   149,   150,   151,   152,   153,     0,     0,
       0,     0,   154,     0,   155,   156,   157,   344,     0,   327,
       0,     0,   158,   159,   160,   161,   162,     0,     0,     0,
       0,   413,     0,     0,     0,   163,   123,     0,     0,     0,
      23,     0,     0,     0,     0,     0,   347,   124,   414,     0,
     125,   126,   127,     0,   128,   129,   724,   416,     0,     0,
       0,   130,   131,     0,     0,   132,   133,   327,   406,   407,
     134,   408,     0,   409,     0,   135,     0,     0,   136,   137,
     138,   139,   332,     0,     0,     0,     0,   140,     0,   141,
       0,   142,     0,     0,     0,   428,   143,   144,   145,   146,
       0,   147,     0,     0,     0,     0,     0,   148,   411,   149,
     150,   151,   152,   153,     0,     0,     0,     0,   154,     0,
     155,   156,   157,     0,   338,     0,     0,     0,   158,   159,
     160,   161,   162,   327,   328,   329,     0,   330,     0,   331,
       0,   163,     0,     0,     0,     0,     0,     0,   332,     0,
     412,     0,   347,     0,   123,     0,   399,   400,   401,   402,
     403,   698,   228,   164,     0,   124,     0,     0,   125,   126,
     127,   344,   128,   129,     0,     0,     0,     0,     0,   130,
     131,     0,     0,   132,   133,   413,     0,     0,   134,     0,
     338,     0,     0,   135,    23,     0,   136,   137,   138,   139,
     347,     0,   414,     0,     0,   140,   699,   141,     0,   142,
     429,   430,     0,     0,   143,   144,   145,   146,     0,   147,
       0,     0,     0,     0,     0,   148,     0,   149,   150,   151,
     152,   153,     0,     0,     0,     0,   154,   344,   155,   156,
     157,     0,     0,     0,     0,     0,   158,   159,   160,   161,
     162,     0,     0,   123,     0,     0,     0,     0,     0,   163,
       0,   100,     0,     0,   124,     0,   347,   125,   126,   127,
       0,   128,   129,   101,     0,     0,   701,   702,   130,   131,
     228,   164,   132,   133,     0,     0,     0,   134,     0,     0,
       0,     0,   135,     0,     0,   136,   137,   138,   139,     0,
       0,     0,     0,     0,   140,     0,   141,     0,   142,     0,
       0,     0,     0,   143,   144,   145,   146,     0,   147,     0,
       0,     0,     0,     0,   148,     0,   149,   150,   151,   152,
     153,     0,     0,     0,     0,   154,     0,   155,   156,   157,
       0,   102,     0,     0,     0,   158,   159,   160,   161,   162,
       0,     0,   123,     0,   103,     0,     0,     0,   163,     0,
     100,     0,     0,   124,     0,     0,   125,   126,   127,     0,
     128,   129,   101,     0,     0,     0,     0,   130,   131,   117,
     164,   132,   133,     0,     0,     0,   134,     0,     0,     0,
       0,   135,     0,     0,   136,   137,   138,   139,     0,     0,
       0,     0,     0,   140,     0,   141,     0,   142,     0,     0,
       0,     0,   143,   144,   145,   146,     0,   147,     0,     0,
       0,     0,     0,   148,     0,   149,   150,   151,   152,   153,
       0,     0,     0,     0,   154,     0,   155,   156,   157,     0,
     102,     0,     0,     0,   158,   159,   160,   161,   162,     0,
       0,   123,     0,     0,     0,     0,     0,   163,     0,   100,
       0,     0,   124,     0,     0,   125,   126,   127,     0,   128,
     129,     0,     0,     0,     0,     0,   130,   131,   117,   164,
     132,   133,     0,     0,     0,   134,     0,     0,     0,     0,
     135,     0,     0,   136,   137,   138,   139,     0,     0,     0,
       0,     0,   140,     0,   141,     0,   142,     0,     0,     0,
       0,   143,   144,   145,   146,     0,   147,     0,     0,     0,
       0,     0,   148,     0,   149,   150,   151,   152,   153,     0,
       0,     0,     0,   154,     0,   155,   156,   157,     0,   102,
       0,     0,     0,   158,   159,   160,   161,   162,     0,   233,
     123,     0,     0,     0,     0,     0,   163,     0,   100,     0,
       0,   124,     0,     0,   125,   126,   127,     0,   128,   129,
       0,     0,     0,     0,     0,   130,   131,   117,   164,   132,
     133,     0,     0,     0,   134,     0,     0,     0,     0,   135,
       0,     0,   136,   137,   138,   139,     0,     0,     0,     0,
       0,   140,     0,   141,     0,   142,     0,     0,     0,     0,
     143,   144,   145,   146,     0,   147,     0,     0,     0,     0,
       0,   148,     0,   149,   150,   151,   152,   153,     0,     0,
       0,     0,   154,     0,   155,   156,   157,     0,   102,     0,
       0,     0,   158,   159,   160,   161,   162,     0,     0,   123,
       0,     0,     0,     0,     0,   163,     0,     0,     0,     0,
     124,     0,     0,   125,   126,   127,     0,   128,   129,     0,
       0,     0,     0,     0,   130,   131,   117,   164,   132,   133,
       0,     0,     0,   134,     0,   265,     0,     0,   135,     0,
       0,   136,   137,   138,   139,     0,   266,     0,     0,     0,
     140,     0,   141,     0,   142,     0,     0,     0,     0,   143,
     144,   145,   146,     0,   147,     0,     0,     0,     0,     0,
     148,     0,   149,   150,   151,   152,   153,     0,     0,     0,
       0,   154,     0,   155,   156,   157,     0,     0,     0,     0,
       0,   158,   159,   160,   161,   162,     0,     0,   123,     0,
       0,     0,     0,     0,   163,     0,     0,     0,     0,   124,
       0,     0,   125,   126,   127,     0,   128,   129,     0,     0,
       0,     0,     0,   130,   131,   228,   164,   132,   133,     0,
       0,     0,   134,     0,     0,     0,     0,   135,     0,     0,
     136,   137,   138,   139,     0,     0,     0,     0,     0,   140,
       0,   141,     0,   142,     0,     0,     0,     0,   143,   144,
     145,   146,     0,   147,     0,     0,     0,     0,     0,   148,
       0,   149,   150,   151,   152,   153,     0,     0,     0,     0,
     154,     0,   155,   156,   157,     0,     0,     0,     0,     0,
     158,   159,   160,   161,   162,     0,     0,   123,     0,     0,
       0,     0,     0,   163,     0,   269,     0,     0,   124,     0,
       0,   125,   126,   127,     0,   128,   129,     0,     0,     0,
       0,     0,   130,   131,   228,   164,   132,   133,     0,     0,
       0,   134,     0,     0,     0,     0,   135,     0,     0,   136,
     137,   138,   139,     0,     0,     0,     0,     0,   140,     0,
     141,     0,   142,     0,     0,     0,     0,   143,   144,   145,
     146,     0,   147,     0,     0,     0,     0,     0,   148,     0,
     149,   150,   151,   152,   153,     0,     0,     0,     0,   154,
       0,   155,   156,   157,     0,     0,     0,     0,     0,   158,
     159,   160,   161,   162,     0,     0,     0,     0,     0,     0,
       0,     0,   163,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   228,   164,   399,   400,   401,   402,   403,
     567,   568,   569,   570,   784,   572,   573,   785,   786,   787,
     577,   788,   789,   580,   581,   582,   583,   790,   791,   792,
     587,   588,   793,   794,   591,   592,   593,   795,   595,   596,
     597,   598,   796,   797,   601,     0,     0,     0,     0,   602,
     603,   604,   605,   606,   798,   608,   799,   610,     0,   611,
     612,   613,   614,     0,   800,     0,   801,   617,   802,   803,
     620,   621,   622,   623,     0,   624,   804,   805,   806,   807,
     808,   630,   631,   632,   633,     0,   634,     0,   809,   810,
     811,   638,   639,   640,   641,     0,     0,     0,     0,     0,
     642,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   643,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   813,
     567,   568,   569,   570,   784,   572,   573,   785,   786,   787,
     577,   788,   789,   580,   581,   582,   583,   790,   791,   792,
     587,   588,   793,   794,   591,   592,   593,   795,   595,   596,
     597,   598,   796,   797,   601,     0,     0,     0,     0,   602,
     603,   604,   605,   606,   798,   608,   799,   610,     0,   611,
     612,   613,   614,     0,   800,     0,   801,   617,   802,   803,
     620,   621,   622,   623,     0,   624,   804,   805,   806,   807,
     808,   630,   631,   632,   633,     0,   634,     0,   809,   810,
     811,   638,   639,   640,   641,     0,     0,     0,     0,     0,
     642,     0,     0,     0,     0,   837,     0,     0,   812,     0,
       0,     0,     0,     0,     0,     0,     0,   643,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   813,
     567,   568,   569,   570,   784,   572,   573,   785,   786,   787,
     577,   788,   789,   580,   581,   582,   583,   790,   791,   792,
     587,   588,   793,   794,   591,   592,   593,   795,   595,   596,
     597,   598,   796,   797,   601,     0,     0,     0,     0,   602,
     603,   604,   605,   606,   798,   608,   799,   610,     0,   611,
     612,   613,   614,     0,   800,     0,   801,   617,   802,   803,
     620,   621,   622,   623,     0,   624,   804,   805,   806,   807,
     808,   630,   631,   632,   633,     0,   634,     0,   809,   810,
     811,   638,   639,   640,   641,     0,     0,     0,     0,     0,
     642,     0,     0,     0,     0,     0,     0,     0,   812,   845,
       0,     0,     0,     0,     0,     0,     0,   643,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   813,
     567,   568,   569,   570,   784,   572,   573,   785,   786,   787,
     577,   788,   789,   580,   581,   582,   583,   790,   791,   792,
     587,   588,   793,   794,   591,   592,   593,   795,   595,   596,
     597,   598,   796,   797,   601,     0,     0,     0,     0,   602,
     603,   604,   605,   606,   798,   608,   799,   610,     0,   611,
     612,   613,   614,     0,   800,     0,   801,   617,   802,   803,
     620,   621,   622,   623,     0,   624,   804,   805,   806,   807,
     808,   630,   631,   632,   633,     0,   634,     0,   809,   810,
     811,   638,   639,   640,   641,     0,     0,     0,     0,     0,
     642,     0,     0,     0,     0,     0,     0,     0,   812,     0,
       0,     0,     0,     0,     0,     0,     0,   643,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   813
  };

  const short int
  asn1_parser::yycheck_[] =
  {
       9,   103,   277,   289,     0,   486,    53,     3,   110,    18,
     465,    93,   152,   153,   491,   495,   243,   103,   120,    66,
      67,   103,   359,    70,     4,   553,   519,    74,     4,     4,
      21,    30,    79,    43,   116,    21,   272,    53,   120,   152,
     153,    88,    43,    75,   261,    92,   263,    29,    67,    21,
      66,    67,   239,    43,    70,    21,   103,    52,    74,   246,
      21,    31,    62,    75,    33,   252,    48,   114,     4,    88,
     249,     4,    88,   261,    28,   263,     4,    48,   122,   124,
     297,    77,   110,     9,   122,   119,   168,   103,    57,    48,
     124,   147,    18,   110,   139,   249,    92,    93,   136,    68,
       0,    43,    48,    99,   148,    87,    85,   103,    49,   297,
     120,   193,   144,   123,   110,   143,    87,   296,   114,   120,
     116,   100,   123,    93,   120,   342,   143,   109,    87,   124,
      29,   122,   144,    87,   247,   135,    15,    91,   148,   293,
     242,    87,   112,   122,   814,   124,   756,   148,   147,   148,
      43,   233,    43,   763,   342,   122,   147,   137,   148,   261,
     396,   147,   148,   120,   246,   147,   836,   147,   148,   249,
     252,   147,   148,   148,   276,   147,   278,   249,   120,   261,
     397,   147,   148,   265,   266,   287,   147,   269,    29,   236,
     465,   148,   346,   648,   411,   277,   413,   384,   385,   215,
      41,   287,   288,   390,   391,   287,   148,   700,   227,   397,
     109,   147,   148,   293,   147,   148,   263,   236,   131,   147,
     148,   293,   304,   411,   271,   413,   339,   120,    73,   120,
     239,    48,   241,    43,   243,   317,   111,   246,   123,   248,
     287,   288,   770,   252,   253,   292,   242,   483,   147,   124,
     297,   487,   271,   124,   336,   148,   272,   148,   120,   534,
     740,   249,   489,   272,   741,   261,   346,   553,   109,   120,
      87,   287,   288,   120,   346,   492,   272,   465,   119,   138,
     276,   122,   278,   500,   124,    54,   148,    59,   128,    58,
     299,   287,   374,   289,   481,   342,   136,   148,    85,    29,
     104,   148,   384,   385,   492,   293,   147,   122,   390,   391,
     120,    41,   500,   100,   122,   121,   124,   268,   123,   270,
     537,   136,   128,   540,   541,   542,   543,   544,   136,   483,
     135,   122,   669,   487,   125,   122,   119,   124,   148,   556,
     121,   124,   496,   823,   135,   136,   104,   128,   139,   537,
     397,   398,   540,   541,   542,   543,   544,   104,   346,   513,
     841,     4,   516,   818,   411,   519,   413,   584,   556,   824,
     138,   122,   454,   124,   123,   384,   385,   123,   123,   109,
     396,   390,   391,   465,   443,   136,   135,   124,   447,   135,
     135,   504,   122,   124,   136,   123,   584,   119,    69,   136,
     396,   483,   124,    16,    17,   136,   148,   135,   490,   119,
     135,    23,    24,   125,   139,    27,   496,   147,   143,    23,
      24,    25,    26,    27,   660,   131,   773,   443,   775,   147,
     148,   447,    70,   513,   443,    34,   516,   140,   447,   519,
      42,    43,   123,   124,   140,   492,   135,   443,     4,     5,
       6,   447,     8,   500,    10,    92,    93,   645,   122,    54,
     648,   123,   140,    19,   147,   122,   136,   483,   136,   119,
     147,   487,   481,   136,   101,   101,    32,   486,   122,    89,
     489,   122,   491,   122,   770,    85,   495,   483,   628,   629,
     537,   487,    67,   540,   541,   542,   543,   544,   101,    15,
     136,   655,   122,   122,   128,    61,   136,   136,   496,   556,
     124,   139,    21,   119,   139,   628,   629,   122,   735,   136,
      29,    77,   119,    85,   147,   513,   147,    85,   516,   746,
     122,   519,    41,   148,   550,   551,    85,   584,    85,   123,
     136,   139,   135,   818,   130,    54,   700,   735,   135,   824,
     123,    85,   108,   770,   550,   124,   135,   553,   746,   123,
      56,   135,    38,   645,    38,    12,   648,     4,   136,   122,
     135,    56,   128,   121,   128,   655,   136,   123,   123,   681,
     124,   137,   770,     4,     5,     6,   143,     8,   143,    10,
     123,   147,   148,   135,   124,   136,   136,   122,    19,   681,
     109,   136,   756,   118,   136,   123,   135,   824,   135,   763,
     119,    32,   124,   122,   123,   124,   122,     4,     5,     6,
     700,     8,   122,    10,    45,   142,   125,   125,   120,     4,
     139,   102,    19,   127,    21,   123,   824,   750,   147,   148,
      61,   148,    71,    21,   660,    32,   135,   120,   125,   136,
     659,   135,   135,   125,    38,   135,   125,   125,    45,   122,
     146,   125,   123,   125,   660,   135,    87,   655,   135,   123,
     135,   123,   123,   139,    61,    21,   756,   686,   135,   123,
     136,   136,   691,   763,     3,   681,   135,   108,   735,   736,
     135,   116,   462,   560,   812,   648,   645,    79,   287,   746,
      87,   122,   123,   681,   755,   779,    18,   780,    54,    32,
     131,    74,   700,    53,    70,    88,   137,   767,   139,   442,
     736,   108,   659,   770,   550,   253,   147,   148,    11,    49,
      44,   740,   741,   513,   293,   122,   369,   516,   700,   496,
      -1,    -1,   824,    -1,   131,    -1,    -1,    -1,    -1,    -1,
     137,    -1,   139,    -1,    -1,    -1,    -1,    -1,   767,    -1,
     147,   148,    -1,    -1,   773,    -1,   775,    -1,   756,    -1,
      -1,   780,   781,   119,   770,   763,   122,   123,   124,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,
     136,    -1,    -1,   139,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   147,   148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   823,    -1,     4,     5,     6,    -1,
       8,    -1,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    19,   841,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,    -1,   122,    -1,    -1,    -1,   126,    -1,
       4,     5,     6,   131,     8,    -1,    10,   135,    -1,   137,
      -1,   139,    -1,    -1,    -1,    19,    -1,    21,    -1,   147,
     148,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,    -1,   122,   123,
      -1,    -1,   126,    -1,     4,     5,     6,   131,     8,    -1,
      10,   135,    -1,   137,    -1,   139,    -1,    -1,    -1,    19,
      -1,    21,    -1,   147,   148,    -1,    -1,    -1,    -1,    -1,
      30,    -1,    32,    -1,    -1,    35,    36,    37,    -1,    39,
      40,    -1,    -1,    -1,    44,    45,    46,    47,    -1,    -1,
      50,    51,    52,    -1,    -1,    55,    -1,    -1,    -1,    -1,
      60,    61,    62,    63,    64,    65,    66,    -1,    -1,    -1,
      -1,    71,    72,    -1,    74,    -1,    76,    -1,    78,    -1,
      -1,    81,    82,    83,    84,    -1,    86,    -1,    88,    -1,
      -1,    -1,    92,    -1,    94,    95,    96,    97,    98,    99,
     100,    -1,    -1,   103,    -1,   105,   106,   107,   108,    -1,
      -1,    -1,    -1,   113,   114,   115,   116,   117,   118,    -1,
      -1,    -1,   122,    -1,   124,    -1,   126,     4,     5,     6,
      -1,     8,    -1,    10,    -1,    -1,    -1,   137,    -1,    -1,
      -1,    -1,    19,    -1,    21,    -1,    -1,   147,   148,    -1,
      -1,    -1,    -1,    30,    -1,    32,    -1,    -1,    35,    36,
      37,    -1,    39,    40,    -1,    -1,    -1,    -1,    -1,    46,
      47,    -1,    -1,    50,    51,    -1,    -1,    -1,    55,    -1,
      -1,    -1,    -1,    60,    61,    62,    63,    64,    65,    66,
      -1,    -1,    -1,    -1,    71,    72,    -1,    74,    -1,    76,
      -1,    78,    -1,    -1,    81,    82,    83,    84,    -1,    86,
      -1,    88,    -1,    -1,    -1,    92,    -1,    94,    95,    96,
      97,    98,    99,   100,    -1,    -1,   103,    -1,   105,   106,
     107,   108,    -1,    -1,    -1,    -1,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,    -1,    -1,   124,    -1,   126,
       4,     5,     6,    -1,     8,    -1,    10,    -1,    -1,    -1,
     137,    -1,    -1,    -1,    -1,    19,    -1,    21,    -1,    -1,
     147,   148,    -1,    -1,    -1,    -1,    30,    -1,    32,    -1,
      -1,    35,    36,    37,    -1,    39,    40,    -1,    -1,    -1,
      -1,    -1,    46,    47,    -1,    -1,    50,    51,    -1,    -1,
      -1,    55,    -1,    -1,    -1,    -1,    60,    61,    62,    63,
      64,    65,    66,    -1,    -1,    -1,    -1,    71,    72,    -1,
      74,    -1,    76,    -1,    78,    -1,    -1,    81,    82,    83,
      84,    -1,    86,    -1,    88,    -1,    -1,    -1,    92,    -1,
      94,    95,    96,    97,    98,    99,   100,    -1,    -1,   103,
      -1,   105,   106,   107,   108,    -1,    -1,    -1,    -1,   113,
     114,   115,   116,   117,   118,    -1,    -1,     4,     5,     6,
     124,     8,   126,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,   137,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   147,   148,    32,    -1,    -1,    35,    36,
      37,    -1,    39,    40,    -1,    -1,    -1,    -1,    -1,    46,
      47,    -1,    -1,    50,    51,    -1,    -1,    -1,    55,    -1,
      -1,    -1,    -1,    60,    61,    62,    63,    64,    65,    66,
      -1,    -1,    -1,    -1,    71,    72,    -1,    74,    -1,    76,
      -1,    78,    -1,    -1,    81,    82,    83,    84,    -1,    86,
      -1,    88,    -1,    -1,    -1,    92,    -1,    94,    95,    96,
      97,    98,    99,   100,    -1,    -1,   103,    -1,   105,   106,
     107,   108,    -1,    -1,    -1,    -1,   113,   114,   115,   116,
     117,   118,    -1,    -1,     4,     5,     6,   124,     8,   126,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
     137,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    29,
     147,   148,    32,    -1,    -1,    35,    36,    37,    -1,    39,
      40,    -1,    -1,    -1,    -1,    45,    46,    47,    -1,    -1,
      50,    51,    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,
      60,    61,    -1,    63,    64,    65,    66,    -1,    -1,    -1,
      -1,    -1,    72,    -1,    74,    -1,    76,    -1,    -1,    -1,
      -1,    81,    82,    83,    84,    -1,    86,    87,    -1,    -1,
      -1,    -1,    92,    -1,    94,    95,    96,    97,    98,    -1,
      -1,    -1,    -1,   103,    -1,   105,   106,   107,   108,   109,
      -1,    -1,    -1,   113,   114,   115,   116,   117,    -1,    -1,
      -1,    -1,   122,     4,     5,     6,   126,     8,    -1,    10,
      -1,   131,    -1,    -1,    -1,    -1,    -1,   137,    19,   139,
      21,    -1,    -1,    -1,    -1,    -1,    -1,   147,   148,    -1,
      -1,    32,    -1,    -1,    35,    36,    37,    -1,    39,    40,
      -1,    -1,    -1,    -1,    45,    46,    47,    -1,    -1,    50,
      51,    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,    60,
      61,    -1,    63,    64,    65,    66,    -1,    -1,    -1,    -1,
      -1,    72,    -1,    74,    -1,    76,    -1,    -1,    -1,    -1,
      81,    82,    83,    84,    -1,    86,    87,    -1,    -1,    -1,
      -1,    92,    -1,    94,    95,    96,    97,    98,    -1,    -1,
      -1,    -1,   103,    -1,   105,   106,   107,   108,    -1,     4,
      -1,    -1,   113,   114,   115,   116,   117,    -1,    -1,    -1,
      -1,   122,    -1,    -1,    -1,   126,    21,    -1,    -1,    -1,
     131,    -1,    -1,    -1,    -1,    -1,   137,    32,   139,    -1,
      35,    36,    37,    -1,    39,    40,   147,   148,    -1,    -1,
      -1,    46,    47,    -1,    -1,    50,    51,     4,     5,     6,
      55,     8,    -1,    10,    -1,    60,    -1,    -1,    63,    64,
      65,    66,    19,    -1,    -1,    -1,    -1,    72,    -1,    74,
      -1,    76,    -1,    -1,    -1,    32,    81,    82,    83,    84,
      -1,    86,    -1,    -1,    -1,    -1,    -1,    92,    45,    94,
      95,    96,    97,    98,    -1,    -1,    -1,    -1,   103,    -1,
     105,   106,   107,    -1,    61,    -1,    -1,    -1,   113,   114,
     115,   116,   117,     4,     5,     6,    -1,     8,    -1,    10,
      -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    19,    -1,
      87,    -1,   137,    -1,    21,    -1,    23,    24,    25,    26,
      27,    32,   147,   148,    -1,    32,    -1,    -1,    35,    36,
      37,   108,    39,    40,    -1,    -1,    -1,    -1,    -1,    46,
      47,    -1,    -1,    50,    51,   122,    -1,    -1,    55,    -1,
      61,    -1,    -1,    60,   131,    -1,    63,    64,    65,    66,
     137,    -1,   139,    -1,    -1,    72,    77,    74,    -1,    76,
     147,   148,    -1,    -1,    81,    82,    83,    84,    -1,    86,
      -1,    -1,    -1,    -1,    -1,    92,    -1,    94,    95,    96,
      97,    98,    -1,    -1,    -1,    -1,   103,   108,   105,   106,
     107,    -1,    -1,    -1,    -1,    -1,   113,   114,   115,   116,
     117,    -1,    -1,    21,    -1,    -1,    -1,    -1,    -1,   126,
      -1,    29,    -1,    -1,    32,    -1,   137,    35,    36,    37,
      -1,    39,    40,    41,    -1,    -1,   147,   148,    46,    47,
     147,   148,    50,    51,    -1,    -1,    -1,    55,    -1,    -1,
      -1,    -1,    60,    -1,    -1,    63,    64,    65,    66,    -1,
      -1,    -1,    -1,    -1,    72,    -1,    74,    -1,    76,    -1,
      -1,    -1,    -1,    81,    82,    83,    84,    -1,    86,    -1,
      -1,    -1,    -1,    -1,    92,    -1,    94,    95,    96,    97,
      98,    -1,    -1,    -1,    -1,   103,    -1,   105,   106,   107,
      -1,   109,    -1,    -1,    -1,   113,   114,   115,   116,   117,
      -1,    -1,    21,    -1,   122,    -1,    -1,    -1,   126,    -1,
      29,    -1,    -1,    32,    -1,    -1,    35,    36,    37,    -1,
      39,    40,    41,    -1,    -1,    -1,    -1,    46,    47,   147,
     148,    50,    51,    -1,    -1,    -1,    55,    -1,    -1,    -1,
      -1,    60,    -1,    -1,    63,    64,    65,    66,    -1,    -1,
      -1,    -1,    -1,    72,    -1,    74,    -1,    76,    -1,    -1,
      -1,    -1,    81,    82,    83,    84,    -1,    86,    -1,    -1,
      -1,    -1,    -1,    92,    -1,    94,    95,    96,    97,    98,
      -1,    -1,    -1,    -1,   103,    -1,   105,   106,   107,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,   116,   117,    -1,
      -1,    21,    -1,    -1,    -1,    -1,    -1,   126,    -1,    29,
      -1,    -1,    32,    -1,    -1,    35,    36,    37,    -1,    39,
      40,    -1,    -1,    -1,    -1,    -1,    46,    47,   147,   148,
      50,    51,    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    66,    -1,    -1,    -1,
      -1,    -1,    72,    -1,    74,    -1,    76,    -1,    -1,    -1,
      -1,    81,    82,    83,    84,    -1,    86,    -1,    -1,    -1,
      -1,    -1,    92,    -1,    94,    95,    96,    97,    98,    -1,
      -1,    -1,    -1,   103,    -1,   105,   106,   107,    -1,   109,
      -1,    -1,    -1,   113,   114,   115,   116,   117,    -1,   119,
      21,    -1,    -1,    -1,    -1,    -1,   126,    -1,    29,    -1,
      -1,    32,    -1,    -1,    35,    36,    37,    -1,    39,    40,
      -1,    -1,    -1,    -1,    -1,    46,    47,   147,   148,    50,
      51,    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,    60,
      -1,    -1,    63,    64,    65,    66,    -1,    -1,    -1,    -1,
      -1,    72,    -1,    74,    -1,    76,    -1,    -1,    -1,    -1,
      81,    82,    83,    84,    -1,    86,    -1,    -1,    -1,    -1,
      -1,    92,    -1,    94,    95,    96,    97,    98,    -1,    -1,
      -1,    -1,   103,    -1,   105,   106,   107,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,   116,   117,    -1,    -1,    21,
      -1,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,
      32,    -1,    -1,    35,    36,    37,    -1,    39,    40,    -1,
      -1,    -1,    -1,    -1,    46,    47,   147,   148,    50,    51,
      -1,    -1,    -1,    55,    -1,    57,    -1,    -1,    60,    -1,
      -1,    63,    64,    65,    66,    -1,    68,    -1,    -1,    -1,
      72,    -1,    74,    -1,    76,    -1,    -1,    -1,    -1,    81,
      82,    83,    84,    -1,    86,    -1,    -1,    -1,    -1,    -1,
      92,    -1,    94,    95,    96,    97,    98,    -1,    -1,    -1,
      -1,   103,    -1,   105,   106,   107,    -1,    -1,    -1,    -1,
      -1,   113,   114,   115,   116,   117,    -1,    -1,    21,    -1,
      -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    32,
      -1,    -1,    35,    36,    37,    -1,    39,    40,    -1,    -1,
      -1,    -1,    -1,    46,    47,   147,   148,    50,    51,    -1,
      -1,    -1,    55,    -1,    -1,    -1,    -1,    60,    -1,    -1,
      63,    64,    65,    66,    -1,    -1,    -1,    -1,    -1,    72,
      -1,    74,    -1,    76,    -1,    -1,    -1,    -1,    81,    82,
      83,    84,    -1,    86,    -1,    -1,    -1,    -1,    -1,    92,
      -1,    94,    95,    96,    97,    98,    -1,    -1,    -1,    -1,
     103,    -1,   105,   106,   107,    -1,    -1,    -1,    -1,    -1,
     113,   114,   115,   116,   117,    -1,    -1,    21,    -1,    -1,
      -1,    -1,    -1,   126,    -1,   128,    -1,    -1,    32,    -1,
      -1,    35,    36,    37,    -1,    39,    40,    -1,    -1,    -1,
      -1,    -1,    46,    47,   147,   148,    50,    51,    -1,    -1,
      -1,    55,    -1,    -1,    -1,    -1,    60,    -1,    -1,    63,
      64,    65,    66,    -1,    -1,    -1,    -1,    -1,    72,    -1,
      74,    -1,    76,    -1,    -1,    -1,    -1,    81,    82,    83,
      84,    -1,    86,    -1,    -1,    -1,    -1,    -1,    92,    -1,
      94,    95,    96,    97,    98,    -1,    -1,    -1,    -1,   103,
      -1,   105,   106,   107,    -1,    -1,    -1,    -1,    -1,   113,
     114,   115,   116,   117,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   147,   148,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    -1,    82,    -1,    84,    85,    86,    87,
      88,    89,    90,    91,    -1,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,    -1,   104,    -1,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,    -1,    -1,    -1,
     118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   147,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    -1,    82,    -1,    84,    85,    86,    87,
      88,    89,    90,    91,    -1,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,    -1,   104,    -1,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,    -1,    -1,    -1,
     118,    -1,    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   147,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    -1,    82,    -1,    84,    85,    86,    87,
      88,    89,    90,    91,    -1,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,    -1,   104,    -1,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,    -1,    -1,    -1,
     118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,   127,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   147,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    -1,    77,
      78,    79,    80,    -1,    82,    -1,    84,    85,    86,    87,
      88,    89,    90,    91,    -1,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,    -1,   104,    -1,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,    -1,    -1,    -1,
     118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   147
  };

  const unsigned short int
  asn1_parser::yystos_[] =
  {
       0,   147,   152,   153,   225,   375,     0,   152,    49,   122,
     226,   227,   228,    15,   233,     4,   148,   229,   230,   231,
     232,   306,   373,   131,   311,    73,    33,    57,    68,   234,
     123,   229,   124,   138,   312,   104,   104,   104,    59,   235,
     231,    16,    17,   314,   138,   313,    69,   119,   125,   314,
     131,    34,   313,    58,   236,   237,    30,   147,   148,   238,
     245,   246,   247,   372,   374,   224,    70,   239,   140,   140,
     135,   122,    54,   240,   241,   242,   245,    21,   147,   158,
     194,   198,   199,   200,   201,   202,   204,   205,   248,   249,
     258,   259,   372,   374,   376,   246,   123,   140,   242,    62,
      29,    41,   109,   122,   147,   155,   156,   157,   159,   160,
     203,   375,   376,   194,   372,   249,   119,   147,   192,   193,
     203,   372,   375,    21,    32,    35,    36,    37,    39,    40,
      46,    47,    50,    51,    55,    60,    63,    64,    65,    66,
      72,    74,    76,    81,    82,    83,    84,    86,    92,    94,
      95,    96,    97,    98,   103,   105,   106,   107,   113,   114,
     115,   116,   117,   126,   148,   182,   183,   197,   203,   210,
     211,   212,   213,   250,   252,   256,   260,   261,   267,   269,
     273,   277,   278,   281,   282,   283,   288,   289,   290,   291,
     295,   296,   297,   298,   302,   309,   310,   315,   316,   317,
     318,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     372,   373,   374,   375,   243,   375,   122,   155,   206,   207,
     208,   209,   247,   260,   372,   374,   155,   136,   147,   375,
     159,   260,   119,   119,   155,   260,   136,   101,   101,   122,
      89,   122,    85,   122,    67,   101,    85,   100,   122,   124,
     329,   355,    85,   122,   329,   355,    15,   299,   260,   375,
     136,   122,   254,   119,   329,    57,    68,   260,   136,   128,
     136,   136,   122,   244,   303,   374,    23,    24,    27,   161,
     162,   165,   168,   170,   171,   173,   123,   135,   139,   119,
     147,   376,   136,   122,   195,   260,   119,   119,   372,   122,
     262,   292,   293,   294,   373,   120,   271,   274,   275,   276,
     373,   155,   270,   271,   373,   260,   262,   373,   329,    43,
     120,   123,   262,   284,   285,   286,   287,     4,     5,     6,
       8,    10,    19,    30,    32,    44,    45,    52,    61,    62,
      71,    78,    88,    99,   108,   118,   124,   137,   147,   148,
     195,   215,   216,   218,   223,   260,   268,   272,   319,   330,
     331,   332,   333,   335,   336,   337,   338,   339,   340,   341,
     345,   346,   347,   348,   349,   350,   351,   353,   355,   356,
     357,   358,   368,   369,    85,    85,   260,   262,   123,   284,
      85,    85,   139,    31,    93,   112,   301,   119,   136,    23,
      24,    25,    26,    27,   163,   164,     5,     6,     8,    10,
      32,    45,    87,   122,   139,   147,   148,   155,   197,   255,
     260,   263,   264,   265,   268,   272,   311,   319,    32,   147,
     148,   197,   263,   372,   260,   260,   164,   260,   164,    21,
     372,     4,   214,   251,   253,   257,   304,   305,   306,   307,
     308,   373,   374,   375,    48,    87,   155,   166,   163,   260,
     155,   123,   135,   207,   247,   122,   182,   184,   185,   186,
     188,   375,   120,   196,   333,   195,   263,   279,   280,   373,
     123,   135,   260,   130,   370,   123,   135,   124,   123,   135,
      85,   135,    48,    87,   123,   135,    56,   342,    38,   260,
      38,   329,   263,    12,    42,    43,   335,     4,   122,   370,
     135,   110,   143,   343,    75,   144,   344,   342,   260,   121,
     128,   260,   262,   260,   262,   123,   260,   262,   260,   262,
       4,   251,   300,   263,   136,   263,   263,   266,   124,   123,
     135,   139,   143,   135,   143,   254,   251,   304,   123,   304,
     124,   136,   260,    48,    87,   172,    48,    87,   169,   111,
     167,    48,    87,   174,   118,   175,   162,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    77,    78,    79,    80,    82,    84,    85,    86,    87,
      88,    89,    90,    91,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   104,   106,   107,   108,   109,   110,
     111,   112,   118,   135,   147,   163,   181,   187,   189,   190,
     191,   260,   263,   377,   136,   135,   123,   135,   123,   135,
     124,   120,   262,   251,   260,   272,   371,   374,   375,   120,
     276,   251,   272,   271,   260,   120,   286,   263,   120,   287,
     345,   122,    52,   263,   329,   359,   122,   360,   361,   362,
     125,   142,   219,   220,   125,   120,   338,   340,    32,    77,
     128,   147,   148,   347,   352,   354,   127,   163,   123,   263,
       4,   263,   263,   263,   263,   263,   123,   307,   374,   184,
     263,   169,   102,    71,   147,   191,   135,   123,   190,   334,
     335,   120,   280,     4,   251,   139,   136,   370,   125,   125,
     135,   135,   155,   209,   217,   260,    38,   120,   363,   364,
     373,   136,   222,   373,   123,   135,   135,   354,   125,   125,
     122,   154,   146,   135,   125,   125,   263,   135,   120,   286,
     139,   123,   263,   135,   123,   135,   329,   365,   366,   136,
     221,   136,   220,   334,    32,    35,    36,    37,    39,    40,
      45,    46,    47,    50,    51,    55,    60,    61,    72,    74,
      82,    84,    86,    87,    94,    95,    96,    97,    98,   106,
     107,   108,   126,   147,   176,   177,   178,   179,   180,   181,
     123,   334,   275,   135,   122,   184,   263,   363,   363,    28,
      87,    91,   367,   221,   222,   373,   176,   123,   177,   163,
     181,   135,   120,   263,   123,   127
  };

  const unsigned short int
  asn1_parser::yyr1_[] =
  {
       0,   151,   152,   152,   153,   154,   155,   155,   155,   156,
     157,   157,   158,   159,   159,   160,   161,   161,   162,   162,
     162,   162,   162,   163,   163,   163,   163,   163,   164,   164,
     165,   166,   166,   166,   167,   167,   168,   169,   169,   169,
     170,   171,   172,   172,   172,   173,   174,   174,   174,   175,
     175,   176,   176,   177,   177,   178,   179,   180,   180,   181,
     181,   182,   182,   183,   184,   184,   185,   185,   186,   187,
     188,   189,   189,   190,   190,   191,   191,   192,   192,   193,
     194,   195,   196,   196,   196,   196,   196,   197,   197,   198,
     198,   198,   198,   198,   198,   199,   200,   201,   202,   203,
     204,   205,   203,   206,   206,   207,   207,   208,   208,   209,
     209,   210,   211,   212,   213,   213,   214,   214,   215,   215,
     215,   216,   217,   217,   217,   217,   217,   218,   218,   219,
     219,   220,   220,   221,   221,   222,   222,   223,   223,   223,
     224,   225,   226,   226,   226,   227,   228,   229,   229,   230,
     230,   230,   231,   232,   233,   233,   234,   234,   234,   234,
     235,   235,   236,   236,   237,   237,   237,   238,   238,   239,
     239,   240,   240,   241,   241,   242,   243,   244,   244,   244,
     245,   245,   246,   247,   247,   247,   248,   248,   249,   249,
     249,   249,   249,   250,   250,   250,   251,   251,   252,   253,
     254,   255,   255,   255,   256,   257,   258,   259,   260,   260,
     260,   260,   260,   261,   261,   261,   261,   261,   261,   261,
     261,   261,   261,   261,   261,   261,   261,   261,   261,   261,
     261,   261,   261,   261,   261,   261,   261,   261,   261,   261,
     261,   261,   261,   262,   263,   263,   263,   263,   263,   263,
     263,   263,   263,   263,   263,   263,   263,   263,   263,   263,
     263,   263,   263,   263,   264,   264,   265,   265,   266,   266,
     267,   268,   268,   269,   269,   270,   270,   271,   271,   272,
     272,   273,   274,   274,   274,   274,   275,   275,   276,   276,
     277,   278,   278,   279,   279,   280,   280,   281,   282,   283,
     283,   284,   285,   285,   285,   285,   285,   285,   285,   285,
     286,   286,   287,   287,   287,   287,   288,   288,   289,   289,
     290,   290,   291,   292,   293,   293,   294,   294,   295,   296,
     297,   297,   297,   298,   299,   299,   300,   300,   301,   301,
     301,   301,   302,   303,   303,   304,   304,   305,   305,   305,
     306,   307,   307,   308,   309,   310,   311,   312,   313,   313,
     314,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   324,   325,   325,   325,   325,   325,   325,   325,
     325,   325,   325,   325,   325,   325,   326,   327,   327,   328,
     328,   328,   328,   328,   328,   328,   328,   329,   330,   330,
     331,   332,   332,   332,   333,   334,   335,   335,   336,   336,
     337,   338,   338,   339,   340,   340,   341,   342,   343,   343,
     344,   344,   345,   345,   346,   346,   346,   346,   346,   346,
     346,   346,   346,   347,   347,   347,   347,   347,   347,   347,
     347,   347,   347,   348,   349,   350,   351,   351,   352,   352,
     353,   353,   354,   354,   355,   356,   357,   358,   358,   359,
     360,   360,   361,   362,   363,   363,   364,   365,   366,   366,
     367,   367,   367,   367,   368,   369,   370,   370,   371,   371,
     371,   372,   373,   374,   375,   376,   377,   377,   377,   377,
     377,   377,   377,   377,   377,   377,   377,   377,   377,   377,
     377,   377,   377,   377,   377,   377,   377,   377,   377,   377,
     377,   377,   377,   377,   377,   377,   377,   377,   377,   377,
     377,   377,   377,   377,   377,   377,   377,   377,   377,   377,
     377,   377,   377,   377,   377,   377,   377,   377,   377,   377,
     377,   377,   377,   377,   377,   377,   377,   377,   377,   377,
     377,   377,   377,   377,   377,   377,   377,   377,   377,   377,
     377,   377,   377
  };

  const unsigned char
  asn1_parser::yyr2_[] =
  {
       0,     2,     1,     2,    10,     3,     1,     1,     1,     3,
       1,     1,     3,     1,     1,     5,     1,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       2,     1,     2,     0,     1,     0,     4,     1,     2,     0,
       3,     3,     1,     2,     0,     3,     1,     1,     0,     3,
       0,     1,     2,     1,     1,     3,     2,     1,     2,     1,
       1,     1,     1,     3,     1,     1,     1,     1,     5,     2,
       3,     1,     2,     1,     1,     1,     1,     1,     1,     3,
       4,     3,     1,     3,     1,     3,     5,     3,     3,     1,
       1,     1,     1,     1,     1,     4,     5,     5,     1,     1,
       5,     5,     3,     1,     3,     3,     1,     1,     1,     1,
       1,     1,     3,     3,     1,     1,     1,     1,     1,     1,
       1,     5,     3,     3,     1,     1,     0,     1,     4,     1,
       3,     2,     4,     2,     0,     1,     3,     2,     3,     5,
       0,     2,     1,     1,     0,     3,     2,     1,     2,     1,
       1,     1,     1,     4,     2,     0,     2,     2,     2,     0,
       2,     0,     3,     0,     3,     3,     0,     1,     0,     3,
       0,     1,     0,     1,     2,     3,     2,     1,     1,     0,
       1,     3,     1,     1,     3,     1,     1,     2,     1,     1,
       2,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       3,     1,     1,     1,     3,     3,     3,     4,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     1,     1,     1,     1,     1,     1,
       1,     2,     1,     1,     4,     1,     1,     1,     1,     3,
       3,     1,     1,     1,     3,     3,     3,     3,     1,     2,
       1,     1,     1,     1,     4,     1,     3,     4,     4,     1,
       2,     4,     1,     4,     6,     2,     1,     3,     1,     1,
       1,     2,     5,     1,     3,     4,     4,     2,     1,     3,
       4,     1,     1,     3,     5,     7,     3,     5,     1,     3,
       1,     3,     1,     2,     3,     3,     3,     3,     3,     4,
       3,     3,     4,     1,     1,     3,     1,     3,     3,     1,
       2,     3,     3,     5,     2,     0,     1,     1,     1,     1,
       1,     0,     2,     3,     4,     1,     2,     1,     1,     1,
       1,     1,     1,     4,     1,     1,     4,     2,     3,     0,
       1,     1,     1,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     1,     4,
       4,     4,     4,     4,     4,     4,     4,     4,     1,     1,
       1,     1,     3,     5,     1,     1,     1,     2,     1,     3,
       1,     1,     3,     1,     1,     2,     1,     2,     1,     1,
       1,     1,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     1,     3,     1,     2,     1,     2,
       1,     1,     1,     1,     2,     1,     2,     3,     3,     1,
       1,     1,     3,     5,     1,     3,     2,     2,     1,     0,
       1,     1,     1,     0,     2,     2,     2,     0,     1,     1,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1
  };



  // YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
  // First, the terminals, then, starting at \a yyntokens_, nonterminals.
  const char*
  const asn1_parser::yytname_[] =
  {
  "END_OF_FILE", "error", "$undefined", "comment", "number", "realnumber",
  "bstring", "xmlbstring", "hstring", "xmlhstring", "cstring",
  "xmlcstring", "simplestring", "xmltstring", "psname",
  "encodingreference", "integerUnicodeLabel", "non-integerUnicodeLabel",
  "extended-true", "tstring", "extended-false", "objectreference",
  "objectsetreference", "typefieldreference", "valuefieldreference",
  "valuesetfieldreference", "objectfieldreference",
  "objectsetfieldreference", "ABSENT", "ABSTRACT_SYNTAX", "ALL",
  "APPLICATION", "ASN_NULL", "AUTOMATIC", "BEGIN", "BIT", "BMPString",
  "BOOLEAN", "BY", "CHARACTER", "CHOICE", "CLASS", "COMPONENT",
  "COMPONENTS", "CONSTRAINED", "CONTAINING", "DATE", "DATE_TIME",
  "DEFAULT", "DEFINITIONS", "DURATION", "EMBEDDED", "ENCODED",
  "ENCODING_CONTROL", "END", "ENUMERATED", "EXCEPT", "EXPLICIT", "EXPORTS",
  "EXTENSIBILITY", "EXTERNAL", "FALSE", "FROM", "GeneralizedTime",
  "GeneralString", "GraphicString", "IA5String", "IDENTIFIER", "IMPLICIT",
  "IMPLIED", "IMPORTS", "\"INCLUDES\"", "INSTANCE", "INSTRUCTIONS",
  "INTEGER", "INTERSECTION", "ISO646String", "MAX", "MIN",
  "MINUS_INFINITY", "NOT_A_NUMBER", "NumericString", "OBJECT",
  "ObjectDescriptor", "OCTET", "OF", "OID_IRI", "OPTIONAL", "PATTERN",
  "PDV", "PLUS_INFINITY", "PRESENT", "PrintableString", "PRIVATE", "REAL",
  "RELATIVE_OID", "RELATIVE_OID_IRI", "SEQUENCE", "SET", "SETTINGS",
  "SIZE", "STRING", "SYNTAX", "T61String", "TAGS", "TeletexString", "TIME",
  "TIME_OF_DAY", "TRUE", "TYPE_IDENTIFIER", "UNION", "UNIQUE", "UNIVERSAL",
  "UniversalString", "UTCTime", "UTF8String", "VideotexString",
  "VisibleString", "WITH", "\"::=\"", "\"...\"", "\"..\"", "\"{\"",
  "\"}\"", "\"(\"", "\")\"", "\"[\"", "\"]\"", "\"<\"", "\">\"", "\"!\"",
  "\"\\\"\"", "\"&\"", "\"'\"", "\"*\"", "\",\"", "\".\"", "\"-\"",
  "\"/\"", "\":\"", "\";\"", "\"=\"", "\"@\"", "\"|\"", "\"^\"", "PLUS",
  "STAR", "GENERIC_IDENTIFIER_UPPERCASE", "GENERIC_IDENTIFIER_LOWERCASE",
  "GENERIC_INTEGER", "xmlasn1typename", "$accept", "ModuleDefinitionList",
  "ModuleDefinition", "SyntaxList", "DefinedObjectClass",
  "ExternalObjectClassReference", "UsefulObjectClassReference",
  "ObjectClassAssignment", "ObjectClass", "ObjectClassDefn",
  "FieldSpecList", "FieldSpec", "FieldName", "FieldNameList",
  "TypeFieldSpec", "TypeOptionalitySpec", "OptionalUnique",
  "FixedTypeValueFieldSpec", "ValueOptionalitySpec",
  "VariableTypeValueFieldSpec", "ObjectFieldSpec", "ObjectOptionalitySpec",
  "ObjectSetFieldSpec", "ObjectSetOptionalitySpec", "WithSyntaxSpec",
  "TokenOrGroupSpecList", "TokenOrGroupSpec", "OptionalGroup",
  "RequiredToken", "LiteralList", "Literal", "DefinedObject",
  "ExternalObjectReference", "Object", "ObjectDefn", "DefaultSyntax",
  "FieldSetting", "DefinedSyntax", "DefinedSyntaxList",
  "DefinedSyntaxToken", "Setting", "DefinedObjectSet",
  "ExternalObjectSetReference", "ObjectSetAssignment", "ObjectSet",
  "ObjectSetSpec", "ObjectClassFieldType", "ParameterizedAssignment",
  "ParameterizedTypeAssignment", "ParameterizedValueAssignment",
  "ParameterizedValueSetTypeAssignment",
  "ParameterizedObjectClassAssignment", "ParameterList",
  "ParameterizedObjectAssignment", "ParameterizedObjectSetAssignment",
  "ParameterSeries", "Parameter", "ParamGovernor", "Governor",
  "ReferencedObjects", "TypeFromObject", "InstanceOfType",
  "SimpleDefinedType", "SimpleDefinedValue", "GeneralConstraint",
  "UserDefinedConstraint", "UserDefinedConstraintParameter",
  "TableConstraint", "AtNotationList", "AtNotation", "Level",
  "ComponentIdList", "ContentsConstraint", "EncodingControlSections",
  "ModuleIdentifier", "DefinitiveIdentification", "DefinitiveOID",
  "DefinitiveOIDandIRI", "DefinitiveObjIdComponentList",
  "DefinitiveObjIdComponent", "DefinitiveNumberForm",
  "DefinitiveNameAndNumberForm", "EncodingReferenceDefault", "TagDefault",
  "ExtensionDefault", "ModuleBody", "Exports", "SymbolsExported",
  "Imports", "SymbolsImported", "SymbolsFromModuleList",
  "SymbolsFromModule", "GlobalModuleReference", "AssignedIdentifier",
  "SymbolList", "Symbol", "Reference", "AssignmentList", "Assignment",
  "DefinedType", "DefinedValue", "ParameterizedType", "ParameterizedValue",
  "ActualParameterList", "ActualParameter", "ExternalTypeReference",
  "ExternalValueReference", "TypeAssignment", "ValueAssignment", "Type",
  "BuiltinType", "NamedType", "Value", "ValueCommaListChoice",
  "ValueChoice", "SequenceOfValues", "BooleanType", "BooleanValue",
  "IntegerType", "NamedNumberList", "NamedNumber", "SignedNumber",
  "EnumeratedType", "Enumerations", "Enumeration", "EnumerationItem",
  "RealType", "BitStringType", "NamedBitList", "NamedBit",
  "OctetStringType", "NullType", "SequenceType", "ComponentTypeLists",
  "RootComponentTypeList", "ComponentTypeList", "ComponentType",
  "SequenceOfType", "SetType", "SetOfType", "ChoiceType",
  "AlternativeTypeLists", "RootAlternativeTypeList", "AlternativeTypeList",
  "SelectionType", "PrefixedType", "TaggedType", "Tag",
  "EncodingReference", "ClassNumber", "Class", "ObjectIdentifierType",
  "ObjectIdentifierValue", "ObjIdComponentsList", "ObjIdComponents",
  "NameForm", "NumberForm", "NameAndNumberForm", "RelativeOIDType",
  "IRIType", "IRIValue", "FirstArcIdentifier", "SubsequentArcIdentifier",
  "ArcIdentifier", "RelativeIRIType", "EmbeddedPDVType", "ExternalType",
  "TimeType", "TimeValue", "DateType", "TimeOfDayType", "DateTimeType",
  "DurationType", "CharacterStringType", "RestrictedCharacterStringType",
  "UnrestrictedCharacterStringType", "ConstrainedType",
  "TypeWithConstraint", "Constraint", "ConstraintSpec",
  "SubtypeConstraint", "ElementSetSpecs", "RootElementSetSpec",
  "AdditionalElementSetSpec", "ElementSetSpec", "Unions", "UElems",
  "Intersections", "IElems", "IntersectionElements", "Elems", "Exclusions",
  "UnionMark", "IntersectionMark", "Elements", "SubtypeElements",
  "SingleValue", "ContainedSubtype", "Includes", "ValueRange",
  "LowerEndpoint", "UpperEndpoint", "LowerEndValue", "UpperEndValue",
  "SizeConstraint", "TypeConstraint", "PermittedAlphabet",
  "InnerTypeConstraints", "SingleTypeConstraint",
  "MultipleTypeConstraints", "FullSpecification", "PartialSpecification",
  "TypeConstraints", "NamedConstraint", "ComponentConstraint",
  "ValueConstraint", "PresenceConstraint", "PatternConstraint",
  "PropertySettings", "ExceptionSpec", "ExceptionIdentification",
  "typereference", "identifier", "valuereference", "modulereference",
  "objectclassreference", "word", YY_NULLPTR
  };

#if YYDEBUG
  const unsigned short int
  asn1_parser::yyrline_[] =
  {
       0,   268,   268,   269,   272,   287,   299,   300,   301,   304,
     307,   308,   311,   314,   315,   319,   322,   323,   326,   327,
     328,   329,   330,   333,   334,   335,   336,   337,   340,   341,
     344,   347,   348,   349,   352,   353,   356,   359,   360,   361,
     364,   367,   370,   371,   372,   375,   378,   379,   380,   386,
     387,   390,   391,   394,   395,   398,   401,   404,   405,   408,
     409,   412,   413,   416,   422,   423,   428,   429,   432,   435,
     438,   441,   442,   445,   446,   449,   450,   454,   455,   458,
     461,   464,   467,   468,   469,   470,   471,   480,   481,   487,
     488,   489,   490,   491,   492,   495,   498,   501,   504,   504,
     507,   510,   513,   516,   517,   520,   521,   524,   525,   528,
     529,   544,   556,   565,   572,   573,   576,   577,   580,   581,
     582,   585,   588,   589,   591,   592,   593,   596,   598,   602,
     603,   606,   607,   610,   611,   614,   615,   618,   619,   620,
     631,   639,   646,   647,   648,   651,   654,   658,   659,   663,
     664,   665,   668,   671,   675,   676,   679,   681,   683,   685,
     689,   690,   693,   695,   699,   700,   701,   704,   705,   708,
     710,   713,   715,   718,   720,   724,   728,   732,   733,   734,
     737,   739,   743,   747,   749,   751,   760,   762,   766,   768,
     770,   773,   774,   777,   778,   780,   785,   787,   790,   793,
     796,   799,   800,   802,   812,   817,   842,   848,   855,   857,
     859,   861,   863,   868,   869,   870,   871,   872,   873,   874,
     875,   876,   877,   878,   879,   880,   881,   882,   883,   884,
     885,   886,   887,   888,   889,   890,   891,   892,   893,   894,
     895,   896,   897,   900,   904,   906,   908,   910,   912,   914,
     916,   918,   920,   922,   924,   926,   927,   929,   931,   933,
     937,   939,   941,   943,   947,   948,   951,   952,   955,   957,
     965,   968,   969,   972,   973,   976,   977,   980,   982,   986,
     988,   992,   996,   999,  1002,  1006,  1009,  1011,  1015,  1017,
    1025,  1028,  1029,  1032,  1033,  1036,  1037,  1051,  1054,  1057,
    1059,  1067,  1071,  1073,  1075,  1077,  1079,  1081,  1083,  1085,
    1089,  1091,  1095,  1097,  1099,  1101,  1112,  1114,  1118,  1120,
    1124,  1126,  1130,  1134,  1138,  1140,  1144,  1146,  1153,  1156,
    1160,  1162,  1164,  1168,  1172,  1173,  1176,  1178,  1181,  1183,
    1185,  1187,  1197,  1200,  1202,  1206,  1208,  1212,  1214,  1216,
    1220,  1224,  1226,  1229,  1233,  1245,  1248,  1254,  1257,  1258,
    1261,  1262,  1265,  1271,  1278,  1284,  1287,  1290,  1293,  1296,
    1299,  1302,  1303,  1306,  1307,  1308,  1309,  1310,  1311,  1312,
    1313,  1314,  1315,  1316,  1317,  1318,  1322,  1325,  1326,  1329,
    1330,  1331,  1332,  1333,  1334,  1335,  1336,  1339,  1342,  1343,
    1346,  1349,  1350,  1351,  1354,  1357,  1360,  1361,  1364,  1365,
    1368,  1371,  1372,  1375,  1378,  1379,  1382,  1385,  1388,  1389,
    1392,  1393,  1396,  1398,  1401,  1402,  1403,  1404,  1405,  1406,
    1407,  1408,  1409,  1415,  1417,  1418,  1419,  1420,  1421,  1422,
    1423,  1424,  1425,  1428,  1431,  1434,  1437,  1438,  1441,  1442,
    1445,  1446,  1449,  1450,  1453,  1456,  1459,  1462,  1463,  1466,
    1469,  1470,  1473,  1476,  1479,  1480,  1483,  1486,  1489,  1490,
    1493,  1494,  1495,  1496,  1499,  1502,  1505,  1506,  1509,  1510,
    1511,  1514,  1518,  1522,  1526,  1530,  1534,  1535,  1536,  1537,
    1538,  1539,  1540,  1541,  1542,  1543,  1544,  1545,  1546,  1547,
    1548,  1549,  1550,  1551,  1552,  1553,  1554,  1555,  1556,  1557,
    1558,  1559,  1560,  1561,  1562,  1563,  1564,  1565,  1566,  1567,
    1568,  1569,  1570,  1571,  1572,  1573,  1574,  1575,  1576,  1577,
    1578,  1579,  1580,  1581,  1582,  1583,  1584,  1585,  1586,  1587,
    1588,  1589,  1590,  1591,  1592,  1593,  1594,  1595,  1596,  1597,
    1598,  1599,  1600,  1601,  1602,  1603,  1604,  1605,  1606,  1607,
    1608,  1609,  1610
  };

  // Print the state stack on the debug stream.
  void
  asn1_parser::yystack_print_ ()
  {
    *yycdebug_ << "Stack now";
    for (stack_type::const_iterator
           i = yystack_.begin (),
           i_end = yystack_.end ();
         i != i_end; ++i)
      *yycdebug_ << ' ' << i->state;
    *yycdebug_ << std::endl;
  }

  // Report on the debug stream that the rule \a yyrule is going to be reduced.
  void
  asn1_parser::yy_reduce_print_ (int yyrule)
  {
    unsigned int yylno = yyrline_[yyrule];
    int yynrhs = yyr2_[yyrule];
    // Print the symbols being reduced, and their result.
    *yycdebug_ << "Reducing stack by rule " << yyrule - 1
               << " (line " << yylno << "):" << std::endl;
    // The symbols being reduced.
    for (int yyi = 0; yyi < yynrhs; yyi++)
      YY_SYMBOL_PRINT ("   $" << yyi + 1 << " =",
                       yystack_[(yynrhs) - (yyi + 1)]);
  }
#endif // YYDEBUG



} // yy
#line 7555 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:1167
#line 1612 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:1168



namespace yy {

    asn1_parser::symbol_type yylex(Context& context)
    {
        const char* start = context.cursor;
        const char* YYMARKER = nullptr;
        context.location.step();
        // Lexer

#line 7571 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
{
	char yych;
	unsigned int yyaccept = 0;
	yych = *context.cursor;
	switch (yych) {
	case 0x00:	goto yy2;
	case 0x08:
	case '\t':
	case '\v':
	case '\f':
	case ' ':	goto yy6;
	case '\n':	goto yy8;
	case '\r':	goto yy10;
	case '!':	goto yy11;
	case '"':	goto yy13;
	case '&':	goto yy15;
	case '(':	goto yy16;
	case ')':	goto yy18;
	case ',':	goto yy20;
	case '-':	goto yy22;
	case '.':	goto yy24;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy26;
	case ':':	goto yy29;
	case ';':	goto yy31;
	case '<':	goto yy33;
	case '@':	goto yy35;
	case 'A':	goto yy37;
	case 'B':	goto yy38;
	case 'C':	goto yy39;
	case 'D':	goto yy40;
	case 'E':	goto yy41;
	case 'F':	goto yy42;
	case 'G':	goto yy43;
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'Q':
	case 'X':
	case 'Y':
	case 'Z':	goto yy44;
	case 'I':	goto yy45;
	case 'M':	goto yy46;
	case 'N':	goto yy47;
	case 'O':	goto yy48;
	case 'P':	goto yy49;
	case 'R':	goto yy50;
	case 'S':	goto yy51;
	case 'T':	goto yy52;
	case 'U':	goto yy53;
	case 'V':	goto yy54;
	case 'W':	goto yy55;
	case '[':	goto yy56;
	case ']':	goto yy58;
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy60;
	case '{':	goto yy61;
	case '|':	goto yy63;
	case '}':	goto yy65;
	default:	goto yy4;
	}
yy2:
	++context.cursor;
#line 7681 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_END_OF_FILE(context.location); }
#line 7670 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy4:
	++context.cursor;
yy5:
#line 7706 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ throw(std::runtime_error(std::string("Unknown symbol!") + *start)); context.location.columns(context.cursor - start); return asn1_parser::symbol_type(asn1_parser::token_type(*start), context.location); }
#line 7676 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy6:
	++context.cursor;
#line 7685 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); context.location.columns(); return yylex(context); }
#line 7681 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy8:
	++context.cursor;
#line 7684 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); context.location.lines();   return yylex(context); }
#line 7686 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy10:
	yych = *++context.cursor;
	switch (yych) {
	case '\n':	goto yy8;
	default:	goto yy5;
	}
yy11:
	++context.cursor;
#line 7703 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXCLAMATION_MARK (context.location); }
#line 7697 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy13:
	yych = *++context.cursor;
	switch (yych) {
	case '"':	goto yy67;
	case '\\':	goto yy69;
	default:	goto yy13;
	}
yy15:
	yyaccept = 0;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':	goto yy71;
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy73;
	default:	goto yy5;
	}
yy16:
	++context.cursor;
#line 7693 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPEN_PARENTHESIS (context.location); }
#line 7767 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy18:
	++context.cursor;
#line 7694 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLOSE_PARENTHESIS (context.location); }
#line 7772 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy20:
	++context.cursor;
#line 7699 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COMMA (context.location); }
#line 7777 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy22:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy74;
	default:	goto yy23;
	}
yy23:
#line 7700 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_HYPHEN_MINUS (context.location); }
#line 7787 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy24:
	yych = *++context.cursor;
	switch (yych) {
	case '.':	goto yy77;
	default:	goto yy25;
	}
yy25:
#line 7701 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_FULL_STOP (context.location); }
#line 7797 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy26:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy26;
	default:	goto yy28;
	}
yy28:
#line 7672 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_number(std::stoll(std::string(start, context.cursor)), context.location); }
#line 7816 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy29:
	yyaccept = 1;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case ':':	goto yy79;
	default:	goto yy30;
	}
yy30:
#line 7697 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COLON (context.location); }
#line 7827 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy31:
	++context.cursor;
#line 7698 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SEMICOLON (context.location); }
#line 7832 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy33:
	++context.cursor;
#line 7704 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_LESS_THAN (context.location); }
#line 7837 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy35:
	++context.cursor;
#line 7705 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_AT (context.location); }
#line 7842 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy37:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'M':
	case 'N':
	case 'O':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	case 'B':	goto yy83;
	case 'L':	goto yy84;
	case 'P':	goto yy85;
	case 'U':	goto yy86;
	default:	goto yy5;
	}
yy38:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'F':
	case 'G':
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'N':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	case 'E':	goto yy87;
	case 'I':	goto yy88;
	case 'M':	goto yy89;
	case 'O':	goto yy90;
	case 'Y':	goto yy91;
	default:	goto yy5;
	}
yy39:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'I':
	case 'J':
	case 'K':
	case 'M':
	case 'N':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	case 'H':	goto yy93;
	case 'L':	goto yy94;
	case 'O':	goto yy95;
	default:	goto yy5;
	}
yy40:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'B':
	case 'C':
	case 'D':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	case 'A':	goto yy96;
	case 'E':	goto yy97;
	case 'U':	goto yy98;
	default:	goto yy5;
	}
yy41:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	case 'M':	goto yy99;
	case 'N':	goto yy100;
	case 'X':	goto yy101;
	default:	goto yy5;
	}
yy42:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	case 'A':	goto yy102;
	case 'R':	goto yy103;
	default:	goto yy5;
	}
yy43:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	case 'e':	goto yy104;
	case 'r':	goto yy105;
	default:	goto yy5;
	}
yy44:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy5;
	}
yy45:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'B':
	case 'C':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	case 'A':	goto yy106;
	case 'D':	goto yy107;
	case 'M':	goto yy108;
	case 'N':	goto yy109;
	case 'S':	goto yy110;
	default:	goto yy5;
	}
yy46:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	case 'A':	goto yy111;
	case 'I':	goto yy112;
	default:	goto yy5;
	}
yy47:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	case 'O':	goto yy113;
	case 'U':	goto yy114;
	case 'u':	goto yy115;
	default:	goto yy5;
	}
yy48:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'D':
	case 'E':
	case 'G':
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	case 'B':	goto yy116;
	case 'C':	goto yy117;
	case 'F':	goto yy118;
	case 'I':	goto yy120;
	case 'P':	goto yy121;
	case 'b':	goto yy122;
	default:	goto yy5;
	}
yy49:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'B':
	case 'C':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	case 'A':	goto yy123;
	case 'D':	goto yy124;
	case 'L':	goto yy125;
	case 'R':	goto yy126;
	case 'r':	goto yy127;
	default:	goto yy5;
	}
yy50:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	case 'E':	goto yy128;
	default:	goto yy5;
	}
yy51:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'F':
	case 'G':
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	case 'E':	goto yy129;
	case 'I':	goto yy130;
	case 'T':	goto yy131;
	case 'Y':	goto yy132;
	default:	goto yy5;
	}
yy52:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '7':
	case '8':
	case '9':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	case '6':	goto yy133;
	case 'A':	goto yy134;
	case 'I':	goto yy135;
	case 'R':	goto yy136;
	case 'Y':	goto yy137;
	case 'e':	goto yy138;
	default:	goto yy5;
	}
yy53:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	case 'N':	goto yy139;
	case 'T':	goto yy140;
	case 'n':	goto yy141;
	default:	goto yy5;
	}
yy54:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	case 'i':	goto yy142;
	default:	goto yy5;
	}
yy55:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	case 'I':	goto yy143;
	default:	goto yy5;
	}
yy56:
	++context.cursor;
#line 7695 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPEN_SQUARE_BRACKET (context.location); }
#line 9158 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy58:
	++context.cursor;
#line 7696 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLOSE_SQUARE_BRACKET (context.location); }
#line 9163 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy60:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy144;
	default:	goto yy5;
	}
yy61:
	++context.cursor;
#line 7691 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPEN_BRACE (context.location); }
#line 9237 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy63:
	++context.cursor;
#line 7702 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_VERTICAL_LINE (context.location); }
#line 9242 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy65:
	++context.cursor;
#line 7692 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLOSE_BRACE (context.location); }
#line 9247 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy67:
	++context.cursor;
#line 7674 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_cstring(std::string(start, context.cursor), context.location); }
#line 9252 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy69:
	yych = *++context.cursor;
	switch (yych) {
	case '\\':	goto yy69;
	default:	goto yy13;
	}
yy71:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy147;
	default:	goto yy72;
	}
yy72:
	context.cursor = YYMARKER;
	switch (yyaccept) {
	case 0: 	goto yy5;
	case 1: 	goto yy30;
	default:	goto yy76;
	}
yy73:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy150;
	default:	goto yy72;
	}
yy74:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '\n':
	case '\r':	goto yy76;
	case '-':	goto yy153;
	default:	goto yy74;
	}
yy76:
#line 7668 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return yylex(context); }
#line 9416 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy77:
	yych = *++context.cursor;
	switch (yych) {
	case '.':	goto yy154;
	default:	goto yy78;
	}
yy78:
#line 7690 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_RANGE (context.location); }
#line 9426 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy79:
	yych = *++context.cursor;
	switch (yych) {
	case '=':	goto yy156;
	default:	goto yy72;
	}
yy80:
	yych = *++context.cursor;
yy81:
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy82;
	}
yy82:
#line 7675 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GENERIC_IDENTIFIER_UPPERCASE(santize_name(std::string(start, context.cursor)), context.location); }
#line 9506 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy83:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy158;
	default:	goto yy81;
	}
yy84:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy159;
	default:	goto yy81;
	}
yy85:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy161;
	default:	goto yy81;
	}
yy86:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy162;
	default:	goto yy81;
	}
yy87:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy163;
	default:	goto yy81;
	}
yy88:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy164;
	default:	goto yy81;
	}
yy89:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy166;
	default:	goto yy81;
	}
yy90:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy167;
	default:	goto yy81;
	}
yy91:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy92;
	}
yy92:
#line 7582 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BY (context.location); }
#line 9627 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy93:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy168;
	case 'O':	goto yy169;
	default:	goto yy81;
	}
yy94:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy170;
	default:	goto yy81;
	}
yy95:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy171;
	case 'N':	goto yy172;
	default:	goto yy81;
	}
yy96:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy173;
	default:	goto yy81;
	}
yy97:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy174;
	default:	goto yy81;
	}
yy98:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy175;
	default:	goto yy81;
	}
yy99:
	yych = *++context.cursor;
	switch (yych) {
	case 'B':	goto yy176;
	default:	goto yy81;
	}
yy100:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy177;
	case 'D':	goto yy178;
	case 'U':	goto yy180;
	default:	goto yy81;
	}
yy101:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy181;
	case 'P':	goto yy182;
	case 'T':	goto yy183;
	default:	goto yy81;
	}
yy102:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy184;
	default:	goto yy81;
	}
yy103:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy185;
	default:	goto yy81;
	}
yy104:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy186;
	default:	goto yy81;
	}
yy105:
	yych = *++context.cursor;
	switch (yych) {
	case 'a':	goto yy187;
	default:	goto yy81;
	}
yy106:
	yych = *++context.cursor;
	switch (yych) {
	case '5':	goto yy188;
	default:	goto yy81;
	}
yy107:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy189;
	default:	goto yy81;
	}
yy108:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy190;
	default:	goto yy81;
	}
yy109:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy191;
	case 'S':	goto yy192;
	case 'T':	goto yy193;
	default:	goto yy81;
	}
yy110:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy194;
	default:	goto yy81;
	}
yy111:
	yych = *++context.cursor;
	switch (yych) {
	case 'X':	goto yy195;
	default:	goto yy81;
	}
yy112:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy197;
	default:	goto yy81;
	}
yy113:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy199;
	default:	goto yy81;
	}
yy114:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy200;
	default:	goto yy81;
	}
yy115:
	yych = *++context.cursor;
	switch (yych) {
	case 'm':	goto yy201;
	default:	goto yy81;
	}
yy116:
	yych = *++context.cursor;
	switch (yych) {
	case 'J':	goto yy202;
	default:	goto yy81;
	}
yy117:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy203;
	default:	goto yy81;
	}
yy118:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy119;
	}
yy119:
#line 7630 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OF (context.location); }
#line 9858 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy120:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy204;
	default:	goto yy81;
	}
yy121:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy205;
	default:	goto yy81;
	}
yy122:
	yych = *++context.cursor;
	switch (yych) {
	case 'j':	goto yy206;
	default:	goto yy81;
	}
yy123:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy207;
	default:	goto yy81;
	}
yy124:
	yych = *++context.cursor;
	switch (yych) {
	case 'V':	goto yy208;
	default:	goto yy81;
	}
yy125:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy210;
	default:	goto yy81;
	}
yy126:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy211;
	case 'I':	goto yy212;
	default:	goto yy81;
	}
yy127:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy213;
	default:	goto yy81;
	}
yy128:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy214;
	case 'L':	goto yy215;
	default:	goto yy81;
	}
yy129:
	yych = *++context.cursor;
	switch (yych) {
	case 'Q':	goto yy216;
	case 'T':	goto yy217;
	default:	goto yy81;
	}
yy130:
	yych = *++context.cursor;
	switch (yych) {
	case 'Z':	goto yy219;
	default:	goto yy81;
	}
yy131:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy220;
	default:	goto yy81;
	}
yy132:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy221;
	default:	goto yy81;
	}
yy133:
	yych = *++context.cursor;
	switch (yych) {
	case '1':	goto yy222;
	default:	goto yy81;
	}
yy134:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy223;
	default:	goto yy81;
	}
yy135:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy224;
	default:	goto yy81;
	}
yy136:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy225;
	default:	goto yy81;
	}
yy137:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy226;
	default:	goto yy81;
	}
yy138:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy227;
	default:	goto yy81;
	}
yy139:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy228;
	default:	goto yy81;
	}
yy140:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy229;
	case 'F':	goto yy230;
	default:	goto yy81;
	}
yy141:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy231;
	default:	goto yy81;
	}
yy142:
	yych = *++context.cursor;
	switch (yych) {
	case 'd':	goto yy232;
	case 's':	goto yy233;
	default:	goto yy81;
	}
yy143:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy234;
	default:	goto yy81;
	}
yy144:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy144;
	default:	goto yy146;
	}
yy146:
#line 7676 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GENERIC_IDENTIFIER_LOWERCASE(santize_name(std::string(start, context.cursor)), context.location); }
#line 10080 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy147:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy147;
	default:	goto yy149;
	}
yy149:
#line 7677 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_typefieldreference(santize_name(std::string(start, context.cursor)), context.location); }
#line 10153 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy150:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy150;
	default:	goto yy152;
	}
yy152:
#line 7678 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_valuefieldreference(santize_name(std::string(start, context.cursor)), context.location); }
#line 10226 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy153:
	yych = *++context.cursor;
	switch (yych) {
	case '\n':
	case '\r':	goto yy72;
	case '-':	goto yy235;
	default:	goto yy74;
	}
yy154:
	++context.cursor;
#line 7689 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ELIPSIS (context.location); }
#line 10239 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy156:
	++context.cursor;
#line 7688 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DEFINED_AS (context.location); }
#line 10244 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy158:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy237;
	case 'T':	goto yy238;
	default:	goto yy81;
	}
yy159:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy160;
	}
yy160:
#line 7575 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ALL (context.location); }
#line 10324 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy161:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy239;
	default:	goto yy81;
	}
yy162:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy240;
	default:	goto yy81;
	}
yy163:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy241;
	default:	goto yy81;
	}
yy164:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy165;
	}
yy165:
#line 7579 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BIT (context.location); }
#line 10415 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy166:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy242;
	default:	goto yy81;
	}
yy167:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy243;
	default:	goto yy81;
	}
yy168:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy244;
	default:	goto yy81;
	}
yy169:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy245;
	default:	goto yy81;
	}
yy170:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy246;
	default:	goto yy81;
	}
yy171:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy247;
	default:	goto yy81;
	}
yy172:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy248;
	case 'T':	goto yy249;
	default:	goto yy81;
	}
yy173:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy250;
	default:	goto yy81;
	}
yy174:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy252;
	case 'I':	goto yy253;
	default:	goto yy81;
	}
yy175:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy254;
	default:	goto yy81;
	}
yy176:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy255;
	default:	goto yy81;
	}
yy177:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy256;
	default:	goto yy81;
	}
yy178:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy179;
	}
yy179:
#line 7598 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_END (context.location); }
#line 10562 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy180:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy257;
	default:	goto yy81;
	}
yy181:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy258;
	default:	goto yy81;
	}
yy182:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy259;
	case 'O':	goto yy260;
	default:	goto yy81;
	}
yy183:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy261;
	default:	goto yy81;
	}
yy184:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy262;
	default:	goto yy81;
	}
yy185:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy263;
	default:	goto yy81;
	}
yy186:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy265;
	default:	goto yy81;
	}
yy187:
	yych = *++context.cursor;
	switch (yych) {
	case 'p':	goto yy266;
	default:	goto yy81;
	}
yy188:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy267;
	default:	goto yy81;
	}
yy189:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy268;
	default:	goto yy81;
	}
yy190:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy269;
	case 'O':	goto yy270;
	default:	goto yy81;
	}
yy191:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy271;
	default:	goto yy81;
	}
yy192:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy272;
	default:	goto yy81;
	}
yy193:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy273;
	default:	goto yy81;
	}
yy194:
	yych = *++context.cursor;
	switch (yych) {
	case '6':	goto yy274;
	default:	goto yy81;
	}
yy195:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy196;
	}
yy196:
#line 7621 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_MAX (context.location); }
#line 10727 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy197:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	case 'U':	goto yy275;
	default:	goto yy198;
	}
yy198:
#line 7622 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_MIN (context.location); }
#line 10800 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy199:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy276;
	default:	goto yy81;
	}
yy200:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy277;
	default:	goto yy81;
	}
yy201:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy279;
	default:	goto yy81;
	}
yy202:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy280;
	default:	goto yy81;
	}
yy203:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy281;
	default:	goto yy81;
	}
yy204:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy282;
	default:	goto yy81;
	}
yy205:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy283;
	default:	goto yy81;
	}
yy206:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy284;
	default:	goto yy81;
	}
yy207:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy285;
	default:	goto yy81;
	}
yy208:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy209;
	}
yy209:
#line 7634 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PDV (context.location); }
#line 10927 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy210:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy286;
	default:	goto yy81;
	}
yy211:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy287;
	default:	goto yy81;
	}
yy212:
	yych = *++context.cursor;
	switch (yych) {
	case 'V':	goto yy288;
	default:	goto yy81;
	}
yy213:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy289;
	default:	goto yy81;
	}
yy214:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy290;
	default:	goto yy81;
	}
yy215:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy292;
	default:	goto yy81;
	}
yy216:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy293;
	default:	goto yy81;
	}
yy217:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	case 'T':	goto yy294;
	default:	goto yy218;
	}
yy218:
#line 7643 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SET (context.location); }
#line 11042 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy219:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy295;
	default:	goto yy81;
	}
yy220:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy297;
	default:	goto yy81;
	}
yy221:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy298;
	default:	goto yy81;
	}
yy222:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy299;
	default:	goto yy81;
	}
yy223:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy300;
	default:	goto yy81;
	}
yy224:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy302;
	default:	goto yy81;
	}
yy225:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy304;
	default:	goto yy81;
	}
yy226:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy306;
	default:	goto yy81;
	}
yy227:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy307;
	default:	goto yy81;
	}
yy228:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy308;
	case 'Q':	goto yy309;
	case 'V':	goto yy310;
	default:	goto yy81;
	}
yy229:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy311;
	default:	goto yy81;
	}
yy230:
	yych = *++context.cursor;
	switch (yych) {
	case '8':	goto yy312;
	default:	goto yy81;
	}
yy231:
	yych = *++context.cursor;
	switch (yych) {
	case 'v':	goto yy313;
	default:	goto yy81;
	}
yy232:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy314;
	default:	goto yy81;
	}
yy233:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy315;
	default:	goto yy81;
	}
yy234:
	yych = *++context.cursor;
	switch (yych) {
	case 'H':	goto yy316;
	default:	goto yy81;
	}
yy235:
	++context.cursor;
#line 7667 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return yylex(context); }
#line 11145 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy237:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy318;
	default:	goto yy81;
	}
yy238:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy319;
	default:	goto yy81;
	}
yy239:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy320;
	default:	goto yy81;
	}
yy240:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy321;
	default:	goto yy81;
	}
yy241:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy322;
	default:	goto yy81;
	}
yy242:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy324;
	default:	goto yy81;
	}
yy243:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy325;
	default:	goto yy81;
	}
yy244:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy326;
	default:	goto yy81;
	}
yy245:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy327;
	default:	goto yy81;
	}
yy246:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy328;
	default:	goto yy81;
	}
yy247:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy330;
	default:	goto yy81;
	}
yy248:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy331;
	default:	goto yy81;
	}
yy249:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy332;
	default:	goto yy81;
	}
yy250:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy333;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy251;
	}
yy251:
#line 7590 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DATE (context.location); }
#line 11296 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy252:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy334;
	default:	goto yy81;
	}
yy253:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy335;
	default:	goto yy81;
	}
yy254:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy336;
	default:	goto yy81;
	}
yy255:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy337;
	default:	goto yy81;
	}
yy256:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy338;
	default:	goto yy81;
	}
yy257:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy339;
	default:	goto yy81;
	}
yy258:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy340;
	default:	goto yy81;
	}
yy259:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy341;
	default:	goto yy81;
	}
yy260:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy342;
	default:	goto yy81;
	}
yy261:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy343;
	case 'R':	goto yy344;
	default:	goto yy81;
	}
yy262:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy345;
	default:	goto yy81;
	}
yy263:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy264;
	}
yy264:
#line 7606 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_FROM (context.location); }
#line 11436 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy265:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy347;
	default:	goto yy81;
	}
yy266:
	yych = *++context.cursor;
	switch (yych) {
	case 'h':	goto yy348;
	default:	goto yy81;
	}
yy267:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy349;
	default:	goto yy81;
	}
yy268:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy350;
	default:	goto yy81;
	}
yy269:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy351;
	default:	goto yy81;
	}
yy270:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy352;
	default:	goto yy81;
	}
yy271:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy353;
	default:	goto yy81;
	}
yy272:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy354;
	case 'R':	goto yy355;
	default:	goto yy81;
	}
yy273:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy356;
	case 'R':	goto yy357;
	default:	goto yy81;
	}
yy274:
	yych = *++context.cursor;
	switch (yych) {
	case '4':	goto yy358;
	default:	goto yy81;
	}
yy275:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy359;
	default:	goto yy81;
	}
yy276:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy360;
	default:	goto yy81;
	}
yy277:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy278;
	}
yy278:
#line 7625 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ASN_NULL (context.location); }
#line 11583 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy279:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy361;
	default:	goto yy81;
	}
yy280:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy362;
	default:	goto yy81;
	}
yy281:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy363;
	default:	goto yy81;
	}
yy282:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy365;
	default:	goto yy81;
	}
yy283:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy366;
	default:	goto yy81;
	}
yy284:
	yych = *++context.cursor;
	switch (yych) {
	case 'c':	goto yy367;
	default:	goto yy81;
	}
yy285:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy368;
	default:	goto yy81;
	}
yy286:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy369;
	default:	goto yy81;
	}
yy287:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy370;
	default:	goto yy81;
	}
yy288:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy371;
	default:	goto yy81;
	}
yy289:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy372;
	default:	goto yy81;
	}
yy290:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy291;
	}
yy291:
#line 7639 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_REAL (context.location); }
#line 11722 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy292:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy373;
	default:	goto yy81;
	}
yy293:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy374;
	default:	goto yy81;
	}
yy294:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy375;
	default:	goto yy81;
	}
yy295:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy296;
	}
yy296:
#line 7645 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SIZE (context.location); }
#line 11813 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy297:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy376;
	default:	goto yy81;
	}
yy298:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy377;
	default:	goto yy81;
	}
yy299:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy378;
	default:	goto yy81;
	}
yy300:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy301;
	}
yy301:
#line 7649 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TAGS (context.location); }
#line 11904 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy302:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy379;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy303;
	}
yy303:
#line 7651 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TIME (context.location); }
#line 11977 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy304:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy305;
	}
yy305:
#line 7653 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TRUE (context.location); }
#line 12050 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy306:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy380;
	default:	goto yy81;
	}
yy307:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy381;
	default:	goto yy81;
	}
yy308:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy382;
	default:	goto yy81;
	}
yy309:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy384;
	default:	goto yy81;
	}
yy310:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy385;
	default:	goto yy81;
	}
yy311:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy386;
	default:	goto yy81;
	}
yy312:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy387;
	default:	goto yy81;
	}
yy313:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy388;
	default:	goto yy81;
	}
yy314:
	yych = *++context.cursor;
	switch (yych) {
	case 'o':	goto yy389;
	default:	goto yy81;
	}
yy315:
	yych = *++context.cursor;
	switch (yych) {
	case 'b':	goto yy390;
	default:	goto yy81;
	}
yy316:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy317;
	}
yy317:
#line 7663 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_WITH (context.location); }
#line 12183 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy318:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy391;
	default:	goto yy81;
	}
yy319:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy393;
	default:	goto yy81;
	}
yy320:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy394;
	default:	goto yy81;
	}
yy321:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy395;
	default:	goto yy81;
	}
yy322:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy323;
	}
yy323:
#line 7578 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BEGIN (context.location); }
#line 12280 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy324:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy396;
	default:	goto yy81;
	}
yy325:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy397;
	default:	goto yy81;
	}
yy326:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy398;
	default:	goto yy81;
	}
yy327:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy399;
	default:	goto yy81;
	}
yy328:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy329;
	}
yy329:
#line 7585 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLASS (context.location); }
#line 12377 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy330:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy401;
	default:	goto yy81;
	}
yy331:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy402;
	default:	goto yy81;
	}
yy332:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy403;
	default:	goto yy81;
	}
yy333:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy404;
	default:	goto yy81;
	}
yy334:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy405;
	default:	goto yy81;
	}
yy335:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy406;
	default:	goto yy81;
	}
yy336:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy407;
	default:	goto yy81;
	}
yy337:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy408;
	default:	goto yy81;
	}
yy338:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy409;
	case 'I':	goto yy410;
	default:	goto yy81;
	}
yy339:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy411;
	default:	goto yy81;
	}
yy340:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy412;
	default:	goto yy81;
	}
yy341:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy414;
	default:	goto yy81;
	}
yy342:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy415;
	default:	goto yy81;
	}
yy343:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy416;
	default:	goto yy81;
	}
yy344:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy417;
	default:	goto yy81;
	}
yy345:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy346;
	}
yy346:
#line 7605 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_FALSE (context.location); }
#line 12541 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy347:
	yych = *++context.cursor;
	switch (yych) {
	case 'a':	goto yy418;
	default:	goto yy81;
	}
yy348:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy419;
	default:	goto yy81;
	}
yy349:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy420;
	default:	goto yy81;
	}
yy350:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy421;
	default:	goto yy81;
	}
yy351:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy422;
	case 'E':	goto yy423;
	default:	goto yy81;
	}
yy352:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy424;
	default:	goto yy81;
	}
yy353:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy425;
	default:	goto yy81;
	}
yy354:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy426;
	default:	goto yy81;
	}
yy355:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy427;
	default:	goto yy81;
	}
yy356:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy428;
	default:	goto yy81;
	}
yy357:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy429;
	default:	goto yy81;
	}
yy358:
	yych = *++context.cursor;
	switch (yych) {
	case '6':	goto yy430;
	default:	goto yy81;
	}
yy359:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy431;
	default:	goto yy81;
	}
yy360:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy432;
	default:	goto yy81;
	}
yy361:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy433;
	default:	goto yy81;
	}
yy362:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy434;
	default:	goto yy81;
	}
yy363:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy364;
	}
yy364:
#line 7629 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OCTET (context.location); }
#line 12711 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy365:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy436;
	default:	goto yy81;
	}
yy366:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy437;
	default:	goto yy81;
	}
yy367:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy438;
	default:	goto yy81;
	}
yy368:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy439;
	default:	goto yy81;
	}
yy369:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy440;
	default:	goto yy81;
	}
yy370:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy441;
	default:	goto yy81;
	}
yy371:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy442;
	default:	goto yy81;
	}
yy372:
	yych = *++context.cursor;
	switch (yych) {
	case 'a':	goto yy443;
	default:	goto yy81;
	}
yy373:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy444;
	default:	goto yy81;
	}
yy374:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy445;
	default:	goto yy81;
	}
yy375:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy446;
	default:	goto yy81;
	}
yy376:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy447;
	default:	goto yy81;
	}
yy377:
	yych = *++context.cursor;
	switch (yych) {
	case 'X':	goto yy449;
	default:	goto yy81;
	}
yy378:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy451;
	default:	goto yy81;
	}
yy379:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy452;
	default:	goto yy81;
	}
yy380:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy453;
	default:	goto yy81;
	}
yy381:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy454;
	default:	goto yy81;
	}
yy382:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy383;
	}
yy383:
#line 7655 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UNION (context.location); }
#line 12886 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy384:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy455;
	default:	goto yy81;
	}
yy385:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy457;
	default:	goto yy81;
	}
yy386:
	yych = *++context.cursor;
	switch (yych) {
	case 'm':	goto yy458;
	default:	goto yy81;
	}
yy387:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy459;
	default:	goto yy81;
	}
yy388:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy460;
	default:	goto yy81;
	}
yy389:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy461;
	default:	goto yy81;
	}
yy390:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy462;
	default:	goto yy81;
	}
yy391:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy392;
	}
yy392:
#line 7573 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ABSENT (context.location); }
#line 13001 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy393:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy463;
	default:	goto yy81;
	}
yy394:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy464;
	default:	goto yy81;
	}
yy395:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy465;
	default:	goto yy81;
	}
yy396:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy466;
	default:	goto yy81;
	}
yy397:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy467;
	default:	goto yy81;
	}
yy398:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy469;
	default:	goto yy81;
	}
yy399:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy400;
	}
yy400:
#line 7584 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CHOICE (context.location); }
#line 13110 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy401:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy470;
	default:	goto yy81;
	}
yy402:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy471;
	default:	goto yy81;
	}
yy403:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy472;
	default:	goto yy81;
	}
yy404:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy473;
	default:	goto yy81;
	}
yy405:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy474;
	default:	goto yy81;
	}
yy406:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy476;
	default:	goto yy81;
	}
yy407:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy477;
	default:	goto yy81;
	}
yy408:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy478;
	default:	goto yy81;
	}
yy409:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy479;
	default:	goto yy81;
	}
yy410:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy481;
	default:	goto yy81;
	}
yy411:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy482;
	default:	goto yy81;
	}
yy412:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy413;
	}
yy413:
#line 7600 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXCEPT (context.location); }
#line 13249 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy414:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy483;
	default:	goto yy81;
	}
yy415:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy484;
	default:	goto yy81;
	}
yy416:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy486;
	default:	goto yy81;
	}
yy417:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy487;
	default:	goto yy81;
	}
yy418:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy488;
	default:	goto yy81;
	}
yy419:
	yych = *++context.cursor;
	switch (yych) {
	case 'c':	goto yy489;
	default:	goto yy81;
	}
yy420:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy490;
	default:	goto yy81;
	}
yy421:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy491;
	default:	goto yy81;
	}
yy422:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy492;
	default:	goto yy81;
	}
yy423:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy493;
	default:	goto yy81;
	}
yy424:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy495;
	default:	goto yy81;
	}
yy425:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy497;
	default:	goto yy81;
	}
yy426:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy498;
	default:	goto yy81;
	}
yy427:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy499;
	default:	goto yy81;
	}
yy428:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy500;
	default:	goto yy81;
	}
yy429:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy502;
	default:	goto yy81;
	}
yy430:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy503;
	default:	goto yy81;
	}
yy431:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy504;
	default:	goto yy81;
	}
yy432:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy505;
	default:	goto yy81;
	}
yy433:
	yych = *++context.cursor;
	switch (yych) {
	case 'c':	goto yy506;
	default:	goto yy81;
	}
yy434:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy435;
	}
yy435:
#line 7627 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OBJECT (context.location); }
#line 13442 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy436:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy507;
	default:	goto yy81;
	}
yy437:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy509;
	default:	goto yy81;
	}
yy438:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy510;
	default:	goto yy81;
	}
yy439:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy511;
	default:	goto yy81;
	}
yy440:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy513;
	default:	goto yy81;
	}
yy441:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy514;
	default:	goto yy81;
	}
yy442:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy516;
	default:	goto yy81;
	}
yy443:
	yych = *++context.cursor;
	switch (yych) {
	case 'b':	goto yy518;
	default:	goto yy81;
	}
yy444:
	yych = *++context.cursor;
	switch (yych) {
	case 'V':	goto yy519;
	default:	goto yy81;
	}
yy445:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy520;
	default:	goto yy81;
	}
yy446:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy521;
	default:	goto yy81;
	}
yy447:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy448;
	}
yy448:
#line 7646 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_STRING (context.location); }
#line 13581 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy449:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy450;
	}
yy450:
#line 7647 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SYNTAX (context.location); }
#line 13654 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy451:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy522;
	default:	goto yy81;
	}
yy452:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy523;
	default:	goto yy81;
	}
yy453:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy524;
	default:	goto yy81;
	}
yy454:
	yych = *++context.cursor;
	switch (yych) {
	case 'x':	goto yy525;
	default:	goto yy81;
	}
yy455:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy456;
	}
yy456:
#line 7656 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UNIQUE (context.location); }
#line 13751 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy457:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy526;
	default:	goto yy81;
	}
yy458:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy527;
	default:	goto yy81;
	}
yy459:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy529;
	default:	goto yy81;
	}
yy460:
	yych = *++context.cursor;
	switch (yych) {
	case 's':	goto yy530;
	default:	goto yy81;
	}
yy461:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy531;
	default:	goto yy81;
	}
yy462:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy532;
	default:	goto yy81;
	}
yy463:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy533;
	default:	goto yy81;
	}
yy464:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy534;
	default:	goto yy81;
	}
yy465:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy535;
	default:	goto yy81;
	}
yy466:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy536;
	default:	goto yy81;
	}
yy467:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy468;
	}
yy468:
#line 7581 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BOOLEAN (context.location); }
#line 13884 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy469:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy537;
	default:	goto yy81;
	}
yy470:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy538;
	default:	goto yy81;
	}
yy471:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy539;
	default:	goto yy81;
	}
yy472:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy540;
	default:	goto yy81;
	}
yy473:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy541;
	default:	goto yy81;
	}
yy474:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy475;
	}
yy475:
#line 7592 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DEFAULT (context.location); }
#line 13987 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy476:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy542;
	default:	goto yy81;
	}
yy477:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy543;
	default:	goto yy81;
	}
yy478:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy545;
	default:	goto yy81;
	}
yy479:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy480;
	}
yy480:
#line 7596 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ENCODED (context.location); }
#line 14078 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy481:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy547;
	default:	goto yy81;
	}
yy482:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy548;
	default:	goto yy81;
	}
yy483:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy549;
	default:	goto yy81;
	}
yy484:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy485;
	}
yy485:
#line 7602 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXPORTS (context.location); }
#line 14169 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy486:
	yych = *++context.cursor;
	switch (yych) {
	case 'B':	goto yy551;
	default:	goto yy81;
	}
yy487:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy552;
	default:	goto yy81;
	}
yy488:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy554;
	case 'i':	goto yy555;
	default:	goto yy81;
	}
yy489:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy556;
	default:	goto yy81;
	}
yy490:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy557;
	default:	goto yy81;
	}
yy491:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy558;
	default:	goto yy81;
	}
yy492:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy559;
	default:	goto yy81;
	}
yy493:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy494;
	}
yy494:
#line 7613 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IMPLIED (context.location); }
#line 14285 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy495:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy496;
	}
yy496:
#line 7614 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IMPORTS (context.location); }
#line 14358 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy497:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy561;
	default:	goto yy81;
	}
yy498:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy563;
	default:	goto yy81;
	}
yy499:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy565;
	default:	goto yy81;
	}
yy500:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy501;
	}
yy501:
#line 7618 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INTEGER (context.location); }
#line 14449 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy502:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy566;
	default:	goto yy81;
	}
yy503:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy567;
	default:	goto yy81;
	}
yy504:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy568;
	default:	goto yy81;
	}
yy505:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy569;
	default:	goto yy81;
	}
yy506:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy570;
	default:	goto yy81;
	}
yy507:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy508;
	}
yy508:
#line 7631 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OID_IRI (context.location); }
#line 14552 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy509:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy571;
	default:	goto yy81;
	}
yy510:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy573;
	default:	goto yy81;
	}
yy511:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy512;
	}
yy512:
#line 7633 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PATTERN (context.location); }
#line 14637 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy513:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy574;
	default:	goto yy81;
	}
yy514:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy515;
	}
yy515:
#line 7636 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PRESENT (context.location); }
#line 14716 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy516:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy517;
	}
yy517:
#line 7638 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PRIVATE (context.location); }
#line 14789 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy518:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy575;
	default:	goto yy81;
	}
yy519:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy576;
	default:	goto yy81;
	}
yy520:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy577;
	default:	goto yy81;
	}
yy521:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy579;
	default:	goto yy81;
	}
yy522:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy581;
	default:	goto yy81;
	}
yy523:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy582;
	default:	goto yy81;
	}
yy524:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy583;
	default:	goto yy81;
	}
yy525:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy584;
	default:	goto yy81;
	}
yy526:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy585;
	default:	goto yy81;
	}
yy527:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy528;
	}
yy528:
#line 7659 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UTCTime (context.location); }
#line 14916 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy529:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy586;
	default:	goto yy81;
	}
yy530:
	yych = *++context.cursor;
	switch (yych) {
	case 'a':	goto yy587;
	default:	goto yy81;
	}
yy531:
	yych = *++context.cursor;
	switch (yych) {
	case 'x':	goto yy588;
	default:	goto yy81;
	}
yy532:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy589;
	default:	goto yy81;
	}
yy533:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy590;
	default:	goto yy81;
	}
yy534:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy591;
	default:	goto yy81;
	}
yy535:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy592;
	default:	goto yy81;
	}
yy536:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy594;
	default:	goto yy81;
	}
yy537:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy596;
	default:	goto yy81;
	}
yy538:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy598;
	default:	goto yy81;
	}
yy539:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy600;
	default:	goto yy81;
	}
yy540:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy601;
	default:	goto yy81;
	}
yy541:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy602;
	default:	goto yy81;
	}
yy542:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy604;
	default:	goto yy81;
	}
yy543:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy544;
	}
yy544:
#line 7594 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DURATION (context.location); }
#line 15073 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy545:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy546;
	}
yy546:
#line 7595 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EMBEDDED (context.location); }
#line 15146 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy547:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy605;
	default:	goto yy81;
	}
yy548:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy606;
	default:	goto yy81;
	}
yy549:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy550;
	}
yy550:
#line 7601 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXPLICIT (context.location); }
#line 15231 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy551:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy607;
	default:	goto yy81;
	}
yy552:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy553;
	}
yy553:
#line 7604 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXTERNAL (context.location); }
#line 15310 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy554:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy608;
	default:	goto yy81;
	}
yy555:
	yych = *++context.cursor;
	switch (yych) {
	case 'z':	goto yy609;
	default:	goto yy81;
	}
yy556:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy610;
	default:	goto yy81;
	}
yy557:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy611;
	default:	goto yy81;
	}
yy558:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy613;
	default:	goto yy81;
	}
yy559:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy560;
	}
yy560:
#line 7612 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IMPLICIT (context.location); }
#line 15413 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy561:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy562;
	}
yy562:
#line 7615 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INCLUDES (context.location); }
#line 15486 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy563:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy564;
	}
yy564:
#line 7616 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INSTANCE (context.location); }
#line 15559 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy565:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy614;
	default:	goto yy81;
	}
yy566:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy615;
	default:	goto yy81;
	}
yy567:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy616;
	default:	goto yy81;
	}
yy568:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy617;
	default:	goto yy81;
	}
yy569:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy618;
	default:	goto yy81;
	}
yy570:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy619;
	default:	goto yy81;
	}
yy571:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy572;
	}
yy572:
#line 7632 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPTIONAL (context.location); }
#line 15668 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy573:
	yych = *++context.cursor;
	switch (yych) {
	case 's':	goto yy620;
	default:	goto yy81;
	}
yy574:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy621;
	default:	goto yy81;
	}
yy575:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy622;
	default:	goto yy81;
	}
yy576:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy623;
	default:	goto yy81;
	}
yy577:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy578;
	}
yy578:
#line 7642 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SEQUENCE (context.location); }
#line 15765 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy579:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy580;
	}
yy580:
#line 7644 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SETTINGS (context.location); }
#line 15838 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy581:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy624;
	default:	goto yy81;
	}
yy582:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy626;
	default:	goto yy81;
	}
yy583:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy627;
	default:	goto yy81;
	}
yy584:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy628;
	default:	goto yy81;
	}
yy585:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy629;
	default:	goto yy81;
	}
yy586:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy631;
	default:	goto yy81;
	}
yy587:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy632;
	default:	goto yy81;
	}
yy588:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy633;
	default:	goto yy81;
	}
yy589:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy634;
	default:	goto yy81;
	}
yy590:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy635;
	default:	goto yy81;
	}
yy591:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy636;
	default:	goto yy81;
	}
yy592:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy593;
	}
yy593:
#line 7577 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_AUTOMATIC (context.location); }
#line 15977 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy594:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy595;
	}
yy595:
#line 7580 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BMPString (context.location); }
#line 16050 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy596:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy597;
	}
yy597:
#line 7583 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CHARACTER (context.location); }
#line 16123 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy598:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	case 'S':	goto yy637;
	default:	goto yy599;
	}
yy599:
#line 7586 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COMPONENT (context.location); }
#line 16196 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy600:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy639;
	default:	goto yy81;
	}
yy601:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy640;
	default:	goto yy81;
	}
yy602:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy603;
	}
yy603:
#line 7591 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DATE_TIME (context.location); }
#line 16281 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy604:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy642;
	default:	goto yy81;
	}
yy605:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy643;
	default:	goto yy81;
	}
yy606:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy644;
	default:	goto yy81;
	}
yy607:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy646;
	default:	goto yy81;
	}
yy608:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy647;
	default:	goto yy81;
	}
yy609:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy648;
	default:	goto yy81;
	}
yy610:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy649;
	default:	goto yy81;
	}
yy611:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy612;
	}
yy612:
#line 7610 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IA5String (context.location); }
#line 16396 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy613:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy650;
	default:	goto yy81;
	}
yy614:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy652;
	default:	goto yy81;
	}
yy615:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy653;
	default:	goto yy81;
	}
yy616:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy654;
	default:	goto yy81;
	}
yy617:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy655;
	default:	goto yy81;
	}
yy618:
	yych = *++context.cursor;
	switch (yych) {
	case 'B':	goto yy656;
	default:	goto yy81;
	}
yy619:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy657;
	default:	goto yy81;
	}
yy620:
	yych = *++context.cursor;
	switch (yych) {
	case 'c':	goto yy658;
	default:	goto yy81;
	}
yy621:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy659;
	default:	goto yy81;
	}
yy622:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy660;
	default:	goto yy81;
	}
yy623:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy661;
	default:	goto yy81;
	}
yy624:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy625;
	}
yy625:
#line 7648 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_T61String (context.location); }
#line 16535 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy626:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy662;
	default:	goto yy81;
	}
yy627:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy663;
	default:	goto yy81;
	}
yy628:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy664;
	default:	goto yy81;
	}
yy629:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy630;
	}
yy630:
#line 7657 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UNIVERSAL (context.location); }
#line 16626 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy631:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy665;
	default:	goto yy81;
	}
yy632:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy667;
	default:	goto yy81;
	}
yy633:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy668;
	default:	goto yy81;
	}
yy634:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy669;
	default:	goto yy81;
	}
yy635:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy670;
	default:	goto yy81;
	}
yy636:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy671;
	default:	goto yy81;
	}
yy637:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy638;
	}
yy638:
#line 7587 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COMPONENTS (context.location); }
#line 16735 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy639:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy673;
	default:	goto yy81;
	}
yy640:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy641;
	}
yy641:
#line 7589 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CONTAINING (context.location); }
#line 16814 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy642:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy675;
	default:	goto yy81;
	}
yy643:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy677;
	default:	goto yy81;
	}
yy644:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy645;
	}
yy645:
#line 7599 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ENUMERATED (context.location); }
#line 16899 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy646:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy678;
	default:	goto yy81;
	}
yy647:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy679;
	default:	goto yy81;
	}
yy648:
	yych = *++context.cursor;
	switch (yych) {
	case 'd':	goto yy680;
	default:	goto yy81;
	}
yy649:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy681;
	default:	goto yy81;
	}
yy650:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy651;
	}
yy651:
#line 7611 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IDENTIFIER (context.location); }
#line 16996 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy652:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy682;
	default:	goto yy81;
	}
yy653:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy683;
	default:	goto yy81;
	}
yy654:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy684;
	default:	goto yy81;
	}
yy655:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy685;
	default:	goto yy81;
	}
yy656:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy686;
	default:	goto yy81;
	}
yy657:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy687;
	default:	goto yy81;
	}
yy658:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy688;
	default:	goto yy81;
	}
yy659:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy689;
	default:	goto yy81;
	}
yy660:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy690;
	default:	goto yy81;
	}
yy661:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy691;
	default:	goto yy81;
	}
yy662:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy692;
	default:	goto yy81;
	}
yy663:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy694;
	default:	goto yy81;
	}
yy664:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy695;
	default:	goto yy81;
	}
yy665:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy666;
	}
yy666:
#line 7660 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UTF8String (context.location); }
#line 17147 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy667:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy696;
	default:	goto yy81;
	}
yy668:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy697;
	default:	goto yy81;
	}
yy669:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy698;
	default:	goto yy81;
	}
yy670:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy699;
	default:	goto yy81;
	}
yy671:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy672;
	}
yy672:
#line 7576 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_APPLICATION (context.location); }
#line 17244 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy673:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy674;
	}
yy674:
#line 7588 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CONSTRAINED (context.location); }
#line 17317 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy675:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy676;
	}
yy676:
#line 7593 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DEFINITIONS (context.location); }
#line 17390 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy677:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy700;
	default:	goto yy81;
	}
yy678:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy701;
	default:	goto yy81;
	}
yy679:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy702;
	default:	goto yy81;
	}
yy680:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy703;
	default:	goto yy81;
	}
yy681:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy704;
	default:	goto yy81;
	}
yy682:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy705;
	default:	goto yy81;
	}
yy683:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy707;
	default:	goto yy81;
	}
yy684:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy709;
	default:	goto yy81;
	}
yy685:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy711;
	default:	goto yy81;
	}
yy686:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy712;
	default:	goto yy81;
	}
yy687:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy714;
	default:	goto yy81;
	}
yy688:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy715;
	default:	goto yy81;
	}
yy689:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy716;
	default:	goto yy81;
	}
yy690:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy717;
	default:	goto yy81;
	}
yy691:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy718;
	default:	goto yy81;
	}
yy692:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy693;
	}
yy693:
#line 7652 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TIME_OF_DAY (context.location); }
#line 17553 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy694:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy720;
	default:	goto yy81;
	}
yy695:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy721;
	default:	goto yy81;
	}
yy696:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy722;
	default:	goto yy81;
	}
yy697:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy723;
	default:	goto yy81;
	}
yy698:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy724;
	default:	goto yy81;
	}
yy699:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy725;
	default:	goto yy81;
	}
yy700:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy726;
	default:	goto yy81;
	}
yy701:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy727;
	default:	goto yy81;
	}
yy702:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy729;
	default:	goto yy81;
	}
yy703:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy731;
	default:	goto yy81;
	}
yy704:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy732;
	default:	goto yy81;
	}
yy705:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy706;
	}
yy706:
#line 7617 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INSTRUCTIONS (context.location); }
#line 17692 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy707:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy708;
	}
yy708:
#line 7619 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INTERSECTION (context.location); }
#line 17765 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy709:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy710;
	}
yy710:
#line 7620 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ISO646String (context.location); }
#line 17838 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy711:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy734;
	default:	goto yy81;
	}
yy712:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy713;
	}
yy713:
#line 7624 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_NOT_A_NUMBER (context.location); }
#line 17917 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy714:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy735;
	default:	goto yy81;
	}
yy715:
	yych = *++context.cursor;
	switch (yych) {
	case 'p':	goto yy737;
	default:	goto yy81;
	}
yy716:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy738;
	default:	goto yy81;
	}
yy717:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy740;
	default:	goto yy81;
	}
yy718:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy741;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy719;
	}
yy719:
#line 7640 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_RELATIVE_OID (context.location); }
#line 18014 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy720:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy742;
	default:	goto yy81;
	}
yy721:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy743;
	default:	goto yy81;
	}
yy722:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy745;
	default:	goto yy81;
	}
yy723:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy746;
	default:	goto yy81;
	}
yy724:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy747;
	default:	goto yy81;
	}
yy725:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy749;
	default:	goto yy81;
	}
yy726:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy750;
	default:	goto yy81;
	}
yy727:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy728;
	}
yy728:
#line 7603 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXTENSIBILITY (context.location); }
#line 18129 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy729:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy730;
	}
yy730:
#line 7608 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GeneralString (context.location); }
#line 18202 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy731:
	yych = *++context.cursor;
	switch (yych) {
	case 'm':	goto yy751;
	default:	goto yy81;
	}
yy732:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy733;
	}
yy733:
#line 7609 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GraphicString (context.location); }
#line 18281 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy734:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy752;
	default:	goto yy81;
	}
yy735:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy736;
	}
yy736:
#line 7626 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_NumericString (context.location); }
#line 18360 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy737:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy754;
	default:	goto yy81;
	}
yy738:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy739;
	}
yy739:
#line 7635 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PLUS_INFINITY (context.location); }
#line 18439 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy740:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy755;
	default:	goto yy81;
	}
yy741:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy756;
	default:	goto yy81;
	}
yy742:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy757;
	default:	goto yy81;
	}
yy743:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy744;
	}
yy744:
#line 7650 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TeletexString (context.location); }
#line 18530 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy745:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy758;
	default:	goto yy81;
	}
yy746:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy759;
	default:	goto yy81;
	}
yy747:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy748;
	}
yy748:
#line 7662 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_VisibleString (context.location); }
#line 18615 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy749:
	yych = *++context.cursor;
	switch (yych) {
	case 'X':	goto yy761;
	default:	goto yy81;
	}
yy750:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy763;
	default:	goto yy81;
	}
yy751:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy764;
	default:	goto yy81;
	}
yy752:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy753;
	}
yy753:
#line 7623 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_MINUS_INFINITY (context.location); }
#line 18706 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy754:
	yych = *++context.cursor;
	switch (yych) {
	case 'o':	goto yy766;
	default:	goto yy81;
	}
yy755:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy767;
	default:	goto yy81;
	}
yy756:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy769;
	default:	goto yy81;
	}
yy757:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy770;
	default:	goto yy81;
	}
yy758:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy772;
	default:	goto yy81;
	}
yy759:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy760;
	}
yy760:
#line 7661 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_VideotexString (context.location); }
#line 18809 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy761:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy762;
	}
yy762:
#line 7574 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ABSTRACT_SYNTAX (context.location); }
#line 18882 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy763:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy774;
	default:	goto yy81;
	}
yy764:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy765;
	}
yy765:
#line 7607 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GeneralizedTime (context.location); }
#line 18961 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy766:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy776;
	default:	goto yy81;
	}
yy767:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy768;
	}
yy768:
#line 7637 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PrintableString (context.location); }
#line 19040 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy769:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy778;
	default:	goto yy81;
	}
yy770:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy771;
	}
yy771:
#line 7654 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TYPE_IDENTIFIER (context.location); }
#line 19119 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy772:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy773;
	}
yy773:
#line 7658 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UniversalString (context.location); }
#line 19192 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy774:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy775;
	}
yy775:
#line 7597 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ENCODING_CONTROL (context.location); }
#line 19265 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy776:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy777;
	}
yy777:
#line 7628 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ObjectDescriptor (context.location); }
#line 19338 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy778:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy80;
	default:	goto yy779;
	}
yy779:
#line 7641 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_RELATIVE_OID_IRI (context.location); }
#line 19411 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
}
#line 7707 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"

    }
}
