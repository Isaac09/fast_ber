/* Generated by re2c 1.1.1 */
#line 1 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
// A Bison parser, made by GNU Bison 3.0.4.

// Skeleton implementation for Bison LALR(1) parsers in C++

// Copyright (C) 2002-2015 Free Software Foundation, Inc.

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// As a special exception, you may create a larger work that contains
// part or all of the Bison parser skeleton and distribute that work
// under terms of your choice, so long as that work isn't itself a
// parser generator using the skeleton or a modified version thereof
// as a parser skeleton.  Alternatively, if you modify or redistribute
// the parser skeleton itself, you may (at your option) remove this
// special exception, which will cause the skeleton and the resulting
// Bison output files to be licensed under the GNU General Public
// License without this special exception.

// This special exception was added by the Free Software Foundation in
// version 2.2 of Bison.


// First part of user declarations.

#line 37 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:404

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

// //                    "%code requires" blocks.
#line 10 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:408

    #include "fast_ber/compiler/CompilerTypes.hpp"

#line 52 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:408

# include <cassert>
# include <cstdlib> // std::abort
# include <iostream>
# include <stdexcept>
# include <string>
# include <vector>
#include <typeinfo>
#ifndef YYASSERT
# include <cassert>
# define YYASSERT assert
#endif


#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif


namespace yy {
#line 127 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:408

  template <class T, class S = std::vector<T> >
  class stack
  {
  public:
    // Hide our reversed order.
    typedef typename S::reverse_iterator iterator;
    typedef typename S::const_reverse_iterator const_iterator;

    stack ()
      : seq_ ()
    {
      seq_.reserve (200);
    }

    stack (unsigned int n)
      : seq_ (n)
    {}

    inline
    T&
    operator[] (unsigned int i)
    {
      return seq_[seq_.size () - 1 - i];
    }

    inline
    const T&
    operator[] (unsigned int i) const
    {
      return seq_[seq_.size () - 1 - i];
    }

    /// Steal the contents of \a t.
    ///
    /// Close to move-semantics.
    inline
    void
    push (T& t)
    {
      seq_.push_back (T());
      operator[](0).move (t);
    }

    inline
    void
    pop (unsigned int n = 1)
    {
      for (; n; --n)
        seq_.pop_back ();
    }

    void
    clear ()
    {
      seq_.clear ();
    }

    inline
    typename S::size_type
    size () const
    {
      return seq_.size ();
    }

    inline
    const_iterator
    begin () const
    {
      return seq_.rbegin ();
    }

    inline
    const_iterator
    end () const
    {
      return seq_.rend ();
    }

  private:
    stack (const stack&);
    stack& operator= (const stack&);
    /// The wrapped container.
    S seq_;
  };

  /// Present a slice of the top of a stack.
  template <class T, class S = stack<T> >
  class slice
  {
  public:
    slice (const S& stack, unsigned int range)
      : stack_ (stack)
      , range_ (range)
    {}

    inline
    const T&
    operator [] (unsigned int i) const
    {
      return stack_[range_ - i];
    }

  private:
    const S& stack_;
    unsigned int range_;
  };

  /// Abstract a position.
  class position
  {
  public:
    /// Construct a position.
    explicit position (std::string* f = YY_NULLPTR,
                       unsigned int l = 1u,
                       unsigned int c = 1u)
      : filename (f)
      , line (l)
      , column (c)
    {
    }


    /// Initialization.
    void initialize (std::string* fn = YY_NULLPTR,
                     unsigned int l = 1u,
                     unsigned int c = 1u)
    {
      filename = fn;
      line = l;
      column = c;
    }

    /** \name Line and Column related manipulators
     ** \{ */
    /// (line related) Advance to the COUNT next lines.
    void lines (int count = 1)
    {
      if (count)
        {
          column = 1u;
          line = add_ (line, count, 1);
        }
    }

    /// (column related) Advance to the COUNT next columns.
    void columns (int count = 1)
    {
      column = add_ (column, count, 1);
    }
    /** \} */

    /// File name to which this position refers.
    std::string* filename;
    /// Current line number.
    unsigned int line;
    /// Current column number.
    unsigned int column;

  private:
    /// Compute max(min, lhs+rhs) (provided min <= lhs).
    static unsigned int add_ (unsigned int lhs, int rhs, unsigned int min)
    {
      return (0 < rhs || -static_cast<unsigned int>(rhs) < lhs
              ? rhs + lhs
              : min);
    }
  };

  /// Add \a width columns, in place.
  inline position&
  operator+= (position& res, int width)
  {
    res.columns (width);
    return res;
  }

  /// Add \a width columns.
  inline position
  operator+ (position res, int width)
  {
    return res += width;
  }

  /// Subtract \a width columns, in place.
  inline position&
  operator-= (position& res, int width)
  {
    return res += -width;
  }

  /// Subtract \a width columns.
  inline position
  operator- (position res, int width)
  {
    return res -= width;
  }

  /// Compare two position objects.
  inline bool
  operator== (const position& pos1, const position& pos2)
  {
    return (pos1.line == pos2.line
            && pos1.column == pos2.column
            && (pos1.filename == pos2.filename
                || (pos1.filename && pos2.filename
                    && *pos1.filename == *pos2.filename)));
  }

  /// Compare two position objects.
  inline bool
  operator!= (const position& pos1, const position& pos2)
  {
    return !(pos1 == pos2);
  }

  /** \brief Intercept output stream redirection.
   ** \param ostr the destination output stream
   ** \param pos a reference to the position to redirect
   */
  template <typename YYChar>
  inline std::basic_ostream<YYChar>&
  operator<< (std::basic_ostream<YYChar>& ostr, const position& pos)
  {
    if (pos.filename)
      ostr << *pos.filename << ':';
    return ostr << pos.line << '.' << pos.column;
  }

  /// Abstract a location.
  class location
  {
  public:

    /// Construct a location from \a b to \a e.
    location (const position& b, const position& e)
      : begin (b)
      , end (e)
    {
    }

    /// Construct a 0-width location in \a p.
    explicit location (const position& p = position ())
      : begin (p)
      , end (p)
    {
    }

    /// Construct a 0-width location in \a f, \a l, \a c.
    explicit location (std::string* f,
                       unsigned int l = 1u,
                       unsigned int c = 1u)
      : begin (f, l, c)
      , end (f, l, c)
    {
    }


    /// Initialization.
    void initialize (std::string* f = YY_NULLPTR,
                     unsigned int l = 1u,
                     unsigned int c = 1u)
    {
      begin.initialize (f, l, c);
      end = begin;
    }

    /** \name Line and Column related manipulators
     ** \{ */
  public:
    /// Reset initial location to final location.
    void step ()
    {
      begin = end;
    }

    /// Extend the current location to the COUNT next columns.
    void columns (int count = 1)
    {
      end += count;
    }

    /// Extend the current location to the COUNT next lines.
    void lines (int count = 1)
    {
      end.lines (count);
    }
    /** \} */


  public:
    /// Beginning of the located region.
    position begin;
    /// End of the located region.
    position end;
  };

  /// Join two locations, in place.
  inline location& operator+= (location& res, const location& end)
  {
    res.end = end.end;
    return res;
  }

  /// Join two locations.
  inline location operator+ (location res, const location& end)
  {
    return res += end;
  }

  /// Add \a width columns to the end position, in place.
  inline location& operator+= (location& res, int width)
  {
    res.columns (width);
    return res;
  }

  /// Add \a width columns to the end position.
  inline location operator+ (location res, int width)
  {
    return res += width;
  }

  /// Subtract \a width columns to the end position, in place.
  inline location& operator-= (location& res, int width)
  {
    return res += -width;
  }

  /// Subtract \a width columns to the end position.
  inline location operator- (location res, int width)
  {
    return res -= width;
  }

  /// Compare two location objects.
  inline bool
  operator== (const location& loc1, const location& loc2)
  {
    return loc1.begin == loc2.begin && loc1.end == loc2.end;
  }

  /// Compare two location objects.
  inline bool
  operator!= (const location& loc1, const location& loc2)
  {
    return !(loc1 == loc2);
  }

  /** \brief Intercept output stream redirection.
   ** \param ostr the destination output stream
   ** \param loc a reference to the location to redirect
   **
   ** Avoid duplicate information.
   */
  template <typename YYChar>
  inline std::basic_ostream<YYChar>&
  operator<< (std::basic_ostream<YYChar>& ostr, const location& loc)
  {
    unsigned int end_col = 0 < loc.end.column ? loc.end.column - 1 : 0;
    ostr << loc.begin;
    if (loc.end.filename
        && (!loc.begin.filename
            || *loc.begin.filename != *loc.end.filename))
      ostr << '-' << loc.end.filename << ':' << loc.end.line << '.' << end_col;
    else if (loc.begin.line < loc.end.line)
      ostr << '-' << loc.end.line << '.' << end_col;
    else if (loc.begin.column < end_col)
      ostr << '-' << end_col;
    return ostr;
  }


  /// A char[S] buffer to store and retrieve objects.
  ///
  /// Sort of a variant, but does not keep track of the nature
  /// of the stored data, since that knowledge is available
  /// via the current state.
  template <size_t S>
  struct variant
  {
    /// Type of *this.
    typedef variant<S> self_type;

    /// Empty construction.
    variant ()
      : yytypeid_ (YY_NULLPTR)
    {}

    /// Construct and fill.
    template <typename T>
    variant (const T& t)
      : yytypeid_ (&typeid (T))
    {
      YYASSERT (sizeof (T) <= S);
      new (yyas_<T> ()) T (t);
    }

    /// Destruction, allowed only if empty.
    ~variant ()
    {
      YYASSERT (!yytypeid_);
    }

    /// Instantiate an empty \a T in here.
    template <typename T>
    T&
    build ()
    {
      YYASSERT (!yytypeid_);
      YYASSERT (sizeof (T) <= S);
      yytypeid_ = & typeid (T);
      return *new (yyas_<T> ()) T;
    }

    /// Instantiate a \a T in here from \a t.
    template <typename T>
    T&
    build (const T& t)
    {
      YYASSERT (!yytypeid_);
      YYASSERT (sizeof (T) <= S);
      yytypeid_ = & typeid (T);
      return *new (yyas_<T> ()) T (t);
    }

    /// Accessor to a built \a T.
    template <typename T>
    T&
    as ()
    {
      YYASSERT (*yytypeid_ == typeid (T));
      YYASSERT (sizeof (T) <= S);
      return *yyas_<T> ();
    }

    /// Const accessor to a built \a T (for %printer).
    template <typename T>
    const T&
    as () const
    {
      YYASSERT (*yytypeid_ == typeid (T));
      YYASSERT (sizeof (T) <= S);
      return *yyas_<T> ();
    }

    /// Swap the content with \a other, of same type.
    ///
    /// Both variants must be built beforehand, because swapping the actual
    /// data requires reading it (with as()), and this is not possible on
    /// unconstructed variants: it would require some dynamic testing, which
    /// should not be the variant's responsability.
    /// Swapping between built and (possibly) non-built is done with
    /// variant::move ().
    template <typename T>
    void
    swap (self_type& other)
    {
      YYASSERT (yytypeid_);
      YYASSERT (*yytypeid_ == *other.yytypeid_);
      std::swap (as<T> (), other.as<T> ());
    }

    /// Move the content of \a other to this.
    ///
    /// Destroys \a other.
    template <typename T>
    void
    move (self_type& other)
    {
      build<T> ();
      swap<T> (other);
      other.destroy<T> ();
    }

    /// Copy the content of \a other to this.
    template <typename T>
    void
    copy (const self_type& other)
    {
      build<T> (other.as<T> ());
    }

    /// Destroy the stored \a T.
    template <typename T>
    void
    destroy ()
    {
      as<T> ().~T ();
      yytypeid_ = YY_NULLPTR;
    }

  private:
    /// Prohibit blind copies.
    self_type& operator=(const self_type&);
    variant (const self_type&);

    /// Accessor to raw memory as \a T.
    template <typename T>
    T*
    yyas_ ()
    {
      void *yyp = yybuffer_.yyraw;
      return static_cast<T*> (yyp);
     }

    /// Const accessor to raw memory as \a T.
    template <typename T>
    const T*
    yyas_ () const
    {
      const void *yyp = yybuffer_.yyraw;
      return static_cast<const T*> (yyp);
     }

    union
    {
      /// Strongest alignment constraints.
      long double yyalign_me;
      /// A buffer large enough to store any of the semantic values.
      char yyraw[S];
    } yybuffer_;

    /// Whether the content is built: if defined, the name of the stored type.
    const std::type_info *yytypeid_;
  };


  /// A Bison parser.
  class asn1_parser
  {
  public:
#ifndef YYSTYPE
    /// An auxiliary type to compute the largest semantic type.
    union union_type
    {
      // ObjectClassAssignment
      // ObjectSetAssignment
      // ParameterizedAssignment
      // ParameterizedTypeAssignment
      // ParameterizedValueAssignment
      // ParameterizedValueSetTypeAssignment
      // ParameterizedObjectClassAssignment
      // ParameterizedObjectAssignment
      // Assignment
      // TypeAssignment
      // ValueAssignment
      // ValueSetTypeAssignment
      char dummy1[sizeof(Assignment)];

      // BitStringType
      char dummy2[sizeof(BitStringType)];

      // BooleanType
      char dummy3[sizeof(BooleanType)];

      // BuiltinType
      char dummy4[sizeof(BuiltinType)];

      // CharacterStringType
      char dummy5[sizeof(CharacterStringType)];

      // ChoiceType
      char dummy6[sizeof(ChoiceType)];

      // Class
      char dummy7[sizeof(Class)];

      // ComponentType
      char dummy8[sizeof(ComponentType)];

      // ComponentTypeLists
      // RootComponentTypeList
      // ComponentTypeList
      char dummy9[sizeof(ComponentTypeList)];

      // DateTimeType
      char dummy10[sizeof(DateTimeType)];

      // DateType
      char dummy11[sizeof(DateType)];

      // DefinedType
      // ParameterizedType
      char dummy12[sizeof(DefinedType)];

      // DefinedValue
      char dummy13[sizeof(DefinedValue)];

      // DurationType
      char dummy14[sizeof(DurationType)];

      // EmbeddedPDVType
      char dummy15[sizeof(EmbeddedPDVType)];

      // EnumeratedType
      // Enumerations
      // Enumeration
      char dummy16[sizeof(EnumeratedType)];

      // EnumerationItem
      char dummy17[sizeof(EnumerationValue)];

      // ExternalType
      char dummy18[sizeof(ExternalType)];

      // IRIType
      char dummy19[sizeof(IRIType)];

      // SymbolsFromModule
      char dummy20[sizeof(Import)];

      // InstanceOfType
      char dummy21[sizeof(InstanceOfType)];

      // IntegerType
      char dummy22[sizeof(IntegerType)];

      // ModuleBody
      char dummy23[sizeof(Module)];

      // NamedNumber
      char dummy24[sizeof(NamedNumber)];

      // NamedType
      char dummy25[sizeof(NamedType)];

      // NullType
      char dummy26[sizeof(NullType)];

      // ObjectClassFieldType
      char dummy27[sizeof(ObjectClassFieldType)];

      // ObjIdComponents
      // NameForm
      // NumberForm
      // NameAndNumberForm
      char dummy28[sizeof(ObjectIdComponentValue)];

      // ObjectIdentifierType
      char dummy29[sizeof(ObjectIdentifierType)];

      // OctetStringType
      char dummy30[sizeof(OctetStringType)];

      // PrefixedType
      char dummy31[sizeof(PrefixedType)];

      // RealType
      char dummy32[sizeof(RealType)];

      // RelativeIRIType
      char dummy33[sizeof(RelativeIRIType)];

      // RelativeOIDType
      char dummy34[sizeof(RelativeOIDType)];

      // SequenceOfType
      char dummy35[sizeof(SequenceOfType)];

      // SequenceType
      char dummy36[sizeof(SequenceType)];

      // SetOfType
      char dummy37[sizeof(SetOfType)];

      // SetType
      char dummy38[sizeof(SetType)];

      // Tag
      char dummy39[sizeof(Tag)];

      // TaggedType
      char dummy40[sizeof(TaggedType)];

      // TagDefault
      char dummy41[sizeof(TaggingMode)];

      // TimeOfDayType
      char dummy42[sizeof(TimeOfDayType)];

      // TimeType
      char dummy43[sizeof(TimeType)];

      // ActualParameter
      // Type
      // ConstrainedType
      // TypeWithConstraint
      char dummy44[sizeof(Type)];

      // ValueWithoutTypeIdentifier
      // Value
      // SingleValue
      char dummy45[sizeof(Value)];

      // realnumber
      char dummy46[sizeof(double)];

      // ClassNumber
      char dummy47[sizeof(int)];

      // number
      // SignedNumber
      char dummy48[sizeof(long long)];

      // ParameterList
      // ParameterSeries
      char dummy49[sizeof(std::set<std::string>)];

      // bstring
      // xmlbstring
      // hstring
      // xmlhstring
      // cstring
      // xmlcstring
      // simplestring
      // xmltstring
      // objectreference
      // typefieldreference
      // valuefieldreference
      // GENERIC_IDENTIFIER_UPPERCASE
      // GENERIC_IDENTIFIER_LOWERCASE
      // Parameter
      // SimpleDefinedType
      // ModuleIdentifier
      // GlobalModuleReference
      // Symbol
      // Reference
      // typereference
      // identifier
      // valuereference
      // modulereference
      // objectclassreference
      // word
      char dummy50[sizeof(std::string)];

      // AssignmentList
      char dummy51[sizeof(std::vector<Assignment>)];

      // Exports
      char dummy52[sizeof(std::vector<Export>)];

      // Imports
      // SymbolsImported
      // SymbolsFromModuleList
      char dummy53[sizeof(std::vector<Import>)];

      // NamedNumberList
      char dummy54[sizeof(std::vector<NamedNumber>)];

      // AlternativeTypeLists
      // RootAlternativeTypeList
      // AlternativeTypeList
      char dummy55[sizeof(std::vector<NamedType>)];

      // ObjectIdentifierValue
      // ObjIdComponentsList
      char dummy56[sizeof(std::vector<ObjectIdComponentValue>)];

      // ActualParameterList
      char dummy57[sizeof(std::vector<Type>)];

      // SequenceOfValues
      char dummy58[sizeof(std::vector<Value>)];

      // SymbolList
      char dummy59[sizeof(std::vector<std::string>)];
};

    /// Symbol semantic values.
    typedef variant<sizeof(union_type)> semantic_type;
#else
    typedef YYSTYPE semantic_type;
#endif
    /// Symbol locations.
    typedef location location_type;

    /// Syntax errors thrown from user actions.
    struct syntax_error : std::runtime_error
    {
      syntax_error (const location_type& l, const std::string& m);
      location_type location;
    };

    /// Tokens.
    struct token
    {
      enum yytokentype
      {
        END_OF_FILE = 0,
        comment = 258,
        number = 259,
        realnumber = 260,
        bstring = 261,
        xmlbstring = 262,
        hstring = 263,
        xmlhstring = 264,
        cstring = 265,
        xmlcstring = 266,
        simplestring = 267,
        xmltstring = 268,
        psname = 269,
        encodingreference = 270,
        integerUnicodeLabel = 271,
        tstring = 274,
        objectreference = 276,
        objectsetreference = 277,
        typefieldreference = 278,
        valuefieldreference = 279,
        valuesetfieldreference = 280,
        objectfieldreference = 281,
        objectsetfieldreference = 282,
        ABSENT = 283,
        ABSTRACT_SYNTAX = 284,
        ALL = 285,
        ANY = 286,
        APPLICATION = 287,
        ASN_NULL = 288,
        AUTOMATIC = 289,
        BEGIN = 290,
        BIT = 291,
        BMPString = 292,
        BOOLEAN = 293,
        BY = 294,
        CHARACTER = 295,
        CHOICE = 296,
        CLASS = 297,
        COMPONENT = 298,
        COMPONENTS = 299,
        CONSTRAINED = 300,
        CONTAINING = 301,
        DATE = 302,
        DATE_TIME = 303,
        DEFAULT = 304,
        DEFINITIONS = 305,
        DURATION = 306,
        EMBEDDED = 307,
        ENCODED = 308,
        ENCODING_CONTROL = 309,
        END = 310,
        ENUMERATED = 311,
        EXCEPT = 312,
        EXPLICIT = 313,
        EXPORTS = 314,
        EXTENSIBILITY = 315,
        EXTERNAL = 316,
        FALSE = 317,
        FROM = 318,
        GeneralizedTime = 319,
        GeneralString = 320,
        GraphicString = 321,
        IA5String = 322,
        IDENTIFIER = 323,
        IMPLICIT = 324,
        IMPLIED = 325,
        IMPORTS = 326,
        INCLUDES = 327,
        INSTANCE = 328,
        INSTRUCTIONS = 329,
        INTEGER = 330,
        INTERSECTION = 331,
        ISO646String = 332,
        MAX = 333,
        MIN = 334,
        MINUS_INFINITY = 335,
        NOT_A_NUMBER = 336,
        NumericString = 337,
        OBJECT = 338,
        ObjectDescriptor = 339,
        OCTET = 340,
        OF = 341,
        OID_IRI = 342,
        OPTIONAL = 343,
        PATTERN = 344,
        PDV = 345,
        PLUS_INFINITY = 346,
        PRESENT = 347,
        PrintableString = 348,
        PRIVATE = 349,
        REAL = 350,
        RELATIVE_OID = 351,
        RELATIVE_OID_IRI = 352,
        SEQUENCE = 353,
        SET = 354,
        SETTINGS = 355,
        SIZE = 356,
        STRING = 357,
        SYNTAX = 358,
        T61String = 359,
        TAGS = 360,
        TeletexString = 361,
        TIME = 362,
        TIME_OF_DAY = 363,
        TRUE = 364,
        TYPE_IDENTIFIER = 365,
        UNION = 366,
        UNIQUE = 367,
        UNIVERSAL = 368,
        UniversalString = 369,
        UTCTime = 370,
        UTF8String = 371,
        VideotexString = 372,
        VisibleString = 373,
        WITH = 374,
        DEFINED_AS = 375,
        ELIPSIS = 376,
        RANGE = 377,
        OPEN_BRACE = 378,
        CLOSE_BRACE = 379,
        OPEN_PARENTHESIS = 380,
        CLOSE_PARENTHESIS = 381,
        OPEN_SQUARE_BRACKET = 382,
        CLOSE_SQUARE_BRACKET = 383,
        LESS_THAN = 384,
        GREATER_THAN = 385,
        EXCLAMATION_MARK = 386,
        QUOTATION_MARK = 387,
        AMPERSAND = 388,
        APOSTROPHE = 389,
        ASTERISK = 390,
        COMMA = 391,
        FULL_STOP = 392,
        HYPHEN_MINUS = 393,
        SOLIDUS = 394,
        COLON = 395,
        SEMICOLON = 396,
        EQUALS_SIGN = 397,
        AT = 398,
        VERTICAL_LINE = 399,
        ACCENT = 400,
        PLUS = 401,
        STAR = 402,
        GENERIC_IDENTIFIER_UPPERCASE = 403,
        GENERIC_IDENTIFIER_LOWERCASE = 404,
        GENERIC_INTEGER = 405,
        xmlasn1typename = 406
      };
    };

    /// (External) token type, as returned by yylex.
    typedef token::yytokentype token_type;

    /// Symbol type: an internal symbol number.
    typedef int symbol_number_type;

    /// The symbol type number to denote an empty symbol.
    enum { empty_symbol = -2 };

    /// Internal symbol number for tokens (subsumed by symbol_number_type).
    typedef unsigned char token_number_type;

    /// A complete symbol.
    ///
    /// Expects its Base type to provide access to the symbol type
    /// via type_get().
    ///
    /// Provide access to semantic value and location.
    template <typename Base>
    struct basic_symbol : Base
    {
      /// Alias to Base.
      typedef Base super_type;

      /// Default constructor.
      basic_symbol ();

      /// Copy constructor.
      basic_symbol (const basic_symbol& other);

      /// Constructor for valueless symbols, and symbols from each type.

  basic_symbol (typename Base::kind_type t, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Assignment v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const BitStringType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const BooleanType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const BuiltinType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const CharacterStringType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ChoiceType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Class v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ComponentType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ComponentTypeList v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const DateTimeType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const DateType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const DefinedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const DefinedValue v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const DurationType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const EmbeddedPDVType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const EnumeratedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const EnumerationValue v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ExternalType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const IRIType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Import v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const InstanceOfType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const IntegerType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Module v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const NamedNumber v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const NamedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const NullType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ObjectClassFieldType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ObjectIdComponentValue v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ObjectIdentifierType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const OctetStringType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const PrefixedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const RealType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const RelativeIRIType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const RelativeOIDType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const SequenceOfType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const SequenceType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const SetOfType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const SetType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Tag v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const TaggedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const TaggingMode v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const TimeOfDayType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const TimeType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Type v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Value v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const double v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const int v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const long long v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::set<std::string> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::string v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<Assignment> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<Export> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<Import> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<NamedNumber> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<NamedType> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<ObjectIdComponentValue> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<Type> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<Value> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<std::string> v, const location_type& l);


      /// Constructor for symbols with semantic value.
      basic_symbol (typename Base::kind_type t,
                    const semantic_type& v,
                    const location_type& l);

      /// Destroy the symbol.
      ~basic_symbol ();

      /// Destroy contents, and record that is empty.
      void clear ();

      /// Whether empty.
      bool empty () const;

      /// Destructive move, \a s is emptied into this.
      void move (basic_symbol& s);

      /// The semantic value.
      semantic_type value;

      /// The location.
      location_type location;

    private:
      /// Assignment operator.
      basic_symbol& operator= (const basic_symbol& other);
    };

    /// Type access provider for token (enum) based symbols.
    struct by_type
    {
      /// Default constructor.
      by_type ();

      /// Copy constructor.
      by_type (const by_type& other);

      /// The symbol type as needed by the constructor.
      typedef token_type kind_type;

      /// Constructor from (external) token numbers.
      by_type (kind_type t);

      /// Record that this symbol is empty.
      void clear ();

      /// Steal the symbol type from \a that.
      void move (by_type& that);

      /// The (internal) type number (corresponding to \a type).
      /// \a empty when empty.
      symbol_number_type type_get () const;

      /// The token.
      token_type token () const;

      /// The symbol type.
      /// \a empty_symbol when empty.
      /// An int, not token_number_type, to be able to store empty_symbol.
      int type;
    };

    /// "External" symbols: returned by the scanner.
    typedef basic_symbol<by_type> symbol_type;

    // Symbol constructors declarations.
    static inline
    symbol_type
    make_END_OF_FILE (const location_type& l);

    static inline
    symbol_type
    make_comment (const location_type& l);

    static inline
    symbol_type
    make_number (const long long& v, const location_type& l);

    static inline
    symbol_type
    make_realnumber (const double& v, const location_type& l);

    static inline
    symbol_type
    make_bstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_xmlbstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_hstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_xmlhstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_cstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_xmlcstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_simplestring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_xmltstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_psname (const location_type& l);

    static inline
    symbol_type
    make_encodingreference (const location_type& l);

    static inline
    symbol_type
    make_integerUnicodeLabel (const location_type& l);

    static inline
    symbol_type
    make_tstring (const location_type& l);

    static inline
    symbol_type
    make_objectreference (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_objectsetreference (const location_type& l);

    static inline
    symbol_type
    make_typefieldreference (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_valuefieldreference (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_valuesetfieldreference (const location_type& l);

    static inline
    symbol_type
    make_objectfieldreference (const location_type& l);

    static inline
    symbol_type
    make_objectsetfieldreference (const location_type& l);

    static inline
    symbol_type
    make_ABSENT (const location_type& l);

    static inline
    symbol_type
    make_ABSTRACT_SYNTAX (const location_type& l);

    static inline
    symbol_type
    make_ALL (const location_type& l);

    static inline
    symbol_type
    make_ANY (const location_type& l);

    static inline
    symbol_type
    make_APPLICATION (const location_type& l);

    static inline
    symbol_type
    make_ASN_NULL (const location_type& l);

    static inline
    symbol_type
    make_AUTOMATIC (const location_type& l);

    static inline
    symbol_type
    make_BEGIN (const location_type& l);

    static inline
    symbol_type
    make_BIT (const location_type& l);

    static inline
    symbol_type
    make_BMPString (const location_type& l);

    static inline
    symbol_type
    make_BOOLEAN (const location_type& l);

    static inline
    symbol_type
    make_BY (const location_type& l);

    static inline
    symbol_type
    make_CHARACTER (const location_type& l);

    static inline
    symbol_type
    make_CHOICE (const location_type& l);

    static inline
    symbol_type
    make_CLASS (const location_type& l);

    static inline
    symbol_type
    make_COMPONENT (const location_type& l);

    static inline
    symbol_type
    make_COMPONENTS (const location_type& l);

    static inline
    symbol_type
    make_CONSTRAINED (const location_type& l);

    static inline
    symbol_type
    make_CONTAINING (const location_type& l);

    static inline
    symbol_type
    make_DATE (const location_type& l);

    static inline
    symbol_type
    make_DATE_TIME (const location_type& l);

    static inline
    symbol_type
    make_DEFAULT (const location_type& l);

    static inline
    symbol_type
    make_DEFINITIONS (const location_type& l);

    static inline
    symbol_type
    make_DURATION (const location_type& l);

    static inline
    symbol_type
    make_EMBEDDED (const location_type& l);

    static inline
    symbol_type
    make_ENCODED (const location_type& l);

    static inline
    symbol_type
    make_ENCODING_CONTROL (const location_type& l);

    static inline
    symbol_type
    make_END (const location_type& l);

    static inline
    symbol_type
    make_ENUMERATED (const location_type& l);

    static inline
    symbol_type
    make_EXCEPT (const location_type& l);

    static inline
    symbol_type
    make_EXPLICIT (const location_type& l);

    static inline
    symbol_type
    make_EXPORTS (const location_type& l);

    static inline
    symbol_type
    make_EXTENSIBILITY (const location_type& l);

    static inline
    symbol_type
    make_EXTERNAL (const location_type& l);

    static inline
    symbol_type
    make_FALSE (const location_type& l);

    static inline
    symbol_type
    make_FROM (const location_type& l);

    static inline
    symbol_type
    make_GeneralizedTime (const location_type& l);

    static inline
    symbol_type
    make_GeneralString (const location_type& l);

    static inline
    symbol_type
    make_GraphicString (const location_type& l);

    static inline
    symbol_type
    make_IA5String (const location_type& l);

    static inline
    symbol_type
    make_IDENTIFIER (const location_type& l);

    static inline
    symbol_type
    make_IMPLICIT (const location_type& l);

    static inline
    symbol_type
    make_IMPLIED (const location_type& l);

    static inline
    symbol_type
    make_IMPORTS (const location_type& l);

    static inline
    symbol_type
    make_INCLUDES (const location_type& l);

    static inline
    symbol_type
    make_INSTANCE (const location_type& l);

    static inline
    symbol_type
    make_INSTRUCTIONS (const location_type& l);

    static inline
    symbol_type
    make_INTEGER (const location_type& l);

    static inline
    symbol_type
    make_INTERSECTION (const location_type& l);

    static inline
    symbol_type
    make_ISO646String (const location_type& l);

    static inline
    symbol_type
    make_MAX (const location_type& l);

    static inline
    symbol_type
    make_MIN (const location_type& l);

    static inline
    symbol_type
    make_MINUS_INFINITY (const location_type& l);

    static inline
    symbol_type
    make_NOT_A_NUMBER (const location_type& l);

    static inline
    symbol_type
    make_NumericString (const location_type& l);

    static inline
    symbol_type
    make_OBJECT (const location_type& l);

    static inline
    symbol_type
    make_ObjectDescriptor (const location_type& l);

    static inline
    symbol_type
    make_OCTET (const location_type& l);

    static inline
    symbol_type
    make_OF (const location_type& l);

    static inline
    symbol_type
    make_OID_IRI (const location_type& l);

    static inline
    symbol_type
    make_OPTIONAL (const location_type& l);

    static inline
    symbol_type
    make_PATTERN (const location_type& l);

    static inline
    symbol_type
    make_PDV (const location_type& l);

    static inline
    symbol_type
    make_PLUS_INFINITY (const location_type& l);

    static inline
    symbol_type
    make_PRESENT (const location_type& l);

    static inline
    symbol_type
    make_PrintableString (const location_type& l);

    static inline
    symbol_type
    make_PRIVATE (const location_type& l);

    static inline
    symbol_type
    make_REAL (const location_type& l);

    static inline
    symbol_type
    make_RELATIVE_OID (const location_type& l);

    static inline
    symbol_type
    make_RELATIVE_OID_IRI (const location_type& l);

    static inline
    symbol_type
    make_SEQUENCE (const location_type& l);

    static inline
    symbol_type
    make_SET (const location_type& l);

    static inline
    symbol_type
    make_SETTINGS (const location_type& l);

    static inline
    symbol_type
    make_SIZE (const location_type& l);

    static inline
    symbol_type
    make_STRING (const location_type& l);

    static inline
    symbol_type
    make_SYNTAX (const location_type& l);

    static inline
    symbol_type
    make_T61String (const location_type& l);

    static inline
    symbol_type
    make_TAGS (const location_type& l);

    static inline
    symbol_type
    make_TeletexString (const location_type& l);

    static inline
    symbol_type
    make_TIME (const location_type& l);

    static inline
    symbol_type
    make_TIME_OF_DAY (const location_type& l);

    static inline
    symbol_type
    make_TRUE (const location_type& l);

    static inline
    symbol_type
    make_TYPE_IDENTIFIER (const location_type& l);

    static inline
    symbol_type
    make_UNION (const location_type& l);

    static inline
    symbol_type
    make_UNIQUE (const location_type& l);

    static inline
    symbol_type
    make_UNIVERSAL (const location_type& l);

    static inline
    symbol_type
    make_UniversalString (const location_type& l);

    static inline
    symbol_type
    make_UTCTime (const location_type& l);

    static inline
    symbol_type
    make_UTF8String (const location_type& l);

    static inline
    symbol_type
    make_VideotexString (const location_type& l);

    static inline
    symbol_type
    make_VisibleString (const location_type& l);

    static inline
    symbol_type
    make_WITH (const location_type& l);

    static inline
    symbol_type
    make_DEFINED_AS (const location_type& l);

    static inline
    symbol_type
    make_ELIPSIS (const location_type& l);

    static inline
    symbol_type
    make_RANGE (const location_type& l);

    static inline
    symbol_type
    make_OPEN_BRACE (const location_type& l);

    static inline
    symbol_type
    make_CLOSE_BRACE (const location_type& l);

    static inline
    symbol_type
    make_OPEN_PARENTHESIS (const location_type& l);

    static inline
    symbol_type
    make_CLOSE_PARENTHESIS (const location_type& l);

    static inline
    symbol_type
    make_OPEN_SQUARE_BRACKET (const location_type& l);

    static inline
    symbol_type
    make_CLOSE_SQUARE_BRACKET (const location_type& l);

    static inline
    symbol_type
    make_LESS_THAN (const location_type& l);

    static inline
    symbol_type
    make_GREATER_THAN (const location_type& l);

    static inline
    symbol_type
    make_EXCLAMATION_MARK (const location_type& l);

    static inline
    symbol_type
    make_QUOTATION_MARK (const location_type& l);

    static inline
    symbol_type
    make_AMPERSAND (const location_type& l);

    static inline
    symbol_type
    make_APOSTROPHE (const location_type& l);

    static inline
    symbol_type
    make_ASTERISK (const location_type& l);

    static inline
    symbol_type
    make_COMMA (const location_type& l);

    static inline
    symbol_type
    make_FULL_STOP (const location_type& l);

    static inline
    symbol_type
    make_HYPHEN_MINUS (const location_type& l);

    static inline
    symbol_type
    make_SOLIDUS (const location_type& l);

    static inline
    symbol_type
    make_COLON (const location_type& l);

    static inline
    symbol_type
    make_SEMICOLON (const location_type& l);

    static inline
    symbol_type
    make_EQUALS_SIGN (const location_type& l);

    static inline
    symbol_type
    make_AT (const location_type& l);

    static inline
    symbol_type
    make_VERTICAL_LINE (const location_type& l);

    static inline
    symbol_type
    make_ACCENT (const location_type& l);

    static inline
    symbol_type
    make_PLUS (const location_type& l);

    static inline
    symbol_type
    make_STAR (const location_type& l);

    static inline
    symbol_type
    make_GENERIC_IDENTIFIER_UPPERCASE (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_GENERIC_IDENTIFIER_LOWERCASE (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_GENERIC_INTEGER (const location_type& l);

    static inline
    symbol_type
    make_xmlasn1typename (const location_type& l);


    /// Build a parser object.
    asn1_parser (Context& context_yyarg);
    virtual ~asn1_parser ();

    /// Parse.
    /// \returns  0 iff parsing succeeded.
    virtual int parse ();

#if YYDEBUG
    /// The current debugging stream.
    std::ostream& debug_stream () const YY_ATTRIBUTE_PURE;
    /// Set the current debugging stream.
    void set_debug_stream (std::ostream &);

    /// Type for debugging levels.
    typedef int debug_level_type;
    /// The current debugging level.
    debug_level_type debug_level () const YY_ATTRIBUTE_PURE;
    /// Set the current debugging level.
    void set_debug_level (debug_level_type l);
#endif

    /// Report a syntax error.
    /// \param loc    where the syntax error is found.
    /// \param msg    a description of the syntax error.
    virtual void error (const location_type& loc, const std::string& msg);

    /// Report a syntax error.
    void error (const syntax_error& err);

  private:
    /// This class is not copyable.
    asn1_parser (const asn1_parser&);
    asn1_parser& operator= (const asn1_parser&);

    /// State numbers.
    typedef int state_type;

    /// Generate an error message.
    /// \param yystate   the state where the error occurred.
    /// \param yyla      the lookahead token.
    virtual std::string yysyntax_error_ (state_type yystate,
                                         const symbol_type& yyla) const;

    /// Compute post-reduction state.
    /// \param yystate   the current state
    /// \param yysym     the nonterminal to push on the stack
    state_type yy_lr_goto_state_ (state_type yystate, int yysym);

    /// Whether the given \c yypact_ value indicates a defaulted state.
    /// \param yyvalue   the value to check
    static bool yy_pact_value_is_default_ (int yyvalue);

    /// Whether the given \c yytable_ value indicates a syntax error.
    /// \param yyvalue   the value to check
    static bool yy_table_value_is_error_ (int yyvalue);

    static const short int yypact_ninf_;
    static const short int yytable_ninf_;

    /// Convert a scanner token number \a t to a symbol number.
    static token_number_type yytranslate_ (token_type t);

    // Tables.
  // YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
  // STATE-NUM.
  static const short int yypact_[];

  // YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
  // Performed when YYTABLE does not specify something else to do.  Zero
  // means the default is an error.
  static const unsigned short int yydefact_[];

  // YYPGOTO[NTERM-NUM].
  static const short int yypgoto_[];

  // YYDEFGOTO[NTERM-NUM].
  static const short int yydefgoto_[];

  // YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
  // positive, shift that token.  If negative, reduce the rule whose
  // number is the opposite.  If YYTABLE_NINF, syntax error.
  static const short int yytable_[];

  static const short int yycheck_[];

  // YYSTOS[STATE-NUM] -- The (internal number of the) accessing
  // symbol of state STATE-NUM.
  static const unsigned short int yystos_[];

  // YYR1[YYN] -- Symbol number of symbol that rule YYN derives.
  static const unsigned short int yyr1_[];

  // YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.
  static const unsigned char yyr2_[];


    /// Convert the symbol name \a n to a form suitable for a diagnostic.
    static std::string yytnamerr_ (const char *n);


    /// For a symbol, its name in clear.
    static const char* const yytname_[];
#if YYDEBUG
  // YYRLINE[YYN] -- Source line where rule number YYN was defined.
  static const unsigned short int yyrline_[];
    /// Report on the debug stream that the rule \a r is going to be reduced.
    virtual void yy_reduce_print_ (int r);
    /// Print the state stack on the debug stream.
    virtual void yystack_print_ ();

    // Debugging.
    int yydebug_;
    std::ostream* yycdebug_;

    /// \brief Display a symbol type, value and location.
    /// \param yyo    The output stream.
    /// \param yysym  The symbol.
    template <typename Base>
    void yy_print_ (std::ostream& yyo, const basic_symbol<Base>& yysym) const;
#endif

    /// \brief Reclaim the memory associated to a symbol.
    /// \param yymsg     Why this token is reclaimed.
    ///                  If null, print nothing.
    /// \param yysym     The symbol.
    template <typename Base>
    void yy_destroy_ (const char* yymsg, basic_symbol<Base>& yysym) const;

  private:
    /// Type access provider for state based symbols.
    struct by_state
    {
      /// Default constructor.
      by_state ();

      /// The symbol type as needed by the constructor.
      typedef state_type kind_type;

      /// Constructor.
      by_state (kind_type s);

      /// Copy constructor.
      by_state (const by_state& other);

      /// Record that this symbol is empty.
      void clear ();

      /// Steal the symbol type from \a that.
      void move (by_state& that);

      /// The (internal) type number (corresponding to \a state).
      /// \a empty_symbol when empty.
      symbol_number_type type_get () const;

      /// The state number used to denote an empty symbol.
      enum { empty_state = -1 };

      /// The state.
      /// \a empty when empty.
      state_type state;
    };

    /// "Internal" symbol: element of the stack.
    struct stack_symbol_type : basic_symbol<by_state>
    {
      /// Superclass.
      typedef basic_symbol<by_state> super_type;
      /// Construct an empty symbol.
      stack_symbol_type ();
      /// Steal the contents from \a sym to build this.
      stack_symbol_type (state_type s, symbol_type& sym);
      /// Assignment, needed by push_back.
      stack_symbol_type& operator= (const stack_symbol_type& that);
    };

    /// Stack type.
    typedef stack<stack_symbol_type> stack_type;

    /// The stack.
    stack_type yystack_;

    /// Push a new state on the stack.
    /// \param m    a debug message to display
    ///             if null, no trace is output.
    /// \param s    the symbol
    /// \warning the contents of \a s.value is stolen.
    void yypush_ (const char* m, stack_symbol_type& s);

    /// Push a new look ahead token on the state on the stack.
    /// \param m    a debug message to display
    ///             if null, no trace is output.
    /// \param s    the state
    /// \param sym  the symbol (for its value and location).
    /// \warning the contents of \a s.value is stolen.
    void yypush_ (const char* m, state_type s, symbol_type& sym);

    /// Pop \a n symbols the three stacks.
    void yypop_ (unsigned int n = 1);

    /// Constants.
    enum
    {
      yyeof_ = 0,
      yylast_ = 3705,     ///< Last index in yytable_.
      yynnts_ = 227,  ///< Number of nonterminal symbols.
      yyfinal_ = 6, ///< Termination state number.
      yyterror_ = 1,
      yyerrcode_ = 256,
      yyntokens_ = 152  ///< Number of tokens.
    };


    // User arguments.
    Context& context;
  };

  // Symbol number corresponding to token number t.
  inline
  asn1_parser::token_number_type
  asn1_parser::yytranslate_ (token_type t)
  {
    static
    const token_number_type
    translate_table[] =
    {
     0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151
    };
    const unsigned int user_token_number_max_ = 406;
    const token_number_type undef_token_ = 2;

    if (static_cast<int>(t) <= yyeof_)
      return yyeof_;
    else if (static_cast<unsigned int> (t) <= user_token_number_max_)
      return translate_table[t];
    else
      return undef_token_;
  }

  inline
  asn1_parser::syntax_error::syntax_error (const location_type& l, const std::string& m)
    : std::runtime_error (m)
    , location (l)
  {}

  // basic_symbol.
  template <typename Base>
  inline
  asn1_parser::basic_symbol<Base>::basic_symbol ()
    : value ()
  {}

  template <typename Base>
  inline
  asn1_parser::basic_symbol<Base>::basic_symbol (const basic_symbol& other)
    : Base (other)
    , value ()
    , location (other.location)
  {
      switch (other.type_get ())
    {
      case 159: // ObjectClassAssignment
      case 195: // ObjectSetAssignment
      case 199: // ParameterizedAssignment
      case 200: // ParameterizedTypeAssignment
      case 201: // ParameterizedValueAssignment
      case 202: // ParameterizedValueSetTypeAssignment
      case 203: // ParameterizedObjectClassAssignment
      case 204: // ParameterizedObjectAssignment
      case 249: // Assignment
      case 258: // TypeAssignment
      case 259: // ValueAssignment
      case 260: // ValueSetTypeAssignment
        value.copy< Assignment > (other.value);
        break;

      case 281: // BitStringType
        value.copy< BitStringType > (other.value);
        break;

      case 270: // BooleanType
        value.copy< BooleanType > (other.value);
        break;

      case 262: // BuiltinType
        value.copy< BuiltinType > (other.value);
        break;

      case 327: // CharacterStringType
        value.copy< CharacterStringType > (other.value);
        break;

      case 294: // ChoiceType
        value.copy< ChoiceType > (other.value);
        break;

      case 304: // Class
        value.copy< Class > (other.value);
        break;

      case 290: // ComponentType
        value.copy< ComponentType > (other.value);
        break;

      case 287: // ComponentTypeLists
      case 288: // RootComponentTypeList
      case 289: // ComponentTypeList
        value.copy< ComponentTypeList > (other.value);
        break;

      case 325: // DateTimeType
        value.copy< DateTimeType > (other.value);
        break;

      case 323: // DateType
        value.copy< DateType > (other.value);
        break;

      case 250: // DefinedType
      case 252: // ParameterizedType
        value.copy< DefinedType > (other.value);
        break;

      case 251: // DefinedValue
        value.copy< DefinedValue > (other.value);
        break;

      case 326: // DurationType
        value.copy< DurationType > (other.value);
        break;

      case 319: // EmbeddedPDVType
        value.copy< EmbeddedPDVType > (other.value);
        break;

      case 276: // EnumeratedType
      case 277: // Enumerations
      case 278: // Enumeration
        value.copy< EnumeratedType > (other.value);
        break;

      case 279: // EnumerationItem
        value.copy< EnumerationValue > (other.value);
        break;

      case 320: // ExternalType
        value.copy< ExternalType > (other.value);
        break;

      case 313: // IRIType
        value.copy< IRIType > (other.value);
        break;

      case 242: // SymbolsFromModule
        value.copy< Import > (other.value);
        break;

      case 212: // InstanceOfType
        value.copy< InstanceOfType > (other.value);
        break;

      case 272: // IntegerType
        value.copy< IntegerType > (other.value);
        break;

      case 236: // ModuleBody
        value.copy< Module > (other.value);
        break;

      case 274: // NamedNumber
        value.copy< NamedNumber > (other.value);
        break;

      case 263: // NamedType
        value.copy< NamedType > (other.value);
        break;

      case 285: // NullType
        value.copy< NullType > (other.value);
        break;

      case 198: // ObjectClassFieldType
        value.copy< ObjectClassFieldType > (other.value);
        break;

      case 308: // ObjIdComponents
      case 309: // NameForm
      case 310: // NumberForm
      case 311: // NameAndNumberForm
        value.copy< ObjectIdComponentValue > (other.value);
        break;

      case 305: // ObjectIdentifierType
        value.copy< ObjectIdentifierType > (other.value);
        break;

      case 284: // OctetStringType
        value.copy< OctetStringType > (other.value);
        break;

      case 299: // PrefixedType
        value.copy< PrefixedType > (other.value);
        break;

      case 280: // RealType
        value.copy< RealType > (other.value);
        break;

      case 318: // RelativeIRIType
        value.copy< RelativeIRIType > (other.value);
        break;

      case 312: // RelativeOIDType
        value.copy< RelativeOIDType > (other.value);
        break;

      case 291: // SequenceOfType
        value.copy< SequenceOfType > (other.value);
        break;

      case 286: // SequenceType
        value.copy< SequenceType > (other.value);
        break;

      case 293: // SetOfType
        value.copy< SetOfType > (other.value);
        break;

      case 292: // SetType
        value.copy< SetType > (other.value);
        break;

      case 301: // Tag
        value.copy< Tag > (other.value);
        break;

      case 300: // TaggedType
        value.copy< TaggedType > (other.value);
        break;

      case 234: // TagDefault
        value.copy< TaggingMode > (other.value);
        break;

      case 324: // TimeOfDayType
        value.copy< TimeOfDayType > (other.value);
        break;

      case 321: // TimeType
        value.copy< TimeType > (other.value);
        break;

      case 255: // ActualParameter
      case 261: // Type
      case 330: // ConstrainedType
      case 331: // TypeWithConstraint
        value.copy< Type > (other.value);
        break;

      case 264: // ValueWithoutTypeIdentifier
      case 265: // Value
      case 348: // SingleValue
        value.copy< Value > (other.value);
        break;

      case 5: // realnumber
        value.copy< double > (other.value);
        break;

      case 303: // ClassNumber
        value.copy< int > (other.value);
        break;

      case 4: // number
      case 275: // SignedNumber
        value.copy< long long > (other.value);
        break;

      case 205: // ParameterList
      case 206: // ParameterSeries
        value.copy< std::set<std::string> > (other.value);
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 21: // objectreference
      case 23: // typefieldreference
      case 24: // valuefieldreference
      case 148: // GENERIC_IDENTIFIER_UPPERCASE
      case 149: // GENERIC_IDENTIFIER_LOWERCASE
      case 207: // Parameter
      case 213: // SimpleDefinedType
      case 225: // ModuleIdentifier
      case 243: // GlobalModuleReference
      case 246: // Symbol
      case 247: // Reference
      case 373: // typereference
      case 374: // identifier
      case 375: // valuereference
      case 376: // modulereference
      case 377: // objectclassreference
      case 378: // word
        value.copy< std::string > (other.value);
        break;

      case 248: // AssignmentList
        value.copy< std::vector<Assignment> > (other.value);
        break;

      case 237: // Exports
        value.copy< std::vector<Export> > (other.value);
        break;

      case 239: // Imports
      case 240: // SymbolsImported
      case 241: // SymbolsFromModuleList
        value.copy< std::vector<Import> > (other.value);
        break;

      case 273: // NamedNumberList
        value.copy< std::vector<NamedNumber> > (other.value);
        break;

      case 295: // AlternativeTypeLists
      case 296: // RootAlternativeTypeList
      case 297: // AlternativeTypeList
        value.copy< std::vector<NamedType> > (other.value);
        break;

      case 306: // ObjectIdentifierValue
      case 307: // ObjIdComponentsList
        value.copy< std::vector<ObjectIdComponentValue> > (other.value);
        break;

      case 254: // ActualParameterList
        value.copy< std::vector<Type> > (other.value);
        break;

      case 269: // SequenceOfValues
        value.copy< std::vector<Value> > (other.value);
        break;

      case 245: // SymbolList
        value.copy< std::vector<std::string> > (other.value);
        break;

      default:
        break;
    }

  }


  template <typename Base>
  inline
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const semantic_type& v, const location_type& l)
    : Base (t)
    , value ()
    , location (l)
  {
    (void) v;
      switch (this->type_get ())
    {
      case 159: // ObjectClassAssignment
      case 195: // ObjectSetAssignment
      case 199: // ParameterizedAssignment
      case 200: // ParameterizedTypeAssignment
      case 201: // ParameterizedValueAssignment
      case 202: // ParameterizedValueSetTypeAssignment
      case 203: // ParameterizedObjectClassAssignment
      case 204: // ParameterizedObjectAssignment
      case 249: // Assignment
      case 258: // TypeAssignment
      case 259: // ValueAssignment
      case 260: // ValueSetTypeAssignment
        value.copy< Assignment > (v);
        break;

      case 281: // BitStringType
        value.copy< BitStringType > (v);
        break;

      case 270: // BooleanType
        value.copy< BooleanType > (v);
        break;

      case 262: // BuiltinType
        value.copy< BuiltinType > (v);
        break;

      case 327: // CharacterStringType
        value.copy< CharacterStringType > (v);
        break;

      case 294: // ChoiceType
        value.copy< ChoiceType > (v);
        break;

      case 304: // Class
        value.copy< Class > (v);
        break;

      case 290: // ComponentType
        value.copy< ComponentType > (v);
        break;

      case 287: // ComponentTypeLists
      case 288: // RootComponentTypeList
      case 289: // ComponentTypeList
        value.copy< ComponentTypeList > (v);
        break;

      case 325: // DateTimeType
        value.copy< DateTimeType > (v);
        break;

      case 323: // DateType
        value.copy< DateType > (v);
        break;

      case 250: // DefinedType
      case 252: // ParameterizedType
        value.copy< DefinedType > (v);
        break;

      case 251: // DefinedValue
        value.copy< DefinedValue > (v);
        break;

      case 326: // DurationType
        value.copy< DurationType > (v);
        break;

      case 319: // EmbeddedPDVType
        value.copy< EmbeddedPDVType > (v);
        break;

      case 276: // EnumeratedType
      case 277: // Enumerations
      case 278: // Enumeration
        value.copy< EnumeratedType > (v);
        break;

      case 279: // EnumerationItem
        value.copy< EnumerationValue > (v);
        break;

      case 320: // ExternalType
        value.copy< ExternalType > (v);
        break;

      case 313: // IRIType
        value.copy< IRIType > (v);
        break;

      case 242: // SymbolsFromModule
        value.copy< Import > (v);
        break;

      case 212: // InstanceOfType
        value.copy< InstanceOfType > (v);
        break;

      case 272: // IntegerType
        value.copy< IntegerType > (v);
        break;

      case 236: // ModuleBody
        value.copy< Module > (v);
        break;

      case 274: // NamedNumber
        value.copy< NamedNumber > (v);
        break;

      case 263: // NamedType
        value.copy< NamedType > (v);
        break;

      case 285: // NullType
        value.copy< NullType > (v);
        break;

      case 198: // ObjectClassFieldType
        value.copy< ObjectClassFieldType > (v);
        break;

      case 308: // ObjIdComponents
      case 309: // NameForm
      case 310: // NumberForm
      case 311: // NameAndNumberForm
        value.copy< ObjectIdComponentValue > (v);
        break;

      case 305: // ObjectIdentifierType
        value.copy< ObjectIdentifierType > (v);
        break;

      case 284: // OctetStringType
        value.copy< OctetStringType > (v);
        break;

      case 299: // PrefixedType
        value.copy< PrefixedType > (v);
        break;

      case 280: // RealType
        value.copy< RealType > (v);
        break;

      case 318: // RelativeIRIType
        value.copy< RelativeIRIType > (v);
        break;

      case 312: // RelativeOIDType
        value.copy< RelativeOIDType > (v);
        break;

      case 291: // SequenceOfType
        value.copy< SequenceOfType > (v);
        break;

      case 286: // SequenceType
        value.copy< SequenceType > (v);
        break;

      case 293: // SetOfType
        value.copy< SetOfType > (v);
        break;

      case 292: // SetType
        value.copy< SetType > (v);
        break;

      case 301: // Tag
        value.copy< Tag > (v);
        break;

      case 300: // TaggedType
        value.copy< TaggedType > (v);
        break;

      case 234: // TagDefault
        value.copy< TaggingMode > (v);
        break;

      case 324: // TimeOfDayType
        value.copy< TimeOfDayType > (v);
        break;

      case 321: // TimeType
        value.copy< TimeType > (v);
        break;

      case 255: // ActualParameter
      case 261: // Type
      case 330: // ConstrainedType
      case 331: // TypeWithConstraint
        value.copy< Type > (v);
        break;

      case 264: // ValueWithoutTypeIdentifier
      case 265: // Value
      case 348: // SingleValue
        value.copy< Value > (v);
        break;

      case 5: // realnumber
        value.copy< double > (v);
        break;

      case 303: // ClassNumber
        value.copy< int > (v);
        break;

      case 4: // number
      case 275: // SignedNumber
        value.copy< long long > (v);
        break;

      case 205: // ParameterList
      case 206: // ParameterSeries
        value.copy< std::set<std::string> > (v);
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 21: // objectreference
      case 23: // typefieldreference
      case 24: // valuefieldreference
      case 148: // GENERIC_IDENTIFIER_UPPERCASE
      case 149: // GENERIC_IDENTIFIER_LOWERCASE
      case 207: // Parameter
      case 213: // SimpleDefinedType
      case 225: // ModuleIdentifier
      case 243: // GlobalModuleReference
      case 246: // Symbol
      case 247: // Reference
      case 373: // typereference
      case 374: // identifier
      case 375: // valuereference
      case 376: // modulereference
      case 377: // objectclassreference
      case 378: // word
        value.copy< std::string > (v);
        break;

      case 248: // AssignmentList
        value.copy< std::vector<Assignment> > (v);
        break;

      case 237: // Exports
        value.copy< std::vector<Export> > (v);
        break;

      case 239: // Imports
      case 240: // SymbolsImported
      case 241: // SymbolsFromModuleList
        value.copy< std::vector<Import> > (v);
        break;

      case 273: // NamedNumberList
        value.copy< std::vector<NamedNumber> > (v);
        break;

      case 295: // AlternativeTypeLists
      case 296: // RootAlternativeTypeList
      case 297: // AlternativeTypeList
        value.copy< std::vector<NamedType> > (v);
        break;

      case 306: // ObjectIdentifierValue
      case 307: // ObjIdComponentsList
        value.copy< std::vector<ObjectIdComponentValue> > (v);
        break;

      case 254: // ActualParameterList
        value.copy< std::vector<Type> > (v);
        break;

      case 269: // SequenceOfValues
        value.copy< std::vector<Value> > (v);
        break;

      case 245: // SymbolList
        value.copy< std::vector<std::string> > (v);
        break;

      default:
        break;
    }
}


  // Implementation of basic_symbol constructor for each type.

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const location_type& l)
    : Base (t)
    , value ()
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Assignment v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const BitStringType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const BooleanType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const BuiltinType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const CharacterStringType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ChoiceType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Class v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ComponentType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ComponentTypeList v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const DateTimeType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const DateType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const DefinedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const DefinedValue v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const DurationType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const EmbeddedPDVType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const EnumeratedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const EnumerationValue v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ExternalType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const IRIType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Import v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const InstanceOfType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const IntegerType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Module v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const NamedNumber v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const NamedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const NullType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ObjectClassFieldType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ObjectIdComponentValue v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ObjectIdentifierType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const OctetStringType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const PrefixedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const RealType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const RelativeIRIType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const RelativeOIDType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const SequenceOfType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const SequenceType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const SetOfType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const SetType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Tag v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const TaggedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const TaggingMode v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const TimeOfDayType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const TimeType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Type v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Value v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const double v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const int v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const long long v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::set<std::string> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::string v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<Assignment> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<Export> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<Import> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<NamedNumber> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<NamedType> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<ObjectIdComponentValue> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<Type> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<Value> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<std::string> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}


  template <typename Base>
  inline
  asn1_parser::basic_symbol<Base>::~basic_symbol ()
  {
    clear ();
  }

  template <typename Base>
  inline
  void
  asn1_parser::basic_symbol<Base>::clear ()
  {
    // User destructor.
    symbol_number_type yytype = this->type_get ();
    basic_symbol<Base>& yysym = *this;
    (void) yysym;
    switch (yytype)
    {
   default:
      break;
    }

    // Type destructor.
    switch (yytype)
    {
      case 159: // ObjectClassAssignment
      case 195: // ObjectSetAssignment
      case 199: // ParameterizedAssignment
      case 200: // ParameterizedTypeAssignment
      case 201: // ParameterizedValueAssignment
      case 202: // ParameterizedValueSetTypeAssignment
      case 203: // ParameterizedObjectClassAssignment
      case 204: // ParameterizedObjectAssignment
      case 249: // Assignment
      case 258: // TypeAssignment
      case 259: // ValueAssignment
      case 260: // ValueSetTypeAssignment
        value.template destroy< Assignment > ();
        break;

      case 281: // BitStringType
        value.template destroy< BitStringType > ();
        break;

      case 270: // BooleanType
        value.template destroy< BooleanType > ();
        break;

      case 262: // BuiltinType
        value.template destroy< BuiltinType > ();
        break;

      case 327: // CharacterStringType
        value.template destroy< CharacterStringType > ();
        break;

      case 294: // ChoiceType
        value.template destroy< ChoiceType > ();
        break;

      case 304: // Class
        value.template destroy< Class > ();
        break;

      case 290: // ComponentType
        value.template destroy< ComponentType > ();
        break;

      case 287: // ComponentTypeLists
      case 288: // RootComponentTypeList
      case 289: // ComponentTypeList
        value.template destroy< ComponentTypeList > ();
        break;

      case 325: // DateTimeType
        value.template destroy< DateTimeType > ();
        break;

      case 323: // DateType
        value.template destroy< DateType > ();
        break;

      case 250: // DefinedType
      case 252: // ParameterizedType
        value.template destroy< DefinedType > ();
        break;

      case 251: // DefinedValue
        value.template destroy< DefinedValue > ();
        break;

      case 326: // DurationType
        value.template destroy< DurationType > ();
        break;

      case 319: // EmbeddedPDVType
        value.template destroy< EmbeddedPDVType > ();
        break;

      case 276: // EnumeratedType
      case 277: // Enumerations
      case 278: // Enumeration
        value.template destroy< EnumeratedType > ();
        break;

      case 279: // EnumerationItem
        value.template destroy< EnumerationValue > ();
        break;

      case 320: // ExternalType
        value.template destroy< ExternalType > ();
        break;

      case 313: // IRIType
        value.template destroy< IRIType > ();
        break;

      case 242: // SymbolsFromModule
        value.template destroy< Import > ();
        break;

      case 212: // InstanceOfType
        value.template destroy< InstanceOfType > ();
        break;

      case 272: // IntegerType
        value.template destroy< IntegerType > ();
        break;

      case 236: // ModuleBody
        value.template destroy< Module > ();
        break;

      case 274: // NamedNumber
        value.template destroy< NamedNumber > ();
        break;

      case 263: // NamedType
        value.template destroy< NamedType > ();
        break;

      case 285: // NullType
        value.template destroy< NullType > ();
        break;

      case 198: // ObjectClassFieldType
        value.template destroy< ObjectClassFieldType > ();
        break;

      case 308: // ObjIdComponents
      case 309: // NameForm
      case 310: // NumberForm
      case 311: // NameAndNumberForm
        value.template destroy< ObjectIdComponentValue > ();
        break;

      case 305: // ObjectIdentifierType
        value.template destroy< ObjectIdentifierType > ();
        break;

      case 284: // OctetStringType
        value.template destroy< OctetStringType > ();
        break;

      case 299: // PrefixedType
        value.template destroy< PrefixedType > ();
        break;

      case 280: // RealType
        value.template destroy< RealType > ();
        break;

      case 318: // RelativeIRIType
        value.template destroy< RelativeIRIType > ();
        break;

      case 312: // RelativeOIDType
        value.template destroy< RelativeOIDType > ();
        break;

      case 291: // SequenceOfType
        value.template destroy< SequenceOfType > ();
        break;

      case 286: // SequenceType
        value.template destroy< SequenceType > ();
        break;

      case 293: // SetOfType
        value.template destroy< SetOfType > ();
        break;

      case 292: // SetType
        value.template destroy< SetType > ();
        break;

      case 301: // Tag
        value.template destroy< Tag > ();
        break;

      case 300: // TaggedType
        value.template destroy< TaggedType > ();
        break;

      case 234: // TagDefault
        value.template destroy< TaggingMode > ();
        break;

      case 324: // TimeOfDayType
        value.template destroy< TimeOfDayType > ();
        break;

      case 321: // TimeType
        value.template destroy< TimeType > ();
        break;

      case 255: // ActualParameter
      case 261: // Type
      case 330: // ConstrainedType
      case 331: // TypeWithConstraint
        value.template destroy< Type > ();
        break;

      case 264: // ValueWithoutTypeIdentifier
      case 265: // Value
      case 348: // SingleValue
        value.template destroy< Value > ();
        break;

      case 5: // realnumber
        value.template destroy< double > ();
        break;

      case 303: // ClassNumber
        value.template destroy< int > ();
        break;

      case 4: // number
      case 275: // SignedNumber
        value.template destroy< long long > ();
        break;

      case 205: // ParameterList
      case 206: // ParameterSeries
        value.template destroy< std::set<std::string> > ();
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 21: // objectreference
      case 23: // typefieldreference
      case 24: // valuefieldreference
      case 148: // GENERIC_IDENTIFIER_UPPERCASE
      case 149: // GENERIC_IDENTIFIER_LOWERCASE
      case 207: // Parameter
      case 213: // SimpleDefinedType
      case 225: // ModuleIdentifier
      case 243: // GlobalModuleReference
      case 246: // Symbol
      case 247: // Reference
      case 373: // typereference
      case 374: // identifier
      case 375: // valuereference
      case 376: // modulereference
      case 377: // objectclassreference
      case 378: // word
        value.template destroy< std::string > ();
        break;

      case 248: // AssignmentList
        value.template destroy< std::vector<Assignment> > ();
        break;

      case 237: // Exports
        value.template destroy< std::vector<Export> > ();
        break;

      case 239: // Imports
      case 240: // SymbolsImported
      case 241: // SymbolsFromModuleList
        value.template destroy< std::vector<Import> > ();
        break;

      case 273: // NamedNumberList
        value.template destroy< std::vector<NamedNumber> > ();
        break;

      case 295: // AlternativeTypeLists
      case 296: // RootAlternativeTypeList
      case 297: // AlternativeTypeList
        value.template destroy< std::vector<NamedType> > ();
        break;

      case 306: // ObjectIdentifierValue
      case 307: // ObjIdComponentsList
        value.template destroy< std::vector<ObjectIdComponentValue> > ();
        break;

      case 254: // ActualParameterList
        value.template destroy< std::vector<Type> > ();
        break;

      case 269: // SequenceOfValues
        value.template destroy< std::vector<Value> > ();
        break;

      case 245: // SymbolList
        value.template destroy< std::vector<std::string> > ();
        break;

      default:
        break;
    }

    Base::clear ();
  }

  template <typename Base>
  inline
  bool
  asn1_parser::basic_symbol<Base>::empty () const
  {
    return Base::type_get () == empty_symbol;
  }

  template <typename Base>
  inline
  void
  asn1_parser::basic_symbol<Base>::move (basic_symbol& s)
  {
    super_type::move(s);
      switch (this->type_get ())
    {
      case 159: // ObjectClassAssignment
      case 195: // ObjectSetAssignment
      case 199: // ParameterizedAssignment
      case 200: // ParameterizedTypeAssignment
      case 201: // ParameterizedValueAssignment
      case 202: // ParameterizedValueSetTypeAssignment
      case 203: // ParameterizedObjectClassAssignment
      case 204: // ParameterizedObjectAssignment
      case 249: // Assignment
      case 258: // TypeAssignment
      case 259: // ValueAssignment
      case 260: // ValueSetTypeAssignment
        value.move< Assignment > (s.value);
        break;

      case 281: // BitStringType
        value.move< BitStringType > (s.value);
        break;

      case 270: // BooleanType
        value.move< BooleanType > (s.value);
        break;

      case 262: // BuiltinType
        value.move< BuiltinType > (s.value);
        break;

      case 327: // CharacterStringType
        value.move< CharacterStringType > (s.value);
        break;

      case 294: // ChoiceType
        value.move< ChoiceType > (s.value);
        break;

      case 304: // Class
        value.move< Class > (s.value);
        break;

      case 290: // ComponentType
        value.move< ComponentType > (s.value);
        break;

      case 287: // ComponentTypeLists
      case 288: // RootComponentTypeList
      case 289: // ComponentTypeList
        value.move< ComponentTypeList > (s.value);
        break;

      case 325: // DateTimeType
        value.move< DateTimeType > (s.value);
        break;

      case 323: // DateType
        value.move< DateType > (s.value);
        break;

      case 250: // DefinedType
      case 252: // ParameterizedType
        value.move< DefinedType > (s.value);
        break;

      case 251: // DefinedValue
        value.move< DefinedValue > (s.value);
        break;

      case 326: // DurationType
        value.move< DurationType > (s.value);
        break;

      case 319: // EmbeddedPDVType
        value.move< EmbeddedPDVType > (s.value);
        break;

      case 276: // EnumeratedType
      case 277: // Enumerations
      case 278: // Enumeration
        value.move< EnumeratedType > (s.value);
        break;

      case 279: // EnumerationItem
        value.move< EnumerationValue > (s.value);
        break;

      case 320: // ExternalType
        value.move< ExternalType > (s.value);
        break;

      case 313: // IRIType
        value.move< IRIType > (s.value);
        break;

      case 242: // SymbolsFromModule
        value.move< Import > (s.value);
        break;

      case 212: // InstanceOfType
        value.move< InstanceOfType > (s.value);
        break;

      case 272: // IntegerType
        value.move< IntegerType > (s.value);
        break;

      case 236: // ModuleBody
        value.move< Module > (s.value);
        break;

      case 274: // NamedNumber
        value.move< NamedNumber > (s.value);
        break;

      case 263: // NamedType
        value.move< NamedType > (s.value);
        break;

      case 285: // NullType
        value.move< NullType > (s.value);
        break;

      case 198: // ObjectClassFieldType
        value.move< ObjectClassFieldType > (s.value);
        break;

      case 308: // ObjIdComponents
      case 309: // NameForm
      case 310: // NumberForm
      case 311: // NameAndNumberForm
        value.move< ObjectIdComponentValue > (s.value);
        break;

      case 305: // ObjectIdentifierType
        value.move< ObjectIdentifierType > (s.value);
        break;

      case 284: // OctetStringType
        value.move< OctetStringType > (s.value);
        break;

      case 299: // PrefixedType
        value.move< PrefixedType > (s.value);
        break;

      case 280: // RealType
        value.move< RealType > (s.value);
        break;

      case 318: // RelativeIRIType
        value.move< RelativeIRIType > (s.value);
        break;

      case 312: // RelativeOIDType
        value.move< RelativeOIDType > (s.value);
        break;

      case 291: // SequenceOfType
        value.move< SequenceOfType > (s.value);
        break;

      case 286: // SequenceType
        value.move< SequenceType > (s.value);
        break;

      case 293: // SetOfType
        value.move< SetOfType > (s.value);
        break;

      case 292: // SetType
        value.move< SetType > (s.value);
        break;

      case 301: // Tag
        value.move< Tag > (s.value);
        break;

      case 300: // TaggedType
        value.move< TaggedType > (s.value);
        break;

      case 234: // TagDefault
        value.move< TaggingMode > (s.value);
        break;

      case 324: // TimeOfDayType
        value.move< TimeOfDayType > (s.value);
        break;

      case 321: // TimeType
        value.move< TimeType > (s.value);
        break;

      case 255: // ActualParameter
      case 261: // Type
      case 330: // ConstrainedType
      case 331: // TypeWithConstraint
        value.move< Type > (s.value);
        break;

      case 264: // ValueWithoutTypeIdentifier
      case 265: // Value
      case 348: // SingleValue
        value.move< Value > (s.value);
        break;

      case 5: // realnumber
        value.move< double > (s.value);
        break;

      case 303: // ClassNumber
        value.move< int > (s.value);
        break;

      case 4: // number
      case 275: // SignedNumber
        value.move< long long > (s.value);
        break;

      case 205: // ParameterList
      case 206: // ParameterSeries
        value.move< std::set<std::string> > (s.value);
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 21: // objectreference
      case 23: // typefieldreference
      case 24: // valuefieldreference
      case 148: // GENERIC_IDENTIFIER_UPPERCASE
      case 149: // GENERIC_IDENTIFIER_LOWERCASE
      case 207: // Parameter
      case 213: // SimpleDefinedType
      case 225: // ModuleIdentifier
      case 243: // GlobalModuleReference
      case 246: // Symbol
      case 247: // Reference
      case 373: // typereference
      case 374: // identifier
      case 375: // valuereference
      case 376: // modulereference
      case 377: // objectclassreference
      case 378: // word
        value.move< std::string > (s.value);
        break;

      case 248: // AssignmentList
        value.move< std::vector<Assignment> > (s.value);
        break;

      case 237: // Exports
        value.move< std::vector<Export> > (s.value);
        break;

      case 239: // Imports
      case 240: // SymbolsImported
      case 241: // SymbolsFromModuleList
        value.move< std::vector<Import> > (s.value);
        break;

      case 273: // NamedNumberList
        value.move< std::vector<NamedNumber> > (s.value);
        break;

      case 295: // AlternativeTypeLists
      case 296: // RootAlternativeTypeList
      case 297: // AlternativeTypeList
        value.move< std::vector<NamedType> > (s.value);
        break;

      case 306: // ObjectIdentifierValue
      case 307: // ObjIdComponentsList
        value.move< std::vector<ObjectIdComponentValue> > (s.value);
        break;

      case 254: // ActualParameterList
        value.move< std::vector<Type> > (s.value);
        break;

      case 269: // SequenceOfValues
        value.move< std::vector<Value> > (s.value);
        break;

      case 245: // SymbolList
        value.move< std::vector<std::string> > (s.value);
        break;

      default:
        break;
    }

    location = s.location;
  }

  // by_type.
  inline
  asn1_parser::by_type::by_type ()
    : type (empty_symbol)
  {}

  inline
  asn1_parser::by_type::by_type (const by_type& other)
    : type (other.type)
  {}

  inline
  asn1_parser::by_type::by_type (token_type t)
    : type (yytranslate_ (t))
  {}

  inline
  void
  asn1_parser::by_type::clear ()
  {
    type = empty_symbol;
  }

  inline
  void
  asn1_parser::by_type::move (by_type& that)
  {
    type = that.type;
    that.clear ();
  }

  inline
  int
  asn1_parser::by_type::type_get () const
  {
    return type;
  }

  inline
  asn1_parser::token_type
  asn1_parser::by_type::token () const
  {
    // YYTOKNUM[NUM] -- (External) token number corresponding to the
    // (internal) symbol number NUM (which must be that of a token).  */
    static
    const unsigned short int
    yytoken_number_[] =
    {
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406
    };
    return static_cast<token_type> (yytoken_number_[type]);
  }
  // Implementation of make_symbol for each symbol type.
  asn1_parser::symbol_type
  asn1_parser::make_END_OF_FILE (const location_type& l)
  {
    return symbol_type (token::END_OF_FILE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_comment (const location_type& l)
  {
    return symbol_type (token::comment, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_number (const long long& v, const location_type& l)
  {
    return symbol_type (token::number, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_realnumber (const double& v, const location_type& l)
  {
    return symbol_type (token::realnumber, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_bstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::bstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmlbstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::xmlbstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_hstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::hstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmlhstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::xmlhstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_cstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::cstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmlcstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::xmlcstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_simplestring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::simplestring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmltstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::xmltstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_psname (const location_type& l)
  {
    return symbol_type (token::psname, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_encodingreference (const location_type& l)
  {
    return symbol_type (token::encodingreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_integerUnicodeLabel (const location_type& l)
  {
    return symbol_type (token::integerUnicodeLabel, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_tstring (const location_type& l)
  {
    return symbol_type (token::tstring, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_objectreference (const std::string& v, const location_type& l)
  {
    return symbol_type (token::objectreference, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_objectsetreference (const location_type& l)
  {
    return symbol_type (token::objectsetreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_typefieldreference (const std::string& v, const location_type& l)
  {
    return symbol_type (token::typefieldreference, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_valuefieldreference (const std::string& v, const location_type& l)
  {
    return symbol_type (token::valuefieldreference, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_valuesetfieldreference (const location_type& l)
  {
    return symbol_type (token::valuesetfieldreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_objectfieldreference (const location_type& l)
  {
    return symbol_type (token::objectfieldreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_objectsetfieldreference (const location_type& l)
  {
    return symbol_type (token::objectsetfieldreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ABSENT (const location_type& l)
  {
    return symbol_type (token::ABSENT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ABSTRACT_SYNTAX (const location_type& l)
  {
    return symbol_type (token::ABSTRACT_SYNTAX, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ALL (const location_type& l)
  {
    return symbol_type (token::ALL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ANY (const location_type& l)
  {
    return symbol_type (token::ANY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_APPLICATION (const location_type& l)
  {
    return symbol_type (token::APPLICATION, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ASN_NULL (const location_type& l)
  {
    return symbol_type (token::ASN_NULL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_AUTOMATIC (const location_type& l)
  {
    return symbol_type (token::AUTOMATIC, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BEGIN (const location_type& l)
  {
    return symbol_type (token::BEGIN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BIT (const location_type& l)
  {
    return symbol_type (token::BIT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BMPString (const location_type& l)
  {
    return symbol_type (token::BMPString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BOOLEAN (const location_type& l)
  {
    return symbol_type (token::BOOLEAN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BY (const location_type& l)
  {
    return symbol_type (token::BY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CHARACTER (const location_type& l)
  {
    return symbol_type (token::CHARACTER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CHOICE (const location_type& l)
  {
    return symbol_type (token::CHOICE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CLASS (const location_type& l)
  {
    return symbol_type (token::CLASS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_COMPONENT (const location_type& l)
  {
    return symbol_type (token::COMPONENT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_COMPONENTS (const location_type& l)
  {
    return symbol_type (token::COMPONENTS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CONSTRAINED (const location_type& l)
  {
    return symbol_type (token::CONSTRAINED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CONTAINING (const location_type& l)
  {
    return symbol_type (token::CONTAINING, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DATE (const location_type& l)
  {
    return symbol_type (token::DATE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DATE_TIME (const location_type& l)
  {
    return symbol_type (token::DATE_TIME, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DEFAULT (const location_type& l)
  {
    return symbol_type (token::DEFAULT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DEFINITIONS (const location_type& l)
  {
    return symbol_type (token::DEFINITIONS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DURATION (const location_type& l)
  {
    return symbol_type (token::DURATION, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EMBEDDED (const location_type& l)
  {
    return symbol_type (token::EMBEDDED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ENCODED (const location_type& l)
  {
    return symbol_type (token::ENCODED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ENCODING_CONTROL (const location_type& l)
  {
    return symbol_type (token::ENCODING_CONTROL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_END (const location_type& l)
  {
    return symbol_type (token::END, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ENUMERATED (const location_type& l)
  {
    return symbol_type (token::ENUMERATED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXCEPT (const location_type& l)
  {
    return symbol_type (token::EXCEPT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXPLICIT (const location_type& l)
  {
    return symbol_type (token::EXPLICIT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXPORTS (const location_type& l)
  {
    return symbol_type (token::EXPORTS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXTENSIBILITY (const location_type& l)
  {
    return symbol_type (token::EXTENSIBILITY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXTERNAL (const location_type& l)
  {
    return symbol_type (token::EXTERNAL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_FALSE (const location_type& l)
  {
    return symbol_type (token::FALSE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_FROM (const location_type& l)
  {
    return symbol_type (token::FROM, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GeneralizedTime (const location_type& l)
  {
    return symbol_type (token::GeneralizedTime, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GeneralString (const location_type& l)
  {
    return symbol_type (token::GeneralString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GraphicString (const location_type& l)
  {
    return symbol_type (token::GraphicString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IA5String (const location_type& l)
  {
    return symbol_type (token::IA5String, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IDENTIFIER (const location_type& l)
  {
    return symbol_type (token::IDENTIFIER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IMPLICIT (const location_type& l)
  {
    return symbol_type (token::IMPLICIT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IMPLIED (const location_type& l)
  {
    return symbol_type (token::IMPLIED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IMPORTS (const location_type& l)
  {
    return symbol_type (token::IMPORTS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INCLUDES (const location_type& l)
  {
    return symbol_type (token::INCLUDES, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INSTANCE (const location_type& l)
  {
    return symbol_type (token::INSTANCE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INSTRUCTIONS (const location_type& l)
  {
    return symbol_type (token::INSTRUCTIONS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INTEGER (const location_type& l)
  {
    return symbol_type (token::INTEGER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INTERSECTION (const location_type& l)
  {
    return symbol_type (token::INTERSECTION, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ISO646String (const location_type& l)
  {
    return symbol_type (token::ISO646String, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_MAX (const location_type& l)
  {
    return symbol_type (token::MAX, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_MIN (const location_type& l)
  {
    return symbol_type (token::MIN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_MINUS_INFINITY (const location_type& l)
  {
    return symbol_type (token::MINUS_INFINITY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_NOT_A_NUMBER (const location_type& l)
  {
    return symbol_type (token::NOT_A_NUMBER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_NumericString (const location_type& l)
  {
    return symbol_type (token::NumericString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OBJECT (const location_type& l)
  {
    return symbol_type (token::OBJECT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ObjectDescriptor (const location_type& l)
  {
    return symbol_type (token::ObjectDescriptor, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OCTET (const location_type& l)
  {
    return symbol_type (token::OCTET, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OF (const location_type& l)
  {
    return symbol_type (token::OF, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OID_IRI (const location_type& l)
  {
    return symbol_type (token::OID_IRI, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OPTIONAL (const location_type& l)
  {
    return symbol_type (token::OPTIONAL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PATTERN (const location_type& l)
  {
    return symbol_type (token::PATTERN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PDV (const location_type& l)
  {
    return symbol_type (token::PDV, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PLUS_INFINITY (const location_type& l)
  {
    return symbol_type (token::PLUS_INFINITY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PRESENT (const location_type& l)
  {
    return symbol_type (token::PRESENT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PrintableString (const location_type& l)
  {
    return symbol_type (token::PrintableString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PRIVATE (const location_type& l)
  {
    return symbol_type (token::PRIVATE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_REAL (const location_type& l)
  {
    return symbol_type (token::REAL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_RELATIVE_OID (const location_type& l)
  {
    return symbol_type (token::RELATIVE_OID, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_RELATIVE_OID_IRI (const location_type& l)
  {
    return symbol_type (token::RELATIVE_OID_IRI, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SEQUENCE (const location_type& l)
  {
    return symbol_type (token::SEQUENCE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SET (const location_type& l)
  {
    return symbol_type (token::SET, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SETTINGS (const location_type& l)
  {
    return symbol_type (token::SETTINGS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SIZE (const location_type& l)
  {
    return symbol_type (token::SIZE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_STRING (const location_type& l)
  {
    return symbol_type (token::STRING, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SYNTAX (const location_type& l)
  {
    return symbol_type (token::SYNTAX, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_T61String (const location_type& l)
  {
    return symbol_type (token::T61String, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TAGS (const location_type& l)
  {
    return symbol_type (token::TAGS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TeletexString (const location_type& l)
  {
    return symbol_type (token::TeletexString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TIME (const location_type& l)
  {
    return symbol_type (token::TIME, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TIME_OF_DAY (const location_type& l)
  {
    return symbol_type (token::TIME_OF_DAY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TRUE (const location_type& l)
  {
    return symbol_type (token::TRUE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TYPE_IDENTIFIER (const location_type& l)
  {
    return symbol_type (token::TYPE_IDENTIFIER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UNION (const location_type& l)
  {
    return symbol_type (token::UNION, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UNIQUE (const location_type& l)
  {
    return symbol_type (token::UNIQUE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UNIVERSAL (const location_type& l)
  {
    return symbol_type (token::UNIVERSAL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UniversalString (const location_type& l)
  {
    return symbol_type (token::UniversalString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UTCTime (const location_type& l)
  {
    return symbol_type (token::UTCTime, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UTF8String (const location_type& l)
  {
    return symbol_type (token::UTF8String, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_VideotexString (const location_type& l)
  {
    return symbol_type (token::VideotexString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_VisibleString (const location_type& l)
  {
    return symbol_type (token::VisibleString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_WITH (const location_type& l)
  {
    return symbol_type (token::WITH, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DEFINED_AS (const location_type& l)
  {
    return symbol_type (token::DEFINED_AS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ELIPSIS (const location_type& l)
  {
    return symbol_type (token::ELIPSIS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_RANGE (const location_type& l)
  {
    return symbol_type (token::RANGE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OPEN_BRACE (const location_type& l)
  {
    return symbol_type (token::OPEN_BRACE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CLOSE_BRACE (const location_type& l)
  {
    return symbol_type (token::CLOSE_BRACE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OPEN_PARENTHESIS (const location_type& l)
  {
    return symbol_type (token::OPEN_PARENTHESIS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CLOSE_PARENTHESIS (const location_type& l)
  {
    return symbol_type (token::CLOSE_PARENTHESIS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OPEN_SQUARE_BRACKET (const location_type& l)
  {
    return symbol_type (token::OPEN_SQUARE_BRACKET, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CLOSE_SQUARE_BRACKET (const location_type& l)
  {
    return symbol_type (token::CLOSE_SQUARE_BRACKET, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_LESS_THAN (const location_type& l)
  {
    return symbol_type (token::LESS_THAN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GREATER_THAN (const location_type& l)
  {
    return symbol_type (token::GREATER_THAN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXCLAMATION_MARK (const location_type& l)
  {
    return symbol_type (token::EXCLAMATION_MARK, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_QUOTATION_MARK (const location_type& l)
  {
    return symbol_type (token::QUOTATION_MARK, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_AMPERSAND (const location_type& l)
  {
    return symbol_type (token::AMPERSAND, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_APOSTROPHE (const location_type& l)
  {
    return symbol_type (token::APOSTROPHE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ASTERISK (const location_type& l)
  {
    return symbol_type (token::ASTERISK, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_COMMA (const location_type& l)
  {
    return symbol_type (token::COMMA, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_FULL_STOP (const location_type& l)
  {
    return symbol_type (token::FULL_STOP, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_HYPHEN_MINUS (const location_type& l)
  {
    return symbol_type (token::HYPHEN_MINUS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SOLIDUS (const location_type& l)
  {
    return symbol_type (token::SOLIDUS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_COLON (const location_type& l)
  {
    return symbol_type (token::COLON, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SEMICOLON (const location_type& l)
  {
    return symbol_type (token::SEMICOLON, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EQUALS_SIGN (const location_type& l)
  {
    return symbol_type (token::EQUALS_SIGN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_AT (const location_type& l)
  {
    return symbol_type (token::AT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_VERTICAL_LINE (const location_type& l)
  {
    return symbol_type (token::VERTICAL_LINE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ACCENT (const location_type& l)
  {
    return symbol_type (token::ACCENT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PLUS (const location_type& l)
  {
    return symbol_type (token::PLUS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_STAR (const location_type& l)
  {
    return symbol_type (token::STAR, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GENERIC_IDENTIFIER_UPPERCASE (const std::string& v, const location_type& l)
  {
    return symbol_type (token::GENERIC_IDENTIFIER_UPPERCASE, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GENERIC_IDENTIFIER_LOWERCASE (const std::string& v, const location_type& l)
  {
    return symbol_type (token::GENERIC_IDENTIFIER_LOWERCASE, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GENERIC_INTEGER (const location_type& l)
  {
    return symbol_type (token::GENERIC_INTEGER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmlasn1typename (const location_type& l)
  {
    return symbol_type (token::xmlasn1typename, l);
  }



} // yy
#line 4794 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:408





// User implementation prologue.

#line 4802 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:412
// Unqualified %code blocks.
#line 15 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:413

    struct Context
    {
        const char* cursor;
        yy::location location;

        Asn1Tree asn1_tree;
    };
    void yy::asn1_parser::error(const location_type& l, const std::string& m)
    {
        std::cerr << (l.begin.filename ? l.begin.filename->c_str() : "(undefined)");
        std::cerr << ':' << l.begin.line << ':' << l.begin.column << '-' << l.end.column << ": " << m << '\n';
    }

    namespace yy { asn1_parser::symbol_type yylex(Context& c); }

#line 4821 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:413


#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> // FIXME: INFRINGES ON USER NAME SPACE.
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K].location)
/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

# ifndef YYLLOC_DEFAULT
#  define YYLLOC_DEFAULT(Current, Rhs, N)                               \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).begin  = YYRHSLOC (Rhs, 1).begin;                   \
          (Current).end    = YYRHSLOC (Rhs, N).end;                     \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).begin = (Current).end = YYRHSLOC (Rhs, 0).end;      \
        }                                                               \
    while (/*CONSTCOND*/ false)
# endif


// Suppress unused-variable warnings by "using" E.
#define YYUSE(E) ((void) (E))

// Enable debugging if requested.
#if YYDEBUG

// A pseudo ostream that takes yydebug_ into account.
# define YYCDEBUG if (yydebug_) (*yycdebug_)

# define YY_SYMBOL_PRINT(Title, Symbol)         \
  do {                                          \
    if (yydebug_)                               \
    {                                           \
      *yycdebug_ << Title << ' ';               \
      yy_print_ (*yycdebug_, Symbol);           \
      *yycdebug_ << std::endl;                  \
    }                                           \
  } while (false)

# define YY_REDUCE_PRINT(Rule)          \
  do {                                  \
    if (yydebug_)                       \
      yy_reduce_print_ (Rule);          \
  } while (false)

# define YY_STACK_PRINT()               \
  do {                                  \
    if (yydebug_)                       \
      yystack_print_ ();                \
  } while (false)

#else // !YYDEBUG

# define YYCDEBUG if (false) std::cerr
# define YY_SYMBOL_PRINT(Title, Symbol)  YYUSE(Symbol)
# define YY_REDUCE_PRINT(Rule)           static_cast<void>(0)
# define YY_STACK_PRINT()                static_cast<void>(0)

#endif // !YYDEBUG

#define yyerrok         (yyerrstatus_ = 0)
#define yyclearin       (yyla.clear ())

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYRECOVERING()  (!!yyerrstatus_)


namespace yy {
#line 4907 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:479

  /* Return YYSTR after stripping away unnecessary quotes and
     backslashes, so that it's suitable for yyerror.  The heuristic is
     that double-quoting is unnecessary unless the string contains an
     apostrophe, a comma, or backslash (other than backslash-backslash).
     YYSTR is taken from yytname.  */
  std::string
  asn1_parser::yytnamerr_ (const char *yystr)
  {
    if (*yystr == '"')
      {
        std::string yyr = "";
        char const *yyp = yystr;

        for (;;)
          switch (*++yyp)
            {
            case '\'':
            case ',':
              goto do_not_strip_quotes;

            case '\\':
              if (*++yyp != '\\')
                goto do_not_strip_quotes;
              // Fall through.
            default:
              yyr += *yyp;
              break;

            case '"':
              return yyr;
            }
      do_not_strip_quotes: ;
      }

    return yystr;
  }


  /// Build a parser object.
  asn1_parser::asn1_parser (Context& context_yyarg)
    :
#if YYDEBUG
      yydebug_ (false),
      yycdebug_ (&std::cerr),
#endif
      context (context_yyarg)
  {}

  asn1_parser::~asn1_parser ()
  {}


  /*---------------.
  | Symbol types.  |
  `---------------*/



  // by_state.
  inline
  asn1_parser::by_state::by_state ()
    : state (empty_state)
  {}

  inline
  asn1_parser::by_state::by_state (const by_state& other)
    : state (other.state)
  {}

  inline
  void
  asn1_parser::by_state::clear ()
  {
    state = empty_state;
  }

  inline
  void
  asn1_parser::by_state::move (by_state& that)
  {
    state = that.state;
    that.clear ();
  }

  inline
  asn1_parser::by_state::by_state (state_type s)
    : state (s)
  {}

  inline
  asn1_parser::symbol_number_type
  asn1_parser::by_state::type_get () const
  {
    if (state == empty_state)
      return empty_symbol;
    else
      return yystos_[state];
  }

  inline
  asn1_parser::stack_symbol_type::stack_symbol_type ()
  {}


  inline
  asn1_parser::stack_symbol_type::stack_symbol_type (state_type s, symbol_type& that)
    : super_type (s, that.location)
  {
      switch (that.type_get ())
    {
      case 159: // ObjectClassAssignment
      case 195: // ObjectSetAssignment
      case 199: // ParameterizedAssignment
      case 200: // ParameterizedTypeAssignment
      case 201: // ParameterizedValueAssignment
      case 202: // ParameterizedValueSetTypeAssignment
      case 203: // ParameterizedObjectClassAssignment
      case 204: // ParameterizedObjectAssignment
      case 249: // Assignment
      case 258: // TypeAssignment
      case 259: // ValueAssignment
      case 260: // ValueSetTypeAssignment
        value.move< Assignment > (that.value);
        break;

      case 281: // BitStringType
        value.move< BitStringType > (that.value);
        break;

      case 270: // BooleanType
        value.move< BooleanType > (that.value);
        break;

      case 262: // BuiltinType
        value.move< BuiltinType > (that.value);
        break;

      case 327: // CharacterStringType
        value.move< CharacterStringType > (that.value);
        break;

      case 294: // ChoiceType
        value.move< ChoiceType > (that.value);
        break;

      case 304: // Class
        value.move< Class > (that.value);
        break;

      case 290: // ComponentType
        value.move< ComponentType > (that.value);
        break;

      case 287: // ComponentTypeLists
      case 288: // RootComponentTypeList
      case 289: // ComponentTypeList
        value.move< ComponentTypeList > (that.value);
        break;

      case 325: // DateTimeType
        value.move< DateTimeType > (that.value);
        break;

      case 323: // DateType
        value.move< DateType > (that.value);
        break;

      case 250: // DefinedType
      case 252: // ParameterizedType
        value.move< DefinedType > (that.value);
        break;

      case 251: // DefinedValue
        value.move< DefinedValue > (that.value);
        break;

      case 326: // DurationType
        value.move< DurationType > (that.value);
        break;

      case 319: // EmbeddedPDVType
        value.move< EmbeddedPDVType > (that.value);
        break;

      case 276: // EnumeratedType
      case 277: // Enumerations
      case 278: // Enumeration
        value.move< EnumeratedType > (that.value);
        break;

      case 279: // EnumerationItem
        value.move< EnumerationValue > (that.value);
        break;

      case 320: // ExternalType
        value.move< ExternalType > (that.value);
        break;

      case 313: // IRIType
        value.move< IRIType > (that.value);
        break;

      case 242: // SymbolsFromModule
        value.move< Import > (that.value);
        break;

      case 212: // InstanceOfType
        value.move< InstanceOfType > (that.value);
        break;

      case 272: // IntegerType
        value.move< IntegerType > (that.value);
        break;

      case 236: // ModuleBody
        value.move< Module > (that.value);
        break;

      case 274: // NamedNumber
        value.move< NamedNumber > (that.value);
        break;

      case 263: // NamedType
        value.move< NamedType > (that.value);
        break;

      case 285: // NullType
        value.move< NullType > (that.value);
        break;

      case 198: // ObjectClassFieldType
        value.move< ObjectClassFieldType > (that.value);
        break;

      case 308: // ObjIdComponents
      case 309: // NameForm
      case 310: // NumberForm
      case 311: // NameAndNumberForm
        value.move< ObjectIdComponentValue > (that.value);
        break;

      case 305: // ObjectIdentifierType
        value.move< ObjectIdentifierType > (that.value);
        break;

      case 284: // OctetStringType
        value.move< OctetStringType > (that.value);
        break;

      case 299: // PrefixedType
        value.move< PrefixedType > (that.value);
        break;

      case 280: // RealType
        value.move< RealType > (that.value);
        break;

      case 318: // RelativeIRIType
        value.move< RelativeIRIType > (that.value);
        break;

      case 312: // RelativeOIDType
        value.move< RelativeOIDType > (that.value);
        break;

      case 291: // SequenceOfType
        value.move< SequenceOfType > (that.value);
        break;

      case 286: // SequenceType
        value.move< SequenceType > (that.value);
        break;

      case 293: // SetOfType
        value.move< SetOfType > (that.value);
        break;

      case 292: // SetType
        value.move< SetType > (that.value);
        break;

      case 301: // Tag
        value.move< Tag > (that.value);
        break;

      case 300: // TaggedType
        value.move< TaggedType > (that.value);
        break;

      case 234: // TagDefault
        value.move< TaggingMode > (that.value);
        break;

      case 324: // TimeOfDayType
        value.move< TimeOfDayType > (that.value);
        break;

      case 321: // TimeType
        value.move< TimeType > (that.value);
        break;

      case 255: // ActualParameter
      case 261: // Type
      case 330: // ConstrainedType
      case 331: // TypeWithConstraint
        value.move< Type > (that.value);
        break;

      case 264: // ValueWithoutTypeIdentifier
      case 265: // Value
      case 348: // SingleValue
        value.move< Value > (that.value);
        break;

      case 5: // realnumber
        value.move< double > (that.value);
        break;

      case 303: // ClassNumber
        value.move< int > (that.value);
        break;

      case 4: // number
      case 275: // SignedNumber
        value.move< long long > (that.value);
        break;

      case 205: // ParameterList
      case 206: // ParameterSeries
        value.move< std::set<std::string> > (that.value);
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 21: // objectreference
      case 23: // typefieldreference
      case 24: // valuefieldreference
      case 148: // GENERIC_IDENTIFIER_UPPERCASE
      case 149: // GENERIC_IDENTIFIER_LOWERCASE
      case 207: // Parameter
      case 213: // SimpleDefinedType
      case 225: // ModuleIdentifier
      case 243: // GlobalModuleReference
      case 246: // Symbol
      case 247: // Reference
      case 373: // typereference
      case 374: // identifier
      case 375: // valuereference
      case 376: // modulereference
      case 377: // objectclassreference
      case 378: // word
        value.move< std::string > (that.value);
        break;

      case 248: // AssignmentList
        value.move< std::vector<Assignment> > (that.value);
        break;

      case 237: // Exports
        value.move< std::vector<Export> > (that.value);
        break;

      case 239: // Imports
      case 240: // SymbolsImported
      case 241: // SymbolsFromModuleList
        value.move< std::vector<Import> > (that.value);
        break;

      case 273: // NamedNumberList
        value.move< std::vector<NamedNumber> > (that.value);
        break;

      case 295: // AlternativeTypeLists
      case 296: // RootAlternativeTypeList
      case 297: // AlternativeTypeList
        value.move< std::vector<NamedType> > (that.value);
        break;

      case 306: // ObjectIdentifierValue
      case 307: // ObjIdComponentsList
        value.move< std::vector<ObjectIdComponentValue> > (that.value);
        break;

      case 254: // ActualParameterList
        value.move< std::vector<Type> > (that.value);
        break;

      case 269: // SequenceOfValues
        value.move< std::vector<Value> > (that.value);
        break;

      case 245: // SymbolList
        value.move< std::vector<std::string> > (that.value);
        break;

      default:
        break;
    }

    // that is emptied.
    that.type = empty_symbol;
  }

  inline
  asn1_parser::stack_symbol_type&
  asn1_parser::stack_symbol_type::operator= (const stack_symbol_type& that)
  {
    state = that.state;
      switch (that.type_get ())
    {
      case 159: // ObjectClassAssignment
      case 195: // ObjectSetAssignment
      case 199: // ParameterizedAssignment
      case 200: // ParameterizedTypeAssignment
      case 201: // ParameterizedValueAssignment
      case 202: // ParameterizedValueSetTypeAssignment
      case 203: // ParameterizedObjectClassAssignment
      case 204: // ParameterizedObjectAssignment
      case 249: // Assignment
      case 258: // TypeAssignment
      case 259: // ValueAssignment
      case 260: // ValueSetTypeAssignment
        value.copy< Assignment > (that.value);
        break;

      case 281: // BitStringType
        value.copy< BitStringType > (that.value);
        break;

      case 270: // BooleanType
        value.copy< BooleanType > (that.value);
        break;

      case 262: // BuiltinType
        value.copy< BuiltinType > (that.value);
        break;

      case 327: // CharacterStringType
        value.copy< CharacterStringType > (that.value);
        break;

      case 294: // ChoiceType
        value.copy< ChoiceType > (that.value);
        break;

      case 304: // Class
        value.copy< Class > (that.value);
        break;

      case 290: // ComponentType
        value.copy< ComponentType > (that.value);
        break;

      case 287: // ComponentTypeLists
      case 288: // RootComponentTypeList
      case 289: // ComponentTypeList
        value.copy< ComponentTypeList > (that.value);
        break;

      case 325: // DateTimeType
        value.copy< DateTimeType > (that.value);
        break;

      case 323: // DateType
        value.copy< DateType > (that.value);
        break;

      case 250: // DefinedType
      case 252: // ParameterizedType
        value.copy< DefinedType > (that.value);
        break;

      case 251: // DefinedValue
        value.copy< DefinedValue > (that.value);
        break;

      case 326: // DurationType
        value.copy< DurationType > (that.value);
        break;

      case 319: // EmbeddedPDVType
        value.copy< EmbeddedPDVType > (that.value);
        break;

      case 276: // EnumeratedType
      case 277: // Enumerations
      case 278: // Enumeration
        value.copy< EnumeratedType > (that.value);
        break;

      case 279: // EnumerationItem
        value.copy< EnumerationValue > (that.value);
        break;

      case 320: // ExternalType
        value.copy< ExternalType > (that.value);
        break;

      case 313: // IRIType
        value.copy< IRIType > (that.value);
        break;

      case 242: // SymbolsFromModule
        value.copy< Import > (that.value);
        break;

      case 212: // InstanceOfType
        value.copy< InstanceOfType > (that.value);
        break;

      case 272: // IntegerType
        value.copy< IntegerType > (that.value);
        break;

      case 236: // ModuleBody
        value.copy< Module > (that.value);
        break;

      case 274: // NamedNumber
        value.copy< NamedNumber > (that.value);
        break;

      case 263: // NamedType
        value.copy< NamedType > (that.value);
        break;

      case 285: // NullType
        value.copy< NullType > (that.value);
        break;

      case 198: // ObjectClassFieldType
        value.copy< ObjectClassFieldType > (that.value);
        break;

      case 308: // ObjIdComponents
      case 309: // NameForm
      case 310: // NumberForm
      case 311: // NameAndNumberForm
        value.copy< ObjectIdComponentValue > (that.value);
        break;

      case 305: // ObjectIdentifierType
        value.copy< ObjectIdentifierType > (that.value);
        break;

      case 284: // OctetStringType
        value.copy< OctetStringType > (that.value);
        break;

      case 299: // PrefixedType
        value.copy< PrefixedType > (that.value);
        break;

      case 280: // RealType
        value.copy< RealType > (that.value);
        break;

      case 318: // RelativeIRIType
        value.copy< RelativeIRIType > (that.value);
        break;

      case 312: // RelativeOIDType
        value.copy< RelativeOIDType > (that.value);
        break;

      case 291: // SequenceOfType
        value.copy< SequenceOfType > (that.value);
        break;

      case 286: // SequenceType
        value.copy< SequenceType > (that.value);
        break;

      case 293: // SetOfType
        value.copy< SetOfType > (that.value);
        break;

      case 292: // SetType
        value.copy< SetType > (that.value);
        break;

      case 301: // Tag
        value.copy< Tag > (that.value);
        break;

      case 300: // TaggedType
        value.copy< TaggedType > (that.value);
        break;

      case 234: // TagDefault
        value.copy< TaggingMode > (that.value);
        break;

      case 324: // TimeOfDayType
        value.copy< TimeOfDayType > (that.value);
        break;

      case 321: // TimeType
        value.copy< TimeType > (that.value);
        break;

      case 255: // ActualParameter
      case 261: // Type
      case 330: // ConstrainedType
      case 331: // TypeWithConstraint
        value.copy< Type > (that.value);
        break;

      case 264: // ValueWithoutTypeIdentifier
      case 265: // Value
      case 348: // SingleValue
        value.copy< Value > (that.value);
        break;

      case 5: // realnumber
        value.copy< double > (that.value);
        break;

      case 303: // ClassNumber
        value.copy< int > (that.value);
        break;

      case 4: // number
      case 275: // SignedNumber
        value.copy< long long > (that.value);
        break;

      case 205: // ParameterList
      case 206: // ParameterSeries
        value.copy< std::set<std::string> > (that.value);
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 21: // objectreference
      case 23: // typefieldreference
      case 24: // valuefieldreference
      case 148: // GENERIC_IDENTIFIER_UPPERCASE
      case 149: // GENERIC_IDENTIFIER_LOWERCASE
      case 207: // Parameter
      case 213: // SimpleDefinedType
      case 225: // ModuleIdentifier
      case 243: // GlobalModuleReference
      case 246: // Symbol
      case 247: // Reference
      case 373: // typereference
      case 374: // identifier
      case 375: // valuereference
      case 376: // modulereference
      case 377: // objectclassreference
      case 378: // word
        value.copy< std::string > (that.value);
        break;

      case 248: // AssignmentList
        value.copy< std::vector<Assignment> > (that.value);
        break;

      case 237: // Exports
        value.copy< std::vector<Export> > (that.value);
        break;

      case 239: // Imports
      case 240: // SymbolsImported
      case 241: // SymbolsFromModuleList
        value.copy< std::vector<Import> > (that.value);
        break;

      case 273: // NamedNumberList
        value.copy< std::vector<NamedNumber> > (that.value);
        break;

      case 295: // AlternativeTypeLists
      case 296: // RootAlternativeTypeList
      case 297: // AlternativeTypeList
        value.copy< std::vector<NamedType> > (that.value);
        break;

      case 306: // ObjectIdentifierValue
      case 307: // ObjIdComponentsList
        value.copy< std::vector<ObjectIdComponentValue> > (that.value);
        break;

      case 254: // ActualParameterList
        value.copy< std::vector<Type> > (that.value);
        break;

      case 269: // SequenceOfValues
        value.copy< std::vector<Value> > (that.value);
        break;

      case 245: // SymbolList
        value.copy< std::vector<std::string> > (that.value);
        break;

      default:
        break;
    }

    location = that.location;
    return *this;
  }


  template <typename Base>
  inline
  void
  asn1_parser::yy_destroy_ (const char* yymsg, basic_symbol<Base>& yysym) const
  {
    if (yymsg)
      YY_SYMBOL_PRINT (yymsg, yysym);
  }

#if YYDEBUG
  template <typename Base>
  void
  asn1_parser::yy_print_ (std::ostream& yyo,
                                     const basic_symbol<Base>& yysym) const
  {
    std::ostream& yyoutput = yyo;
    YYUSE (yyoutput);
    symbol_number_type yytype = yysym.type_get ();
    // Avoid a (spurious) G++ 4.8 warning about "array subscript is
    // below array bounds".
    if (yysym.empty ())
      std::abort ();
    yyo << (yytype < yyntokens_ ? "token" : "nterm")
        << ' ' << yytname_[yytype] << " ("
        << yysym.location << ": ";
    YYUSE (yytype);
    yyo << ')';
  }
#endif

  inline
  void
  asn1_parser::yypush_ (const char* m, state_type s, symbol_type& sym)
  {
    stack_symbol_type t (s, sym);
    yypush_ (m, t);
  }

  inline
  void
  asn1_parser::yypush_ (const char* m, stack_symbol_type& s)
  {
    if (m)
      YY_SYMBOL_PRINT (m, s);
    yystack_.push (s);
  }

  inline
  void
  asn1_parser::yypop_ (unsigned int n)
  {
    yystack_.pop (n);
  }

#if YYDEBUG
  std::ostream&
  asn1_parser::debug_stream () const
  {
    return *yycdebug_;
  }

  void
  asn1_parser::set_debug_stream (std::ostream& o)
  {
    yycdebug_ = &o;
  }


  asn1_parser::debug_level_type
  asn1_parser::debug_level () const
  {
    return yydebug_;
  }

  void
  asn1_parser::set_debug_level (debug_level_type l)
  {
    yydebug_ = l;
  }
#endif // YYDEBUG

  inline asn1_parser::state_type
  asn1_parser::yy_lr_goto_state_ (state_type yystate, int yysym)
  {
    int yyr = yypgoto_[yysym - yyntokens_] + yystate;
    if (0 <= yyr && yyr <= yylast_ && yycheck_[yyr] == yystate)
      return yytable_[yyr];
    else
      return yydefgoto_[yysym - yyntokens_];
  }

  inline bool
  asn1_parser::yy_pact_value_is_default_ (int yyvalue)
  {
    return yyvalue == yypact_ninf_;
  }

  inline bool
  asn1_parser::yy_table_value_is_error_ (int yyvalue)
  {
    return yyvalue == yytable_ninf_;
  }

  int
  asn1_parser::parse ()
  {
    // State.
    int yyn;
    /// Length of the RHS of the rule being reduced.
    int yylen = 0;

    // Error handling.
    int yynerrs_ = 0;
    int yyerrstatus_ = 0;

    /// The lookahead symbol.
    symbol_type yyla;

    /// The locations where the error started and ended.
    stack_symbol_type yyerror_range[3];

    /// The return value of parse ().
    int yyresult;

    // FIXME: This shoud be completely indented.  It is not yet to
    // avoid gratuitous conflicts when merging into the master branch.
    try
      {
    YYCDEBUG << "Starting parse" << std::endl;


    /* Initialize the stack.  The initial state will be set in
       yynewstate, since the latter expects the semantical and the
       location values to have been already stored, initialize these
       stacks with a primary value.  */
    yystack_.clear ();
    yypush_ (YY_NULLPTR, 0, yyla);

    // A new symbol was pushed on the stack.
  yynewstate:
    YYCDEBUG << "Entering state " << yystack_[0].state << std::endl;

    // Accept?
    if (yystack_[0].state == yyfinal_)
      goto yyacceptlab;

    goto yybackup;

    // Backup.
  yybackup:

    // Try to take a decision without lookahead.
    yyn = yypact_[yystack_[0].state];
    if (yy_pact_value_is_default_ (yyn))
      goto yydefault;

    // Read a lookahead token.
    if (yyla.empty ())
      {
        YYCDEBUG << "Reading a token: ";
        try
          {
            symbol_type yylookahead (yylex (context));
            yyla.move (yylookahead);
          }
        catch (const syntax_error& yyexc)
          {
            error (yyexc);
            goto yyerrlab1;
          }
      }
    YY_SYMBOL_PRINT ("Next token is", yyla);

    /* If the proper action on seeing token YYLA.TYPE is to reduce or
       to detect an error, take that action.  */
    yyn += yyla.type_get ();
    if (yyn < 0 || yylast_ < yyn || yycheck_[yyn] != yyla.type_get ())
      goto yydefault;

    // Reduce or error.
    yyn = yytable_[yyn];
    if (yyn <= 0)
      {
        if (yy_table_value_is_error_ (yyn))
          goto yyerrlab;
        yyn = -yyn;
        goto yyreduce;
      }

    // Count tokens shifted since error; after three, turn off error status.
    if (yyerrstatus_)
      --yyerrstatus_;

    // Shift the lookahead token.
    yypush_ ("Shifting", yyn, yyla);
    goto yynewstate;

  /*-----------------------------------------------------------.
  | yydefault -- do the default action for the current state.  |
  `-----------------------------------------------------------*/
  yydefault:
    yyn = yydefact_[yystack_[0].state];
    if (yyn == 0)
      goto yyerrlab;
    goto yyreduce;

  /*-----------------------------.
  | yyreduce -- Do a reduction.  |
  `-----------------------------*/
  yyreduce:
    yylen = yyr2_[yyn];
    {
      stack_symbol_type yylhs;
      yylhs.state = yy_lr_goto_state_(yystack_[yylen].state, yyr1_[yyn]);
      /* Variants are always initialized to an empty instance of the
         correct type. The default '$$ = $1' action is NOT applied
         when using variants.  */
        switch (yyr1_[yyn])
    {
      case 159: // ObjectClassAssignment
      case 195: // ObjectSetAssignment
      case 199: // ParameterizedAssignment
      case 200: // ParameterizedTypeAssignment
      case 201: // ParameterizedValueAssignment
      case 202: // ParameterizedValueSetTypeAssignment
      case 203: // ParameterizedObjectClassAssignment
      case 204: // ParameterizedObjectAssignment
      case 249: // Assignment
      case 258: // TypeAssignment
      case 259: // ValueAssignment
      case 260: // ValueSetTypeAssignment
        yylhs.value.build< Assignment > ();
        break;

      case 281: // BitStringType
        yylhs.value.build< BitStringType > ();
        break;

      case 270: // BooleanType
        yylhs.value.build< BooleanType > ();
        break;

      case 262: // BuiltinType
        yylhs.value.build< BuiltinType > ();
        break;

      case 327: // CharacterStringType
        yylhs.value.build< CharacterStringType > ();
        break;

      case 294: // ChoiceType
        yylhs.value.build< ChoiceType > ();
        break;

      case 304: // Class
        yylhs.value.build< Class > ();
        break;

      case 290: // ComponentType
        yylhs.value.build< ComponentType > ();
        break;

      case 287: // ComponentTypeLists
      case 288: // RootComponentTypeList
      case 289: // ComponentTypeList
        yylhs.value.build< ComponentTypeList > ();
        break;

      case 325: // DateTimeType
        yylhs.value.build< DateTimeType > ();
        break;

      case 323: // DateType
        yylhs.value.build< DateType > ();
        break;

      case 250: // DefinedType
      case 252: // ParameterizedType
        yylhs.value.build< DefinedType > ();
        break;

      case 251: // DefinedValue
        yylhs.value.build< DefinedValue > ();
        break;

      case 326: // DurationType
        yylhs.value.build< DurationType > ();
        break;

      case 319: // EmbeddedPDVType
        yylhs.value.build< EmbeddedPDVType > ();
        break;

      case 276: // EnumeratedType
      case 277: // Enumerations
      case 278: // Enumeration
        yylhs.value.build< EnumeratedType > ();
        break;

      case 279: // EnumerationItem
        yylhs.value.build< EnumerationValue > ();
        break;

      case 320: // ExternalType
        yylhs.value.build< ExternalType > ();
        break;

      case 313: // IRIType
        yylhs.value.build< IRIType > ();
        break;

      case 242: // SymbolsFromModule
        yylhs.value.build< Import > ();
        break;

      case 212: // InstanceOfType
        yylhs.value.build< InstanceOfType > ();
        break;

      case 272: // IntegerType
        yylhs.value.build< IntegerType > ();
        break;

      case 236: // ModuleBody
        yylhs.value.build< Module > ();
        break;

      case 274: // NamedNumber
        yylhs.value.build< NamedNumber > ();
        break;

      case 263: // NamedType
        yylhs.value.build< NamedType > ();
        break;

      case 285: // NullType
        yylhs.value.build< NullType > ();
        break;

      case 198: // ObjectClassFieldType
        yylhs.value.build< ObjectClassFieldType > ();
        break;

      case 308: // ObjIdComponents
      case 309: // NameForm
      case 310: // NumberForm
      case 311: // NameAndNumberForm
        yylhs.value.build< ObjectIdComponentValue > ();
        break;

      case 305: // ObjectIdentifierType
        yylhs.value.build< ObjectIdentifierType > ();
        break;

      case 284: // OctetStringType
        yylhs.value.build< OctetStringType > ();
        break;

      case 299: // PrefixedType
        yylhs.value.build< PrefixedType > ();
        break;

      case 280: // RealType
        yylhs.value.build< RealType > ();
        break;

      case 318: // RelativeIRIType
        yylhs.value.build< RelativeIRIType > ();
        break;

      case 312: // RelativeOIDType
        yylhs.value.build< RelativeOIDType > ();
        break;

      case 291: // SequenceOfType
        yylhs.value.build< SequenceOfType > ();
        break;

      case 286: // SequenceType
        yylhs.value.build< SequenceType > ();
        break;

      case 293: // SetOfType
        yylhs.value.build< SetOfType > ();
        break;

      case 292: // SetType
        yylhs.value.build< SetType > ();
        break;

      case 301: // Tag
        yylhs.value.build< Tag > ();
        break;

      case 300: // TaggedType
        yylhs.value.build< TaggedType > ();
        break;

      case 234: // TagDefault
        yylhs.value.build< TaggingMode > ();
        break;

      case 324: // TimeOfDayType
        yylhs.value.build< TimeOfDayType > ();
        break;

      case 321: // TimeType
        yylhs.value.build< TimeType > ();
        break;

      case 255: // ActualParameter
      case 261: // Type
      case 330: // ConstrainedType
      case 331: // TypeWithConstraint
        yylhs.value.build< Type > ();
        break;

      case 264: // ValueWithoutTypeIdentifier
      case 265: // Value
      case 348: // SingleValue
        yylhs.value.build< Value > ();
        break;

      case 5: // realnumber
        yylhs.value.build< double > ();
        break;

      case 303: // ClassNumber
        yylhs.value.build< int > ();
        break;

      case 4: // number
      case 275: // SignedNumber
        yylhs.value.build< long long > ();
        break;

      case 205: // ParameterList
      case 206: // ParameterSeries
        yylhs.value.build< std::set<std::string> > ();
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 21: // objectreference
      case 23: // typefieldreference
      case 24: // valuefieldreference
      case 148: // GENERIC_IDENTIFIER_UPPERCASE
      case 149: // GENERIC_IDENTIFIER_LOWERCASE
      case 207: // Parameter
      case 213: // SimpleDefinedType
      case 225: // ModuleIdentifier
      case 243: // GlobalModuleReference
      case 246: // Symbol
      case 247: // Reference
      case 373: // typereference
      case 374: // identifier
      case 375: // valuereference
      case 376: // modulereference
      case 377: // objectclassreference
      case 378: // word
        yylhs.value.build< std::string > ();
        break;

      case 248: // AssignmentList
        yylhs.value.build< std::vector<Assignment> > ();
        break;

      case 237: // Exports
        yylhs.value.build< std::vector<Export> > ();
        break;

      case 239: // Imports
      case 240: // SymbolsImported
      case 241: // SymbolsFromModuleList
        yylhs.value.build< std::vector<Import> > ();
        break;

      case 273: // NamedNumberList
        yylhs.value.build< std::vector<NamedNumber> > ();
        break;

      case 295: // AlternativeTypeLists
      case 296: // RootAlternativeTypeList
      case 297: // AlternativeTypeList
        yylhs.value.build< std::vector<NamedType> > ();
        break;

      case 306: // ObjectIdentifierValue
      case 307: // ObjIdComponentsList
        yylhs.value.build< std::vector<ObjectIdComponentValue> > ();
        break;

      case 254: // ActualParameterList
        yylhs.value.build< std::vector<Type> > ();
        break;

      case 269: // SequenceOfValues
        yylhs.value.build< std::vector<Value> > ();
        break;

      case 245: // SymbolList
        yylhs.value.build< std::vector<std::string> > ();
        break;

      default:
        break;
    }


      // Compute the default @$.
      {
        slice<stack_symbol_type, stack_type> slice (yystack_, yylen);
        YYLLOC_DEFAULT (yylhs.location, slice, yylen);
      }

      // Perform the reduction.
      YY_REDUCE_PRINT (yyn);
      try
        {
          switch (yyn)
            {
  case 4:
#line 323 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yystack_[2].value.as< Module > ().module_reference = yystack_[9].value.as< std::string > ();
      yystack_[2].value.as< Module > ().tagging_default = yystack_[6].value.as< TaggingMode > ();
      context.asn1_tree.modules.push_back(yystack_[2].value.as< Module > ()); }
#line 6157 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 12:
#line 344 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{yystack_[2].value.as< std::string > (), ObjectClassAssignment{}}; }
#line 6163 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 81:
#line 496 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{yystack_[3].value.as< std::string > (), ObjectSetAssignment{}}; }
#line 6169 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 90:
#line 523 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 6175 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 91:
#line 525 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 6181 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 92:
#line 527 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 6187 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 93:
#line 529 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 6193 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 94:
#line 531 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 6199 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 95:
#line 536 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[3].value.as< std::string > (), TypeAssignment{yystack_[0].value.as< Type > ()}, {}, yystack_[2].value.as< std::set<std::string> > () }; }
#line 6205 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 96:
#line 540 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[4].value.as< std::string > (), ValueAssignment{} }; }
#line 6211 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 97:
#line 544 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[4].value.as< std::string > (), ValueAssignment{} }; }
#line 6217 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 98:
#line 548 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[3].value.as< std::string > (), ObjectClassAssignment{} }; }
#line 6223 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 99:
#line 552 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[4].value.as< std::string > (), ObjectClassAssignment{} }; }
#line 6229 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 100:
#line 560 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::set<std::string> > () = yystack_[1].value.as< std::set<std::string> > (); }
#line 6235 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 101:
#line 564 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::set<std::string> > ().insert(yystack_[0].value.as< std::string > ()); }
#line 6241 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 102:
#line 566 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::set<std::string> > () = yystack_[2].value.as< std::set<std::string> > (); yystack_[2].value.as< std::set<std::string> > ().insert(yystack_[0].value.as< std::string > ()); }
#line 6247 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 103:
#line 570 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 6253 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 104:
#line 572 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 6259 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 113:
#line 625 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 6265 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 125:
#line 649 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << "Simple constraint\n"; }
#line 6271 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 126:
#line 651 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << "Relation constraint\n"; }
#line 6277 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 139:
#line 693 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    {
    yylhs.value.as< std::string > () = yystack_[1].value.as< std::string > ();
}
#line 6285 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 154:
#line 732 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggingMode > () = TaggingMode::explicit_; }
#line 6291 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 155:
#line 734 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggingMode > () = TaggingMode::implicit; }
#line 6297 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 156:
#line 736 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggingMode > () = TaggingMode::automatic; }
#line 6303 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 157:
#line 738 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggingMode > () = TaggingMode::explicit_; }
#line 6309 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 160:
#line 746 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Module > () = Module{ {}, TaggingMode(), yystack_[2].value.as< std::vector<Export> > (), yystack_[1].value.as< std::vector<Import> > (), yystack_[0].value.as< std::vector<Assignment> > ()}; }
#line 6315 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 161:
#line 748 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { }
#line 6321 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 167:
#line 761 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Import> > () = yystack_[1].value.as< std::vector<Import> > (); }
#line 6327 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 169:
#line 766 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Import> > () = yystack_[0].value.as< std::vector<Import> > (); }
#line 6333 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 171:
#line 771 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Import> > ().push_back(yystack_[0].value.as< Import > ()); }
#line 6339 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 172:
#line 773 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Import> > () = yystack_[1].value.as< std::vector<Import> > (); yylhs.value.as< std::vector<Import> > ().push_back(yystack_[0].value.as< Import > ()); }
#line 6345 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 173:
#line 777 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Import > () = Import{ yystack_[0].value.as< std::string > (), yystack_[2].value.as< std::vector<std::string> > () }; }
#line 6351 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 174:
#line 781 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[1].value.as< std::string > (); }
#line 6357 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 178:
#line 790 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<std::string> > ().push_back(yystack_[0].value.as< std::string > ()); }
#line 6363 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 179:
#line 792 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<std::string> > () = yystack_[2].value.as< std::vector<std::string> > (); yylhs.value.as< std::vector<std::string> > ().push_back(yystack_[0].value.as< std::string > ()); }
#line 6369 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 180:
#line 796 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 6375 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 181:
#line 800 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 6381 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 182:
#line 802 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[2].value.as< std::string > (); }
#line 6387 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 183:
#line 804 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 6393 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 184:
#line 813 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Assignment> > ().push_back(yystack_[0].value.as< Assignment > ()); }
#line 6399 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 185:
#line 815 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Assignment> > () = yystack_[0].value.as< std::vector<Assignment> > (); yylhs.value.as< std::vector<Assignment> > ().push_back(yystack_[1].value.as< Assignment > ()); }
#line 6405 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 186:
#line 819 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 6411 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 187:
#line 821 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 6417 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 188:
#line 823 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 6423 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 189:
#line 825 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 6429 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 190:
#line 828 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 6435 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 191:
#line 830 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 6441 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 193:
#line 835 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< DefinedType > () = DefinedType{yystack_[0].value.as< std::string > (), {}}; }
#line 6447 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 194:
#line 837 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< DefinedType > () = yystack_[0].value.as< DefinedType > (); }
#line 6453 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 195:
#line 843 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< DefinedValue > () = DefinedValue{yystack_[0].value.as< std::string > ()}; }
#line 6459 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 197:
#line 848 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< DefinedType > () = DefinedType{yystack_[1].value.as< std::string > (), yystack_[0].value.as< std::vector<Type> > ()}; }
#line 6465 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 199:
#line 855 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Type> > ().push_back(yystack_[1].value.as< Type > ()); }
#line 6471 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 200:
#line 859 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = yystack_[0].value.as< Type > (); }
#line 6477 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 201:
#line 861 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << "Warning: Not yet dealing with value paramaters\n"; }
#line 6483 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 205:
#line 902 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[2].value.as< std::string > (), TypeAssignment{yystack_[0].value.as< Type > ()}, {} }; }
#line 6489 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 206:
#line 906 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[3].value.as< std::string > (), ValueAssignment{yystack_[2].value.as< Type > (), yystack_[0].value.as< Value > ()}, {} }; }
#line 6495 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 207:
#line 910 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[3].value.as< std::string > (), TypeAssignment{yystack_[2].value.as< Type > ()}, {} }; }
#line 6501 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 208:
#line 914 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = yystack_[0].value.as< BuiltinType > (); }
#line 6507 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 209:
#line 916 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = yystack_[0].value.as< Type > (); }
#line 6513 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 210:
#line 918 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = yystack_[0].value.as< DefinedType > (); }
#line 6519 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 211:
#line 920 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << "Warning: Not handled - SelectionType\n"; }
#line 6525 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 212:
#line 922 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Not handled - TypeFromObject\n"); }
#line 6531 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 213:
#line 926 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = AnyType(); }
#line 6537 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 214:
#line 927 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< BitStringType > (); }
#line 6543 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 215:
#line 928 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< BooleanType > (); }
#line 6549 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 216:
#line 929 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< CharacterStringType > (); }
#line 6555 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 217:
#line 930 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< ChoiceType > (); }
#line 6561 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 218:
#line 931 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< DateType > (); }
#line 6567 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 219:
#line 932 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< DateTimeType > (); }
#line 6573 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 220:
#line 933 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< DurationType > (); }
#line 6579 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 221:
#line 934 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< EmbeddedPDVType > (); }
#line 6585 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 222:
#line 935 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< EnumeratedType > (); }
#line 6591 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 223:
#line 936 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< ExternalType > (); }
#line 6597 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 224:
#line 937 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = GeneralizedTimeType(); }
#line 6603 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 225:
#line 938 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< InstanceOfType > (); }
#line 6609 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 226:
#line 939 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< IntegerType > (); }
#line 6615 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 227:
#line 940 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< IRIType > (); }
#line 6621 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 228:
#line 941 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< NullType > (); }
#line 6627 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 229:
#line 942 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< ObjectClassFieldType > (); }
#line 6633 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 230:
#line 943 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = ObjectDescriptorType(); }
#line 6639 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 231:
#line 944 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< ObjectIdentifierType > (); }
#line 6645 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 232:
#line 945 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< OctetStringType > (); }
#line 6651 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 233:
#line 946 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< RealType > (); }
#line 6657 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 234:
#line 947 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< RelativeIRIType > (); }
#line 6663 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 235:
#line 948 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< RelativeOIDType > (); }
#line 6669 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 236:
#line 949 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< SequenceType > (); }
#line 6675 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 237:
#line 950 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< SequenceOfType > (); }
#line 6681 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 238:
#line 951 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< SetType > (); }
#line 6687 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 239:
#line 952 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< SetOfType > (); }
#line 6693 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 240:
#line 953 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< PrefixedType > (); }
#line 6699 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 241:
#line 954 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< TimeType > (); }
#line 6705 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 242:
#line 955 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< TimeOfDayType > (); }
#line 6711 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 243:
#line 956 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = UTCTimeType(); }
#line 6717 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 244:
#line 960 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< NamedType > () = NamedType{ yystack_[1].value.as< std::string > (), yystack_[0].value.as< Type > () }; }
#line 6723 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 245:
#line 964 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Unhandled field: BooleanValue\n"); }
#line 6729 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 246:
#line 966 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Unhandled field: IRIValue\n"); }
#line 6735 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 247:
#line 968 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Unhandled field: ASN_NULL\n"); }
#line 6741 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 248:
#line 970 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Unhandled field: TimeValue\n"); }
#line 6747 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 249:
#line 972 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Unhandled field: bstring\n"); }
#line 6753 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 250:
#line 974 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Unhandled field: hstring\n"); }
#line 6759 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 251:
#line 976 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = yystack_[0].value.as< std::string > (); }
#line 6765 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 252:
#line 978 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Unhandled field: CONTAINING\n"); }
#line 6771 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 253:
#line 980 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().defined_value = yystack_[0].value.as< DefinedValue > (); }
#line 6777 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 254:
#line 982 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = NamedNumber{yystack_[3].value.as< std::string > (), yystack_[1].value.as< long long > ()}; }
#line 6783 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 256:
#line 985 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = yystack_[0].value.as< long long > (); }
#line 6789 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 257:
#line 987 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = yystack_[0].value.as< double > (); }
#line 6795 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 258:
#line 989 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Unhandled field: ValueCommaListChoice\n"); }
#line 6801 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 259:
#line 991 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Unhandled field: ValueCommaListChoice\n"); }
#line 6807 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 260:
#line 995 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = yystack_[1].value.as< std::vector<Value> > (); }
#line 6813 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 261:
#line 997 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Unhandled field: ValueChoice\n"); }
#line 6819 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 262:
#line 999 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Unhandled field: OPTIONAL\n"); }
#line 6825 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 263:
#line 1001 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Unhandled field: ValueCommaListChoice\n"); }
#line 6831 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 264:
#line 1003 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Unhandled field: BY\n"); }
#line 6837 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 265:
#line 1007 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > () = yystack_[0].value.as< Value > (); }
#line 6843 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 266:
#line 1009 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = yystack_[0].value.as< std::string > (); }
#line 6849 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 272:
#line 1024 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Value> > ().push_back(yystack_[0].value.as< Value > ()); }
#line 6855 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 273:
#line 1026 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Value> > () = yystack_[1].value.as< std::vector<Value> > (); yylhs.value.as< std::vector<Value> > ().push_back(yystack_[0].value.as< Value > ()); }
#line 6861 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 277:
#line 1041 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< IntegerType > () = IntegerType{{}}; }
#line 6867 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 278:
#line 1043 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< IntegerType > () = IntegerType{yystack_[1].value.as< std::vector<NamedNumber> > ()}; }
#line 6873 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 279:
#line 1047 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedNumber> > () = {yystack_[0].value.as< NamedNumber > ()}; }
#line 6879 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 280:
#line 1049 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedNumber> > () = yystack_[2].value.as< std::vector<NamedNumber> > (); yylhs.value.as< std::vector<NamedNumber> > ().push_back(yystack_[0].value.as< NamedNumber > ()); }
#line 6885 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 281:
#line 1053 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< NamedNumber > () = NamedNumber{ yystack_[3].value.as< std::string > (), yystack_[1].value.as< long long > () }; }
#line 6891 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 282:
#line 1055 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< NamedNumber > () = NamedNumber{ yystack_[3].value.as< std::string > (), 0 }; }
#line 6897 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 283:
#line 1059 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< long long > () = yystack_[0].value.as< long long > (); }
#line 6903 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 284:
#line 1061 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< long long > () = -yystack_[0].value.as< long long > (); }
#line 6909 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 285:
#line 1065 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[1].value.as< EnumeratedType > (); }
#line 6915 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 286:
#line 1069 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[0].value.as< EnumeratedType > ();
      yylhs.value.as< EnumeratedType > ().accept_anything = false; }
#line 6922 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 287:
#line 1072 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[3].value.as< EnumeratedType > ();
      yylhs.value.as< EnumeratedType > ().accept_anything = true; }
#line 6929 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 288:
#line 1075 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[5].value.as< EnumeratedType > ();
      yylhs.value.as< EnumeratedType > ().accept_anything = true;
      yylhs.value.as< EnumeratedType > ().enum_values.insert(yylhs.value.as< EnumeratedType > ().enum_values.end(), yystack_[0].value.as< EnumeratedType > ().enum_values.begin(), yystack_[0].value.as< EnumeratedType > ().enum_values.end()); }
#line 6937 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 290:
#line 1082 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > ().enum_values.push_back(yystack_[0].value.as< EnumerationValue > ()); }
#line 6943 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 291:
#line 1084 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[2].value.as< EnumeratedType > (); yylhs.value.as< EnumeratedType > ().enum_values.push_back(yystack_[0].value.as< EnumerationValue > ()); }
#line 6949 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 292:
#line 1088 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumerationValue > ().name  = yystack_[0].value.as< std::string > (); }
#line 6955 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 293:
#line 1090 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumerationValue > ().name  = yystack_[0].value.as< NamedNumber > ().name;
      yylhs.value.as< EnumerationValue > ().value = yystack_[0].value.as< NamedNumber > ().number; }
#line 6962 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 303:
#line 1130 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SequenceType > () = SequenceType(); }
#line 6968 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 304:
#line 1132 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SequenceType > () = SequenceType{yystack_[1].value.as< ComponentTypeList > ()}; }
#line 6974 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 305:
#line 1140 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[0].value.as< ComponentTypeList > (); }
#line 6980 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 306:
#line 1144 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[0].value.as< ComponentTypeList > (); }
#line 6986 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 307:
#line 1146 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[3].value.as< ComponentTypeList > (); }
#line 6992 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 308:
#line 1148 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[5].value.as< ComponentTypeList > (); yylhs.value.as< ComponentTypeList > ().insert(yylhs.value.as< ComponentTypeList > ().end(), yystack_[0].value.as< ComponentTypeList > ().begin(), yystack_[0].value.as< ComponentTypeList > ().end()); }
#line 6998 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 309:
#line 1150 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[7].value.as< ComponentTypeList > (); yylhs.value.as< ComponentTypeList > ().insert(yylhs.value.as< ComponentTypeList > ().end(), yystack_[2].value.as< ComponentTypeList > ().begin(), yystack_[2].value.as< ComponentTypeList > ().end()); }
#line 7004 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 310:
#line 1152 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[9].value.as< ComponentTypeList > (); yylhs.value.as< ComponentTypeList > ().insert(yylhs.value.as< ComponentTypeList > ().end(), yystack_[4].value.as< ComponentTypeList > ().begin(), yystack_[4].value.as< ComponentTypeList > ().end()); yylhs.value.as< ComponentTypeList > ().insert(yylhs.value.as< ComponentTypeList > ().end(), yystack_[0].value.as< ComponentTypeList > ().begin(), yystack_[0].value.as< ComponentTypeList > ().end()); }
#line 7010 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 311:
#line 1154 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[0].value.as< ComponentTypeList > (); }
#line 7016 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 312:
#line 1156 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[2].value.as< ComponentTypeList > (); }
#line 7022 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 313:
#line 1158 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = {}; }
#line 7028 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 314:
#line 1160 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = {}; }
#line 7034 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 315:
#line 1164 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = ComponentTypeList{yystack_[0].value.as< ComponentType > ()}; }
#line 7040 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 316:
#line 1166 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yystack_[2].value.as< ComponentTypeList > ().push_back(yystack_[0].value.as< ComponentType > ()); yylhs.value.as< ComponentTypeList > () = yystack_[2].value.as< ComponentTypeList > (); }
#line 7046 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 317:
#line 1170 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentType > () = ComponentType{yystack_[0].value.as< NamedType > (), false, absl::nullopt}; }
#line 7052 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 318:
#line 1172 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentType > () = ComponentType{yystack_[1].value.as< NamedType > (), true, absl::nullopt}; }
#line 7058 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 319:
#line 1174 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentType > () = ComponentType{yystack_[2].value.as< NamedType > (), false, yystack_[0].value.as< Value > ()}; }
#line 7064 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 321:
#line 1187 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SequenceOfType > () = SequenceOfType{ false, nullptr, std::make_shared<Type>(yystack_[0].value.as< Type > ()) }; }
#line 7070 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 322:
#line 1189 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SequenceOfType > () = SequenceOfType{ true, std::make_shared<NamedType>(yystack_[0].value.as< NamedType > ()), nullptr }; }
#line 7076 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 323:
#line 1193 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SetType > () = SetType{}; }
#line 7082 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 324:
#line 1195 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SetType > () = SetType{yystack_[1].value.as< ComponentTypeList > ()}; }
#line 7088 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 325:
#line 1199 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SetOfType > () = SetOfType{ false, nullptr, std::make_shared<Type>(yystack_[0].value.as< Type > ()) }; }
#line 7094 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 326:
#line 1201 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SetOfType > () = SetOfType{ true, std::make_shared<NamedType>(yystack_[0].value.as< NamedType > ()), nullptr }; }
#line 7100 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 327:
#line 1205 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ChoiceType > () = ChoiceType{ yystack_[1].value.as< std::vector<NamedType> > () }; }
#line 7106 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 328:
#line 1209 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedType> > () = yystack_[0].value.as< std::vector<NamedType> > (); }
#line 7112 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 329:
#line 1213 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedType> > () = yystack_[0].value.as< std::vector<NamedType> > (); }
#line 7118 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 330:
#line 1215 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedType> > () = yystack_[2].value.as< std::vector<NamedType> > (); }
#line 7124 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 331:
#line 1217 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedType> > () = yystack_[4].value.as< std::vector<NamedType> > (); yylhs.value.as< std::vector<NamedType> > ().insert(yylhs.value.as< std::vector<NamedType> > ().begin(), yystack_[0].value.as< std::vector<NamedType> > ().begin(), yystack_[0].value.as< std::vector<NamedType> > ().end()); }
#line 7130 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 332:
#line 1221 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedType> > () = std::vector<NamedType> { yystack_[0].value.as< NamedType > () }; }
#line 7136 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 333:
#line 1223 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yystack_[2].value.as< std::vector<NamedType> > ().push_back( yystack_[0].value.as< NamedType > () ); yylhs.value.as< std::vector<NamedType> > () = yystack_[2].value.as< std::vector<NamedType> > (); }
#line 7142 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 335:
#line 1233 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< PrefixedType > () = PrefixedType(yystack_[0].value.as< TaggedType > ()); }
#line 7148 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 336:
#line 1237 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggedType > () = TaggedType{ yystack_[1].value.as< Tag > (), TaggingMode::automatic, yystack_[0].value.as< Type > () }; }
#line 7154 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 337:
#line 1239 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggedType > () = TaggedType{ yystack_[2].value.as< Tag > (), TaggingMode::implicit, yystack_[0].value.as< Type > () }; }
#line 7160 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 338:
#line 1241 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggedType > () = TaggedType{ yystack_[2].value.as< Tag > (), TaggingMode::explicit_, yystack_[0].value.as< Type > () }; }
#line 7166 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 339:
#line 1245 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Tag > () = Tag{ yystack_[2].value.as< Class > (), yystack_[1].value.as< int > () }; }
#line 7172 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 342:
#line 1253 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< int > () = yystack_[0].value.as< long long > (); }
#line 7178 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 344:
#line 1258 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Class > () = Class::universal; }
#line 7184 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 345:
#line 1260 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Class > () = Class::application; }
#line 7190 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 346:
#line 1262 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Class > () = Class::private_; }
#line 7196 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 347:
#line 1264 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Class > () = Class::context_specific; }
#line 7202 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 349:
#line 1277 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<ObjectIdComponentValue> > () = yystack_[1].value.as< std::vector<ObjectIdComponentValue> > (); std::reverse(yylhs.value.as< std::vector<ObjectIdComponentValue> > ().begin(), yylhs.value.as< std::vector<ObjectIdComponentValue> > ().end()); }
#line 7208 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 350:
#line 1279 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<ObjectIdComponentValue> > () = yystack_[1].value.as< std::vector<ObjectIdComponentValue> > (); std::reverse(yylhs.value.as< std::vector<ObjectIdComponentValue> > ().begin(), yylhs.value.as< std::vector<ObjectIdComponentValue> > ().end()); }
#line 7214 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 351:
#line 1283 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<ObjectIdComponentValue> > ().push_back(yystack_[0].value.as< ObjectIdComponentValue > ()); }
#line 7220 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 352:
#line 1285 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<ObjectIdComponentValue> > () = yystack_[0].value.as< std::vector<ObjectIdComponentValue> > (); yylhs.value.as< std::vector<ObjectIdComponentValue> > ().push_back(yystack_[1].value.as< ObjectIdComponentValue > ()); }
#line 7226 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 353:
#line 1289 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > () = yystack_[0].value.as< ObjectIdComponentValue > (); }
#line 7232 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 354:
#line 1291 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > () = yystack_[0].value.as< ObjectIdComponentValue > (); }
#line 7238 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 355:
#line 1293 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > () = yystack_[0].value.as< ObjectIdComponentValue > (); }
#line 7244 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 356:
#line 1297 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > ().name = yystack_[0].value.as< std::string > (); }
#line 7250 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 357:
#line 1301 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > ().value = yystack_[0].value.as< long long > (); }
#line 7256 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 359:
#line 1306 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > () = yystack_[1].value.as< ObjectIdComponentValue > (); yylhs.value.as< ObjectIdComponentValue > ().name = yystack_[3].value.as< std::string > (); }
#line 7262 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 393:
#line 1402 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = yystack_[1].value.as< Type > (); }
#line 7268 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 394:
#line 1404 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = yystack_[0].value.as< Type > (); }
#line 7274 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 395:
#line 1408 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = SetOfType{ false, nullptr, std::make_shared<Type>(yystack_[0].value.as< Type > ()) }; }
#line 7280 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 396:
#line 1410 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = SetOfType{ false, nullptr, std::make_shared<Type>(yystack_[0].value.as< Type > ()) }; }
#line 7286 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 397:
#line 1412 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = SequenceOfType{ false, nullptr, std::make_shared<Type>(yystack_[0].value.as< Type > ()) }; }
#line 7292 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 398:
#line 1414 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = SequenceOfType{ false, nullptr, std::make_shared<Type>(yystack_[0].value.as< Type > ()) }; }
#line 7298 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 399:
#line 1416 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = SetOfType{ true, std::make_shared<NamedType>(yystack_[0].value.as< NamedType > ()), nullptr }; }
#line 7304 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 400:
#line 1418 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = SetOfType{ true, std::make_shared<NamedType>(yystack_[0].value.as< NamedType > ()), nullptr }; }
#line 7310 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 401:
#line 1420 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = SequenceOfType{ true, std::make_shared<NamedType>(yystack_[0].value.as< NamedType > ()), nullptr }; }
#line 7316 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 402:
#line 1422 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = SequenceOfType{ true, std::make_shared<NamedType>(yystack_[0].value.as< NamedType > ()), nullptr }; }
#line 7322 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 485:
#line 1595 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 7328 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 486:
#line 1599 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 7334 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 487:
#line 1603 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 7340 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 488:
#line 1607 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 7346 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 489:
#line 1611 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 7352 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;


#line 7356 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
            default:
              break;
            }
        }
      catch (const syntax_error& yyexc)
        {
          error (yyexc);
          YYERROR;
        }
      YY_SYMBOL_PRINT ("-> $$ =", yylhs);
      yypop_ (yylen);
      yylen = 0;
      YY_STACK_PRINT ();

      // Shift the result of the reduction.
      yypush_ (YY_NULLPTR, yylhs);
    }
    goto yynewstate;

  /*--------------------------------------.
  | yyerrlab -- here on detecting error.  |
  `--------------------------------------*/
  yyerrlab:
    // If not already recovering from an error, report this error.
    if (!yyerrstatus_)
      {
        ++yynerrs_;
        error (yyla.location, yysyntax_error_ (yystack_[0].state, yyla));
      }


    yyerror_range[1].location = yyla.location;
    if (yyerrstatus_ == 3)
      {
        /* If just tried and failed to reuse lookahead token after an
           error, discard it.  */

        // Return failure if at end of input.
        if (yyla.type_get () == yyeof_)
          YYABORT;
        else if (!yyla.empty ())
          {
            yy_destroy_ ("Error: discarding", yyla);
            yyla.clear ();
          }
      }

    // Else will try to reuse lookahead token after shifting the error token.
    goto yyerrlab1;


  /*---------------------------------------------------.
  | yyerrorlab -- error raised explicitly by YYERROR.  |
  `---------------------------------------------------*/
  yyerrorlab:

    /* Pacify compilers like GCC when the user code never invokes
       YYERROR and the label yyerrorlab therefore never appears in user
       code.  */
    if (false)
      goto yyerrorlab;
    yyerror_range[1].location = yystack_[yylen - 1].location;
    /* Do not reclaim the symbols of the rule whose action triggered
       this YYERROR.  */
    yypop_ (yylen);
    yylen = 0;
    goto yyerrlab1;

  /*-------------------------------------------------------------.
  | yyerrlab1 -- common code for both syntax error and YYERROR.  |
  `-------------------------------------------------------------*/
  yyerrlab1:
    yyerrstatus_ = 3;   // Each real token shifted decrements this.
    {
      stack_symbol_type error_token;
      for (;;)
        {
          yyn = yypact_[yystack_[0].state];
          if (!yy_pact_value_is_default_ (yyn))
            {
              yyn += yyterror_;
              if (0 <= yyn && yyn <= yylast_ && yycheck_[yyn] == yyterror_)
                {
                  yyn = yytable_[yyn];
                  if (0 < yyn)
                    break;
                }
            }

          // Pop the current state because it cannot handle the error token.
          if (yystack_.size () == 1)
            YYABORT;

          yyerror_range[1].location = yystack_[0].location;
          yy_destroy_ ("Error: popping", yystack_[0]);
          yypop_ ();
          YY_STACK_PRINT ();
        }

      yyerror_range[2].location = yyla.location;
      YYLLOC_DEFAULT (error_token.location, yyerror_range, 2);

      // Shift the error token.
      error_token.state = yyn;
      yypush_ ("Shifting", error_token);
    }
    goto yynewstate;

    // Accept.
  yyacceptlab:
    yyresult = 0;
    goto yyreturn;

    // Abort.
  yyabortlab:
    yyresult = 1;
    goto yyreturn;

  yyreturn:
    if (!yyla.empty ())
      yy_destroy_ ("Cleanup: discarding lookahead", yyla);

    /* Do not reclaim the symbols of the rule whose action triggered
       this YYABORT or YYACCEPT.  */
    yypop_ (yylen);
    while (1 < yystack_.size ())
      {
        yy_destroy_ ("Cleanup: popping", yystack_[0]);
        yypop_ ();
      }

    return yyresult;
  }
    catch (...)
      {
        YYCDEBUG << "Exception caught: cleaning lookahead and stack"
                 << std::endl;
        // Do not try to display the values of the reclaimed symbols,
        // as their printer might throw an exception.
        if (!yyla.empty ())
          yy_destroy_ (YY_NULLPTR, yyla);

        while (1 < yystack_.size ())
          {
            yy_destroy_ (YY_NULLPTR, yystack_[0]);
            yypop_ ();
          }
        throw;
      }
  }

  void
  asn1_parser::error (const syntax_error& yyexc)
  {
    error (yyexc.location, yyexc.what());
  }

  // Generate an error message.
  std::string
  asn1_parser::yysyntax_error_ (state_type yystate, const symbol_type& yyla) const
  {
    // Number of reported tokens (one for the "unexpected", one per
    // "expected").
    size_t yycount = 0;
    // Its maximum.
    enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
    // Arguments of yyformat.
    char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];

    /* There are many possibilities here to consider:
       - If this state is a consistent state with a default action, then
         the only way this function was invoked is if the default action
         is an error action.  In that case, don't check for expected
         tokens because there are none.
       - The only way there can be no lookahead present (in yyla) is
         if this state is a consistent state with a default action.
         Thus, detecting the absence of a lookahead is sufficient to
         determine that there is no unexpected or expected token to
         report.  In that case, just report a simple "syntax error".
       - Don't assume there isn't a lookahead just because this state is
         a consistent state with a default action.  There might have
         been a previous inconsistent state, consistent state with a
         non-default action, or user semantic action that manipulated
         yyla.  (However, yyla is currently not documented for users.)
       - Of course, the expected token list depends on states to have
         correct lookahead information, and it depends on the parser not
         to perform extra reductions after fetching a lookahead from the
         scanner and before detecting a syntax error.  Thus, state
         merging (from LALR or IELR) and default reductions corrupt the
         expected token list.  However, the list is correct for
         canonical LR with one exception: it will still contain any
         token that will not be accepted due to an error action in a
         later state.
    */
    if (!yyla.empty ())
      {
        int yytoken = yyla.type_get ();
        yyarg[yycount++] = yytname_[yytoken];
        int yyn = yypact_[yystate];
        if (!yy_pact_value_is_default_ (yyn))
          {
            /* Start YYX at -YYN if negative to avoid negative indexes in
               YYCHECK.  In other words, skip the first -YYN actions for
               this state because they are default actions.  */
            int yyxbegin = yyn < 0 ? -yyn : 0;
            // Stay within bounds of both yycheck and yytname.
            int yychecklim = yylast_ - yyn + 1;
            int yyxend = yychecklim < yyntokens_ ? yychecklim : yyntokens_;
            for (int yyx = yyxbegin; yyx < yyxend; ++yyx)
              if (yycheck_[yyx + yyn] == yyx && yyx != yyterror_
                  && !yy_table_value_is_error_ (yytable_[yyx + yyn]))
                {
                  if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                    {
                      yycount = 1;
                      break;
                    }
                  else
                    yyarg[yycount++] = yytname_[yyx];
                }
          }
      }

    char const* yyformat = YY_NULLPTR;
    switch (yycount)
      {
#define YYCASE_(N, S)                         \
        case N:                               \
          yyformat = S;                       \
        break
        YYCASE_(0, YY_("syntax error"));
        YYCASE_(1, YY_("syntax error, unexpected %s"));
        YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
        YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
        YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
        YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
#undef YYCASE_
      }

    std::string yyres;
    // Argument number.
    size_t yyi = 0;
    for (char const* yyp = yyformat; *yyp; ++yyp)
      if (yyp[0] == '%' && yyp[1] == 's' && yyi < yycount)
        {
          yyres += yytnamerr_ (yyarg[yyi++]);
          ++yyp;
        }
      else
        yyres += *yyp;
    return yyres;
  }


  const short int asn1_parser::yypact_ninf_ = -704;

  const short int asn1_parser::yytable_ninf_ = -489;

  const short int
  asn1_parser::yypact_[] =
  {
     -72,  -704,   181,   -72,   220,   127,  -704,  -704,   270,    23,
    -704,   187,  -704,   251,    15,  -704,  -704,   222,    23,  -704,
    -704,  -704,   240,   235,  -704,  -704,   280,   291,   301,   348,
    -704,  -704,   408,   248,   274,  -704,  -704,  -704,   344,   296,
     289,  -704,  -704,  -704,   248,   287,  -704,   385,  -704,   274,
    -704,   174,  -704,    68,  -704,   350,   294,  -704,  -704,   298,
     300,  -704,  -704,   309,  -704,   382,   250,    12,  -704,  -704,
     250,   314,  -704,   299,   250,  -704,   -41,   318,  -704,  -704,
    -704,  -704,  -704,  -704,  -704,  -704,  -704,  -704,    12,  -704,
    -704,  -704,  2477,  2778,   318,  -704,  -704,  -704,  -704,   -72,
    2580,    26,  -704,  -704,  -704,  -704,   341,  -704,  -704,   352,
     327,  -704,  -704,  -704,   366,   336,  -704,  -704,  -704,  -704,
    -704,   374,   342,  -704,  -704,   395,  -704,   369,  -704,  -704,
    -704,  -704,  -704,   101,   172,  -704,  -704,  -704,  -704,  -704,
    -704,  -704,  -704,  -704,  2378,   453,  -704,   117,  -704,  -704,
     354,  -704,  -704,  2877,   335,  -704,  -704,   359,  -704,  -704,
     365,   143,  -704,  -704,  -704,  -704,  -704,  -704,  -704,  -704,
    -704,  -704,  -704,  -704,  -704,  -704,  -704,  -704,  2679,  -704,
    -704,  -704,  -704,  -704,  -704,  -704,  -704,  -704,  -704,  -704,
    -704,  -704,  -704,  -704,  -704,   156,   361,   346,   355,  3079,
     158,   -52,   356,   357,  -704,   -48,  -704,  -704,  -704,  -704,
    -704,  -704,   -12,  -704,   351,  -704,   358,   370,   166,   346,
     363,  -704,   364,   383,   371,   384,  -704,   373,  -704,   -42,
      26,   373,  -704,  -704,  3079,   370,   118,   929,   419,   420,
    3079,   120,   423,   424,   389,  -704,  -704,  -704,   370,   377,
       2,   390,  3079,   213,   368,  1648,  -704,   391,  -704,  3079,
    3079,   370,    65,  3079,   368,    17,   246,  2148,   497,     0,
      42,  -704,  -704,  -704,  -704,  2580,   250,    22,    30,   372,
     373,  -704,   400,  -704,   393,  3079,   394,  -704,   402,   396,
    -704,   405,  -704,     6,  -704,   405,   370,  -704,  2980,  -704,
     441,   394,  -704,   -21,   407,  -704,   397,  -704,  -704,  -704,
    -704,  -704,  -704,  -704,   477,   219,   496,  3079,   498,  -704,
     370,  -704,  -704,  2148,   526,  -704,   360,  1400,  1524,   535,
     176,   409,   422,  -704,  -704,  -704,  -704,   370,  -704,  -704,
    -704,   394,  -704,  -704,   411,   -58,   -50,   -29,   -16,  -704,
     477,   492,  -704,   238,  -704,  3079,  -704,   428,   426,  -704,
    -704,  -704,  -704,  -704,  -704,  3079,  3079,   370,  -704,  -704,
     429,  3079,  3079,   297,  -704,  -704,  -704,  -704,    44,  -704,
     370,  2148,  -704,  -704,  -704,  -704,  -704,  -704,   415,  -704,
    -704,  -704,  -704,   431,  -704,  2148,  -704,  2148,  -704,   195,
     247,  -704,   413,   359,  -704,  -704,   434,  -704,   370,   435,
     200,   425,   416,  -704,  -704,  -704,  -704,   122,   427,  1524,
    -704,   370,   370,   415,  -704,   370,   415,  -704,  -704,  2148,
    -704,   -59,   437,  -704,  -704,   200,   432,   433,  -704,  -704,
      42,   442,    42,  -704,  -704,  -704,   440,   445,  -704,  -704,
    -704,  -704,  1150,  -704,  -704,  -704,  -704,  -704,    76,  -704,
     446,  -704,   -40,   370,  2012,  -704,  -704,    74,    28,  -704,
     373,  3079,   439,   605,  -704,  -704,   141,  1768,  -704,   454,
       1,  2148,  -704,   200,  -704,   370,   456,   444,   452,   457,
     455,  -704,   447,   462,   468,  -704,  -704,  1768,  -704,  -704,
    1768,  -704,   370,   922,  -704,   370,  -704,   370,  -704,  -704,
     370,  -704,   370,  -704,   199,  2279,    26,   113,  -704,  -704,
    -704,  -704,  -704,  -704,  -704,  -704,   464,   200,   368,   200,
     200,  2130,   590,  -704,  -704,  2148,  2148,  2148,  2148,  2148,
      35,   473,   200,   368,   450,  -704,   476,  -704,  -704,    55,
    -704,  -704,  -704,  -704,   431,  -704,  -704,   341,  -704,  -704,
    -704,   352,   327,  -704,  -704,  -704,  -704,  2148,  -704,  -704,
    -704,  -704,  -704,   366,  -704,  -704,  -704,   336,  -704,  -704,
    -704,  -704,  -704,  -704,  -704,  -704,  -704,  -704,  -704,  -704,
     374,  -704,   342,  -704,  -704,  -704,  -704,  -704,   395,   369,
    -704,  -704,  -704,  -704,  -704,  -704,  -704,  -704,  -704,  -704,
    -704,   101,   172,  -704,  -704,  -704,  -704,  -704,  -704,  -704,
    -704,  -704,  -704,  -704,  -704,  -704,  -704,   -59,  1892,  -704,
     472,  1275,  -704,  -704,   370,   200,   475,  -704,  -704,   373,
      58,   480,  -704,  -704,   -60,  -704,  -704,   394,  -704,   491,
     494,  -704,   370,   145,  -704,  -704,  -704,  -704,   394,  -704,
    -704,  2580,   579,   200,  -704,  -704,    89,  -704,  -704,  -704,
    1524,  -704,   500,  -704,   159,   194,  -704,  -704,   487,   -29,
    -704,  -704,  2160,  -704,  -704,  -704,  3079,  -704,    -5,  -704,
      14,    13,    20,   506,   297,  -704,  -704,  -704,   200,   501,
     200,   200,   200,   200,   200,  -704,  -704,  -704,   503,  -704,
     479,  -704,  -704,     9,  -704,   511,   513,   373,  2148,   504,
    -704,  -704,  -704,   505,   507,   508,   502,   522,   286,  2148,
     514,   525,   515,   370,  -704,   516,   517,   518,  -704,  -704,
     447,  1524,  -704,   370,    30,  -704,  -704,   605,  -704,  -704,
    -704,    14,  -704,  -704,  -704,   550,  -704,  -704,  -704,  -704,
     532,  -704,  -704,   523,   200,   373,   167,   -18,    31,  -704,
     200,   373,  -704,   373,  -704,  -704,    40,  1524,   517,   373,
     373,  -704,  -704,  -704,  -704,  -704,   538,  -704,   373,   528,
    -704,   533,  1150,  -704,   200,   544,  -704,  -704,  -704,  -704,
    -704,  -704,  -704,   518,  -704,  3557,  -704,   373,   177,   200,
    -704,  -704,  -704,  -704,  -704,  -704,  -704,  -704,  -704,  -704,
    -704,  -704,  -704,  -704,  -704,  -704,  -704,  -704,  -704,  -704,
    -704,  -704,  -704,  -704,  -704,  -704,  -704,  -704,  -704,  -704,
    3557,  -704,  3323,  -704,  -704,  -704,  3206,  -704,   534,  3440,
    -704,  -704,  -704,  -704,   -18,  -704,   536,   -18
  };

  const unsigned short int
  asn1_parser::yydefact_[] =
  {
       0,   488,     0,     2,     0,   142,     1,     3,   153,     0,
     139,   140,   141,     0,   157,   150,   486,     0,   145,   148,
     149,   147,   356,     0,   144,   152,     0,     0,     0,   159,
     143,   146,     0,     0,   365,   156,   154,   155,     0,     0,
       0,   366,   367,   363,     0,     0,   158,     0,   151,   365,
     362,   164,   364,   166,   138,   168,     0,   485,   487,     0,
     165,   178,   180,   181,   183,     0,   170,     0,   163,   162,
       0,     0,     4,     0,   169,   171,     0,     0,   485,   188,
     190,   191,    90,    91,    92,    93,    94,   160,   184,   186,
     187,   189,     0,     0,     0,   179,   182,   167,   172,     0,
       0,     0,   185,    63,   213,   302,     0,   379,   274,     0,
       0,   373,   375,   376,     0,     0,   370,   224,   380,   381,
     382,     0,   277,   383,   384,     0,   230,     0,   361,   385,
     294,   360,   368,     0,     0,   387,   386,   371,   374,   388,
     243,   389,   390,   391,     0,   341,   485,   486,   109,    62,
       0,    78,   229,     0,     0,   212,   225,     0,   210,   194,
     192,     0,   208,   215,   226,   222,   233,   214,   232,   228,
     236,   237,   238,   239,   217,   211,   240,   335,     0,   231,
     235,   227,   234,   221,   223,   241,   218,   242,   219,   220,
     216,   377,   378,   209,   394,    79,     0,     0,     0,     0,
       0,   193,     0,     0,   173,   177,    11,    10,   485,   108,
       6,     8,     0,   101,     0,   105,   104,   107,   181,   183,
       0,     7,   489,     0,     0,   295,   392,     0,   369,     0,
       0,     0,   348,   301,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    13,    12,    14,   205,     0,
     347,     0,     0,     0,     0,     0,   197,     0,   393,     0,
       0,   336,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   174,   175,   176,   100,     0,     0,     0,     0,     0,
       0,   332,     0,   328,   329,     0,   481,   293,     0,   286,
     290,   292,   111,     0,   279,     0,   321,   322,     0,   458,
       0,   481,   303,   317,     0,   305,   306,   315,   283,   446,
     440,   441,   442,   372,     0,   302,     0,     0,     0,   276,
       0,   448,   455,     0,     0,   275,     0,     0,     0,     0,
     443,   444,   125,   405,   116,   117,   118,   459,   437,   445,
     439,   481,   404,   406,   407,   410,     0,   412,     0,   415,
       0,   418,   426,   428,   429,     0,   430,     0,   450,   432,
     433,   431,   434,   435,   436,     0,     0,   325,   326,   323,
       0,     0,     0,     0,   340,   345,   346,   344,     0,    81,
      95,     0,    23,    24,    25,    26,    27,    28,   110,   257,
     249,   250,   251,   247,   264,     0,   262,     0,   255,   485,
     487,   202,   229,     0,   253,   196,     0,   114,   200,   265,
       0,   263,   261,   245,   256,   246,   248,   195,     0,     0,
     207,   338,   337,    88,   203,   334,    89,    64,    80,     0,
     247,   266,   487,   258,   265,   206,     0,     0,    98,   357,
     358,     0,   351,   353,   354,   355,   356,   195,   102,   103,
     489,     9,     0,    65,    99,    66,    67,    68,     0,   297,
       0,   327,     0,   244,     0,   289,   285,     0,     0,   278,
       0,     0,   313,     0,   318,   304,     0,     0,   411,     0,
     135,     0,   460,   478,   479,     0,     0,    85,     0,    83,
       0,   284,     0,     0,     0,   423,   422,     0,   425,   424,
       0,   419,   447,     0,   451,   397,   401,   398,   402,   324,
     395,   399,   396,   400,    33,     0,     0,     0,    16,    18,
      19,    20,    21,    22,   342,   343,     0,    97,     0,   252,
     272,     0,     0,   198,   199,     0,     0,     0,     0,     0,
       0,     0,    96,     0,     0,   358,     0,   349,   352,     0,
     491,   492,   493,   494,   247,   496,   497,   498,   379,   274,
     264,   502,   503,   504,   505,   506,   507,   508,   373,   375,
     511,   512,   376,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   370,   276,   525,   526,   527,   528,   529,   530,
     531,   532,   277,   534,   535,   536,   537,   538,   539,   540,
     541,   361,   262,   544,   545,   546,   547,   548,   294,   360,
     368,   552,   553,   554,   555,   556,   557,   558,   371,   374,
     275,   562,   563,   564,   565,   566,    61,   266,     0,    74,
       0,     0,    72,    75,    76,    77,     0,    60,   296,     0,
       0,   330,   333,   483,     0,   482,   480,   481,   291,     0,
       0,   280,   320,     0,   438,   443,   444,   319,   481,   316,
     421,   124,     0,   136,   463,   461,     0,   462,   464,   465,
       0,    82,     0,   427,     0,     0,   127,   403,   408,   413,
     416,   457,     0,   456,   449,   452,     0,    31,    44,    30,
      39,    35,    48,    50,     0,   339,    29,   260,   273,     0,
     267,   259,   269,   268,   270,   204,   271,   350,     0,    70,
       0,    71,    73,     0,   298,     0,     0,     0,     0,   287,
     282,   281,   314,   311,   307,   108,     0,     0,   107,     0,
       0,     0,   468,   473,    86,    84,   132,   129,   133,   126,
       0,     0,   453,    32,     0,    42,    41,     0,    37,    40,
      34,    39,    47,    46,    45,     0,    15,    17,   254,   359,
       0,   299,   300,   331,   484,     0,     0,     0,     0,   119,
     137,     0,   466,     0,   472,   470,   477,     0,   132,     0,
       0,   128,   409,    43,    38,    36,     0,    69,     0,   288,
     312,   308,     0,   121,   120,     0,   469,   475,   476,   474,
     471,    87,   131,   130,   134,    59,    49,     0,     0,    77,
     467,   495,   498,   499,   500,   501,   502,   503,   508,   509,
     510,   513,   514,   518,   523,   524,   531,   533,   539,   540,
     542,   543,   549,   550,   551,   552,   553,   559,   560,   561,
      59,   490,    59,    51,    54,    53,     0,    57,   309,    59,
       5,    52,    56,    58,     0,    55,   310,     0
  };

  const short int
  asn1_parser::yypgoto_[] =
  {
    -704,   659,  -704,  -704,   -87,  -704,  -704,  -704,   404,  -704,
    -704,   -23,  -441,  -182,  -704,  -704,  -704,  -704,   -75,  -704,
    -704,  -704,  -704,  -704,  -704,  -166,  -703,  -704,  -704,  -704,
    -437,  -274,  -704,  -645,  -704,  -704,  -704,  -704,  -704,    46,
      51,  -704,  -704,  -704,   430,  -704,   340,  -704,  -704,  -704,
    -704,  -704,  -704,   295,  -704,   410,  -704,    21,  -704,  -704,
    -704,  -704,  -704,  -704,  -704,  -704,  -704,  -704,   -56,   -92,
     -91,  -704,  -704,  -704,  -704,  -704,  -704,   671,  -704,   660,
    -704,  -704,  -704,  -704,  -704,  -704,  -704,  -704,  -704,  -704,
     617,  -704,  -704,   640,   624,   -77,   607,  -704,  -704,  -267,
    -704,  -704,   302,  -704,  -704,  -704,  -704,  -704,  -704,    52,
    -704,  -215,   443,   380,  -704,  -704,  -704,  -704,  -704,   -51,
    -704,  -704,  -214,  -119,  -704,  -704,   -68,  -446,  -704,  -704,
    -704,    60,  -704,  -704,  -704,   459,  -704,  -640,  -456,  -704,
    -704,  -704,  -704,  -704,  -704,   -15,  -704,  -704,  -704,  -704,
    -704,  -704,  -704,  -704,  -704,   -63,  -704,   237,   152,  -704,
    -704,  -704,   693,  -704,   657,   663,  -704,  -704,  -704,  -704,
     -22,  -704,  -704,  -704,  -704,  -704,  -704,  -704,  -704,  -704,
    -132,  -704,  -704,  -297,  -311,  -704,  -704,   212,  -704,   210,
    -704,   362,  -704,  -704,   234,  -704,  -463,  -704,  -704,  -704,
    -704,  -704,  -704,    33,  -127,  -704,  -704,  -704,  -704,  -704,
    -704,  -704,  -391,  -704,  -704,  -704,  -704,  -704,  -704,  -283,
    -704,    67,    -9,    47,     5,   -43,  -704
  };

  const short int
  asn1_parser::yydefgoto_[] =
  {
      -1,     2,     3,   806,   209,   210,   211,    79,   246,   247,
     517,   518,   387,   423,   519,   689,   751,   520,   749,   521,
     522,   746,   523,   754,   756,   842,   843,   844,   845,   846,
     847,   148,   149,   454,   455,   456,   630,   457,   631,   632,
     633,   150,   151,    80,   332,   488,   152,    81,    82,    83,
      84,    85,    86,   101,   212,   213,   214,   215,   154,   155,
     156,   157,   403,   333,   334,   727,   335,   675,   676,   779,
     737,   336,    65,     4,    10,    11,    12,    17,    18,    19,
      20,    14,    29,    39,    54,    55,    59,    67,    73,    74,
      75,   204,   271,    76,    61,    62,    87,    88,   158,   404,
     159,   405,   256,   406,   160,   407,    89,    90,    91,   337,
     162,   303,   434,   635,   411,   412,   420,   531,   163,   413,
     164,   293,   287,   414,   165,   288,   289,   290,   166,   167,
     458,   459,   168,   169,   170,   304,   305,   306,   307,   171,
     172,   173,   174,   282,   283,   284,   175,   176,   177,   178,
     250,   526,   378,   179,   272,   441,   442,   443,   444,   445,
     180,   181,   415,    34,    45,    43,   182,   183,   184,   185,
     416,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     258,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   478,   497,   500,   351,   352,   353,   354,   355,   356,
     357,   684,   358,   685,   359,   360,   361,   362,   665,   667,
     668,   669,   731,   732,   775,   776,   800,   363,   364,   465,
     646,   201,   196,   197,   202,   221,   637
  };

  const short int
  asn1_parser::yytable_[] =
  {
      22,   238,   242,   440,   453,     5,   239,   243,     5,    22,
     657,   628,   281,   723,   223,   629,   489,   294,   472,   297,
     659,   648,    99,   216,    94,   368,   300,    15,   473,   206,
     427,   490,   308,    77,   375,   308,   389,   390,   427,   391,
     683,   392,   244,   427,   744,    94,   439,  -417,   524,    26,
     313,   103,   103,  -414,   662,   206,   427,   245,   493,   439,
     498,   495,   715,   747,   430,   237,  -485,   474,   797,   752,
     394,  -113,   388,    27,   690,   270,     1,   395,  -485,   286,
     718,   641,   426,   745,    28,   262,  -414,   696,   382,   383,
     384,   385,   386,   319,   496,    70,   376,   198,    56,   783,
      64,    58,   748,   299,   205,   220,   224,    16,   753,    16,
     207,   525,   274,    64,    93,   377,  -417,    64,   339,   396,
      63,    64,   541,   793,   275,   750,   237,   791,   798,   499,
     469,    16,   799,    63,    92,    93,   207,    63,   237,   851,
     325,    63,   470,   292,   161,   200,   851,   219,   222,   220,
     506,   508,   217,   452,   792,    92,   511,   513,    58,   195,
      78,    58,   300,    23,   300,    57,   329,   218,   401,   329,
     450,   398,    16,   545,   222,   545,     1,    58,     1,   431,
     432,     6,   245,   450,    58,   300,   338,   234,   482,   300,
       1,   147,     1,    58,   629,   647,   248,   643,   216,   449,
     638,   649,   235,     1,    58,   253,     1,    58,   339,   339,
     730,   300,   639,    57,   856,   340,    57,    58,   285,   683,
     291,   300,   295,    16,   236,   298,   237,   285,   206,  -161,
     261,   298,   285,    53,   451,   224,   451,   693,    16,   301,
    -487,   301,   302,  -487,   369,  -115,    21,   642,   686,   694,
       9,   266,   273,  -487,  -487,    21,   651,  -487,   240,   264,
     418,   446,   658,   257,    41,    42,   722,    16,   237,    16,
       8,   460,   437,   235,   224,   437,   338,   338,   267,  -113,
     220,  -193,   545,   237,   784,    13,   296,   687,   790,    71,
      16,  -193,   367,   262,    16,   241,   736,   237,   848,  -485,
     339,  -485,   417,   262,   380,   340,   340,   408,    16,   207,
     659,   421,   422,  -485,   417,   425,    16,   447,   739,    23,
     514,   515,   219,    64,   516,    25,    16,   217,   437,   424,
     740,  -266,   428,   381,   436,  -266,   535,   463,   237,  -266,
     536,  -438,   218,    63,   537,   645,    30,   222,  -438,   650,
     463,   628,   659,   664,   339,   629,   298,   298,   339,   734,
    -454,   648,   298,   298,   719,    32,   429,  -454,   338,   480,
     417,   237,   532,   716,    33,   724,  -486,   546,   339,   548,
     795,   339,   796,   437,   339,    35,   437,   153,   199,   203,
     436,   382,   383,   384,   385,   386,    36,   340,    57,    58,
     437,   659,   437,   485,   486,   852,    37,   502,    38,   853,
    -122,   237,    15,    44,    46,    48,    47,   505,   507,    50,
      51,    66,   338,   510,   512,   447,   338,   688,   417,   692,
     782,   446,    71,   446,   437,    68,    70,    72,    96,    69,
      97,   100,   417,   225,   417,   437,   338,   437,   436,   338,
     227,   340,   338,   285,   226,   340,   228,   636,   291,   229,
     230,   295,   436,   232,   436,   231,   801,   285,   249,   636,
     453,   233,   254,   437,   251,   340,   417,   269,   340,   238,
     242,   340,   255,   264,   239,   243,   437,   447,  -112,   447,
     263,   276,   265,   268,   453,   237,   436,   451,  -106,   417,
     277,  -488,   281,   278,   634,   365,   366,   280,   279,   371,
     372,   417,   373,   327,   419,   447,   644,   374,   427,   224,
     450,   224,    16,   652,   461,   464,   466,   471,   417,   462,
     468,   475,   467,   476,   477,   479,   437,   481,   484,   491,
     437,   437,   437,   437,   437,   492,  -487,   494,   436,  -420,
     503,   339,   528,   509,   437,   504,  -302,  -258,   534,  -201,
     539,   538,   532,   339,   540,   549,   547,   691,  -115,   543,
     544,   640,   437,   642,   725,   653,   671,   661,   417,   666,
     670,   673,   417,   417,   417,   417,   417,   705,   677,   678,
     674,   705,   695,   672,   699,   402,   447,   706,   436,    58,
     707,   774,   436,   436,   436,   436,   436,   433,   710,   308,
     309,   310,   713,   311,   417,   312,   717,   720,   729,   338,
     721,   735,   339,   741,   313,   755,   760,   758,   339,   759,
     460,   338,  -123,   636,   436,   410,   636,   761,   654,   762,
     765,   766,   768,   767,   285,   437,   769,   435,   340,   772,
     771,   773,   777,   786,   778,   780,   787,   733,   339,   788,
     340,   805,     7,   433,   807,   738,   220,   319,   810,   808,
     854,   757,   857,   438,   849,   417,   785,   712,   417,   709,
     634,   379,   726,   634,   781,   448,   802,   447,   803,    31,
     338,    98,    40,    60,    95,   102,   338,   789,   409,   714,
     370,   708,   763,   483,    24,   533,    52,    49,   285,   679,
     680,   660,   501,   728,   325,   742,     0,     0,     0,   340,
       0,   433,     0,   437,     0,   340,   338,     0,     0,     0,
       0,     0,     0,     0,   437,   433,     0,   433,   743,     0,
       0,     0,     0,   329,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   655,   656,   340,   291,   285,   285,     0,
     705,   527,   733,     0,   733,   417,     0,     0,     0,   433,
     738,   804,     0,   636,     0,   529,   417,   530,     0,   285,
       0,     0,     0,     0,     0,   436,     0,     0,     0,     0,
       0,     0,   402,     0,     0,     0,   436,   636,   291,   285,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   542,
       0,     0,     0,     0,     0,   417,     0,     0,     0,     0,
       0,   433,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   436,     0,     0,     0,   417,
       0,     0,     0,     0,   634,   285,     0,     0,   285,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   663,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   433,     0,     0,     0,   433,   433,   433,   433,   433,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   433,     0,     0,
       0,   698,     0,     0,     0,   700,   701,   702,   703,   704,
       0,     0,     0,     0,     0,     0,   308,   309,   310,     0,
     311,     0,   312,   308,   309,   310,     0,   311,     0,   312,
       0,   313,     0,     0,     0,     0,     0,   529,   313,     0,
     103,     0,     0,     0,     0,   654,     0,     0,     0,   314,
     104,     0,   315,     0,     0,   106,   107,   108,   402,   109,
     110,   402,     0,     0,   316,   317,   111,   112,     0,     0,
     113,   114,   318,     0,   319,   115,     0,     0,     0,     0,
     116,   319,   320,   117,   118,   119,   120,     0,     0,     0,
     681,   321,   121,     0,   122,     0,   123,     0,   322,     0,
       0,   124,   125,   126,   127,     0,   128,     0,   323,     0,
       0,     0,   129,     0,   130,   131,   132,   133,   134,   324,
     235,   325,     0,   135,     0,   136,   137,   138,   325,     0,
       0,     0,     0,   139,   140,   141,   142,   143,   326,     0,
       0,   682,   327,     0,   328,     0,   145,     0,   433,     0,
     329,     0,     0,     0,     0,     0,     0,   329,     0,   433,
     655,   656,     0,     0,     0,     0,     0,   330,   331,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   764,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   433,   770,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   402,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   794,     0,
       0,     0,     0,     0,   308,   389,   390,     0,   391,     0,
     392,     0,     0,     0,     0,     0,     0,     0,     0,   313,
       0,   103,   809,   382,   383,   384,   385,   386,   550,   551,
     552,   104,   553,   554,   555,   556,   557,   558,   559,   560,
     561,   562,   563,   564,   565,   566,   567,   568,   569,   570,
     571,   572,   573,   574,   575,   576,   577,   578,   579,   580,
     581,   582,   583,   584,   117,   118,   119,   120,   585,   586,
     587,   588,   589,   590,   591,   592,   593,   123,   594,   595,
     596,   597,   124,   598,   126,   599,   600,   601,   602,   603,
     604,   605,   606,   129,   607,   608,   609,   610,   611,   612,
     613,   614,   615,   616,   135,   617,   136,   618,   619,   620,
     621,   622,   623,   624,   139,   140,   141,   142,   143,   625,
       0,     0,     0,   397,     0,     0,     0,   145,     0,   308,
     389,   390,    23,   391,     0,   392,   626,     0,   329,     0,
     398,     0,     0,     0,   313,     0,   103,     0,   627,   400,
       0,     0,     0,   550,   551,   552,   104,   553,   554,   555,
     556,   557,   558,   559,   560,   561,   562,   563,   564,   565,
     566,   567,   568,   569,   570,   571,   572,   573,   574,   575,
     576,   577,   578,   579,   580,   581,   582,   583,   584,   117,
     118,   119,   120,   585,   586,   587,   588,   589,   590,   591,
     592,   593,   123,   594,   595,   596,   597,   124,   598,   126,
     599,   600,   601,   602,   603,   604,   605,   606,   129,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   135,
     617,   136,   618,   619,   620,   621,   622,   623,   624,   139,
     140,   141,   142,   143,   625,     0,     0,     0,   397,   711,
       0,     0,   145,     0,   308,   309,   310,    23,   311,     0,
     312,   626,     0,   329,     0,   398,     0,     0,     0,   313,
       0,   103,     0,   627,   400,     0,     0,     0,     0,     0,
     314,   104,     0,   315,     0,     0,   106,   107,   108,     0,
     109,   110,     0,     0,     0,     0,     0,   111,   112,     0,
       0,   113,   114,     0,     0,     0,   115,     0,     0,     0,
       0,   116,   319,   320,   117,   118,   119,   120,     0,     0,
       0,     0,   321,   121,     0,   122,     0,   123,     0,   322,
       0,     0,   124,   125,   126,   127,     0,   128,     0,   323,
       0,     0,     0,   129,     0,   130,   131,   132,   133,   134,
     324,   235,     0,     0,   135,     0,   136,   137,   138,   325,
       0,     0,     0,     0,   139,   140,   141,   142,   143,   326,
       0,   487,     0,     0,     0,   328,     0,   145,   308,   309,
     310,     0,   311,     0,   312,     0,     0,     0,   329,     0,
       0,     0,     0,   313,     0,   103,     0,     0,   330,   331,
       0,     0,     0,     0,   314,   104,     0,   315,     0,     0,
     106,   107,   108,     0,   109,   110,     0,     0,     0,     0,
       0,   111,   112,     0,     0,   113,   114,     0,     0,     0,
     115,     0,     0,     0,     0,   116,   319,   320,   117,   118,
     119,   120,     0,     0,     0,     0,   321,   121,     0,   122,
       0,   123,     0,   322,     0,     0,   124,   125,   126,   127,
       0,   128,     0,   323,     0,     0,     0,   129,     0,   130,
     131,   132,   133,   134,   324,   235,     0,     0,   135,     0,
     136,   137,   138,   325,     0,     0,     0,     0,   139,   140,
     141,   142,   143,   326,     0,     0,     0,     0,     0,   328,
       0,   145,   308,   389,   390,     0,   391,     0,   392,     0,
       0,     0,   329,     0,     0,     0,     0,   313,     0,   103,
       0,     0,   330,   331,     0,     0,     0,   206,     0,   104,
       0,   393,     0,     0,   106,   107,   108,   394,   109,   110,
       0,     0,     0,     0,   395,   111,   112,     0,     0,   113,
     114,     0,     0,     0,   115,     0,     0,     0,     0,   116,
     319,     0,   117,   118,   119,   120,     0,     0,     0,     0,
       0,   121,     0,   122,     0,   123,     0,     0,     0,     0,
     124,   125,   126,   127,     0,   128,   396,     0,     0,     0,
       0,   129,     0,   130,   131,   132,   133,   134,     0,     0,
       0,     0,   135,     0,   136,   137,   138,   325,   207,     0,
       0,     0,   139,   140,   141,   142,   143,     0,     0,     0,
       0,   397,   308,   309,   310,   145,   311,     0,   312,     0,
      23,     0,     0,     0,     0,     0,   329,   313,   398,   103,
       0,     0,     0,     0,     0,     0,   399,   400,     0,   104,
       0,   315,     0,     0,   106,   107,   108,     0,   109,   110,
       0,     0,     0,     0,     0,   111,   112,     0,     0,   113,
     114,     0,     0,     0,   115,     0,     0,     0,     0,   116,
     319,   320,   117,   118,   119,   120,     0,     0,     0,     0,
     321,   121,     0,   122,     0,   123,     0,   322,     0,     0,
     124,   125,   126,   127,     0,   128,     0,   323,     0,     0,
       0,   129,     0,   130,   131,   132,   133,   134,   324,   235,
       0,     0,   135,     0,   136,   137,   138,   325,     0,     0,
       0,     0,   139,   140,   141,   142,   143,   326,     0,     0,
       0,     0,     0,   328,     0,   145,   308,   389,   390,     0,
     391,     0,   392,     0,     0,     0,   329,     0,     0,     0,
       0,   313,     0,   103,     0,     0,   330,   331,     0,     0,
       0,     0,     0,   104,     0,   393,     0,     0,   106,   107,
     108,   394,   109,   110,     0,     0,     0,     0,   395,   111,
     112,     0,     0,   113,   114,     0,     0,     0,   115,     0,
       0,     0,     0,   116,   319,     0,   117,   118,   119,   120,
       0,     0,     0,     0,     0,   121,     0,   122,     0,   123,
       0,     0,     0,     0,   124,   125,   126,   127,     0,   128,
     396,     0,     0,     0,     0,   129,     0,   130,   131,   132,
     133,   134,     0,     0,     0,     0,   135,     0,   136,   137,
     138,   325,     0,     0,     0,     0,   139,   140,   141,   142,
     143,     0,     0,     0,     0,   397,   308,     0,     0,   145,
       0,     0,     0,     0,    23,     0,     0,     0,     0,     0,
     329,     0,   398,   103,     0,     0,     0,     0,     0,     0,
     431,   400,     0,   104,     0,   105,     0,     0,   106,   107,
     108,     0,   109,   110,     0,     0,     0,     0,     0,   111,
     112,     0,     0,   113,   114,     0,     0,     0,   115,     0,
       0,     0,     0,   116,     0,     0,   117,   118,   119,   120,
       0,     0,     0,     0,     0,   121,     0,   122,     0,   123,
       0,     0,     0,     0,   124,   125,   126,   127,     0,   128,
       0,     0,     0,     0,     0,   129,     0,   130,   131,   132,
     133,   134,     0,     0,     0,     0,   135,     0,   136,   137,
     138,     0,     0,     0,     0,     0,   139,   140,   141,   142,
     143,     0,     0,     0,   308,   389,   390,     0,   391,   145,
     392,     0,     0,     0,     0,     0,     0,     0,     0,   313,
     329,     0,   308,   389,   390,     0,   391,     0,   392,     0,
     146,   147,     0,   430,   308,   309,   310,   313,   311,   394,
     312,     0,     0,     0,     0,     0,   395,     0,     0,   313,
       0,   430,     0,     0,     0,     0,     0,   394,     0,     0,
       0,     0,   319,   654,   395,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     319,     0,     0,     0,     0,     0,     0,     0,   396,     0,
       0,     0,   319,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   396,     0,   681,   325,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   397,   697,     0,     0,   325,     0,     0,
       0,     0,    23,     0,     0,     0,     0,     0,   329,   325,
     398,   397,     0,     0,     0,     0,     0,     0,   431,   432,
      23,     0,     0,     0,     0,     0,   329,     0,   398,     0,
       0,     0,     0,     0,     0,     0,   431,   432,   329,     0,
     103,     0,   382,   383,   384,   385,   386,     0,   655,   656,
     104,     0,   105,     0,     0,   106,   107,   108,     0,   109,
     110,     0,     0,     0,     0,     0,   111,   112,     0,     0,
     113,   114,     0,     0,     0,   115,     0,     0,     0,     0,
     116,     0,     0,   117,   118,   119,   120,     0,     0,     0,
       0,     0,   121,     0,   122,     0,   123,     0,     0,     0,
       0,   124,   125,   126,   127,     0,   128,     0,     0,     0,
       0,     0,   129,     0,   130,   131,   132,   133,   134,     0,
       0,     0,     0,   135,     0,   136,   137,   138,     0,     0,
       0,     0,     0,   139,   140,   141,   142,   143,     0,   103,
       0,     0,     0,     0,     0,     0,   145,   206,     0,   104,
       0,   105,     0,     0,   106,   107,   108,     0,   109,   110,
     244,     0,     0,     0,     0,   111,   112,   146,   147,   113,
     114,     0,     0,     0,   115,     0,     0,     0,     0,   116,
       0,     0,   117,   118,   119,   120,     0,     0,     0,     0,
       0,   121,     0,   122,     0,   123,     0,     0,     0,     0,
     124,   125,   126,   127,     0,   128,     0,     0,     0,     0,
       0,   129,     0,   130,   131,   132,   133,   134,     0,     0,
       0,     0,   135,     0,   136,   137,   138,     0,   207,     0,
       0,     0,   139,   140,   141,   142,   143,     0,   103,     0,
       0,     0,     0,     0,     0,   145,     0,     0,   104,     0,
     105,     0,     0,   106,   107,   108,     0,   109,   110,     0,
       0,     0,     0,     0,   111,   112,   208,   147,   113,   114,
       0,     0,     0,   115,     0,     0,     0,     0,   116,     0,
       0,   117,   118,   119,   120,     0,     0,     0,     0,     0,
     121,     0,   122,     0,   123,     0,     0,     0,     0,   124,
     125,   126,   127,     0,   128,     0,     0,     0,     0,     0,
     129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
       0,   135,     0,   136,   137,   138,     0,     0,     0,     0,
       0,   139,   140,   141,   142,   143,     0,   144,     0,     0,
     100,   103,     0,     0,   145,     0,     0,     0,     0,   206,
       0,   104,     0,   105,     0,     0,   106,   107,   108,     0,
     109,   110,     0,     0,     0,   146,   147,   111,   112,     0,
       0,   113,   114,     0,     0,     0,   115,     0,     0,     0,
       0,   116,     0,     0,   117,   118,   119,   120,     0,     0,
       0,     0,     0,   121,     0,   122,     0,   123,     0,     0,
       0,     0,   124,   125,   126,   127,     0,   128,     0,     0,
       0,     0,     0,   129,     0,   130,   131,   132,   133,   134,
       0,     0,     0,     0,   135,     0,   136,   137,   138,     0,
     207,     0,     0,     0,   139,   140,   141,   142,   143,     0,
     103,     0,     0,     0,     0,     0,     0,   145,     0,     0,
     104,     0,   105,     0,     0,   106,   107,   108,     0,   109,
     110,     0,     0,     0,     0,     0,   111,   112,   208,   147,
     113,   114,     0,     0,     0,   115,     0,   259,     0,     0,
     116,     0,     0,   117,   118,   119,   120,     0,   260,     0,
       0,     0,   121,     0,   122,     0,   123,     0,     0,     0,
       0,   124,   125,   126,   127,     0,   128,     0,     0,     0,
       0,     0,   129,     0,   130,   131,   132,   133,   134,     0,
       0,     0,     0,   135,     0,   136,   137,   138,     0,     0,
       0,     0,     0,   139,   140,   141,   142,   143,     0,   103,
       0,     0,     0,     0,     0,     0,   145,     0,     0,   104,
       0,   105,     0,     0,   106,   107,   108,     0,   109,   110,
       0,     0,     0,     0,     0,   111,   112,   146,   147,   113,
     114,     0,     0,     0,   115,     0,     0,     0,     0,   116,
       0,     0,   117,   118,   119,   120,     0,     0,     0,     0,
       0,   121,     0,   122,     0,   123,     0,     0,     0,     0,
     124,   125,   126,   127,     0,   128,     0,     0,     0,     0,
       0,   129,     0,   130,   131,   132,   133,   134,     0,     0,
       0,     0,   135,     0,   136,   137,   138,     0,     0,     0,
       0,     0,   139,   140,   141,   142,   143,     0,   103,     0,
       0,   100,     0,     0,     0,   145,     0,     0,   104,     0,
     105,     0,     0,   106,   107,   108,     0,   109,   110,     0,
       0,     0,     0,     0,   111,   112,   146,   147,   113,   114,
       0,     0,     0,   115,     0,     0,     0,     0,   116,     0,
       0,   117,   118,   119,   120,     0,     0,     0,     0,     0,
     121,     0,   122,     0,   123,     0,     0,     0,     0,   124,
     125,   126,   127,     0,   128,     0,     0,     0,     0,     0,
     129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
       0,   135,     0,   136,   137,   138,     0,     0,     0,     0,
       0,   139,   140,   141,   142,   143,     0,   252,     0,     0,
       0,   103,     0,     0,   145,     0,     0,     0,     0,     0,
       0,   104,     0,   105,     0,     0,   106,   107,   108,     0,
     109,   110,     0,     0,     0,   146,   147,   111,   112,     0,
       0,   113,   114,     0,     0,     0,   115,     0,     0,     0,
       0,   116,     0,     0,   117,   118,   119,   120,     0,     0,
       0,     0,     0,   121,     0,   122,     0,   123,     0,     0,
       0,     0,   124,   125,   126,   127,     0,   128,     0,     0,
       0,     0,     0,   129,     0,   130,   131,   132,   133,   134,
       0,     0,     0,     0,   135,     0,   136,   137,   138,     0,
       0,     0,     0,     0,   139,   140,   141,   142,   143,     0,
     103,     0,     0,     0,     0,     0,     0,   145,     0,   263,
     104,     0,   105,     0,     0,   106,   107,   108,     0,   109,
     110,     0,     0,     0,     0,     0,   111,   112,   146,   147,
     113,   114,     0,     0,     0,   115,     0,     0,     0,     0,
     116,     0,     0,   117,   118,   119,   120,     0,     0,     0,
       0,     0,   121,     0,   122,     0,   123,     0,     0,     0,
       0,   124,   125,   126,   127,     0,   128,     0,     0,     0,
       0,     0,   129,     0,   130,   131,   132,   133,   134,     0,
       0,     0,     0,   135,     0,   136,   137,   138,     0,     0,
       0,     0,     0,   139,   140,   141,   142,   143,     0,     0,
       0,     0,     0,     0,     0,     0,   145,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   146,   147,   382,
     383,   384,   385,   386,   550,   551,   552,     0,   553,   811,
     555,   556,   812,   813,   814,   815,   816,   817,   563,   564,
     565,   566,   818,   819,   820,   570,   571,   821,   822,   574,
     575,   576,   823,   578,   579,   580,   581,   824,   825,   584,
       0,     0,     0,     0,   585,   586,   587,   588,   589,   826,
     591,   827,   593,     0,   594,   595,   596,   597,     0,   828,
       0,   829,   600,   830,   831,   603,   604,   605,   606,     0,
     607,   832,   833,   834,   835,   836,   613,   614,   615,   616,
       0,   617,     0,   837,   838,   839,   621,   622,   623,   624,
       0,     0,     0,     0,     0,   625,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   626,     0,     0,     0,     0,     0,     0,     0,
       0,   550,   551,   552,   841,   553,   811,   555,   556,   812,
     813,   814,   815,   816,   817,   563,   564,   565,   566,   818,
     819,   820,   570,   571,   821,   822,   574,   575,   576,   823,
     578,   579,   580,   581,   824,   825,   584,     0,     0,     0,
       0,   585,   586,   587,   588,   589,   826,   591,   827,   593,
       0,   594,   595,   596,   597,     0,   828,     0,   829,   600,
     830,   831,   603,   604,   605,   606,     0,   607,   832,   833,
     834,   835,   836,   613,   614,   615,   616,     0,   617,     0,
     837,   838,   839,   621,   622,   623,   624,     0,     0,     0,
       0,     0,   625,     0,     0,     0,     0,   850,     0,     0,
     840,     0,     0,     0,     0,     0,     0,     0,     0,   626,
       0,     0,     0,     0,     0,     0,     0,     0,   550,   551,
     552,   841,   553,   811,   555,   556,   812,   813,   814,   815,
     816,   817,   563,   564,   565,   566,   818,   819,   820,   570,
     571,   821,   822,   574,   575,   576,   823,   578,   579,   580,
     581,   824,   825,   584,     0,     0,     0,     0,   585,   586,
     587,   588,   589,   826,   591,   827,   593,     0,   594,   595,
     596,   597,     0,   828,     0,   829,   600,   830,   831,   603,
     604,   605,   606,     0,   607,   832,   833,   834,   835,   836,
     613,   614,   615,   616,     0,   617,     0,   837,   838,   839,
     621,   622,   623,   624,     0,     0,     0,     0,     0,   625,
       0,     0,     0,     0,     0,     0,     0,   840,   855,     0,
       0,     0,     0,     0,     0,     0,   626,     0,     0,     0,
       0,     0,     0,     0,     0,   550,   551,   552,   841,   553,
     811,   555,   556,   812,   813,   814,   815,   816,   817,   563,
     564,   565,   566,   818,   819,   820,   570,   571,   821,   822,
     574,   575,   576,   823,   578,   579,   580,   581,   824,   825,
     584,     0,     0,     0,     0,   585,   586,   587,   588,   589,
     826,   591,   827,   593,     0,   594,   595,   596,   597,     0,
     828,     0,   829,   600,   830,   831,   603,   604,   605,   606,
       0,   607,   832,   833,   834,   835,   836,   613,   614,   615,
     616,     0,   617,     0,   837,   838,   839,   621,   622,   623,
     624,     0,     0,     0,     0,     0,   625,     0,     0,     0,
       0,     0,     0,     0,   840,     0,     0,     0,     0,     0,
       0,     0,     0,   626,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   841
  };

  const short int
  asn1_parser::yycheck_[] =
  {
       9,   133,   134,   270,   278,     0,   133,   134,     3,    18,
     473,   452,   227,   653,   101,   452,   327,   231,   301,   234,
     476,   467,    63,   100,    67,   240,    44,     4,    49,    29,
      21,   328,     4,    21,    32,     4,     5,     6,    21,     8,
     503,    10,    42,    21,    49,    88,     4,    76,     4,    34,
      19,    21,    21,   111,    53,    29,    21,   144,   341,     4,
      76,   111,     4,    49,    33,   125,   125,    88,    28,    49,
      39,   123,   254,    58,   515,   123,   148,    46,   137,   121,
     140,   121,   264,    88,    69,   137,   144,   528,    23,    24,
      25,    26,    27,    62,   144,   136,    94,    92,    30,   744,
      53,   149,    88,   235,    99,   100,   101,   149,    88,   149,
     110,   378,   124,    66,    67,   113,   145,    70,   237,    88,
      53,    74,   419,   768,   136,   112,   125,   767,    88,   145,
     124,   149,    92,    66,    67,    88,   110,    70,   125,   842,
     109,    74,   136,   230,    92,    93,   849,   100,   148,   144,
     365,   366,   100,   123,   123,    88,   371,   372,   149,    92,
     148,   149,    44,   132,    44,   148,   138,   100,   255,   138,
     148,   140,   149,   440,   148,   442,   148,   149,   148,   148,
     149,     0,   269,   148,   149,    44,   237,    86,   320,    44,
     148,   149,   148,   149,   631,   121,   144,   464,   275,   276,
     124,   468,   101,   148,   149,   153,   148,   149,   327,   328,
     121,    44,   136,   148,   854,   237,   148,   149,   227,   682,
     229,    44,   231,   149,   123,   234,   125,   236,    29,    55,
     178,   240,   241,    59,   277,   230,   279,   124,   149,   121,
     123,   121,   124,   126,   124,   123,     9,   462,    49,   136,
     123,   199,   205,   136,   137,    18,   470,   140,    86,   137,
     255,   270,   121,   120,    16,    17,   121,   149,   125,   149,
      50,   280,   267,   101,   269,   270,   327,   328,   120,   123,
     275,   125,   549,   125,   747,    15,   234,    88,   121,   123,
     149,   125,   240,   137,   149,   123,   137,   125,   121,   123,
     419,   125,   255,   137,   252,   327,   328,   255,   149,   110,
     766,   259,   260,   137,   267,   263,   149,   270,   124,   132,
      23,    24,   275,   276,    27,    74,   149,   275,   323,   262,
     136,   136,   265,   120,   267,   140,   136,   285,   125,   144,
     140,   122,   275,   276,   144,   464,   124,   148,   129,   468,
     298,   792,   808,   485,   473,   792,   365,   366,   477,   670,
     122,   807,   371,   372,   647,   125,   120,   129,   419,   317,
     323,   125,   125,   640,   139,   658,   129,   440,   497,   442,
     771,   500,   773,   378,   503,   105,   381,    92,    93,    94,
     323,    23,    24,    25,    26,    27,   105,   419,   148,   149,
     395,   857,   397,    43,    44,   846,   105,   355,    60,   846,
     124,   125,     4,   139,    70,   126,   120,   365,   366,   132,
      35,    71,   473,   371,   372,   378,   477,   514,   381,   516,
     741,   440,   123,   442,   429,   141,   136,    55,   124,   141,
     141,   123,   395,   102,   397,   440,   497,   442,   381,   500,
     123,   473,   503,   462,   102,   477,    90,   452,   467,   123,
      86,   470,   395,    68,   397,   123,   777,   476,    15,   464,
     744,   102,   137,   468,   120,   497,   429,   120,   500,   611,
     612,   503,   123,   137,   611,   612,   481,   440,   123,   442,
     129,   140,   137,   137,   768,   125,   429,   540,   140,   452,
     137,   137,   717,   120,   452,    86,    86,   123,   137,    86,
      86,   464,   123,   123,   123,   468,   464,   140,    21,   514,
     148,   516,   149,   471,   124,   131,   124,    86,   481,   136,
     125,   124,   136,   136,    57,    39,   531,    39,    12,     4,
     535,   536,   537,   538,   539,   123,   137,   136,   481,    57,
     122,   670,   137,   124,   549,   129,   125,   144,   124,   124,
     144,   136,   125,   682,   137,   125,   124,   515,   123,   137,
     137,   125,   567,   788,   661,   136,   124,   123,   531,   123,
     136,   126,   535,   536,   537,   538,   539,   540,   126,   121,
     143,   544,   128,   136,     4,   255,   549,   124,   531,   149,
     124,   733,   535,   536,   537,   538,   539,   267,   136,     4,
       5,     6,   137,     8,   567,    10,   136,   126,    39,   670,
     126,   121,   741,   136,    19,   119,   147,   126,   747,   126,
     639,   682,   124,   628,   567,   255,   631,   126,    33,   126,
     136,   136,   140,   136,   653,   640,   124,   267,   670,   124,
     136,   136,   136,   103,   137,   137,   124,   666,   777,   136,
     682,   123,     3,   323,   136,   674,   661,    62,   124,   136,
     136,   694,   136,   269,   840,   628,   751,   631,   631,   628,
     628,   251,   661,   631,   740,   275,   778,   640,   779,    18,
     741,    74,    32,    53,    70,    88,   747,   765,   255,   639,
     241,   549,   717,   323,    11,   403,    49,    44,   717,   497,
     500,   477,   350,   661,   109,   682,    -1,    -1,    -1,   741,
      -1,   381,    -1,   718,    -1,   747,   777,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   729,   395,    -1,   397,   686,    -1,
      -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   148,   149,   777,   765,   766,   767,    -1,
     713,   381,   771,    -1,   773,   718,    -1,    -1,    -1,   429,
     779,   780,    -1,   768,    -1,   395,   729,   397,    -1,   788,
      -1,    -1,    -1,    -1,    -1,   718,    -1,    -1,    -1,    -1,
      -1,    -1,   452,    -1,    -1,    -1,   729,   792,   807,   808,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   429,
      -1,    -1,    -1,    -1,    -1,   768,    -1,    -1,    -1,    -1,
      -1,   481,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   768,    -1,    -1,    -1,   792,
      -1,    -1,    -1,    -1,   792,   854,    -1,    -1,   857,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   481,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   531,    -1,    -1,    -1,   535,   536,   537,   538,   539,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   567,    -1,    -1,
      -1,   531,    -1,    -1,    -1,   535,   536,   537,   538,   539,
      -1,    -1,    -1,    -1,    -1,    -1,     4,     5,     6,    -1,
       8,    -1,    10,     4,     5,     6,    -1,     8,    -1,    10,
      -1,    19,    -1,    -1,    -1,    -1,    -1,   567,    19,    -1,
      21,    -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,    30,
      31,    -1,    33,    -1,    -1,    36,    37,    38,   628,    40,
      41,   631,    -1,    -1,    45,    46,    47,    48,    -1,    -1,
      51,    52,    53,    -1,    62,    56,    -1,    -1,    -1,    -1,
      61,    62,    63,    64,    65,    66,    67,    -1,    -1,    -1,
      78,    72,    73,    -1,    75,    -1,    77,    -1,    79,    -1,
      -1,    82,    83,    84,    85,    -1,    87,    -1,    89,    -1,
      -1,    -1,    93,    -1,    95,    96,    97,    98,    99,   100,
     101,   109,    -1,   104,    -1,   106,   107,   108,   109,    -1,
      -1,    -1,    -1,   114,   115,   116,   117,   118,   119,    -1,
      -1,   129,   123,    -1,   125,    -1,   127,    -1,   718,    -1,
     138,    -1,    -1,    -1,    -1,    -1,    -1,   138,    -1,   729,
     148,   149,    -1,    -1,    -1,    -1,    -1,   148,   149,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   718,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   768,   729,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   792,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   768,    -1,
      -1,    -1,    -1,    -1,     4,     5,     6,    -1,     8,    -1,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
      -1,    21,   792,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,    -1,    -1,   123,    -1,    -1,    -1,   127,    -1,     4,
       5,     6,   132,     8,    -1,    10,   136,    -1,   138,    -1,
     140,    -1,    -1,    -1,    19,    -1,    21,    -1,   148,   149,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,    -1,    -1,   123,   124,
      -1,    -1,   127,    -1,     4,     5,     6,   132,     8,    -1,
      10,   136,    -1,   138,    -1,   140,    -1,    -1,    -1,    19,
      -1,    21,    -1,   148,   149,    -1,    -1,    -1,    -1,    -1,
      30,    31,    -1,    33,    -1,    -1,    36,    37,    38,    -1,
      40,    41,    -1,    -1,    -1,    -1,    -1,    47,    48,    -1,
      -1,    51,    52,    -1,    -1,    -1,    56,    -1,    -1,    -1,
      -1,    61,    62,    63,    64,    65,    66,    67,    -1,    -1,
      -1,    -1,    72,    73,    -1,    75,    -1,    77,    -1,    79,
      -1,    -1,    82,    83,    84,    85,    -1,    87,    -1,    89,
      -1,    -1,    -1,    93,    -1,    95,    96,    97,    98,    99,
     100,   101,    -1,    -1,   104,    -1,   106,   107,   108,   109,
      -1,    -1,    -1,    -1,   114,   115,   116,   117,   118,   119,
      -1,   121,    -1,    -1,    -1,   125,    -1,   127,     4,     5,
       6,    -1,     8,    -1,    10,    -1,    -1,    -1,   138,    -1,
      -1,    -1,    -1,    19,    -1,    21,    -1,    -1,   148,   149,
      -1,    -1,    -1,    -1,    30,    31,    -1,    33,    -1,    -1,
      36,    37,    38,    -1,    40,    41,    -1,    -1,    -1,    -1,
      -1,    47,    48,    -1,    -1,    51,    52,    -1,    -1,    -1,
      56,    -1,    -1,    -1,    -1,    61,    62,    63,    64,    65,
      66,    67,    -1,    -1,    -1,    -1,    72,    73,    -1,    75,
      -1,    77,    -1,    79,    -1,    -1,    82,    83,    84,    85,
      -1,    87,    -1,    89,    -1,    -1,    -1,    93,    -1,    95,
      96,    97,    98,    99,   100,   101,    -1,    -1,   104,    -1,
     106,   107,   108,   109,    -1,    -1,    -1,    -1,   114,   115,
     116,   117,   118,   119,    -1,    -1,    -1,    -1,    -1,   125,
      -1,   127,     4,     5,     6,    -1,     8,    -1,    10,    -1,
      -1,    -1,   138,    -1,    -1,    -1,    -1,    19,    -1,    21,
      -1,    -1,   148,   149,    -1,    -1,    -1,    29,    -1,    31,
      -1,    33,    -1,    -1,    36,    37,    38,    39,    40,    41,
      -1,    -1,    -1,    -1,    46,    47,    48,    -1,    -1,    51,
      52,    -1,    -1,    -1,    56,    -1,    -1,    -1,    -1,    61,
      62,    -1,    64,    65,    66,    67,    -1,    -1,    -1,    -1,
      -1,    73,    -1,    75,    -1,    77,    -1,    -1,    -1,    -1,
      82,    83,    84,    85,    -1,    87,    88,    -1,    -1,    -1,
      -1,    93,    -1,    95,    96,    97,    98,    99,    -1,    -1,
      -1,    -1,   104,    -1,   106,   107,   108,   109,   110,    -1,
      -1,    -1,   114,   115,   116,   117,   118,    -1,    -1,    -1,
      -1,   123,     4,     5,     6,   127,     8,    -1,    10,    -1,
     132,    -1,    -1,    -1,    -1,    -1,   138,    19,   140,    21,
      -1,    -1,    -1,    -1,    -1,    -1,   148,   149,    -1,    31,
      -1,    33,    -1,    -1,    36,    37,    38,    -1,    40,    41,
      -1,    -1,    -1,    -1,    -1,    47,    48,    -1,    -1,    51,
      52,    -1,    -1,    -1,    56,    -1,    -1,    -1,    -1,    61,
      62,    63,    64,    65,    66,    67,    -1,    -1,    -1,    -1,
      72,    73,    -1,    75,    -1,    77,    -1,    79,    -1,    -1,
      82,    83,    84,    85,    -1,    87,    -1,    89,    -1,    -1,
      -1,    93,    -1,    95,    96,    97,    98,    99,   100,   101,
      -1,    -1,   104,    -1,   106,   107,   108,   109,    -1,    -1,
      -1,    -1,   114,   115,   116,   117,   118,   119,    -1,    -1,
      -1,    -1,    -1,   125,    -1,   127,     4,     5,     6,    -1,
       8,    -1,    10,    -1,    -1,    -1,   138,    -1,    -1,    -1,
      -1,    19,    -1,    21,    -1,    -1,   148,   149,    -1,    -1,
      -1,    -1,    -1,    31,    -1,    33,    -1,    -1,    36,    37,
      38,    39,    40,    41,    -1,    -1,    -1,    -1,    46,    47,
      48,    -1,    -1,    51,    52,    -1,    -1,    -1,    56,    -1,
      -1,    -1,    -1,    61,    62,    -1,    64,    65,    66,    67,
      -1,    -1,    -1,    -1,    -1,    73,    -1,    75,    -1,    77,
      -1,    -1,    -1,    -1,    82,    83,    84,    85,    -1,    87,
      88,    -1,    -1,    -1,    -1,    93,    -1,    95,    96,    97,
      98,    99,    -1,    -1,    -1,    -1,   104,    -1,   106,   107,
     108,   109,    -1,    -1,    -1,    -1,   114,   115,   116,   117,
     118,    -1,    -1,    -1,    -1,   123,     4,    -1,    -1,   127,
      -1,    -1,    -1,    -1,   132,    -1,    -1,    -1,    -1,    -1,
     138,    -1,   140,    21,    -1,    -1,    -1,    -1,    -1,    -1,
     148,   149,    -1,    31,    -1,    33,    -1,    -1,    36,    37,
      38,    -1,    40,    41,    -1,    -1,    -1,    -1,    -1,    47,
      48,    -1,    -1,    51,    52,    -1,    -1,    -1,    56,    -1,
      -1,    -1,    -1,    61,    -1,    -1,    64,    65,    66,    67,
      -1,    -1,    -1,    -1,    -1,    73,    -1,    75,    -1,    77,
      -1,    -1,    -1,    -1,    82,    83,    84,    85,    -1,    87,
      -1,    -1,    -1,    -1,    -1,    93,    -1,    95,    96,    97,
      98,    99,    -1,    -1,    -1,    -1,   104,    -1,   106,   107,
     108,    -1,    -1,    -1,    -1,    -1,   114,   115,   116,   117,
     118,    -1,    -1,    -1,     4,     5,     6,    -1,     8,   127,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
     138,    -1,     4,     5,     6,    -1,     8,    -1,    10,    -1,
     148,   149,    -1,    33,     4,     5,     6,    19,     8,    39,
      10,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    19,
      -1,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      -1,    -1,    62,    33,    46,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,
      -1,    -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,    78,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   123,   124,    -1,    -1,   109,    -1,    -1,
      -1,    -1,   132,    -1,    -1,    -1,    -1,    -1,   138,   109,
     140,   123,    -1,    -1,    -1,    -1,    -1,    -1,   148,   149,
     132,    -1,    -1,    -1,    -1,    -1,   138,    -1,   140,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   148,   149,   138,    -1,
      21,    -1,    23,    24,    25,    26,    27,    -1,   148,   149,
      31,    -1,    33,    -1,    -1,    36,    37,    38,    -1,    40,
      41,    -1,    -1,    -1,    -1,    -1,    47,    48,    -1,    -1,
      51,    52,    -1,    -1,    -1,    56,    -1,    -1,    -1,    -1,
      61,    -1,    -1,    64,    65,    66,    67,    -1,    -1,    -1,
      -1,    -1,    73,    -1,    75,    -1,    77,    -1,    -1,    -1,
      -1,    82,    83,    84,    85,    -1,    87,    -1,    -1,    -1,
      -1,    -1,    93,    -1,    95,    96,    97,    98,    99,    -1,
      -1,    -1,    -1,   104,    -1,   106,   107,   108,    -1,    -1,
      -1,    -1,    -1,   114,   115,   116,   117,   118,    -1,    21,
      -1,    -1,    -1,    -1,    -1,    -1,   127,    29,    -1,    31,
      -1,    33,    -1,    -1,    36,    37,    38,    -1,    40,    41,
      42,    -1,    -1,    -1,    -1,    47,    48,   148,   149,    51,
      52,    -1,    -1,    -1,    56,    -1,    -1,    -1,    -1,    61,
      -1,    -1,    64,    65,    66,    67,    -1,    -1,    -1,    -1,
      -1,    73,    -1,    75,    -1,    77,    -1,    -1,    -1,    -1,
      82,    83,    84,    85,    -1,    87,    -1,    -1,    -1,    -1,
      -1,    93,    -1,    95,    96,    97,    98,    99,    -1,    -1,
      -1,    -1,   104,    -1,   106,   107,   108,    -1,   110,    -1,
      -1,    -1,   114,   115,   116,   117,   118,    -1,    21,    -1,
      -1,    -1,    -1,    -1,    -1,   127,    -1,    -1,    31,    -1,
      33,    -1,    -1,    36,    37,    38,    -1,    40,    41,    -1,
      -1,    -1,    -1,    -1,    47,    48,   148,   149,    51,    52,
      -1,    -1,    -1,    56,    -1,    -1,    -1,    -1,    61,    -1,
      -1,    64,    65,    66,    67,    -1,    -1,    -1,    -1,    -1,
      73,    -1,    75,    -1,    77,    -1,    -1,    -1,    -1,    82,
      83,    84,    85,    -1,    87,    -1,    -1,    -1,    -1,    -1,
      93,    -1,    95,    96,    97,    98,    99,    -1,    -1,    -1,
      -1,   104,    -1,   106,   107,   108,    -1,    -1,    -1,    -1,
      -1,   114,   115,   116,   117,   118,    -1,   120,    -1,    -1,
     123,    21,    -1,    -1,   127,    -1,    -1,    -1,    -1,    29,
      -1,    31,    -1,    33,    -1,    -1,    36,    37,    38,    -1,
      40,    41,    -1,    -1,    -1,   148,   149,    47,    48,    -1,
      -1,    51,    52,    -1,    -1,    -1,    56,    -1,    -1,    -1,
      -1,    61,    -1,    -1,    64,    65,    66,    67,    -1,    -1,
      -1,    -1,    -1,    73,    -1,    75,    -1,    77,    -1,    -1,
      -1,    -1,    82,    83,    84,    85,    -1,    87,    -1,    -1,
      -1,    -1,    -1,    93,    -1,    95,    96,    97,    98,    99,
      -1,    -1,    -1,    -1,   104,    -1,   106,   107,   108,    -1,
     110,    -1,    -1,    -1,   114,   115,   116,   117,   118,    -1,
      21,    -1,    -1,    -1,    -1,    -1,    -1,   127,    -1,    -1,
      31,    -1,    33,    -1,    -1,    36,    37,    38,    -1,    40,
      41,    -1,    -1,    -1,    -1,    -1,    47,    48,   148,   149,
      51,    52,    -1,    -1,    -1,    56,    -1,    58,    -1,    -1,
      61,    -1,    -1,    64,    65,    66,    67,    -1,    69,    -1,
      -1,    -1,    73,    -1,    75,    -1,    77,    -1,    -1,    -1,
      -1,    82,    83,    84,    85,    -1,    87,    -1,    -1,    -1,
      -1,    -1,    93,    -1,    95,    96,    97,    98,    99,    -1,
      -1,    -1,    -1,   104,    -1,   106,   107,   108,    -1,    -1,
      -1,    -1,    -1,   114,   115,   116,   117,   118,    -1,    21,
      -1,    -1,    -1,    -1,    -1,    -1,   127,    -1,    -1,    31,
      -1,    33,    -1,    -1,    36,    37,    38,    -1,    40,    41,
      -1,    -1,    -1,    -1,    -1,    47,    48,   148,   149,    51,
      52,    -1,    -1,    -1,    56,    -1,    -1,    -1,    -1,    61,
      -1,    -1,    64,    65,    66,    67,    -1,    -1,    -1,    -1,
      -1,    73,    -1,    75,    -1,    77,    -1,    -1,    -1,    -1,
      82,    83,    84,    85,    -1,    87,    -1,    -1,    -1,    -1,
      -1,    93,    -1,    95,    96,    97,    98,    99,    -1,    -1,
      -1,    -1,   104,    -1,   106,   107,   108,    -1,    -1,    -1,
      -1,    -1,   114,   115,   116,   117,   118,    -1,    21,    -1,
      -1,   123,    -1,    -1,    -1,   127,    -1,    -1,    31,    -1,
      33,    -1,    -1,    36,    37,    38,    -1,    40,    41,    -1,
      -1,    -1,    -1,    -1,    47,    48,   148,   149,    51,    52,
      -1,    -1,    -1,    56,    -1,    -1,    -1,    -1,    61,    -1,
      -1,    64,    65,    66,    67,    -1,    -1,    -1,    -1,    -1,
      73,    -1,    75,    -1,    77,    -1,    -1,    -1,    -1,    82,
      83,    84,    85,    -1,    87,    -1,    -1,    -1,    -1,    -1,
      93,    -1,    95,    96,    97,    98,    99,    -1,    -1,    -1,
      -1,   104,    -1,   106,   107,   108,    -1,    -1,    -1,    -1,
      -1,   114,   115,   116,   117,   118,    -1,   120,    -1,    -1,
      -1,    21,    -1,    -1,   127,    -1,    -1,    -1,    -1,    -1,
      -1,    31,    -1,    33,    -1,    -1,    36,    37,    38,    -1,
      40,    41,    -1,    -1,    -1,   148,   149,    47,    48,    -1,
      -1,    51,    52,    -1,    -1,    -1,    56,    -1,    -1,    -1,
      -1,    61,    -1,    -1,    64,    65,    66,    67,    -1,    -1,
      -1,    -1,    -1,    73,    -1,    75,    -1,    77,    -1,    -1,
      -1,    -1,    82,    83,    84,    85,    -1,    87,    -1,    -1,
      -1,    -1,    -1,    93,    -1,    95,    96,    97,    98,    99,
      -1,    -1,    -1,    -1,   104,    -1,   106,   107,   108,    -1,
      -1,    -1,    -1,    -1,   114,   115,   116,   117,   118,    -1,
      21,    -1,    -1,    -1,    -1,    -1,    -1,   127,    -1,   129,
      31,    -1,    33,    -1,    -1,    36,    37,    38,    -1,    40,
      41,    -1,    -1,    -1,    -1,    -1,    47,    48,   148,   149,
      51,    52,    -1,    -1,    -1,    56,    -1,    -1,    -1,    -1,
      61,    -1,    -1,    64,    65,    66,    67,    -1,    -1,    -1,
      -1,    -1,    73,    -1,    75,    -1,    77,    -1,    -1,    -1,
      -1,    82,    83,    84,    85,    -1,    87,    -1,    -1,    -1,
      -1,    -1,    93,    -1,    95,    96,    97,    98,    99,    -1,
      -1,    -1,    -1,   104,    -1,   106,   107,   108,    -1,    -1,
      -1,    -1,    -1,   114,   115,   116,   117,   118,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   148,   149,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      -1,    -1,    -1,    -1,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    80,    81,    -1,    83,
      -1,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
      -1,   105,    -1,   107,   108,   109,   110,   111,   112,   113,
      -1,    -1,    -1,    -1,    -1,   119,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,   148,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    -1,    -1,    -1,
      -1,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      -1,    78,    79,    80,    81,    -1,    83,    -1,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,    -1,   105,    -1,
     107,   108,   109,   110,   111,   112,   113,    -1,    -1,    -1,
      -1,    -1,   119,    -1,    -1,    -1,    -1,   124,    -1,    -1,
     127,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   136,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,   148,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    -1,    -1,    -1,    -1,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      80,    81,    -1,    83,    -1,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,    -1,   105,    -1,   107,   108,   109,
     110,   111,   112,   113,    -1,    -1,    -1,    -1,    -1,   119,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   136,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,   148,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    -1,    -1,    -1,    -1,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    -1,    78,    79,    80,    81,    -1,
      83,    -1,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,    -1,   105,    -1,   107,   108,   109,   110,   111,   112,
     113,    -1,    -1,    -1,    -1,    -1,   119,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   148
  };

  const unsigned short int
  asn1_parser::yystos_[] =
  {
       0,   148,   153,   154,   225,   376,     0,   153,    50,   123,
     226,   227,   228,    15,   233,     4,   149,   229,   230,   231,
     232,   309,   374,   132,   314,    74,    34,    58,    69,   234,
     124,   229,   125,   139,   315,   105,   105,   105,    60,   235,
     231,    16,    17,   317,   139,   316,    70,   120,   126,   317,
     132,    35,   316,    59,   236,   237,    30,   148,   149,   238,
     245,   246,   247,   373,   375,   224,    71,   239,   141,   141,
     136,   123,    55,   240,   241,   242,   245,    21,   148,   159,
     195,   199,   200,   201,   202,   203,   204,   248,   249,   258,
     259,   260,   373,   375,   377,   246,   124,   141,   242,    63,
     123,   205,   248,    21,    31,    33,    36,    37,    38,    40,
      41,    47,    48,    51,    52,    56,    61,    64,    65,    66,
      67,    73,    75,    77,    82,    83,    84,    85,    87,    93,
      95,    96,    97,    98,    99,   104,   106,   107,   108,   114,
     115,   116,   117,   118,   120,   127,   148,   149,   183,   184,
     193,   194,   198,   205,   210,   211,   212,   213,   250,   252,
     256,   261,   262,   270,   272,   276,   280,   281,   284,   285,
     286,   291,   292,   293,   294,   298,   299,   300,   301,   305,
     312,   313,   318,   319,   320,   321,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   373,   374,   375,   376,   205,
     261,   373,   376,   205,   243,   376,    29,   110,   148,   156,
     157,   158,   206,   207,   208,   209,   247,   261,   373,   375,
     376,   377,   148,   156,   376,   102,   102,   123,    90,   123,
      86,   123,    68,   102,    86,   101,   123,   125,   332,   356,
      86,   123,   332,   356,    42,   156,   160,   161,   261,    15,
     302,   120,   120,   261,   137,   123,   254,   120,   332,    58,
      69,   261,   137,   129,   137,   137,   261,   120,   137,   120,
     123,   244,   306,   375,   124,   136,   140,   137,   120,   137,
     123,   263,   295,   296,   297,   374,   121,   274,   277,   278,
     279,   374,   156,   273,   274,   374,   261,   263,   374,   332,
      44,   121,   124,   263,   287,   288,   289,   290,     4,     5,
       6,     8,    10,    19,    30,    33,    45,    46,    53,    62,
      63,    72,    79,    89,   100,   109,   119,   123,   125,   138,
     148,   149,   196,   215,   216,   218,   223,   261,   271,   275,
     322,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   346,   347,   348,   349,   350,   351,   352,   354,   356,
     357,   358,   359,   369,   370,    86,    86,   261,   263,   124,
     287,    86,    86,   123,   140,    32,    94,   113,   304,   196,
     261,   120,    23,    24,    25,    26,    27,   164,   165,     5,
       6,     8,    10,    33,    39,    46,    88,   123,   140,   148,
     149,   156,   198,   214,   251,   253,   255,   257,   261,   264,
     265,   266,   267,   271,   275,   314,   322,   375,   376,   123,
     268,   261,   261,   165,   373,   261,   165,    21,   373,   120,
      33,   148,   149,   198,   264,   265,   373,   376,   160,     4,
     251,   307,   308,   309,   310,   311,   374,   375,   207,   247,
     148,   377,   123,   183,   185,   186,   187,   189,   282,   283,
     374,   124,   136,   261,   131,   371,   124,   136,   125,   124,
     136,    86,   371,    49,    88,   124,   136,    57,   343,    39,
     261,    39,   332,   265,    12,    43,    44,   121,   197,   336,
     335,     4,   123,   371,   136,   111,   144,   344,    76,   145,
     345,   343,   261,   122,   129,   261,   263,   261,   263,   124,
     261,   263,   261,   263,    23,    24,    27,   162,   163,   166,
     169,   171,   172,   174,     4,   251,   303,   265,   137,   265,
     265,   269,   125,   254,   124,   136,   140,   144,   136,   144,
     137,   335,   265,   137,   137,   251,   307,   124,   307,   125,
      28,    29,    30,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    78,    79,    80,    81,    83,    85,
      86,    87,    88,    89,    90,    91,    92,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   105,   107,   108,
     109,   110,   111,   112,   113,   119,   136,   148,   164,   182,
     188,   190,   191,   192,   261,   265,   376,   378,   124,   136,
     125,   121,   263,   251,   261,   275,   372,   121,   279,   251,
     275,   274,   261,   136,    33,   148,   149,   348,   121,   290,
     346,   123,    53,   265,   332,   360,   123,   361,   362,   363,
     136,   124,   136,   126,   143,   219,   220,   126,   121,   339,
     341,    78,   129,   348,   353,   355,    49,    88,   156,   167,
     164,   261,   156,   124,   136,   128,   164,   124,   265,     4,
     265,   265,   265,   265,   265,   375,   124,   124,   310,   192,
     136,   124,   191,   137,   283,     4,   251,   136,   140,   371,
     126,   126,   121,   289,   371,   156,   209,   217,   261,    39,
     121,   364,   365,   374,   336,   121,   137,   222,   374,   124,
     136,   136,   355,   261,    49,    88,   173,    49,    88,   170,
     112,   168,    49,    88,   175,   119,   176,   163,   126,   126,
     147,   126,   126,   297,   265,   136,   136,   136,   140,   124,
     265,   136,   124,   136,   332,   366,   367,   136,   137,   221,
     137,   220,   336,   185,   348,   170,   103,   124,   136,   278,
     121,   289,   123,   185,   265,   364,   364,    28,    88,    92,
     368,   336,   221,   222,   374,   123,   155,   136,   136,   265,
     124,    33,    36,    37,    38,    39,    40,    41,    46,    47,
      48,    51,    52,    56,    61,    62,    73,    75,    83,    85,
      87,    88,    95,    96,    97,    98,    99,   107,   108,   109,
     127,   148,   177,   178,   179,   180,   181,   182,   121,   177,
     124,   178,   164,   182,   136,   128,   289,   136
  };

  const unsigned short int
  asn1_parser::yyr1_[] =
  {
       0,   152,   153,   153,   154,   155,   156,   156,   156,   157,
     158,   158,   159,   160,   160,   161,   162,   162,   163,   163,
     163,   163,   163,   164,   164,   164,   164,   164,   165,   165,
     166,   167,   167,   167,   168,   168,   169,   170,   170,   170,
     171,   172,   173,   173,   173,   174,   175,   175,   175,   176,
     176,   177,   177,   178,   178,   179,   180,   181,   181,   181,
     182,   182,   183,   183,   184,   185,   185,   186,   186,   187,
     188,   189,   190,   190,   191,   191,   192,   192,   193,   193,
     194,   195,   196,   197,   197,   197,   197,   197,   198,   198,
     199,   199,   199,   199,   199,   200,   201,   202,   203,   204,
     205,   206,   206,   207,   207,   208,   208,   209,   209,   210,
     211,   212,   213,   213,   214,   214,   215,   215,   215,   216,
     217,   217,   217,   217,   217,   218,   218,   219,   219,   220,
     220,   221,   221,   222,   222,   223,   223,   223,   224,   225,
     226,   226,   226,   227,   228,   229,   229,   230,   230,   230,
     231,   232,   233,   233,   234,   234,   234,   234,   235,   235,
     236,   236,   237,   237,   237,   238,   238,   239,   239,   240,
     240,   241,   241,   242,   243,   244,   244,   244,   245,   245,
     246,   247,   247,   247,   248,   248,   249,   249,   249,   249,
     249,   249,   250,   250,   250,   251,   251,   252,   253,   254,
     255,   255,   255,   256,   257,   258,   259,   260,   261,   261,
     261,   261,   261,   262,   262,   262,   262,   262,   262,   262,
     262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
     262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
     262,   262,   262,   262,   263,   264,   264,   264,   264,   264,
     264,   264,   264,   264,   264,   264,   264,   264,   264,   264,
     264,   264,   264,   264,   264,   265,   265,   266,   266,   267,
     267,   268,   269,   269,   270,   271,   271,   272,   272,   273,
     273,   274,   274,   275,   275,   276,   277,   277,   277,   277,
     278,   278,   279,   279,   280,   281,   281,   282,   282,   283,
     283,   284,   285,   286,   286,   287,   288,   288,   288,   288,
     288,   288,   288,   288,   288,   289,   289,   290,   290,   290,
     290,   291,   291,   292,   292,   293,   293,   294,   295,   296,
     296,   296,   297,   297,   298,   299,   300,   300,   300,   301,
     302,   302,   303,   303,   304,   304,   304,   304,   305,   306,
     306,   307,   307,   308,   308,   308,   309,   310,   310,   311,
     312,   313,   314,   315,   316,   316,   317,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   327,   328,
     328,   328,   328,   328,   328,   328,   328,   328,   328,   328,
     328,   328,   329,   330,   330,   331,   331,   331,   331,   331,
     331,   331,   331,   332,   333,   333,   334,   335,   335,   335,
     336,   336,   337,   337,   338,   339,   339,   340,   341,   341,
     342,   343,   344,   344,   345,   345,   346,   346,   347,   347,
     347,   347,   347,   347,   347,   347,   347,   348,   348,   348,
     348,   348,   348,   348,   348,   348,   348,   349,   350,   351,
     352,   352,   353,   353,   354,   354,   355,   355,   356,   357,
     358,   359,   359,   360,   361,   361,   362,   363,   364,   364,
     365,   366,   367,   367,   368,   368,   368,   368,   369,   370,
     371,   371,   372,   372,   372,   373,   374,   375,   376,   377,
     378,   378,   378,   378,   378,   378,   378,   378,   378,   378,
     378,   378,   378,   378,   378,   378,   378,   378,   378,   378,
     378,   378,   378,   378,   378,   378,   378,   378,   378,   378,
     378,   378,   378,   378,   378,   378,   378,   378,   378,   378,
     378,   378,   378,   378,   378,   378,   378,   378,   378,   378,
     378,   378,   378,   378,   378,   378,   378,   378,   378,   378,
     378,   378,   378,   378,   378,   378,   378,   378,   378,   378,
     378,   378,   378,   378,   378,   378,   378
  };

  const unsigned char
  asn1_parser::yyr2_[] =
  {
       0,     2,     1,     2,    10,     3,     1,     1,     1,     3,
       1,     1,     3,     1,     1,     5,     1,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       2,     1,     2,     0,     1,     0,     4,     1,     2,     0,
       3,     3,     1,     2,     0,     3,     1,     1,     0,     3,
       0,     1,     2,     1,     1,     3,     2,     1,     2,     0,
       1,     1,     1,     1,     3,     1,     1,     1,     1,     5,
       2,     3,     1,     2,     1,     1,     1,     1,     1,     1,
       3,     4,     3,     1,     3,     1,     3,     5,     3,     3,
       1,     1,     1,     1,     1,     4,     5,     5,     4,     5,
       3,     1,     3,     3,     1,     1,     1,     1,     1,     1,
       3,     3,     1,     1,     1,     1,     1,     1,     1,     5,
       3,     3,     1,     1,     0,     1,     4,     1,     3,     2,
       4,     2,     0,     1,     3,     2,     3,     5,     0,     2,
       1,     1,     0,     3,     2,     1,     2,     1,     1,     1,
       1,     4,     2,     0,     2,     2,     2,     0,     2,     0,
       3,     0,     3,     3,     0,     1,     0,     3,     0,     1,
       0,     1,     2,     3,     2,     1,     1,     0,     1,     3,
       1,     1,     3,     1,     1,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     3,
       1,     1,     1,     3,     3,     3,     4,     4,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     1,     1,     1,     1,     1,
       1,     1,     2,     1,     4,     1,     1,     1,     1,     3,
       3,     1,     1,     1,     1,     1,     1,     3,     3,     3,
       3,     3,     1,     2,     1,     1,     1,     1,     4,     1,
       3,     4,     4,     1,     2,     4,     1,     4,     6,     2,
       1,     3,     1,     1,     1,     2,     5,     1,     3,     4,
       4,     2,     1,     3,     4,     1,     1,     4,     6,     8,
      10,     4,     6,     2,     4,     1,     3,     1,     2,     3,
       3,     3,     3,     3,     4,     3,     3,     4,     1,     1,
       3,     5,     1,     3,     3,     1,     2,     3,     3,     5,
       2,     0,     1,     1,     1,     1,     1,     0,     2,     3,
       4,     1,     2,     1,     1,     1,     1,     1,     1,     4,
       1,     1,     4,     2,     3,     0,     1,     1,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     2,     1,     4,     4,     4,     4,     4,
       4,     4,     4,     4,     1,     1,     1,     1,     3,     5,
       1,     2,     1,     3,     1,     1,     3,     1,     1,     2,
       1,     2,     1,     1,     1,     1,     1,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     1,     3,
       1,     2,     1,     2,     1,     1,     1,     1,     2,     1,
       2,     3,     3,     1,     1,     1,     3,     5,     1,     3,
       2,     2,     1,     0,     1,     1,     1,     0,     2,     2,
       2,     0,     1,     1,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1
  };



  // YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
  // First, the terminals, then, starting at \a yyntokens_, nonterminals.
  const char*
  const asn1_parser::yytname_[] =
  {
  "END_OF_FILE", "error", "$undefined", "comment", "number", "realnumber",
  "bstring", "xmlbstring", "hstring", "xmlhstring", "cstring",
  "xmlcstring", "simplestring", "xmltstring", "psname",
  "encodingreference", "integerUnicodeLabel", "non-integerUnicodeLabel",
  "extended-true", "tstring", "extended-false", "objectreference",
  "objectsetreference", "typefieldreference", "valuefieldreference",
  "valuesetfieldreference", "objectfieldreference",
  "objectsetfieldreference", "ABSENT", "ABSTRACT_SYNTAX", "ALL", "ANY",
  "APPLICATION", "ASN_NULL", "AUTOMATIC", "BEGIN", "BIT", "BMPString",
  "BOOLEAN", "BY", "CHARACTER", "CHOICE", "CLASS", "COMPONENT",
  "COMPONENTS", "CONSTRAINED", "CONTAINING", "DATE", "DATE_TIME",
  "DEFAULT", "DEFINITIONS", "DURATION", "EMBEDDED", "ENCODED",
  "ENCODING_CONTROL", "END", "ENUMERATED", "EXCEPT", "EXPLICIT", "EXPORTS",
  "EXTENSIBILITY", "EXTERNAL", "FALSE", "FROM", "GeneralizedTime",
  "GeneralString", "GraphicString", "IA5String", "IDENTIFIER", "IMPLICIT",
  "IMPLIED", "IMPORTS", "\"INCLUDES\"", "INSTANCE", "INSTRUCTIONS",
  "INTEGER", "INTERSECTION", "ISO646String", "MAX", "MIN",
  "MINUS_INFINITY", "NOT_A_NUMBER", "NumericString", "OBJECT",
  "ObjectDescriptor", "OCTET", "OF", "OID_IRI", "OPTIONAL", "PATTERN",
  "PDV", "PLUS_INFINITY", "PRESENT", "PrintableString", "PRIVATE", "REAL",
  "RELATIVE_OID", "RELATIVE_OID_IRI", "SEQUENCE", "SET", "SETTINGS",
  "SIZE", "STRING", "SYNTAX", "T61String", "TAGS", "TeletexString", "TIME",
  "TIME_OF_DAY", "TRUE", "TYPE_IDENTIFIER", "UNION", "UNIQUE", "UNIVERSAL",
  "UniversalString", "UTCTime", "UTF8String", "VideotexString",
  "VisibleString", "WITH", "\"::=\"", "\"...\"", "\"..\"", "\"{\"",
  "\"}\"", "\"(\"", "\")\"", "\"[\"", "\"]\"", "\"<\"", "\">\"", "\"!\"",
  "\"\\\"\"", "\"&\"", "\"'\"", "\"*\"", "\",\"", "\".\"", "\"-\"",
  "\"/\"", "\":\"", "\";\"", "\"=\"", "\"@\"", "\"|\"", "\"^\"", "PLUS",
  "STAR", "GENERIC_IDENTIFIER_UPPERCASE", "GENERIC_IDENTIFIER_LOWERCASE",
  "GENERIC_INTEGER", "xmlasn1typename", "$accept", "ModuleDefinitionList",
  "ModuleDefinition", "SyntaxList", "DefinedObjectClass",
  "ExternalObjectClassReference", "UsefulObjectClassReference",
  "ObjectClassAssignment", "ObjectClass", "ObjectClassDefn",
  "FieldSpecList", "FieldSpec", "FieldName", "FieldNameList",
  "TypeFieldSpec", "TypeOptionalitySpec", "OptionalUnique",
  "FixedTypeValueFieldSpec", "ValueOptionalitySpec",
  "VariableTypeValueFieldSpec", "ObjectFieldSpec", "ObjectOptionalitySpec",
  "ObjectSetFieldSpec", "ObjectSetOptionalitySpec", "WithSyntaxSpec",
  "TokenOrGroupSpecList", "TokenOrGroupSpec", "OptionalGroup",
  "RequiredToken", "LiteralList", "Literal", "DefinedObject",
  "ExternalObjectReference", "Object", "ObjectDefn", "DefaultSyntax",
  "FieldSetting", "DefinedSyntax", "DefinedSyntaxList",
  "DefinedSyntaxToken", "Setting", "DefinedObjectSet",
  "ExternalObjectSetReference", "ObjectSetAssignment", "ObjectSet",
  "ObjectSetSpec", "ObjectClassFieldType", "ParameterizedAssignment",
  "ParameterizedTypeAssignment", "ParameterizedValueAssignment",
  "ParameterizedValueSetTypeAssignment",
  "ParameterizedObjectClassAssignment", "ParameterizedObjectAssignment",
  "ParameterList", "ParameterSeries", "Parameter", "ParamGovernor",
  "Governor", "ReferencedObjects", "TypeFromObject", "InstanceOfType",
  "SimpleDefinedType", "SimpleDefinedValue", "GeneralConstraint",
  "UserDefinedConstraint", "UserDefinedConstraintParameter",
  "TableConstraint", "AtNotationList", "AtNotation", "Level",
  "ComponentIdList", "ContentsConstraint", "EncodingControlSections",
  "ModuleIdentifier", "DefinitiveIdentification", "DefinitiveOID",
  "DefinitiveOIDandIRI", "DefinitiveObjIdComponentList",
  "DefinitiveObjIdComponent", "DefinitiveNumberForm",
  "DefinitiveNameAndNumberForm", "EncodingReferenceDefault", "TagDefault",
  "ExtensionDefault", "ModuleBody", "Exports", "SymbolsExported",
  "Imports", "SymbolsImported", "SymbolsFromModuleList",
  "SymbolsFromModule", "GlobalModuleReference", "AssignedIdentifier",
  "SymbolList", "Symbol", "Reference", "AssignmentList", "Assignment",
  "DefinedType", "DefinedValue", "ParameterizedType", "ParameterizedValue",
  "ActualParameterList", "ActualParameter", "ExternalTypeReference",
  "ExternalValueReference", "TypeAssignment", "ValueAssignment",
  "ValueSetTypeAssignment", "Type", "BuiltinType", "NamedType",
  "ValueWithoutTypeIdentifier", "Value", "ValueCommaListChoice",
  "ValueChoice", "ValueSet", "SequenceOfValues", "BooleanType",
  "BooleanValue", "IntegerType", "NamedNumberList", "NamedNumber",
  "SignedNumber", "EnumeratedType", "Enumerations", "Enumeration",
  "EnumerationItem", "RealType", "BitStringType", "NamedBitList",
  "NamedBit", "OctetStringType", "NullType", "SequenceType",
  "ComponentTypeLists", "RootComponentTypeList", "ComponentTypeList",
  "ComponentType", "SequenceOfType", "SetType", "SetOfType", "ChoiceType",
  "AlternativeTypeLists", "RootAlternativeTypeList", "AlternativeTypeList",
  "SelectionType", "PrefixedType", "TaggedType", "Tag",
  "EncodingReference", "ClassNumber", "Class", "ObjectIdentifierType",
  "ObjectIdentifierValue", "ObjIdComponentsList", "ObjIdComponents",
  "NameForm", "NumberForm", "NameAndNumberForm", "RelativeOIDType",
  "IRIType", "IRIValue", "FirstArcIdentifier", "SubsequentArcIdentifier",
  "ArcIdentifier", "RelativeIRIType", "EmbeddedPDVType", "ExternalType",
  "TimeType", "TimeValue", "DateType", "TimeOfDayType", "DateTimeType",
  "DurationType", "CharacterStringType", "RestrictedCharacterStringType",
  "UnrestrictedCharacterStringType", "ConstrainedType",
  "TypeWithConstraint", "Constraint", "ConstraintSpec",
  "SubtypeConstraint", "ElementSetSpecs", "ElementSetSpec", "Unions",
  "UElems", "Intersections", "IElems", "IntersectionElements", "Elems",
  "Exclusions", "UnionMark", "IntersectionMark", "Elements",
  "SubtypeElements", "SingleValue", "ContainedSubtype", "Includes",
  "ValueRange", "LowerEndpoint", "UpperEndpoint", "LowerEndValue",
  "UpperEndValue", "SizeConstraint", "TypeConstraint", "PermittedAlphabet",
  "InnerTypeConstraints", "SingleTypeConstraint",
  "MultipleTypeConstraints", "FullSpecification", "PartialSpecification",
  "TypeConstraints", "NamedConstraint", "ComponentConstraint",
  "ValueConstraint", "PresenceConstraint", "PatternConstraint",
  "PropertySettings", "ExceptionSpec", "ExceptionIdentification",
  "typereference", "identifier", "valuereference", "modulereference",
  "objectclassreference", "word", YY_NULLPTR
  };

#if YYDEBUG
  const unsigned short int
  asn1_parser::yyrline_[] =
  {
       0,   309,   309,   310,   313,   328,   331,   332,   333,   336,
     339,   340,   343,   347,   348,   352,   355,   356,   359,   360,
     361,   362,   363,   366,   367,   368,   369,   370,   373,   374,
     377,   380,   381,   382,   385,   386,   389,   392,   393,   394,
     397,   400,   403,   404,   405,   408,   411,   412,   413,   419,
     420,   423,   424,   427,   428,   431,   434,   437,   438,   439,
     442,   443,   446,   447,   450,   456,   457,   462,   463,   466,
     469,   472,   475,   476,   479,   480,   483,   484,   488,   489,
     492,   495,   499,   502,   503,   504,   505,   506,   515,   516,
     522,   524,   526,   528,   530,   535,   539,   543,   547,   551,
     559,   563,   565,   569,   571,   575,   576,   579,   580,   595,
     607,   616,   623,   624,   628,   629,   632,   633,   634,   637,
     640,   641,   643,   644,   645,   648,   650,   654,   655,   658,
     659,   662,   663,   666,   667,   670,   671,   672,   683,   691,
     698,   699,   700,   703,   706,   710,   711,   715,   716,   717,
     720,   723,   727,   728,   731,   733,   735,   737,   741,   742,
     745,   747,   751,   752,   753,   756,   757,   760,   762,   765,
     767,   770,   772,   776,   780,   784,   785,   786,   789,   791,
     795,   799,   801,   803,   812,   814,   818,   820,   822,   824,
     827,   829,   833,   834,   836,   842,   844,   847,   851,   854,
     858,   860,   863,   873,   876,   901,   905,   909,   913,   915,
     917,   919,   921,   926,   927,   928,   929,   930,   931,   932,
     933,   934,   935,   936,   937,   938,   939,   940,   941,   942,
     943,   944,   945,   946,   947,   948,   949,   950,   951,   952,
     953,   954,   955,   956,   959,   963,   965,   967,   969,   971,
     973,   975,   977,   979,   981,   983,   984,   986,   988,   990,
     994,   996,   998,  1000,  1002,  1006,  1008,  1012,  1013,  1016,
    1017,  1020,  1023,  1025,  1033,  1036,  1037,  1040,  1042,  1046,
    1048,  1052,  1054,  1058,  1060,  1064,  1068,  1071,  1074,  1078,
    1081,  1083,  1087,  1089,  1097,  1100,  1101,  1104,  1105,  1108,
    1109,  1123,  1126,  1129,  1131,  1139,  1143,  1145,  1147,  1149,
    1151,  1153,  1155,  1157,  1159,  1163,  1165,  1169,  1171,  1173,
    1175,  1186,  1188,  1192,  1194,  1198,  1200,  1204,  1208,  1212,
    1214,  1216,  1220,  1222,  1229,  1232,  1236,  1238,  1240,  1244,
    1248,  1249,  1252,  1254,  1257,  1259,  1261,  1263,  1273,  1276,
    1278,  1282,  1284,  1288,  1290,  1292,  1296,  1300,  1302,  1305,
    1309,  1321,  1324,  1330,  1333,  1334,  1337,  1338,  1341,  1347,
    1354,  1360,  1363,  1366,  1369,  1372,  1375,  1378,  1379,  1382,
    1383,  1384,  1385,  1386,  1387,  1388,  1389,  1390,  1391,  1392,
    1393,  1394,  1398,  1401,  1403,  1407,  1409,  1411,  1413,  1415,
    1417,  1419,  1421,  1425,  1428,  1429,  1432,  1435,  1436,  1437,
    1440,  1441,  1444,  1445,  1448,  1451,  1452,  1455,  1458,  1459,
    1462,  1465,  1468,  1469,  1472,  1473,  1476,  1478,  1481,  1482,
    1483,  1484,  1485,  1486,  1487,  1488,  1489,  1495,  1497,  1498,
    1499,  1500,  1501,  1502,  1503,  1504,  1505,  1508,  1511,  1514,
    1517,  1518,  1521,  1522,  1525,  1526,  1529,  1530,  1533,  1536,
    1539,  1542,  1543,  1546,  1549,  1550,  1553,  1556,  1559,  1560,
    1563,  1566,  1569,  1570,  1573,  1574,  1575,  1576,  1579,  1582,
    1585,  1586,  1589,  1590,  1591,  1594,  1598,  1602,  1606,  1610,
    1614,  1615,  1616,  1617,  1618,  1619,  1620,  1621,  1622,  1623,
    1624,  1625,  1626,  1627,  1628,  1629,  1630,  1631,  1632,  1633,
    1634,  1635,  1636,  1637,  1638,  1639,  1640,  1641,  1642,  1643,
    1644,  1645,  1646,  1647,  1648,  1649,  1650,  1651,  1652,  1653,
    1654,  1655,  1656,  1657,  1658,  1659,  1660,  1661,  1662,  1663,
    1664,  1665,  1666,  1667,  1668,  1669,  1670,  1671,  1672,  1673,
    1674,  1675,  1676,  1677,  1678,  1679,  1680,  1681,  1682,  1683,
    1684,  1685,  1686,  1687,  1688,  1689,  1690
  };

  // Print the state stack on the debug stream.
  void
  asn1_parser::yystack_print_ ()
  {
    *yycdebug_ << "Stack now";
    for (stack_type::const_iterator
           i = yystack_.begin (),
           i_end = yystack_.end ();
         i != i_end; ++i)
      *yycdebug_ << ' ' << i->state;
    *yycdebug_ << std::endl;
  }

  // Report on the debug stream that the rule \a yyrule is going to be reduced.
  void
  asn1_parser::yy_reduce_print_ (int yyrule)
  {
    unsigned int yylno = yyrline_[yyrule];
    int yynrhs = yyr2_[yyrule];
    // Print the symbols being reduced, and their result.
    *yycdebug_ << "Reducing stack by rule " << yyrule - 1
               << " (line " << yylno << "):" << std::endl;
    // The symbols being reduced.
    for (int yyi = 0; yyi < yynrhs; yyi++)
      YY_SYMBOL_PRINT ("   $" << yyi + 1 << " =",
                       yystack_[(yynrhs) - (yyi + 1)]);
  }
#endif // YYDEBUG



} // yy
#line 9022 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:1167
#line 1692 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:1168



namespace yy {

    asn1_parser::symbol_type yylex(Context& context)
    {
        const char* start = context.cursor;
        const char* YYMARKER = nullptr;
        context.location.step();
        // Lexer

#line 9038 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
{
	char yych;
	unsigned int yyaccept = 0;
	yych = *context.cursor;
	switch (yych) {
	case 0x00:	goto yy2;
	case 0x08:
	case '\t':
	case '\v':
	case '\f':
	case ' ':	goto yy6;
	case '\n':	goto yy8;
	case '\r':	goto yy10;
	case '!':	goto yy11;
	case '"':	goto yy13;
	case '&':	goto yy15;
	case '\'':	goto yy16;
	case '(':	goto yy18;
	case ')':	goto yy20;
	case ',':	goto yy22;
	case '-':	goto yy24;
	case '.':	goto yy26;
	case '/':	goto yy28;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy29;
	case ':':	goto yy32;
	case ';':	goto yy34;
	case '<':	goto yy36;
	case '@':	goto yy38;
	case 'A':	goto yy40;
	case 'B':	goto yy42;
	case 'C':	goto yy43;
	case 'D':	goto yy44;
	case 'E':	goto yy45;
	case 'F':	goto yy46;
	case 'G':	goto yy47;
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'Q':
	case 'X':
	case 'Y':
	case 'Z':	goto yy48;
	case 'I':	goto yy50;
	case 'M':	goto yy51;
	case 'N':	goto yy52;
	case 'O':	goto yy53;
	case 'P':	goto yy54;
	case 'R':	goto yy55;
	case 'S':	goto yy56;
	case 'T':	goto yy57;
	case 'U':	goto yy58;
	case 'V':	goto yy59;
	case 'W':	goto yy60;
	case '[':	goto yy61;
	case ']':	goto yy63;
	case '^':	goto yy65;
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy67;
	case '{':	goto yy70;
	case '|':	goto yy72;
	case '}':	goto yy74;
	default:	goto yy4;
	}
yy2:
	++context.cursor;
#line 9153 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_END_OF_FILE(context.location); }
#line 9140 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy4:
	++context.cursor;
yy5:
#line 9180 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ throw(std::runtime_error(std::string("Unknown symbol!") + *start)); context.location.columns(context.cursor - start); return asn1_parser::symbol_type(asn1_parser::token_type(*start), context.location); }
#line 9146 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy6:
	++context.cursor;
#line 9157 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); context.location.columns(); return yylex(context); }
#line 9151 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy8:
	++context.cursor;
#line 9156 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); context.location.lines();   return yylex(context); }
#line 9156 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy10:
	yych = *++context.cursor;
	switch (yych) {
	case '\n':	goto yy8;
	default:	goto yy5;
	}
yy11:
	++context.cursor;
#line 9175 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXCLAMATION_MARK (context.location); }
#line 9167 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy13:
	yych = *++context.cursor;
	switch (yych) {
	case '"':	goto yy76;
	case '\'':	goto yy78;
	case '\\':	goto yy79;
	default:	goto yy13;
	}
yy15:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':	goto yy81;
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy84;
	default:	goto yy5;
	}
yy16:
	yych = *++context.cursor;
	switch (yych) {
	case '"':	goto yy76;
	case '\'':	goto yy87;
	case '0':
	case '1':	goto yy16;
	case '\\':	goto yy79;
	default:	goto yy13;
	}
yy18:
	++context.cursor;
#line 9165 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPEN_PARENTHESIS (context.location); }
#line 9247 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy20:
	++context.cursor;
#line 9166 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLOSE_PARENTHESIS (context.location); }
#line 9252 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy22:
	++context.cursor;
#line 9171 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COMMA (context.location); }
#line 9257 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy24:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy88;
	default:	goto yy25;
	}
yy25:
#line 9172 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_HYPHEN_MINUS (context.location); }
#line 9267 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy26:
	yych = *++context.cursor;
	switch (yych) {
	case '.':	goto yy91;
	default:	goto yy27;
	}
yy27:
#line 9173 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_FULL_STOP (context.location); }
#line 9277 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy28:
	yych = *++context.cursor;
	switch (yych) {
	case '*':	goto yy93;
	default:	goto yy5;
	}
yy29:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy29;
	default:	goto yy31;
	}
yy31:
#line 9142 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_number(std::stoll(std::string(start, context.cursor)), context.location); }
#line 9302 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy32:
	yyaccept = 0;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case ':':	goto yy95;
	default:	goto yy33;
	}
yy33:
#line 9169 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COLON (context.location); }
#line 9313 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy34:
	++context.cursor;
#line 9170 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SEMICOLON (context.location); }
#line 9318 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy36:
	++context.cursor;
#line 9176 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_LESS_THAN (context.location); }
#line 9323 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy38:
	++context.cursor;
#line 9179 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_AT (context.location); }
#line 9328 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy40:
	yych = *++context.cursor;
	switch (yych) {
	case 'B':	goto yy97;
	case 'L':	goto yy98;
	case 'N':	goto yy99;
	case 'P':	goto yy100;
	case 'U':	goto yy101;
	default:	goto yy49;
	}
yy41:
#line 9147 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GENERIC_IDENTIFIER_UPPERCASE(santize_name(std::string(start, context.cursor)), context.location); }
#line 9342 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy42:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy102;
	case 'I':	goto yy103;
	case 'M':	goto yy104;
	case 'O':	goto yy105;
	case 'Y':	goto yy106;
	default:	goto yy49;
	}
yy43:
	yych = *++context.cursor;
	switch (yych) {
	case 'H':	goto yy108;
	case 'L':	goto yy109;
	case 'O':	goto yy110;
	default:	goto yy49;
	}
yy44:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy111;
	case 'E':	goto yy112;
	case 'U':	goto yy113;
	default:	goto yy49;
	}
yy45:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy114;
	case 'N':	goto yy115;
	case 'X':	goto yy116;
	default:	goto yy49;
	}
yy46:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy117;
	case 'R':	goto yy118;
	default:	goto yy49;
	}
yy47:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy119;
	case 'r':	goto yy120;
	default:	goto yy49;
	}
yy48:
	yych = *++context.cursor;
yy49:
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy41;
	}
yy50:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy121;
	case 'D':	goto yy122;
	case 'M':	goto yy123;
	case 'N':	goto yy124;
	case 'S':	goto yy125;
	default:	goto yy49;
	}
yy51:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy126;
	case 'I':	goto yy127;
	default:	goto yy49;
	}
yy52:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy128;
	case 'U':	goto yy129;
	case 'u':	goto yy130;
	default:	goto yy49;
	}
yy53:
	yych = *++context.cursor;
	switch (yych) {
	case 'B':	goto yy131;
	case 'C':	goto yy132;
	case 'F':	goto yy133;
	case 'I':	goto yy135;
	case 'P':	goto yy136;
	case 'b':	goto yy137;
	default:	goto yy49;
	}
yy54:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy138;
	case 'D':	goto yy139;
	case 'L':	goto yy140;
	case 'R':	goto yy141;
	case 'r':	goto yy142;
	default:	goto yy49;
	}
yy55:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy143;
	default:	goto yy49;
	}
yy56:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy144;
	case 'I':	goto yy145;
	case 'T':	goto yy146;
	case 'Y':	goto yy147;
	default:	goto yy49;
	}
yy57:
	yych = *++context.cursor;
	switch (yych) {
	case '6':	goto yy148;
	case 'A':	goto yy149;
	case 'I':	goto yy150;
	case 'R':	goto yy151;
	case 'Y':	goto yy152;
	case 'e':	goto yy153;
	default:	goto yy49;
	}
yy58:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy154;
	case 'T':	goto yy155;
	case 'n':	goto yy156;
	default:	goto yy49;
	}
yy59:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy157;
	default:	goto yy49;
	}
yy60:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy158;
	default:	goto yy49;
	}
yy61:
	++context.cursor;
#line 9167 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPEN_SQUARE_BRACKET (context.location); }
#line 9557 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy63:
	++context.cursor;
#line 9168 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLOSE_SQUARE_BRACKET (context.location); }
#line 9562 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy65:
	++context.cursor;
#line 9177 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ACCENT (context.location); }
#line 9567 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy67:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy67;
	default:	goto yy69;
	}
yy69:
#line 9148 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GENERIC_IDENTIFIER_LOWERCASE(santize_name(std::string(start, context.cursor)), context.location); }
#line 9640 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy70:
	++context.cursor;
#line 9163 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPEN_BRACE (context.location); }
#line 9645 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy72:
	++context.cursor;
#line 9174 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_VERTICAL_LINE (context.location); }
#line 9650 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy74:
	++context.cursor;
#line 9164 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLOSE_BRACE (context.location); }
#line 9655 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy76:
	yych = *++context.cursor;
	switch (yych) {
	case '"':	goto yy13;
	default:	goto yy77;
	}
yy77:
#line 9144 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_cstring(std::string(start, context.cursor), context.location); }
#line 9665 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy78:
	++context.cursor;
	goto yy77;
yy79:
	yych = *++context.cursor;
	switch (yych) {
	case '"':	goto yy159;
	case '\\':	goto yy79;
	default:	goto yy13;
	}
yy81:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy81;
	default:	goto yy83;
	}
yy83:
#line 9149 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_typefieldreference(santize_name(std::string(start, context.cursor)), context.location); }
#line 9748 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy84:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy84;
	default:	goto yy86;
	}
yy86:
#line 9150 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_valuefieldreference(santize_name(std::string(start, context.cursor)), context.location); }
#line 9821 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy87:
	yych = *++context.cursor;
	switch (yych) {
	case 'B':	goto yy161;
	default:	goto yy77;
	}
yy88:
	yyaccept = 1;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '\n':
	case '\r':	goto yy90;
	case '-':	goto yy163;
	default:	goto yy88;
	}
yy90:
#line 9136 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return yylex(context); }
#line 9840 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy91:
	yych = *++context.cursor;
	switch (yych) {
	case '.':	goto yy164;
	default:	goto yy92;
	}
yy92:
#line 9162 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_RANGE (context.location); }
#line 9850 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy93:
	yych = *++context.cursor;
	switch (yych) {
	case '*':	goto yy166;
	default:	goto yy93;
	}
yy95:
	yych = *++context.cursor;
	switch (yych) {
	case '=':	goto yy167;
	default:	goto yy96;
	}
yy96:
	context.cursor = YYMARKER;
	if (yyaccept == 0) {
		goto yy33;
	} else {
		goto yy90;
	}
yy97:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy169;
	default:	goto yy49;
	}
yy98:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy170;
	default:	goto yy49;
	}
yy99:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy172;
	default:	goto yy49;
	}
yy100:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy174;
	default:	goto yy49;
	}
yy101:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy175;
	default:	goto yy49;
	}
yy102:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy176;
	default:	goto yy49;
	}
yy103:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy177;
	default:	goto yy49;
	}
yy104:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy179;
	default:	goto yy49;
	}
yy105:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy180;
	default:	goto yy49;
	}
yy106:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy107;
	}
yy107:
#line 9050 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BY (context.location); }
#line 9996 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy108:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy181;
	case 'O':	goto yy182;
	default:	goto yy49;
	}
yy109:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy183;
	default:	goto yy49;
	}
yy110:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy184;
	case 'N':	goto yy185;
	default:	goto yy49;
	}
yy111:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy186;
	default:	goto yy49;
	}
yy112:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy187;
	default:	goto yy49;
	}
yy113:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy188;
	default:	goto yy49;
	}
yy114:
	yych = *++context.cursor;
	switch (yych) {
	case 'B':	goto yy189;
	default:	goto yy49;
	}
yy115:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy190;
	case 'D':	goto yy191;
	case 'U':	goto yy193;
	default:	goto yy49;
	}
yy116:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy194;
	case 'P':	goto yy195;
	case 'T':	goto yy196;
	default:	goto yy49;
	}
yy117:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy197;
	default:	goto yy49;
	}
yy118:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy198;
	default:	goto yy49;
	}
yy119:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy199;
	default:	goto yy49;
	}
yy120:
	yych = *++context.cursor;
	switch (yych) {
	case 'a':	goto yy200;
	default:	goto yy49;
	}
yy121:
	yych = *++context.cursor;
	switch (yych) {
	case '5':	goto yy201;
	default:	goto yy49;
	}
yy122:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy202;
	default:	goto yy49;
	}
yy123:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy203;
	default:	goto yy49;
	}
yy124:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy204;
	case 'S':	goto yy205;
	case 'T':	goto yy206;
	default:	goto yy49;
	}
yy125:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy207;
	default:	goto yy49;
	}
yy126:
	yych = *++context.cursor;
	switch (yych) {
	case 'X':	goto yy208;
	default:	goto yy49;
	}
yy127:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy210;
	default:	goto yy49;
	}
yy128:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy212;
	default:	goto yy49;
	}
yy129:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy213;
	default:	goto yy49;
	}
yy130:
	yych = *++context.cursor;
	switch (yych) {
	case 'm':	goto yy214;
	default:	goto yy49;
	}
yy131:
	yych = *++context.cursor;
	switch (yych) {
	case 'J':	goto yy215;
	default:	goto yy49;
	}
yy132:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy216;
	default:	goto yy49;
	}
yy133:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy134;
	}
yy134:
#line 9098 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OF (context.location); }
#line 10227 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy135:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy217;
	default:	goto yy49;
	}
yy136:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy218;
	default:	goto yy49;
	}
yy137:
	yych = *++context.cursor;
	switch (yych) {
	case 'j':	goto yy219;
	default:	goto yy49;
	}
yy138:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy220;
	default:	goto yy49;
	}
yy139:
	yych = *++context.cursor;
	switch (yych) {
	case 'V':	goto yy221;
	default:	goto yy49;
	}
yy140:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy223;
	default:	goto yy49;
	}
yy141:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy224;
	case 'I':	goto yy225;
	default:	goto yy49;
	}
yy142:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy226;
	default:	goto yy49;
	}
yy143:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy227;
	case 'L':	goto yy228;
	default:	goto yy49;
	}
yy144:
	yych = *++context.cursor;
	switch (yych) {
	case 'Q':	goto yy229;
	case 'T':	goto yy230;
	default:	goto yy49;
	}
yy145:
	yych = *++context.cursor;
	switch (yych) {
	case 'Z':	goto yy232;
	default:	goto yy49;
	}
yy146:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy233;
	default:	goto yy49;
	}
yy147:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy234;
	default:	goto yy49;
	}
yy148:
	yych = *++context.cursor;
	switch (yych) {
	case '1':	goto yy235;
	default:	goto yy49;
	}
yy149:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy236;
	default:	goto yy49;
	}
yy150:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy237;
	default:	goto yy49;
	}
yy151:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy238;
	default:	goto yy49;
	}
yy152:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy239;
	default:	goto yy49;
	}
yy153:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy240;
	default:	goto yy49;
	}
yy154:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy241;
	default:	goto yy49;
	}
yy155:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy242;
	case 'F':	goto yy243;
	default:	goto yy49;
	}
yy156:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy244;
	default:	goto yy49;
	}
yy157:
	yych = *++context.cursor;
	switch (yych) {
	case 'd':	goto yy245;
	case 's':	goto yy246;
	default:	goto yy49;
	}
yy158:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy247;
	default:	goto yy49;
	}
yy159:
	yych = *++context.cursor;
	switch (yych) {
	case '"':	goto yy159;
	case '\'':	goto yy78;
	case '\\':	goto yy79;
	default:	goto yy13;
	}
yy161:
	++context.cursor;
#line 9146 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_bstring(std::string(start, context.cursor), context.location); }
#line 10389 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy163:
	yych = *++context.cursor;
	switch (yych) {
	case '\n':
	case '\r':	goto yy96;
	case '-':	goto yy248;
	default:	goto yy88;
	}
yy164:
	++context.cursor;
#line 9161 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ELIPSIS (context.location); }
#line 10402 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy166:
	yych = *++context.cursor;
	switch (yych) {
	case '/':	goto yy250;
	default:	goto yy93;
	}
yy167:
	++context.cursor;
#line 9160 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DEFINED_AS (context.location); }
#line 10413 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy169:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy252;
	case 'T':	goto yy253;
	default:	goto yy49;
	}
yy170:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy171;
	}
yy171:
#line 9042 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ALL (context.location); }
#line 10493 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy172:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy173;
	}
yy173:
#line 9043 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ANY (context.location); }
#line 10566 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy174:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy254;
	default:	goto yy49;
	}
yy175:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy255;
	default:	goto yy49;
	}
yy176:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy256;
	default:	goto yy49;
	}
yy177:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy178;
	}
yy178:
#line 9047 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BIT (context.location); }
#line 10657 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy179:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy257;
	default:	goto yy49;
	}
yy180:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy258;
	default:	goto yy49;
	}
yy181:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy259;
	default:	goto yy49;
	}
yy182:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy260;
	default:	goto yy49;
	}
yy183:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy261;
	default:	goto yy49;
	}
yy184:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy262;
	default:	goto yy49;
	}
yy185:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy263;
	case 'T':	goto yy264;
	default:	goto yy49;
	}
yy186:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy265;
	default:	goto yy49;
	}
yy187:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy267;
	case 'I':	goto yy268;
	default:	goto yy49;
	}
yy188:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy269;
	default:	goto yy49;
	}
yy189:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy270;
	default:	goto yy49;
	}
yy190:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy271;
	default:	goto yy49;
	}
yy191:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy192;
	}
yy192:
#line 9066 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_END (context.location); }
#line 10804 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy193:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy272;
	default:	goto yy49;
	}
yy194:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy273;
	default:	goto yy49;
	}
yy195:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy274;
	case 'O':	goto yy275;
	default:	goto yy49;
	}
yy196:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy276;
	default:	goto yy49;
	}
yy197:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy277;
	default:	goto yy49;
	}
yy198:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy278;
	default:	goto yy49;
	}
yy199:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy280;
	default:	goto yy49;
	}
yy200:
	yych = *++context.cursor;
	switch (yych) {
	case 'p':	goto yy281;
	default:	goto yy49;
	}
yy201:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy282;
	default:	goto yy49;
	}
yy202:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy283;
	default:	goto yy49;
	}
yy203:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy284;
	case 'O':	goto yy285;
	default:	goto yy49;
	}
yy204:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy286;
	default:	goto yy49;
	}
yy205:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy287;
	default:	goto yy49;
	}
yy206:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy288;
	default:	goto yy49;
	}
yy207:
	yych = *++context.cursor;
	switch (yych) {
	case '6':	goto yy289;
	default:	goto yy49;
	}
yy208:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy209;
	}
yy209:
#line 9089 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_MAX (context.location); }
#line 10969 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy210:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	case 'U':	goto yy290;
	default:	goto yy211;
	}
yy211:
#line 9090 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_MIN (context.location); }
#line 11042 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy212:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy291;
	default:	goto yy49;
	}
yy213:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy292;
	default:	goto yy49;
	}
yy214:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy294;
	default:	goto yy49;
	}
yy215:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy295;
	default:	goto yy49;
	}
yy216:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy296;
	default:	goto yy49;
	}
yy217:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy297;
	default:	goto yy49;
	}
yy218:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy298;
	default:	goto yy49;
	}
yy219:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy299;
	default:	goto yy49;
	}
yy220:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy300;
	default:	goto yy49;
	}
yy221:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy222;
	}
yy222:
#line 9102 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PDV (context.location); }
#line 11169 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy223:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy301;
	default:	goto yy49;
	}
yy224:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy302;
	default:	goto yy49;
	}
yy225:
	yych = *++context.cursor;
	switch (yych) {
	case 'V':	goto yy303;
	default:	goto yy49;
	}
yy226:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy304;
	default:	goto yy49;
	}
yy227:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy305;
	default:	goto yy49;
	}
yy228:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy307;
	default:	goto yy49;
	}
yy229:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy308;
	default:	goto yy49;
	}
yy230:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	case 'T':	goto yy309;
	default:	goto yy231;
	}
yy231:
#line 9111 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SET (context.location); }
#line 11284 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy232:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy310;
	default:	goto yy49;
	}
yy233:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy312;
	default:	goto yy49;
	}
yy234:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy313;
	default:	goto yy49;
	}
yy235:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy314;
	default:	goto yy49;
	}
yy236:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy315;
	default:	goto yy49;
	}
yy237:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy317;
	default:	goto yy49;
	}
yy238:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy319;
	default:	goto yy49;
	}
yy239:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy321;
	default:	goto yy49;
	}
yy240:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy322;
	default:	goto yy49;
	}
yy241:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy323;
	case 'Q':	goto yy324;
	case 'V':	goto yy325;
	default:	goto yy49;
	}
yy242:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy326;
	default:	goto yy49;
	}
yy243:
	yych = *++context.cursor;
	switch (yych) {
	case '8':	goto yy327;
	default:	goto yy49;
	}
yy244:
	yych = *++context.cursor;
	switch (yych) {
	case 'v':	goto yy328;
	default:	goto yy49;
	}
yy245:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy329;
	default:	goto yy49;
	}
yy246:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy330;
	default:	goto yy49;
	}
yy247:
	yych = *++context.cursor;
	switch (yych) {
	case 'H':	goto yy331;
	default:	goto yy49;
	}
yy248:
	++context.cursor;
#line 9135 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return yylex(context); }
#line 11387 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy250:
	++context.cursor;
#line 9138 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return yylex(context); }
#line 11392 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy252:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy333;
	default:	goto yy49;
	}
yy253:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy334;
	default:	goto yy49;
	}
yy254:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy335;
	default:	goto yy49;
	}
yy255:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy336;
	default:	goto yy49;
	}
yy256:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy337;
	default:	goto yy49;
	}
yy257:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy339;
	default:	goto yy49;
	}
yy258:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy340;
	default:	goto yy49;
	}
yy259:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy341;
	default:	goto yy49;
	}
yy260:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy342;
	default:	goto yy49;
	}
yy261:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy343;
	default:	goto yy49;
	}
yy262:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy345;
	default:	goto yy49;
	}
yy263:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy346;
	default:	goto yy49;
	}
yy264:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy347;
	default:	goto yy49;
	}
yy265:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy348;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy266;
	}
yy266:
#line 9058 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DATE (context.location); }
#line 11543 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy267:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy349;
	default:	goto yy49;
	}
yy268:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy350;
	default:	goto yy49;
	}
yy269:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy351;
	default:	goto yy49;
	}
yy270:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy352;
	default:	goto yy49;
	}
yy271:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy353;
	default:	goto yy49;
	}
yy272:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy354;
	default:	goto yy49;
	}
yy273:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy355;
	default:	goto yy49;
	}
yy274:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy356;
	default:	goto yy49;
	}
yy275:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy357;
	default:	goto yy49;
	}
yy276:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy358;
	case 'R':	goto yy359;
	default:	goto yy49;
	}
yy277:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy360;
	default:	goto yy49;
	}
yy278:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy279;
	}
yy279:
#line 9074 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_FROM (context.location); }
#line 11683 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy280:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy362;
	default:	goto yy49;
	}
yy281:
	yych = *++context.cursor;
	switch (yych) {
	case 'h':	goto yy363;
	default:	goto yy49;
	}
yy282:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy364;
	default:	goto yy49;
	}
yy283:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy365;
	default:	goto yy49;
	}
yy284:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy366;
	default:	goto yy49;
	}
yy285:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy367;
	default:	goto yy49;
	}
yy286:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy368;
	default:	goto yy49;
	}
yy287:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy369;
	case 'R':	goto yy370;
	default:	goto yy49;
	}
yy288:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy371;
	case 'R':	goto yy372;
	default:	goto yy49;
	}
yy289:
	yych = *++context.cursor;
	switch (yych) {
	case '4':	goto yy373;
	default:	goto yy49;
	}
yy290:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy374;
	default:	goto yy49;
	}
yy291:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy375;
	default:	goto yy49;
	}
yy292:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy293;
	}
yy293:
#line 9093 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ASN_NULL (context.location); }
#line 11830 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy294:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy376;
	default:	goto yy49;
	}
yy295:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy377;
	default:	goto yy49;
	}
yy296:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy378;
	default:	goto yy49;
	}
yy297:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy380;
	default:	goto yy49;
	}
yy298:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy381;
	default:	goto yy49;
	}
yy299:
	yych = *++context.cursor;
	switch (yych) {
	case 'c':	goto yy382;
	default:	goto yy49;
	}
yy300:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy383;
	default:	goto yy49;
	}
yy301:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy384;
	default:	goto yy49;
	}
yy302:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy385;
	default:	goto yy49;
	}
yy303:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy386;
	default:	goto yy49;
	}
yy304:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy387;
	default:	goto yy49;
	}
yy305:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy306;
	}
yy306:
#line 9107 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_REAL (context.location); }
#line 11969 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy307:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy388;
	default:	goto yy49;
	}
yy308:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy389;
	default:	goto yy49;
	}
yy309:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy390;
	default:	goto yy49;
	}
yy310:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy311;
	}
yy311:
#line 9113 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SIZE (context.location); }
#line 12060 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy312:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy391;
	default:	goto yy49;
	}
yy313:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy392;
	default:	goto yy49;
	}
yy314:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy393;
	default:	goto yy49;
	}
yy315:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy316;
	}
yy316:
#line 9117 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TAGS (context.location); }
#line 12151 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy317:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy394;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy318;
	}
yy318:
#line 9119 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TIME (context.location); }
#line 12224 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy319:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy320;
	}
yy320:
#line 9121 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TRUE (context.location); }
#line 12297 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy321:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy395;
	default:	goto yy49;
	}
yy322:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy396;
	default:	goto yy49;
	}
yy323:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy397;
	default:	goto yy49;
	}
yy324:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy399;
	default:	goto yy49;
	}
yy325:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy400;
	default:	goto yy49;
	}
yy326:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy401;
	default:	goto yy49;
	}
yy327:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy402;
	default:	goto yy49;
	}
yy328:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy403;
	default:	goto yy49;
	}
yy329:
	yych = *++context.cursor;
	switch (yych) {
	case 'o':	goto yy404;
	default:	goto yy49;
	}
yy330:
	yych = *++context.cursor;
	switch (yych) {
	case 'b':	goto yy405;
	default:	goto yy49;
	}
yy331:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy332;
	}
yy332:
#line 9131 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_WITH (context.location); }
#line 12430 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy333:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy406;
	default:	goto yy49;
	}
yy334:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy408;
	default:	goto yy49;
	}
yy335:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy409;
	default:	goto yy49;
	}
yy336:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy410;
	default:	goto yy49;
	}
yy337:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy338;
	}
yy338:
#line 9046 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BEGIN (context.location); }
#line 12527 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy339:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy411;
	default:	goto yy49;
	}
yy340:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy412;
	default:	goto yy49;
	}
yy341:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy413;
	default:	goto yy49;
	}
yy342:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy414;
	default:	goto yy49;
	}
yy343:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy344;
	}
yy344:
#line 9053 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLASS (context.location); }
#line 12624 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy345:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy416;
	default:	goto yy49;
	}
yy346:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy417;
	default:	goto yy49;
	}
yy347:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy418;
	default:	goto yy49;
	}
yy348:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy419;
	default:	goto yy49;
	}
yy349:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy420;
	default:	goto yy49;
	}
yy350:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy421;
	default:	goto yy49;
	}
yy351:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy422;
	default:	goto yy49;
	}
yy352:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy423;
	default:	goto yy49;
	}
yy353:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy424;
	case 'I':	goto yy425;
	default:	goto yy49;
	}
yy354:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy426;
	default:	goto yy49;
	}
yy355:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy427;
	default:	goto yy49;
	}
yy356:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy429;
	default:	goto yy49;
	}
yy357:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy430;
	default:	goto yy49;
	}
yy358:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy431;
	default:	goto yy49;
	}
yy359:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy432;
	default:	goto yy49;
	}
yy360:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy361;
	}
yy361:
#line 9073 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_FALSE (context.location); }
#line 12788 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy362:
	yych = *++context.cursor;
	switch (yych) {
	case 'a':	goto yy433;
	default:	goto yy49;
	}
yy363:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy434;
	default:	goto yy49;
	}
yy364:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy435;
	default:	goto yy49;
	}
yy365:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy436;
	default:	goto yy49;
	}
yy366:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy437;
	case 'E':	goto yy438;
	default:	goto yy49;
	}
yy367:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy439;
	default:	goto yy49;
	}
yy368:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy440;
	default:	goto yy49;
	}
yy369:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy441;
	default:	goto yy49;
	}
yy370:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy442;
	default:	goto yy49;
	}
yy371:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy443;
	default:	goto yy49;
	}
yy372:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy444;
	default:	goto yy49;
	}
yy373:
	yych = *++context.cursor;
	switch (yych) {
	case '6':	goto yy445;
	default:	goto yy49;
	}
yy374:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy446;
	default:	goto yy49;
	}
yy375:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy447;
	default:	goto yy49;
	}
yy376:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy448;
	default:	goto yy49;
	}
yy377:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy449;
	default:	goto yy49;
	}
yy378:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy379;
	}
yy379:
#line 9097 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OCTET (context.location); }
#line 12958 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy380:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy451;
	default:	goto yy49;
	}
yy381:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy452;
	default:	goto yy49;
	}
yy382:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy453;
	default:	goto yy49;
	}
yy383:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy454;
	default:	goto yy49;
	}
yy384:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy455;
	default:	goto yy49;
	}
yy385:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy456;
	default:	goto yy49;
	}
yy386:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy457;
	default:	goto yy49;
	}
yy387:
	yych = *++context.cursor;
	switch (yych) {
	case 'a':	goto yy458;
	default:	goto yy49;
	}
yy388:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy459;
	default:	goto yy49;
	}
yy389:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy460;
	default:	goto yy49;
	}
yy390:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy461;
	default:	goto yy49;
	}
yy391:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy462;
	default:	goto yy49;
	}
yy392:
	yych = *++context.cursor;
	switch (yych) {
	case 'X':	goto yy464;
	default:	goto yy49;
	}
yy393:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy466;
	default:	goto yy49;
	}
yy394:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy467;
	default:	goto yy49;
	}
yy395:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy468;
	default:	goto yy49;
	}
yy396:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy469;
	default:	goto yy49;
	}
yy397:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy398;
	}
yy398:
#line 9123 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UNION (context.location); }
#line 13133 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy399:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy470;
	default:	goto yy49;
	}
yy400:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy472;
	default:	goto yy49;
	}
yy401:
	yych = *++context.cursor;
	switch (yych) {
	case 'm':	goto yy473;
	default:	goto yy49;
	}
yy402:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy474;
	default:	goto yy49;
	}
yy403:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy475;
	default:	goto yy49;
	}
yy404:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy476;
	default:	goto yy49;
	}
yy405:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy477;
	default:	goto yy49;
	}
yy406:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy407;
	}
yy407:
#line 9040 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ABSENT (context.location); }
#line 13248 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy408:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy478;
	default:	goto yy49;
	}
yy409:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy479;
	default:	goto yy49;
	}
yy410:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy480;
	default:	goto yy49;
	}
yy411:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy481;
	default:	goto yy49;
	}
yy412:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy482;
	default:	goto yy49;
	}
yy413:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy484;
	default:	goto yy49;
	}
yy414:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy415;
	}
yy415:
#line 9052 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CHOICE (context.location); }
#line 13357 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy416:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy485;
	default:	goto yy49;
	}
yy417:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy486;
	default:	goto yy49;
	}
yy418:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy487;
	default:	goto yy49;
	}
yy419:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy488;
	default:	goto yy49;
	}
yy420:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy489;
	default:	goto yy49;
	}
yy421:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy491;
	default:	goto yy49;
	}
yy422:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy492;
	default:	goto yy49;
	}
yy423:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy493;
	default:	goto yy49;
	}
yy424:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy494;
	default:	goto yy49;
	}
yy425:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy496;
	default:	goto yy49;
	}
yy426:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy497;
	default:	goto yy49;
	}
yy427:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy428;
	}
yy428:
#line 9068 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXCEPT (context.location); }
#line 13496 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy429:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy498;
	default:	goto yy49;
	}
yy430:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy499;
	default:	goto yy49;
	}
yy431:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy501;
	default:	goto yy49;
	}
yy432:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy502;
	default:	goto yy49;
	}
yy433:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy503;
	default:	goto yy49;
	}
yy434:
	yych = *++context.cursor;
	switch (yych) {
	case 'c':	goto yy504;
	default:	goto yy49;
	}
yy435:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy505;
	default:	goto yy49;
	}
yy436:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy506;
	default:	goto yy49;
	}
yy437:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy507;
	default:	goto yy49;
	}
yy438:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy508;
	default:	goto yy49;
	}
yy439:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy510;
	default:	goto yy49;
	}
yy440:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy512;
	default:	goto yy49;
	}
yy441:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy513;
	default:	goto yy49;
	}
yy442:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy514;
	default:	goto yy49;
	}
yy443:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy515;
	default:	goto yy49;
	}
yy444:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy517;
	default:	goto yy49;
	}
yy445:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy518;
	default:	goto yy49;
	}
yy446:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy519;
	default:	goto yy49;
	}
yy447:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy520;
	default:	goto yy49;
	}
yy448:
	yych = *++context.cursor;
	switch (yych) {
	case 'c':	goto yy521;
	default:	goto yy49;
	}
yy449:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy450;
	}
yy450:
#line 9095 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OBJECT (context.location); }
#line 13689 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy451:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy522;
	default:	goto yy49;
	}
yy452:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy524;
	default:	goto yy49;
	}
yy453:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy525;
	default:	goto yy49;
	}
yy454:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy526;
	default:	goto yy49;
	}
yy455:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy528;
	default:	goto yy49;
	}
yy456:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy529;
	default:	goto yy49;
	}
yy457:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy531;
	default:	goto yy49;
	}
yy458:
	yych = *++context.cursor;
	switch (yych) {
	case 'b':	goto yy533;
	default:	goto yy49;
	}
yy459:
	yych = *++context.cursor;
	switch (yych) {
	case 'V':	goto yy534;
	default:	goto yy49;
	}
yy460:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy535;
	default:	goto yy49;
	}
yy461:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy536;
	default:	goto yy49;
	}
yy462:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy463;
	}
yy463:
#line 9114 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_STRING (context.location); }
#line 13828 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy464:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy465;
	}
yy465:
#line 9115 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SYNTAX (context.location); }
#line 13901 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy466:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy537;
	default:	goto yy49;
	}
yy467:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy538;
	default:	goto yy49;
	}
yy468:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy539;
	default:	goto yy49;
	}
yy469:
	yych = *++context.cursor;
	switch (yych) {
	case 'x':	goto yy540;
	default:	goto yy49;
	}
yy470:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy471;
	}
yy471:
#line 9124 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UNIQUE (context.location); }
#line 13998 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy472:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy541;
	default:	goto yy49;
	}
yy473:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy542;
	default:	goto yy49;
	}
yy474:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy544;
	default:	goto yy49;
	}
yy475:
	yych = *++context.cursor;
	switch (yych) {
	case 's':	goto yy545;
	default:	goto yy49;
	}
yy476:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy546;
	default:	goto yy49;
	}
yy477:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy547;
	default:	goto yy49;
	}
yy478:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy548;
	default:	goto yy49;
	}
yy479:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy549;
	default:	goto yy49;
	}
yy480:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy550;
	default:	goto yy49;
	}
yy481:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy551;
	default:	goto yy49;
	}
yy482:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy483;
	}
yy483:
#line 9049 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BOOLEAN (context.location); }
#line 14131 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy484:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy552;
	default:	goto yy49;
	}
yy485:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy553;
	default:	goto yy49;
	}
yy486:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy554;
	default:	goto yy49;
	}
yy487:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy555;
	default:	goto yy49;
	}
yy488:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy556;
	default:	goto yy49;
	}
yy489:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy490;
	}
yy490:
#line 9060 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DEFAULT (context.location); }
#line 14234 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy491:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy557;
	default:	goto yy49;
	}
yy492:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy558;
	default:	goto yy49;
	}
yy493:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy560;
	default:	goto yy49;
	}
yy494:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy495;
	}
yy495:
#line 9064 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ENCODED (context.location); }
#line 14325 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy496:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy562;
	default:	goto yy49;
	}
yy497:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy563;
	default:	goto yy49;
	}
yy498:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy564;
	default:	goto yy49;
	}
yy499:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy500;
	}
yy500:
#line 9070 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXPORTS (context.location); }
#line 14416 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy501:
	yych = *++context.cursor;
	switch (yych) {
	case 'B':	goto yy566;
	default:	goto yy49;
	}
yy502:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy567;
	default:	goto yy49;
	}
yy503:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy569;
	case 'i':	goto yy570;
	default:	goto yy49;
	}
yy504:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy571;
	default:	goto yy49;
	}
yy505:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy572;
	default:	goto yy49;
	}
yy506:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy573;
	default:	goto yy49;
	}
yy507:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy574;
	default:	goto yy49;
	}
yy508:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy509;
	}
yy509:
#line 9081 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IMPLIED (context.location); }
#line 14532 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy510:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy511;
	}
yy511:
#line 9082 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IMPORTS (context.location); }
#line 14605 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy512:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy576;
	default:	goto yy49;
	}
yy513:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy578;
	default:	goto yy49;
	}
yy514:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy580;
	default:	goto yy49;
	}
yy515:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy516;
	}
yy516:
#line 9086 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INTEGER (context.location); }
#line 14696 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy517:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy581;
	default:	goto yy49;
	}
yy518:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy582;
	default:	goto yy49;
	}
yy519:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy583;
	default:	goto yy49;
	}
yy520:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy584;
	default:	goto yy49;
	}
yy521:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy585;
	default:	goto yy49;
	}
yy522:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy523;
	}
yy523:
#line 9099 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OID_IRI (context.location); }
#line 14799 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy524:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy586;
	default:	goto yy49;
	}
yy525:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy588;
	default:	goto yy49;
	}
yy526:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy527;
	}
yy527:
#line 9101 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PATTERN (context.location); }
#line 14884 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy528:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy589;
	default:	goto yy49;
	}
yy529:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy530;
	}
yy530:
#line 9104 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PRESENT (context.location); }
#line 14963 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy531:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy532;
	}
yy532:
#line 9106 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PRIVATE (context.location); }
#line 15036 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy533:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy590;
	default:	goto yy49;
	}
yy534:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy591;
	default:	goto yy49;
	}
yy535:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy592;
	default:	goto yy49;
	}
yy536:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy594;
	default:	goto yy49;
	}
yy537:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy596;
	default:	goto yy49;
	}
yy538:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy597;
	default:	goto yy49;
	}
yy539:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy598;
	default:	goto yy49;
	}
yy540:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy599;
	default:	goto yy49;
	}
yy541:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy600;
	default:	goto yy49;
	}
yy542:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy543;
	}
yy543:
#line 9127 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UTCTime (context.location); }
#line 15163 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy544:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy601;
	default:	goto yy49;
	}
yy545:
	yych = *++context.cursor;
	switch (yych) {
	case 'a':	goto yy602;
	default:	goto yy49;
	}
yy546:
	yych = *++context.cursor;
	switch (yych) {
	case 'x':	goto yy603;
	default:	goto yy49;
	}
yy547:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy604;
	default:	goto yy49;
	}
yy548:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy605;
	default:	goto yy49;
	}
yy549:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy606;
	default:	goto yy49;
	}
yy550:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy607;
	default:	goto yy49;
	}
yy551:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy609;
	default:	goto yy49;
	}
yy552:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy611;
	default:	goto yy49;
	}
yy553:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy613;
	default:	goto yy49;
	}
yy554:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy615;
	default:	goto yy49;
	}
yy555:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy616;
	default:	goto yy49;
	}
yy556:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy617;
	default:	goto yy49;
	}
yy557:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy619;
	default:	goto yy49;
	}
yy558:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy559;
	}
yy559:
#line 9062 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DURATION (context.location); }
#line 15320 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy560:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy561;
	}
yy561:
#line 9063 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EMBEDDED (context.location); }
#line 15393 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy562:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy620;
	default:	goto yy49;
	}
yy563:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy621;
	default:	goto yy49;
	}
yy564:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy565;
	}
yy565:
#line 9069 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXPLICIT (context.location); }
#line 15478 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy566:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy622;
	default:	goto yy49;
	}
yy567:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy568;
	}
yy568:
#line 9072 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXTERNAL (context.location); }
#line 15557 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy569:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy623;
	default:	goto yy49;
	}
yy570:
	yych = *++context.cursor;
	switch (yych) {
	case 'z':	goto yy624;
	default:	goto yy49;
	}
yy571:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy625;
	default:	goto yy49;
	}
yy572:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy626;
	default:	goto yy49;
	}
yy573:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy628;
	default:	goto yy49;
	}
yy574:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy575;
	}
yy575:
#line 9080 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IMPLICIT (context.location); }
#line 15660 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy576:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy577;
	}
yy577:
#line 9083 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INCLUDES (context.location); }
#line 15733 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy578:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy579;
	}
yy579:
#line 9084 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INSTANCE (context.location); }
#line 15806 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy580:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy629;
	default:	goto yy49;
	}
yy581:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy630;
	default:	goto yy49;
	}
yy582:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy631;
	default:	goto yy49;
	}
yy583:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy632;
	default:	goto yy49;
	}
yy584:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy633;
	default:	goto yy49;
	}
yy585:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy634;
	default:	goto yy49;
	}
yy586:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy587;
	}
yy587:
#line 9100 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPTIONAL (context.location); }
#line 15915 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy588:
	yych = *++context.cursor;
	switch (yych) {
	case 's':	goto yy635;
	default:	goto yy49;
	}
yy589:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy636;
	default:	goto yy49;
	}
yy590:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy637;
	default:	goto yy49;
	}
yy591:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy638;
	default:	goto yy49;
	}
yy592:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy593;
	}
yy593:
#line 9110 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SEQUENCE (context.location); }
#line 16012 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy594:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy595;
	}
yy595:
#line 9112 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SETTINGS (context.location); }
#line 16085 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy596:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy639;
	default:	goto yy49;
	}
yy597:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy641;
	default:	goto yy49;
	}
yy598:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy642;
	default:	goto yy49;
	}
yy599:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy643;
	default:	goto yy49;
	}
yy600:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy644;
	default:	goto yy49;
	}
yy601:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy646;
	default:	goto yy49;
	}
yy602:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy647;
	default:	goto yy49;
	}
yy603:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy648;
	default:	goto yy49;
	}
yy604:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy649;
	default:	goto yy49;
	}
yy605:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy650;
	default:	goto yy49;
	}
yy606:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy651;
	default:	goto yy49;
	}
yy607:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy608;
	}
yy608:
#line 9045 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_AUTOMATIC (context.location); }
#line 16224 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy609:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy610;
	}
yy610:
#line 9048 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BMPString (context.location); }
#line 16297 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy611:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy612;
	}
yy612:
#line 9051 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CHARACTER (context.location); }
#line 16370 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy613:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	case 'S':	goto yy652;
	default:	goto yy614;
	}
yy614:
#line 9054 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COMPONENT (context.location); }
#line 16443 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy615:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy654;
	default:	goto yy49;
	}
yy616:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy655;
	default:	goto yy49;
	}
yy617:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy618;
	}
yy618:
#line 9059 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DATE_TIME (context.location); }
#line 16528 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy619:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy657;
	default:	goto yy49;
	}
yy620:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy658;
	default:	goto yy49;
	}
yy621:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy659;
	default:	goto yy49;
	}
yy622:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy661;
	default:	goto yy49;
	}
yy623:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy662;
	default:	goto yy49;
	}
yy624:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy663;
	default:	goto yy49;
	}
yy625:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy664;
	default:	goto yy49;
	}
yy626:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy627;
	}
yy627:
#line 9078 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IA5String (context.location); }
#line 16643 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy628:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy665;
	default:	goto yy49;
	}
yy629:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy667;
	default:	goto yy49;
	}
yy630:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy668;
	default:	goto yy49;
	}
yy631:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy669;
	default:	goto yy49;
	}
yy632:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy670;
	default:	goto yy49;
	}
yy633:
	yych = *++context.cursor;
	switch (yych) {
	case 'B':	goto yy671;
	default:	goto yy49;
	}
yy634:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy672;
	default:	goto yy49;
	}
yy635:
	yych = *++context.cursor;
	switch (yych) {
	case 'c':	goto yy673;
	default:	goto yy49;
	}
yy636:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy674;
	default:	goto yy49;
	}
yy637:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy675;
	default:	goto yy49;
	}
yy638:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy676;
	default:	goto yy49;
	}
yy639:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy640;
	}
yy640:
#line 9116 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_T61String (context.location); }
#line 16782 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy641:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy677;
	default:	goto yy49;
	}
yy642:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy678;
	default:	goto yy49;
	}
yy643:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy679;
	default:	goto yy49;
	}
yy644:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy645;
	}
yy645:
#line 9125 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UNIVERSAL (context.location); }
#line 16873 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy646:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy680;
	default:	goto yy49;
	}
yy647:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy682;
	default:	goto yy49;
	}
yy648:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy683;
	default:	goto yy49;
	}
yy649:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy684;
	default:	goto yy49;
	}
yy650:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy685;
	default:	goto yy49;
	}
yy651:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy686;
	default:	goto yy49;
	}
yy652:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy653;
	}
yy653:
#line 9055 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COMPONENTS (context.location); }
#line 16982 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy654:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy688;
	default:	goto yy49;
	}
yy655:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy656;
	}
yy656:
#line 9057 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CONTAINING (context.location); }
#line 17061 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy657:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy690;
	default:	goto yy49;
	}
yy658:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy692;
	default:	goto yy49;
	}
yy659:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy660;
	}
yy660:
#line 9067 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ENUMERATED (context.location); }
#line 17146 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy661:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy693;
	default:	goto yy49;
	}
yy662:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy694;
	default:	goto yy49;
	}
yy663:
	yych = *++context.cursor;
	switch (yych) {
	case 'd':	goto yy695;
	default:	goto yy49;
	}
yy664:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy696;
	default:	goto yy49;
	}
yy665:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy666;
	}
yy666:
#line 9079 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IDENTIFIER (context.location); }
#line 17243 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy667:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy697;
	default:	goto yy49;
	}
yy668:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy698;
	default:	goto yy49;
	}
yy669:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy699;
	default:	goto yy49;
	}
yy670:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy700;
	default:	goto yy49;
	}
yy671:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy701;
	default:	goto yy49;
	}
yy672:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy702;
	default:	goto yy49;
	}
yy673:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy703;
	default:	goto yy49;
	}
yy674:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy704;
	default:	goto yy49;
	}
yy675:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy705;
	default:	goto yy49;
	}
yy676:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy706;
	default:	goto yy49;
	}
yy677:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy707;
	default:	goto yy49;
	}
yy678:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy709;
	default:	goto yy49;
	}
yy679:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy710;
	default:	goto yy49;
	}
yy680:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy681;
	}
yy681:
#line 9128 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UTF8String (context.location); }
#line 17394 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy682:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy711;
	default:	goto yy49;
	}
yy683:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy712;
	default:	goto yy49;
	}
yy684:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy713;
	default:	goto yy49;
	}
yy685:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy714;
	default:	goto yy49;
	}
yy686:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy687;
	}
yy687:
#line 9044 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_APPLICATION (context.location); }
#line 17491 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy688:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy689;
	}
yy689:
#line 9056 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CONSTRAINED (context.location); }
#line 17564 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy690:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy691;
	}
yy691:
#line 9061 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DEFINITIONS (context.location); }
#line 17637 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy692:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy715;
	default:	goto yy49;
	}
yy693:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy716;
	default:	goto yy49;
	}
yy694:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy717;
	default:	goto yy49;
	}
yy695:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy718;
	default:	goto yy49;
	}
yy696:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy719;
	default:	goto yy49;
	}
yy697:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy720;
	default:	goto yy49;
	}
yy698:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy722;
	default:	goto yy49;
	}
yy699:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy724;
	default:	goto yy49;
	}
yy700:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy726;
	default:	goto yy49;
	}
yy701:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy727;
	default:	goto yy49;
	}
yy702:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy729;
	default:	goto yy49;
	}
yy703:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy730;
	default:	goto yy49;
	}
yy704:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy731;
	default:	goto yy49;
	}
yy705:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy732;
	default:	goto yy49;
	}
yy706:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy733;
	default:	goto yy49;
	}
yy707:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy708;
	}
yy708:
#line 9120 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TIME_OF_DAY (context.location); }
#line 17800 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy709:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy735;
	default:	goto yy49;
	}
yy710:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy736;
	default:	goto yy49;
	}
yy711:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy737;
	default:	goto yy49;
	}
yy712:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy738;
	default:	goto yy49;
	}
yy713:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy739;
	default:	goto yy49;
	}
yy714:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy740;
	default:	goto yy49;
	}
yy715:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy741;
	default:	goto yy49;
	}
yy716:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy742;
	default:	goto yy49;
	}
yy717:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy744;
	default:	goto yy49;
	}
yy718:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy746;
	default:	goto yy49;
	}
yy719:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy747;
	default:	goto yy49;
	}
yy720:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy721;
	}
yy721:
#line 9085 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INSTRUCTIONS (context.location); }
#line 17939 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy722:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy723;
	}
yy723:
#line 9087 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INTERSECTION (context.location); }
#line 18012 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy724:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy725;
	}
yy725:
#line 9088 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ISO646String (context.location); }
#line 18085 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy726:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy749;
	default:	goto yy49;
	}
yy727:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy728;
	}
yy728:
#line 9092 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_NOT_A_NUMBER (context.location); }
#line 18164 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy729:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy750;
	default:	goto yy49;
	}
yy730:
	yych = *++context.cursor;
	switch (yych) {
	case 'p':	goto yy752;
	default:	goto yy49;
	}
yy731:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy753;
	default:	goto yy49;
	}
yy732:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy755;
	default:	goto yy49;
	}
yy733:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy756;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy734;
	}
yy734:
#line 9108 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_RELATIVE_OID (context.location); }
#line 18261 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy735:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy757;
	default:	goto yy49;
	}
yy736:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy758;
	default:	goto yy49;
	}
yy737:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy760;
	default:	goto yy49;
	}
yy738:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy761;
	default:	goto yy49;
	}
yy739:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy762;
	default:	goto yy49;
	}
yy740:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy764;
	default:	goto yy49;
	}
yy741:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy765;
	default:	goto yy49;
	}
yy742:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy743;
	}
yy743:
#line 9071 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXTENSIBILITY (context.location); }
#line 18376 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy744:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy745;
	}
yy745:
#line 9076 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GeneralString (context.location); }
#line 18449 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy746:
	yych = *++context.cursor;
	switch (yych) {
	case 'm':	goto yy766;
	default:	goto yy49;
	}
yy747:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy748;
	}
yy748:
#line 9077 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GraphicString (context.location); }
#line 18528 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy749:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy767;
	default:	goto yy49;
	}
yy750:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy751;
	}
yy751:
#line 9094 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_NumericString (context.location); }
#line 18607 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy752:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy769;
	default:	goto yy49;
	}
yy753:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy754;
	}
yy754:
#line 9103 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PLUS_INFINITY (context.location); }
#line 18686 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy755:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy770;
	default:	goto yy49;
	}
yy756:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy771;
	default:	goto yy49;
	}
yy757:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy772;
	default:	goto yy49;
	}
yy758:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy759;
	}
yy759:
#line 9118 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TeletexString (context.location); }
#line 18777 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy760:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy773;
	default:	goto yy49;
	}
yy761:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy774;
	default:	goto yy49;
	}
yy762:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy763;
	}
yy763:
#line 9130 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_VisibleString (context.location); }
#line 18862 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy764:
	yych = *++context.cursor;
	switch (yych) {
	case 'X':	goto yy776;
	default:	goto yy49;
	}
yy765:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy778;
	default:	goto yy49;
	}
yy766:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy779;
	default:	goto yy49;
	}
yy767:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy768;
	}
yy768:
#line 9091 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_MINUS_INFINITY (context.location); }
#line 18953 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy769:
	yych = *++context.cursor;
	switch (yych) {
	case 'o':	goto yy781;
	default:	goto yy49;
	}
yy770:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy782;
	default:	goto yy49;
	}
yy771:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy784;
	default:	goto yy49;
	}
yy772:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy785;
	default:	goto yy49;
	}
yy773:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy787;
	default:	goto yy49;
	}
yy774:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy775;
	}
yy775:
#line 9129 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_VideotexString (context.location); }
#line 19056 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy776:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy777;
	}
yy777:
#line 9041 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ABSTRACT_SYNTAX (context.location); }
#line 19129 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy778:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy789;
	default:	goto yy49;
	}
yy779:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy780;
	}
yy780:
#line 9075 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GeneralizedTime (context.location); }
#line 19208 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy781:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy791;
	default:	goto yy49;
	}
yy782:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy783;
	}
yy783:
#line 9105 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PrintableString (context.location); }
#line 19287 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy784:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy793;
	default:	goto yy49;
	}
yy785:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy786;
	}
yy786:
#line 9122 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TYPE_IDENTIFIER (context.location); }
#line 19366 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy787:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy788;
	}
yy788:
#line 9126 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UniversalString (context.location); }
#line 19439 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy789:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy790;
	}
yy790:
#line 9065 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ENCODING_CONTROL (context.location); }
#line 19512 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy791:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy792;
	}
yy792:
#line 9096 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ObjectDescriptor (context.location); }
#line 19585 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy793:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy794;
	}
yy794:
#line 9109 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_RELATIVE_OID_IRI (context.location); }
#line 19658 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
}
#line 9181 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"

    }
}
