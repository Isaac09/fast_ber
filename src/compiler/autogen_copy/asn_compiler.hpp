/* Generated by re2c 1.1.1 */
#line 1 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
// A Bison parser, made by GNU Bison 3.0.4.

// Skeleton implementation for Bison LALR(1) parsers in C++

// Copyright (C) 2002-2015 Free Software Foundation, Inc.

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// As a special exception, you may create a larger work that contains
// part or all of the Bison parser skeleton and distribute that work
// under terms of your choice, so long as that work isn't itself a
// parser generator using the skeleton or a modified version thereof
// as a parser skeleton.  Alternatively, if you modify or redistribute
// the parser skeleton itself, you may (at your option) remove this
// special exception, which will cause the skeleton and the resulting
// Bison output files to be licensed under the GNU General Public
// License without this special exception.

// This special exception was added by the Free Software Foundation in
// version 2.2 of Bison.


// First part of user declarations.

#line 37 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:404

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

// //                    "%code requires" blocks.
#line 10 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:408

    #include "fast_ber/compiler/CompilerTypes.hpp"

#line 52 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:408

# include <cassert>
# include <cstdlib> // std::abort
# include <iostream>
# include <stdexcept>
# include <string>
# include <vector>
#include <typeinfo>
#ifndef YYASSERT
# include <cassert>
# define YYASSERT assert
#endif


#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif


namespace yy {
#line 127 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:408

  template <class T, class S = std::vector<T> >
  class stack
  {
  public:
    // Hide our reversed order.
    typedef typename S::reverse_iterator iterator;
    typedef typename S::const_reverse_iterator const_iterator;

    stack ()
      : seq_ ()
    {
      seq_.reserve (200);
    }

    stack (unsigned int n)
      : seq_ (n)
    {}

    inline
    T&
    operator[] (unsigned int i)
    {
      return seq_[seq_.size () - 1 - i];
    }

    inline
    const T&
    operator[] (unsigned int i) const
    {
      return seq_[seq_.size () - 1 - i];
    }

    /// Steal the contents of \a t.
    ///
    /// Close to move-semantics.
    inline
    void
    push (T& t)
    {
      seq_.push_back (T());
      operator[](0).move (t);
    }

    inline
    void
    pop (unsigned int n = 1)
    {
      for (; n; --n)
        seq_.pop_back ();
    }

    void
    clear ()
    {
      seq_.clear ();
    }

    inline
    typename S::size_type
    size () const
    {
      return seq_.size ();
    }

    inline
    const_iterator
    begin () const
    {
      return seq_.rbegin ();
    }

    inline
    const_iterator
    end () const
    {
      return seq_.rend ();
    }

  private:
    stack (const stack&);
    stack& operator= (const stack&);
    /// The wrapped container.
    S seq_;
  };

  /// Present a slice of the top of a stack.
  template <class T, class S = stack<T> >
  class slice
  {
  public:
    slice (const S& stack, unsigned int range)
      : stack_ (stack)
      , range_ (range)
    {}

    inline
    const T&
    operator [] (unsigned int i) const
    {
      return stack_[range_ - i];
    }

  private:
    const S& stack_;
    unsigned int range_;
  };

  /// Abstract a position.
  class position
  {
  public:
    /// Construct a position.
    explicit position (std::string* f = YY_NULLPTR,
                       unsigned int l = 1u,
                       unsigned int c = 1u)
      : filename (f)
      , line (l)
      , column (c)
    {
    }


    /// Initialization.
    void initialize (std::string* fn = YY_NULLPTR,
                     unsigned int l = 1u,
                     unsigned int c = 1u)
    {
      filename = fn;
      line = l;
      column = c;
    }

    /** \name Line and Column related manipulators
     ** \{ */
    /// (line related) Advance to the COUNT next lines.
    void lines (int count = 1)
    {
      if (count)
        {
          column = 1u;
          line = add_ (line, count, 1);
        }
    }

    /// (column related) Advance to the COUNT next columns.
    void columns (int count = 1)
    {
      column = add_ (column, count, 1);
    }
    /** \} */

    /// File name to which this position refers.
    std::string* filename;
    /// Current line number.
    unsigned int line;
    /// Current column number.
    unsigned int column;

  private:
    /// Compute max(min, lhs+rhs) (provided min <= lhs).
    static unsigned int add_ (unsigned int lhs, int rhs, unsigned int min)
    {
      return (0 < rhs || -static_cast<unsigned int>(rhs) < lhs
              ? rhs + lhs
              : min);
    }
  };

  /// Add \a width columns, in place.
  inline position&
  operator+= (position& res, int width)
  {
    res.columns (width);
    return res;
  }

  /// Add \a width columns.
  inline position
  operator+ (position res, int width)
  {
    return res += width;
  }

  /// Subtract \a width columns, in place.
  inline position&
  operator-= (position& res, int width)
  {
    return res += -width;
  }

  /// Subtract \a width columns.
  inline position
  operator- (position res, int width)
  {
    return res -= width;
  }

  /// Compare two position objects.
  inline bool
  operator== (const position& pos1, const position& pos2)
  {
    return (pos1.line == pos2.line
            && pos1.column == pos2.column
            && (pos1.filename == pos2.filename
                || (pos1.filename && pos2.filename
                    && *pos1.filename == *pos2.filename)));
  }

  /// Compare two position objects.
  inline bool
  operator!= (const position& pos1, const position& pos2)
  {
    return !(pos1 == pos2);
  }

  /** \brief Intercept output stream redirection.
   ** \param ostr the destination output stream
   ** \param pos a reference to the position to redirect
   */
  template <typename YYChar>
  inline std::basic_ostream<YYChar>&
  operator<< (std::basic_ostream<YYChar>& ostr, const position& pos)
  {
    if (pos.filename)
      ostr << *pos.filename << ':';
    return ostr << pos.line << '.' << pos.column;
  }

  /// Abstract a location.
  class location
  {
  public:

    /// Construct a location from \a b to \a e.
    location (const position& b, const position& e)
      : begin (b)
      , end (e)
    {
    }

    /// Construct a 0-width location in \a p.
    explicit location (const position& p = position ())
      : begin (p)
      , end (p)
    {
    }

    /// Construct a 0-width location in \a f, \a l, \a c.
    explicit location (std::string* f,
                       unsigned int l = 1u,
                       unsigned int c = 1u)
      : begin (f, l, c)
      , end (f, l, c)
    {
    }


    /// Initialization.
    void initialize (std::string* f = YY_NULLPTR,
                     unsigned int l = 1u,
                     unsigned int c = 1u)
    {
      begin.initialize (f, l, c);
      end = begin;
    }

    /** \name Line and Column related manipulators
     ** \{ */
  public:
    /// Reset initial location to final location.
    void step ()
    {
      begin = end;
    }

    /// Extend the current location to the COUNT next columns.
    void columns (int count = 1)
    {
      end += count;
    }

    /// Extend the current location to the COUNT next lines.
    void lines (int count = 1)
    {
      end.lines (count);
    }
    /** \} */


  public:
    /// Beginning of the located region.
    position begin;
    /// End of the located region.
    position end;
  };

  /// Join two locations, in place.
  inline location& operator+= (location& res, const location& end)
  {
    res.end = end.end;
    return res;
  }

  /// Join two locations.
  inline location operator+ (location res, const location& end)
  {
    return res += end;
  }

  /// Add \a width columns to the end position, in place.
  inline location& operator+= (location& res, int width)
  {
    res.columns (width);
    return res;
  }

  /// Add \a width columns to the end position.
  inline location operator+ (location res, int width)
  {
    return res += width;
  }

  /// Subtract \a width columns to the end position, in place.
  inline location& operator-= (location& res, int width)
  {
    return res += -width;
  }

  /// Subtract \a width columns to the end position.
  inline location operator- (location res, int width)
  {
    return res -= width;
  }

  /// Compare two location objects.
  inline bool
  operator== (const location& loc1, const location& loc2)
  {
    return loc1.begin == loc2.begin && loc1.end == loc2.end;
  }

  /// Compare two location objects.
  inline bool
  operator!= (const location& loc1, const location& loc2)
  {
    return !(loc1 == loc2);
  }

  /** \brief Intercept output stream redirection.
   ** \param ostr the destination output stream
   ** \param loc a reference to the location to redirect
   **
   ** Avoid duplicate information.
   */
  template <typename YYChar>
  inline std::basic_ostream<YYChar>&
  operator<< (std::basic_ostream<YYChar>& ostr, const location& loc)
  {
    unsigned int end_col = 0 < loc.end.column ? loc.end.column - 1 : 0;
    ostr << loc.begin;
    if (loc.end.filename
        && (!loc.begin.filename
            || *loc.begin.filename != *loc.end.filename))
      ostr << '-' << loc.end.filename << ':' << loc.end.line << '.' << end_col;
    else if (loc.begin.line < loc.end.line)
      ostr << '-' << loc.end.line << '.' << end_col;
    else if (loc.begin.column < end_col)
      ostr << '-' << end_col;
    return ostr;
  }


  /// A char[S] buffer to store and retrieve objects.
  ///
  /// Sort of a variant, but does not keep track of the nature
  /// of the stored data, since that knowledge is available
  /// via the current state.
  template <size_t S>
  struct variant
  {
    /// Type of *this.
    typedef variant<S> self_type;

    /// Empty construction.
    variant ()
      : yytypeid_ (YY_NULLPTR)
    {}

    /// Construct and fill.
    template <typename T>
    variant (const T& t)
      : yytypeid_ (&typeid (T))
    {
      YYASSERT (sizeof (T) <= S);
      new (yyas_<T> ()) T (t);
    }

    /// Destruction, allowed only if empty.
    ~variant ()
    {
      YYASSERT (!yytypeid_);
    }

    /// Instantiate an empty \a T in here.
    template <typename T>
    T&
    build ()
    {
      YYASSERT (!yytypeid_);
      YYASSERT (sizeof (T) <= S);
      yytypeid_ = & typeid (T);
      return *new (yyas_<T> ()) T;
    }

    /// Instantiate a \a T in here from \a t.
    template <typename T>
    T&
    build (const T& t)
    {
      YYASSERT (!yytypeid_);
      YYASSERT (sizeof (T) <= S);
      yytypeid_ = & typeid (T);
      return *new (yyas_<T> ()) T (t);
    }

    /// Accessor to a built \a T.
    template <typename T>
    T&
    as ()
    {
      YYASSERT (*yytypeid_ == typeid (T));
      YYASSERT (sizeof (T) <= S);
      return *yyas_<T> ();
    }

    /// Const accessor to a built \a T (for %printer).
    template <typename T>
    const T&
    as () const
    {
      YYASSERT (*yytypeid_ == typeid (T));
      YYASSERT (sizeof (T) <= S);
      return *yyas_<T> ();
    }

    /// Swap the content with \a other, of same type.
    ///
    /// Both variants must be built beforehand, because swapping the actual
    /// data requires reading it (with as()), and this is not possible on
    /// unconstructed variants: it would require some dynamic testing, which
    /// should not be the variant's responsability.
    /// Swapping between built and (possibly) non-built is done with
    /// variant::move ().
    template <typename T>
    void
    swap (self_type& other)
    {
      YYASSERT (yytypeid_);
      YYASSERT (*yytypeid_ == *other.yytypeid_);
      std::swap (as<T> (), other.as<T> ());
    }

    /// Move the content of \a other to this.
    ///
    /// Destroys \a other.
    template <typename T>
    void
    move (self_type& other)
    {
      build<T> ();
      swap<T> (other);
      other.destroy<T> ();
    }

    /// Copy the content of \a other to this.
    template <typename T>
    void
    copy (const self_type& other)
    {
      build<T> (other.as<T> ());
    }

    /// Destroy the stored \a T.
    template <typename T>
    void
    destroy ()
    {
      as<T> ().~T ();
      yytypeid_ = YY_NULLPTR;
    }

  private:
    /// Prohibit blind copies.
    self_type& operator=(const self_type&);
    variant (const self_type&);

    /// Accessor to raw memory as \a T.
    template <typename T>
    T*
    yyas_ ()
    {
      void *yyp = yybuffer_.yyraw;
      return static_cast<T*> (yyp);
     }

    /// Const accessor to raw memory as \a T.
    template <typename T>
    const T*
    yyas_ () const
    {
      const void *yyp = yybuffer_.yyraw;
      return static_cast<const T*> (yyp);
     }

    union
    {
      /// Strongest alignment constraints.
      long double yyalign_me;
      /// A buffer large enough to store any of the semantic values.
      char yyraw[S];
    } yybuffer_;

    /// Whether the content is built: if defined, the name of the stored type.
    const std::type_info *yytypeid_;
  };


  /// A Bison parser.
  class asn1_parser
  {
  public:
#ifndef YYSTYPE
    /// An auxiliary type to compute the largest semantic type.
    union union_type
    {
      // ObjectClassAssignment
      // ObjectSetAssignment
      // ParameterizedAssignment
      // ParameterizedTypeAssignment
      // ParameterizedValueAssignment
      // ParameterizedValueSetTypeAssignment
      // ParameterizedObjectClassAssignment
      // ParameterizedObjectAssignment
      // Assignment
      // TypeAssignment
      // ValueAssignment
      char dummy1[sizeof(Assignment)];

      // BuiltinType
      char dummy2[sizeof(BuiltinType)];

      // ChoiceType
      char dummy3[sizeof(ChoiceType)];

      // Class
      char dummy4[sizeof(Class)];

      // ComponentType
      char dummy5[sizeof(ComponentType)];

      // ComponentTypeLists
      // RootComponentTypeList
      // ComponentTypeList
      char dummy6[sizeof(ComponentTypeList)];

      // DefinedType
      // ParameterizedType
      char dummy7[sizeof(DefinedType)];

      // DefinedValue
      char dummy8[sizeof(DefinedValue)];

      // EnumeratedType
      // Enumerations
      // Enumeration
      char dummy9[sizeof(EnumeratedType)];

      // EnumerationItem
      char dummy10[sizeof(EnumerationValue)];

      // SymbolsFromModule
      char dummy11[sizeof(Import)];

      // ModuleBody
      char dummy12[sizeof(Module)];

      // NamedNumber
      char dummy13[sizeof(NamedNumber)];

      // NamedType
      char dummy14[sizeof(NamedType)];

      // ObjIdComponents
      // NameForm
      // NumberForm
      // NameAndNumberForm
      char dummy15[sizeof(ObjectIdComponentValue)];

      // PrefixedType
      char dummy16[sizeof(PrefixedType)];

      // SequenceOfType
      char dummy17[sizeof(SequenceOfType)];

      // SequenceType
      char dummy18[sizeof(SequenceType)];

      // SetOfType
      char dummy19[sizeof(SetOfType)];

      // SetType
      char dummy20[sizeof(SetType)];

      // Tag
      char dummy21[sizeof(Tag)];

      // TaggedType
      char dummy22[sizeof(TaggedType)];

      // TagDefault
      char dummy23[sizeof(TaggingMode)];

      // ActualParameter
      // Type
      char dummy24[sizeof(Type)];

      // ValueWithoutTypeIdentifier
      // Value
      // SingleValue
      char dummy25[sizeof(Value)];

      // realnumber
      char dummy26[sizeof(double)];

      // ClassNumber
      char dummy27[sizeof(int)];

      // number
      // SignedNumber
      char dummy28[sizeof(long long)];

      // ParameterList
      // ParameterSeries
      char dummy29[sizeof(std::set<std::string>)];

      // bstring
      // xmlbstring
      // hstring
      // xmlhstring
      // cstring
      // xmlcstring
      // simplestring
      // xmltstring
      // objectreference
      // typefieldreference
      // valuefieldreference
      // GENERIC_IDENTIFIER_UPPERCASE
      // GENERIC_IDENTIFIER_LOWERCASE
      // Parameter
      // SimpleDefinedType
      // ModuleIdentifier
      // GlobalModuleReference
      // Symbol
      // Reference
      // typereference
      // identifier
      // valuereference
      // modulereference
      // objectclassreference
      // word
      char dummy30[sizeof(std::string)];

      // AssignmentList
      char dummy31[sizeof(std::vector<Assignment>)];

      // Exports
      char dummy32[sizeof(std::vector<Export>)];

      // Imports
      // SymbolsImported
      // SymbolsFromModuleList
      char dummy33[sizeof(std::vector<Import>)];

      // AlternativeTypeLists
      // RootAlternativeTypeList
      // AlternativeTypeList
      char dummy34[sizeof(std::vector<NamedType>)];

      // ObjectIdentifierValue
      // ObjIdComponentsList
      char dummy35[sizeof(std::vector<ObjectIdComponentValue>)];

      // ActualParameterList
      char dummy36[sizeof(std::vector<Type>)];

      // SequenceOfValues
      char dummy37[sizeof(std::vector<Value>)];

      // SymbolList
      char dummy38[sizeof(std::vector<std::string>)];
};

    /// Symbol semantic values.
    typedef variant<sizeof(union_type)> semantic_type;
#else
    typedef YYSTYPE semantic_type;
#endif
    /// Symbol locations.
    typedef location location_type;

    /// Syntax errors thrown from user actions.
    struct syntax_error : std::runtime_error
    {
      syntax_error (const location_type& l, const std::string& m);
      location_type location;
    };

    /// Tokens.
    struct token
    {
      enum yytokentype
      {
        END_OF_FILE = 0,
        comment = 258,
        number = 259,
        realnumber = 260,
        bstring = 261,
        xmlbstring = 262,
        hstring = 263,
        xmlhstring = 264,
        cstring = 265,
        xmlcstring = 266,
        simplestring = 267,
        xmltstring = 268,
        psname = 269,
        encodingreference = 270,
        integerUnicodeLabel = 271,
        tstring = 274,
        objectreference = 276,
        objectsetreference = 277,
        typefieldreference = 278,
        valuefieldreference = 279,
        valuesetfieldreference = 280,
        objectfieldreference = 281,
        objectsetfieldreference = 282,
        ABSENT = 283,
        ABSTRACT_SYNTAX = 284,
        ALL = 285,
        APPLICATION = 286,
        ASN_NULL = 287,
        AUTOMATIC = 288,
        BEGIN = 289,
        BIT = 290,
        BMPString = 291,
        BOOLEAN = 292,
        BY = 293,
        CHARACTER = 294,
        CHOICE = 295,
        CLASS = 296,
        COMPONENT = 297,
        COMPONENTS = 298,
        CONSTRAINED = 299,
        CONTAINING = 300,
        DATE = 301,
        DATE_TIME = 302,
        DEFAULT = 303,
        DEFINITIONS = 304,
        DURATION = 305,
        EMBEDDED = 306,
        ENCODED = 307,
        ENCODING_CONTROL = 308,
        END = 309,
        ENUMERATED = 310,
        EXCEPT = 311,
        EXPLICIT = 312,
        EXPORTS = 313,
        EXTENSIBILITY = 314,
        EXTERNAL = 315,
        FALSE = 316,
        FROM = 317,
        GeneralizedTime = 318,
        GeneralString = 319,
        GraphicString = 320,
        IA5String = 321,
        IDENTIFIER = 322,
        IMPLICIT = 323,
        IMPLIED = 324,
        IMPORTS = 325,
        INCLUDES = 326,
        INSTANCE = 327,
        INSTRUCTIONS = 328,
        INTEGER = 329,
        INTERSECTION = 330,
        ISO646String = 331,
        MAX = 332,
        MIN = 333,
        MINUS_INFINITY = 334,
        NOT_A_NUMBER = 335,
        NumericString = 336,
        OBJECT = 337,
        ObjectDescriptor = 338,
        OCTET = 339,
        OF = 340,
        OID_IRI = 341,
        OPTIONAL = 342,
        PATTERN = 343,
        PDV = 344,
        PLUS_INFINITY = 345,
        PRESENT = 346,
        PrintableString = 347,
        PRIVATE = 348,
        REAL = 349,
        RELATIVE_OID = 350,
        RELATIVE_OID_IRI = 351,
        SEQUENCE = 352,
        SET = 353,
        SETTINGS = 354,
        SIZE = 355,
        STRING = 356,
        SYNTAX = 357,
        T61String = 358,
        TAGS = 359,
        TeletexString = 360,
        TIME = 361,
        TIME_OF_DAY = 362,
        TRUE = 363,
        TYPE_IDENTIFIER = 364,
        UNION = 365,
        UNIQUE = 366,
        UNIVERSAL = 367,
        UniversalString = 368,
        UTCTime = 369,
        UTF8String = 370,
        VideotexString = 371,
        VisibleString = 372,
        WITH = 373,
        DEFINED_AS = 374,
        ELIPSIS = 375,
        RANGE = 376,
        OPEN_BRACE = 377,
        CLOSE_BRACE = 378,
        OPEN_PARENTHESIS = 379,
        CLOSE_PARENTHESIS = 380,
        OPEN_SQUARE_BRACKET = 381,
        CLOSE_SQUARE_BRACKET = 382,
        LESS_THAN = 383,
        GREATER_THAN = 384,
        EXCLAMATION_MARK = 385,
        QUOTATION_MARK = 386,
        AMPERSAND = 387,
        APOSTROPHE = 388,
        ASTERISK = 389,
        COMMA = 390,
        FULL_STOP = 391,
        HYPHEN_MINUS = 392,
        SOLIDUS = 393,
        COLON = 394,
        SEMICOLON = 395,
        EQUALS_SIGN = 396,
        AT = 397,
        VERTICAL_LINE = 398,
        ACCENT = 399,
        PLUS = 400,
        STAR = 401,
        GENERIC_IDENTIFIER_UPPERCASE = 402,
        GENERIC_IDENTIFIER_LOWERCASE = 403,
        GENERIC_INTEGER = 404,
        xmlasn1typename = 405
      };
    };

    /// (External) token type, as returned by yylex.
    typedef token::yytokentype token_type;

    /// Symbol type: an internal symbol number.
    typedef int symbol_number_type;

    /// The symbol type number to denote an empty symbol.
    enum { empty_symbol = -2 };

    /// Internal symbol number for tokens (subsumed by symbol_number_type).
    typedef unsigned char token_number_type;

    /// A complete symbol.
    ///
    /// Expects its Base type to provide access to the symbol type
    /// via type_get().
    ///
    /// Provide access to semantic value and location.
    template <typename Base>
    struct basic_symbol : Base
    {
      /// Alias to Base.
      typedef Base super_type;

      /// Default constructor.
      basic_symbol ();

      /// Copy constructor.
      basic_symbol (const basic_symbol& other);

      /// Constructor for valueless symbols, and symbols from each type.

  basic_symbol (typename Base::kind_type t, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Assignment v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const BuiltinType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ChoiceType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Class v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ComponentType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ComponentTypeList v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const DefinedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const DefinedValue v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const EnumeratedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const EnumerationValue v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Import v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Module v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const NamedNumber v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const NamedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ObjectIdComponentValue v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const PrefixedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const SequenceOfType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const SequenceType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const SetOfType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const SetType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Tag v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const TaggedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const TaggingMode v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Type v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Value v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const double v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const int v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const long long v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::set<std::string> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::string v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<Assignment> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<Export> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<Import> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<NamedType> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<ObjectIdComponentValue> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<Type> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<Value> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<std::string> v, const location_type& l);


      /// Constructor for symbols with semantic value.
      basic_symbol (typename Base::kind_type t,
                    const semantic_type& v,
                    const location_type& l);

      /// Destroy the symbol.
      ~basic_symbol ();

      /// Destroy contents, and record that is empty.
      void clear ();

      /// Whether empty.
      bool empty () const;

      /// Destructive move, \a s is emptied into this.
      void move (basic_symbol& s);

      /// The semantic value.
      semantic_type value;

      /// The location.
      location_type location;

    private:
      /// Assignment operator.
      basic_symbol& operator= (const basic_symbol& other);
    };

    /// Type access provider for token (enum) based symbols.
    struct by_type
    {
      /// Default constructor.
      by_type ();

      /// Copy constructor.
      by_type (const by_type& other);

      /// The symbol type as needed by the constructor.
      typedef token_type kind_type;

      /// Constructor from (external) token numbers.
      by_type (kind_type t);

      /// Record that this symbol is empty.
      void clear ();

      /// Steal the symbol type from \a that.
      void move (by_type& that);

      /// The (internal) type number (corresponding to \a type).
      /// \a empty when empty.
      symbol_number_type type_get () const;

      /// The token.
      token_type token () const;

      /// The symbol type.
      /// \a empty_symbol when empty.
      /// An int, not token_number_type, to be able to store empty_symbol.
      int type;
    };

    /// "External" symbols: returned by the scanner.
    typedef basic_symbol<by_type> symbol_type;

    // Symbol constructors declarations.
    static inline
    symbol_type
    make_END_OF_FILE (const location_type& l);

    static inline
    symbol_type
    make_comment (const location_type& l);

    static inline
    symbol_type
    make_number (const long long& v, const location_type& l);

    static inline
    symbol_type
    make_realnumber (const double& v, const location_type& l);

    static inline
    symbol_type
    make_bstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_xmlbstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_hstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_xmlhstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_cstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_xmlcstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_simplestring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_xmltstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_psname (const location_type& l);

    static inline
    symbol_type
    make_encodingreference (const location_type& l);

    static inline
    symbol_type
    make_integerUnicodeLabel (const location_type& l);

    static inline
    symbol_type
    make_tstring (const location_type& l);

    static inline
    symbol_type
    make_objectreference (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_objectsetreference (const location_type& l);

    static inline
    symbol_type
    make_typefieldreference (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_valuefieldreference (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_valuesetfieldreference (const location_type& l);

    static inline
    symbol_type
    make_objectfieldreference (const location_type& l);

    static inline
    symbol_type
    make_objectsetfieldreference (const location_type& l);

    static inline
    symbol_type
    make_ABSENT (const location_type& l);

    static inline
    symbol_type
    make_ABSTRACT_SYNTAX (const location_type& l);

    static inline
    symbol_type
    make_ALL (const location_type& l);

    static inline
    symbol_type
    make_APPLICATION (const location_type& l);

    static inline
    symbol_type
    make_ASN_NULL (const location_type& l);

    static inline
    symbol_type
    make_AUTOMATIC (const location_type& l);

    static inline
    symbol_type
    make_BEGIN (const location_type& l);

    static inline
    symbol_type
    make_BIT (const location_type& l);

    static inline
    symbol_type
    make_BMPString (const location_type& l);

    static inline
    symbol_type
    make_BOOLEAN (const location_type& l);

    static inline
    symbol_type
    make_BY (const location_type& l);

    static inline
    symbol_type
    make_CHARACTER (const location_type& l);

    static inline
    symbol_type
    make_CHOICE (const location_type& l);

    static inline
    symbol_type
    make_CLASS (const location_type& l);

    static inline
    symbol_type
    make_COMPONENT (const location_type& l);

    static inline
    symbol_type
    make_COMPONENTS (const location_type& l);

    static inline
    symbol_type
    make_CONSTRAINED (const location_type& l);

    static inline
    symbol_type
    make_CONTAINING (const location_type& l);

    static inline
    symbol_type
    make_DATE (const location_type& l);

    static inline
    symbol_type
    make_DATE_TIME (const location_type& l);

    static inline
    symbol_type
    make_DEFAULT (const location_type& l);

    static inline
    symbol_type
    make_DEFINITIONS (const location_type& l);

    static inline
    symbol_type
    make_DURATION (const location_type& l);

    static inline
    symbol_type
    make_EMBEDDED (const location_type& l);

    static inline
    symbol_type
    make_ENCODED (const location_type& l);

    static inline
    symbol_type
    make_ENCODING_CONTROL (const location_type& l);

    static inline
    symbol_type
    make_END (const location_type& l);

    static inline
    symbol_type
    make_ENUMERATED (const location_type& l);

    static inline
    symbol_type
    make_EXCEPT (const location_type& l);

    static inline
    symbol_type
    make_EXPLICIT (const location_type& l);

    static inline
    symbol_type
    make_EXPORTS (const location_type& l);

    static inline
    symbol_type
    make_EXTENSIBILITY (const location_type& l);

    static inline
    symbol_type
    make_EXTERNAL (const location_type& l);

    static inline
    symbol_type
    make_FALSE (const location_type& l);

    static inline
    symbol_type
    make_FROM (const location_type& l);

    static inline
    symbol_type
    make_GeneralizedTime (const location_type& l);

    static inline
    symbol_type
    make_GeneralString (const location_type& l);

    static inline
    symbol_type
    make_GraphicString (const location_type& l);

    static inline
    symbol_type
    make_IA5String (const location_type& l);

    static inline
    symbol_type
    make_IDENTIFIER (const location_type& l);

    static inline
    symbol_type
    make_IMPLICIT (const location_type& l);

    static inline
    symbol_type
    make_IMPLIED (const location_type& l);

    static inline
    symbol_type
    make_IMPORTS (const location_type& l);

    static inline
    symbol_type
    make_INCLUDES (const location_type& l);

    static inline
    symbol_type
    make_INSTANCE (const location_type& l);

    static inline
    symbol_type
    make_INSTRUCTIONS (const location_type& l);

    static inline
    symbol_type
    make_INTEGER (const location_type& l);

    static inline
    symbol_type
    make_INTERSECTION (const location_type& l);

    static inline
    symbol_type
    make_ISO646String (const location_type& l);

    static inline
    symbol_type
    make_MAX (const location_type& l);

    static inline
    symbol_type
    make_MIN (const location_type& l);

    static inline
    symbol_type
    make_MINUS_INFINITY (const location_type& l);

    static inline
    symbol_type
    make_NOT_A_NUMBER (const location_type& l);

    static inline
    symbol_type
    make_NumericString (const location_type& l);

    static inline
    symbol_type
    make_OBJECT (const location_type& l);

    static inline
    symbol_type
    make_ObjectDescriptor (const location_type& l);

    static inline
    symbol_type
    make_OCTET (const location_type& l);

    static inline
    symbol_type
    make_OF (const location_type& l);

    static inline
    symbol_type
    make_OID_IRI (const location_type& l);

    static inline
    symbol_type
    make_OPTIONAL (const location_type& l);

    static inline
    symbol_type
    make_PATTERN (const location_type& l);

    static inline
    symbol_type
    make_PDV (const location_type& l);

    static inline
    symbol_type
    make_PLUS_INFINITY (const location_type& l);

    static inline
    symbol_type
    make_PRESENT (const location_type& l);

    static inline
    symbol_type
    make_PrintableString (const location_type& l);

    static inline
    symbol_type
    make_PRIVATE (const location_type& l);

    static inline
    symbol_type
    make_REAL (const location_type& l);

    static inline
    symbol_type
    make_RELATIVE_OID (const location_type& l);

    static inline
    symbol_type
    make_RELATIVE_OID_IRI (const location_type& l);

    static inline
    symbol_type
    make_SEQUENCE (const location_type& l);

    static inline
    symbol_type
    make_SET (const location_type& l);

    static inline
    symbol_type
    make_SETTINGS (const location_type& l);

    static inline
    symbol_type
    make_SIZE (const location_type& l);

    static inline
    symbol_type
    make_STRING (const location_type& l);

    static inline
    symbol_type
    make_SYNTAX (const location_type& l);

    static inline
    symbol_type
    make_T61String (const location_type& l);

    static inline
    symbol_type
    make_TAGS (const location_type& l);

    static inline
    symbol_type
    make_TeletexString (const location_type& l);

    static inline
    symbol_type
    make_TIME (const location_type& l);

    static inline
    symbol_type
    make_TIME_OF_DAY (const location_type& l);

    static inline
    symbol_type
    make_TRUE (const location_type& l);

    static inline
    symbol_type
    make_TYPE_IDENTIFIER (const location_type& l);

    static inline
    symbol_type
    make_UNION (const location_type& l);

    static inline
    symbol_type
    make_UNIQUE (const location_type& l);

    static inline
    symbol_type
    make_UNIVERSAL (const location_type& l);

    static inline
    symbol_type
    make_UniversalString (const location_type& l);

    static inline
    symbol_type
    make_UTCTime (const location_type& l);

    static inline
    symbol_type
    make_UTF8String (const location_type& l);

    static inline
    symbol_type
    make_VideotexString (const location_type& l);

    static inline
    symbol_type
    make_VisibleString (const location_type& l);

    static inline
    symbol_type
    make_WITH (const location_type& l);

    static inline
    symbol_type
    make_DEFINED_AS (const location_type& l);

    static inline
    symbol_type
    make_ELIPSIS (const location_type& l);

    static inline
    symbol_type
    make_RANGE (const location_type& l);

    static inline
    symbol_type
    make_OPEN_BRACE (const location_type& l);

    static inline
    symbol_type
    make_CLOSE_BRACE (const location_type& l);

    static inline
    symbol_type
    make_OPEN_PARENTHESIS (const location_type& l);

    static inline
    symbol_type
    make_CLOSE_PARENTHESIS (const location_type& l);

    static inline
    symbol_type
    make_OPEN_SQUARE_BRACKET (const location_type& l);

    static inline
    symbol_type
    make_CLOSE_SQUARE_BRACKET (const location_type& l);

    static inline
    symbol_type
    make_LESS_THAN (const location_type& l);

    static inline
    symbol_type
    make_GREATER_THAN (const location_type& l);

    static inline
    symbol_type
    make_EXCLAMATION_MARK (const location_type& l);

    static inline
    symbol_type
    make_QUOTATION_MARK (const location_type& l);

    static inline
    symbol_type
    make_AMPERSAND (const location_type& l);

    static inline
    symbol_type
    make_APOSTROPHE (const location_type& l);

    static inline
    symbol_type
    make_ASTERISK (const location_type& l);

    static inline
    symbol_type
    make_COMMA (const location_type& l);

    static inline
    symbol_type
    make_FULL_STOP (const location_type& l);

    static inline
    symbol_type
    make_HYPHEN_MINUS (const location_type& l);

    static inline
    symbol_type
    make_SOLIDUS (const location_type& l);

    static inline
    symbol_type
    make_COLON (const location_type& l);

    static inline
    symbol_type
    make_SEMICOLON (const location_type& l);

    static inline
    symbol_type
    make_EQUALS_SIGN (const location_type& l);

    static inline
    symbol_type
    make_AT (const location_type& l);

    static inline
    symbol_type
    make_VERTICAL_LINE (const location_type& l);

    static inline
    symbol_type
    make_ACCENT (const location_type& l);

    static inline
    symbol_type
    make_PLUS (const location_type& l);

    static inline
    symbol_type
    make_STAR (const location_type& l);

    static inline
    symbol_type
    make_GENERIC_IDENTIFIER_UPPERCASE (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_GENERIC_IDENTIFIER_LOWERCASE (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_GENERIC_INTEGER (const location_type& l);

    static inline
    symbol_type
    make_xmlasn1typename (const location_type& l);


    /// Build a parser object.
    asn1_parser (Context& context_yyarg);
    virtual ~asn1_parser ();

    /// Parse.
    /// \returns  0 iff parsing succeeded.
    virtual int parse ();

#if YYDEBUG
    /// The current debugging stream.
    std::ostream& debug_stream () const YY_ATTRIBUTE_PURE;
    /// Set the current debugging stream.
    void set_debug_stream (std::ostream &);

    /// Type for debugging levels.
    typedef int debug_level_type;
    /// The current debugging level.
    debug_level_type debug_level () const YY_ATTRIBUTE_PURE;
    /// Set the current debugging level.
    void set_debug_level (debug_level_type l);
#endif

    /// Report a syntax error.
    /// \param loc    where the syntax error is found.
    /// \param msg    a description of the syntax error.
    virtual void error (const location_type& loc, const std::string& msg);

    /// Report a syntax error.
    void error (const syntax_error& err);

  private:
    /// This class is not copyable.
    asn1_parser (const asn1_parser&);
    asn1_parser& operator= (const asn1_parser&);

    /// State numbers.
    typedef int state_type;

    /// Generate an error message.
    /// \param yystate   the state where the error occurred.
    /// \param yyla      the lookahead token.
    virtual std::string yysyntax_error_ (state_type yystate,
                                         const symbol_type& yyla) const;

    /// Compute post-reduction state.
    /// \param yystate   the current state
    /// \param yysym     the nonterminal to push on the stack
    state_type yy_lr_goto_state_ (state_type yystate, int yysym);

    /// Whether the given \c yypact_ value indicates a defaulted state.
    /// \param yyvalue   the value to check
    static bool yy_pact_value_is_default_ (int yyvalue);

    /// Whether the given \c yytable_ value indicates a syntax error.
    /// \param yyvalue   the value to check
    static bool yy_table_value_is_error_ (int yyvalue);

    static const short int yypact_ninf_;
    static const short int yytable_ninf_;

    /// Convert a scanner token number \a t to a symbol number.
    static token_number_type yytranslate_ (token_type t);

    // Tables.
  // YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
  // STATE-NUM.
  static const short int yypact_[];

  // YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
  // Performed when YYTABLE does not specify something else to do.  Zero
  // means the default is an error.
  static const unsigned short int yydefact_[];

  // YYPGOTO[NTERM-NUM].
  static const short int yypgoto_[];

  // YYDEFGOTO[NTERM-NUM].
  static const short int yydefgoto_[];

  // YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
  // positive, shift that token.  If negative, reduce the rule whose
  // number is the opposite.  If YYTABLE_NINF, syntax error.
  static const short int yytable_[];

  static const short int yycheck_[];

  // YYSTOS[STATE-NUM] -- The (internal number of the) accessing
  // symbol of state STATE-NUM.
  static const unsigned short int yystos_[];

  // YYR1[YYN] -- Symbol number of symbol that rule YYN derives.
  static const unsigned short int yyr1_[];

  // YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.
  static const unsigned char yyr2_[];


    /// Convert the symbol name \a n to a form suitable for a diagnostic.
    static std::string yytnamerr_ (const char *n);


    /// For a symbol, its name in clear.
    static const char* const yytname_[];
#if YYDEBUG
  // YYRLINE[YYN] -- Source line where rule number YYN was defined.
  static const unsigned short int yyrline_[];
    /// Report on the debug stream that the rule \a r is going to be reduced.
    virtual void yy_reduce_print_ (int r);
    /// Print the state stack on the debug stream.
    virtual void yystack_print_ ();

    // Debugging.
    int yydebug_;
    std::ostream* yycdebug_;

    /// \brief Display a symbol type, value and location.
    /// \param yyo    The output stream.
    /// \param yysym  The symbol.
    template <typename Base>
    void yy_print_ (std::ostream& yyo, const basic_symbol<Base>& yysym) const;
#endif

    /// \brief Reclaim the memory associated to a symbol.
    /// \param yymsg     Why this token is reclaimed.
    ///                  If null, print nothing.
    /// \param yysym     The symbol.
    template <typename Base>
    void yy_destroy_ (const char* yymsg, basic_symbol<Base>& yysym) const;

  private:
    /// Type access provider for state based symbols.
    struct by_state
    {
      /// Default constructor.
      by_state ();

      /// The symbol type as needed by the constructor.
      typedef state_type kind_type;

      /// Constructor.
      by_state (kind_type s);

      /// Copy constructor.
      by_state (const by_state& other);

      /// Record that this symbol is empty.
      void clear ();

      /// Steal the symbol type from \a that.
      void move (by_state& that);

      /// The (internal) type number (corresponding to \a state).
      /// \a empty_symbol when empty.
      symbol_number_type type_get () const;

      /// The state number used to denote an empty symbol.
      enum { empty_state = -1 };

      /// The state.
      /// \a empty when empty.
      state_type state;
    };

    /// "Internal" symbol: element of the stack.
    struct stack_symbol_type : basic_symbol<by_state>
    {
      /// Superclass.
      typedef basic_symbol<by_state> super_type;
      /// Construct an empty symbol.
      stack_symbol_type ();
      /// Steal the contents from \a sym to build this.
      stack_symbol_type (state_type s, symbol_type& sym);
      /// Assignment, needed by push_back.
      stack_symbol_type& operator= (const stack_symbol_type& that);
    };

    /// Stack type.
    typedef stack<stack_symbol_type> stack_type;

    /// The stack.
    stack_type yystack_;

    /// Push a new state on the stack.
    /// \param m    a debug message to display
    ///             if null, no trace is output.
    /// \param s    the symbol
    /// \warning the contents of \a s.value is stolen.
    void yypush_ (const char* m, stack_symbol_type& s);

    /// Push a new look ahead token on the state on the stack.
    /// \param m    a debug message to display
    ///             if null, no trace is output.
    /// \param s    the state
    /// \param sym  the symbol (for its value and location).
    /// \warning the contents of \a s.value is stolen.
    void yypush_ (const char* m, state_type s, symbol_type& sym);

    /// Pop \a n symbols the three stacks.
    void yypop_ (unsigned int n = 1);

    /// Constants.
    enum
    {
      yyeof_ = 0,
      yylast_ = 3277,     ///< Last index in yytable_.
      yynnts_ = 227,  ///< Number of nonterminal symbols.
      yyfinal_ = 6, ///< Termination state number.
      yyterror_ = 1,
      yyerrcode_ = 256,
      yyntokens_ = 151  ///< Number of tokens.
    };


    // User arguments.
    Context& context;
  };

  // Symbol number corresponding to token number t.
  inline
  asn1_parser::token_number_type
  asn1_parser::yytranslate_ (token_type t)
  {
    static
    const token_number_type
    translate_table[] =
    {
     0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150
    };
    const unsigned int user_token_number_max_ = 405;
    const token_number_type undef_token_ = 2;

    if (static_cast<int>(t) <= yyeof_)
      return yyeof_;
    else if (static_cast<unsigned int> (t) <= user_token_number_max_)
      return translate_table[t];
    else
      return undef_token_;
  }

  inline
  asn1_parser::syntax_error::syntax_error (const location_type& l, const std::string& m)
    : std::runtime_error (m)
    , location (l)
  {}

  // basic_symbol.
  template <typename Base>
  inline
  asn1_parser::basic_symbol<Base>::basic_symbol ()
    : value ()
  {}

  template <typename Base>
  inline
  asn1_parser::basic_symbol<Base>::basic_symbol (const basic_symbol& other)
    : Base (other)
    , value ()
    , location (other.location)
  {
      switch (other.type_get ())
    {
      case 158: // ObjectClassAssignment
      case 194: // ObjectSetAssignment
      case 198: // ParameterizedAssignment
      case 199: // ParameterizedTypeAssignment
      case 200: // ParameterizedValueAssignment
      case 201: // ParameterizedValueSetTypeAssignment
      case 202: // ParameterizedObjectClassAssignment
      case 203: // ParameterizedObjectAssignment
      case 248: // Assignment
      case 257: // TypeAssignment
      case 258: // ValueAssignment
        value.copy< Assignment > (other.value);
        break;

      case 260: // BuiltinType
        value.copy< BuiltinType > (other.value);
        break;

      case 291: // ChoiceType
        value.copy< ChoiceType > (other.value);
        break;

      case 301: // Class
        value.copy< Class > (other.value);
        break;

      case 287: // ComponentType
        value.copy< ComponentType > (other.value);
        break;

      case 284: // ComponentTypeLists
      case 285: // RootComponentTypeList
      case 286: // ComponentTypeList
        value.copy< ComponentTypeList > (other.value);
        break;

      case 249: // DefinedType
      case 251: // ParameterizedType
        value.copy< DefinedType > (other.value);
        break;

      case 250: // DefinedValue
        value.copy< DefinedValue > (other.value);
        break;

      case 273: // EnumeratedType
      case 274: // Enumerations
      case 275: // Enumeration
        value.copy< EnumeratedType > (other.value);
        break;

      case 276: // EnumerationItem
        value.copy< EnumerationValue > (other.value);
        break;

      case 241: // SymbolsFromModule
        value.copy< Import > (other.value);
        break;

      case 235: // ModuleBody
        value.copy< Module > (other.value);
        break;

      case 271: // NamedNumber
        value.copy< NamedNumber > (other.value);
        break;

      case 261: // NamedType
        value.copy< NamedType > (other.value);
        break;

      case 305: // ObjIdComponents
      case 306: // NameForm
      case 307: // NumberForm
      case 308: // NameAndNumberForm
        value.copy< ObjectIdComponentValue > (other.value);
        break;

      case 296: // PrefixedType
        value.copy< PrefixedType > (other.value);
        break;

      case 288: // SequenceOfType
        value.copy< SequenceOfType > (other.value);
        break;

      case 283: // SequenceType
        value.copy< SequenceType > (other.value);
        break;

      case 290: // SetOfType
        value.copy< SetOfType > (other.value);
        break;

      case 289: // SetType
        value.copy< SetType > (other.value);
        break;

      case 298: // Tag
        value.copy< Tag > (other.value);
        break;

      case 297: // TaggedType
        value.copy< TaggedType > (other.value);
        break;

      case 233: // TagDefault
        value.copy< TaggingMode > (other.value);
        break;

      case 254: // ActualParameter
      case 259: // Type
        value.copy< Type > (other.value);
        break;

      case 262: // ValueWithoutTypeIdentifier
      case 263: // Value
      case 347: // SingleValue
        value.copy< Value > (other.value);
        break;

      case 5: // realnumber
        value.copy< double > (other.value);
        break;

      case 300: // ClassNumber
        value.copy< int > (other.value);
        break;

      case 4: // number
      case 272: // SignedNumber
        value.copy< long long > (other.value);
        break;

      case 204: // ParameterList
      case 205: // ParameterSeries
        value.copy< std::set<std::string> > (other.value);
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 21: // objectreference
      case 23: // typefieldreference
      case 24: // valuefieldreference
      case 147: // GENERIC_IDENTIFIER_UPPERCASE
      case 148: // GENERIC_IDENTIFIER_LOWERCASE
      case 206: // Parameter
      case 212: // SimpleDefinedType
      case 224: // ModuleIdentifier
      case 242: // GlobalModuleReference
      case 245: // Symbol
      case 246: // Reference
      case 372: // typereference
      case 373: // identifier
      case 374: // valuereference
      case 375: // modulereference
      case 376: // objectclassreference
      case 377: // word
        value.copy< std::string > (other.value);
        break;

      case 247: // AssignmentList
        value.copy< std::vector<Assignment> > (other.value);
        break;

      case 236: // Exports
        value.copy< std::vector<Export> > (other.value);
        break;

      case 238: // Imports
      case 239: // SymbolsImported
      case 240: // SymbolsFromModuleList
        value.copy< std::vector<Import> > (other.value);
        break;

      case 292: // AlternativeTypeLists
      case 293: // RootAlternativeTypeList
      case 294: // AlternativeTypeList
        value.copy< std::vector<NamedType> > (other.value);
        break;

      case 303: // ObjectIdentifierValue
      case 304: // ObjIdComponentsList
        value.copy< std::vector<ObjectIdComponentValue> > (other.value);
        break;

      case 253: // ActualParameterList
        value.copy< std::vector<Type> > (other.value);
        break;

      case 266: // SequenceOfValues
        value.copy< std::vector<Value> > (other.value);
        break;

      case 244: // SymbolList
        value.copy< std::vector<std::string> > (other.value);
        break;

      default:
        break;
    }

  }


  template <typename Base>
  inline
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const semantic_type& v, const location_type& l)
    : Base (t)
    , value ()
    , location (l)
  {
    (void) v;
      switch (this->type_get ())
    {
      case 158: // ObjectClassAssignment
      case 194: // ObjectSetAssignment
      case 198: // ParameterizedAssignment
      case 199: // ParameterizedTypeAssignment
      case 200: // ParameterizedValueAssignment
      case 201: // ParameterizedValueSetTypeAssignment
      case 202: // ParameterizedObjectClassAssignment
      case 203: // ParameterizedObjectAssignment
      case 248: // Assignment
      case 257: // TypeAssignment
      case 258: // ValueAssignment
        value.copy< Assignment > (v);
        break;

      case 260: // BuiltinType
        value.copy< BuiltinType > (v);
        break;

      case 291: // ChoiceType
        value.copy< ChoiceType > (v);
        break;

      case 301: // Class
        value.copy< Class > (v);
        break;

      case 287: // ComponentType
        value.copy< ComponentType > (v);
        break;

      case 284: // ComponentTypeLists
      case 285: // RootComponentTypeList
      case 286: // ComponentTypeList
        value.copy< ComponentTypeList > (v);
        break;

      case 249: // DefinedType
      case 251: // ParameterizedType
        value.copy< DefinedType > (v);
        break;

      case 250: // DefinedValue
        value.copy< DefinedValue > (v);
        break;

      case 273: // EnumeratedType
      case 274: // Enumerations
      case 275: // Enumeration
        value.copy< EnumeratedType > (v);
        break;

      case 276: // EnumerationItem
        value.copy< EnumerationValue > (v);
        break;

      case 241: // SymbolsFromModule
        value.copy< Import > (v);
        break;

      case 235: // ModuleBody
        value.copy< Module > (v);
        break;

      case 271: // NamedNumber
        value.copy< NamedNumber > (v);
        break;

      case 261: // NamedType
        value.copy< NamedType > (v);
        break;

      case 305: // ObjIdComponents
      case 306: // NameForm
      case 307: // NumberForm
      case 308: // NameAndNumberForm
        value.copy< ObjectIdComponentValue > (v);
        break;

      case 296: // PrefixedType
        value.copy< PrefixedType > (v);
        break;

      case 288: // SequenceOfType
        value.copy< SequenceOfType > (v);
        break;

      case 283: // SequenceType
        value.copy< SequenceType > (v);
        break;

      case 290: // SetOfType
        value.copy< SetOfType > (v);
        break;

      case 289: // SetType
        value.copy< SetType > (v);
        break;

      case 298: // Tag
        value.copy< Tag > (v);
        break;

      case 297: // TaggedType
        value.copy< TaggedType > (v);
        break;

      case 233: // TagDefault
        value.copy< TaggingMode > (v);
        break;

      case 254: // ActualParameter
      case 259: // Type
        value.copy< Type > (v);
        break;

      case 262: // ValueWithoutTypeIdentifier
      case 263: // Value
      case 347: // SingleValue
        value.copy< Value > (v);
        break;

      case 5: // realnumber
        value.copy< double > (v);
        break;

      case 300: // ClassNumber
        value.copy< int > (v);
        break;

      case 4: // number
      case 272: // SignedNumber
        value.copy< long long > (v);
        break;

      case 204: // ParameterList
      case 205: // ParameterSeries
        value.copy< std::set<std::string> > (v);
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 21: // objectreference
      case 23: // typefieldreference
      case 24: // valuefieldreference
      case 147: // GENERIC_IDENTIFIER_UPPERCASE
      case 148: // GENERIC_IDENTIFIER_LOWERCASE
      case 206: // Parameter
      case 212: // SimpleDefinedType
      case 224: // ModuleIdentifier
      case 242: // GlobalModuleReference
      case 245: // Symbol
      case 246: // Reference
      case 372: // typereference
      case 373: // identifier
      case 374: // valuereference
      case 375: // modulereference
      case 376: // objectclassreference
      case 377: // word
        value.copy< std::string > (v);
        break;

      case 247: // AssignmentList
        value.copy< std::vector<Assignment> > (v);
        break;

      case 236: // Exports
        value.copy< std::vector<Export> > (v);
        break;

      case 238: // Imports
      case 239: // SymbolsImported
      case 240: // SymbolsFromModuleList
        value.copy< std::vector<Import> > (v);
        break;

      case 292: // AlternativeTypeLists
      case 293: // RootAlternativeTypeList
      case 294: // AlternativeTypeList
        value.copy< std::vector<NamedType> > (v);
        break;

      case 303: // ObjectIdentifierValue
      case 304: // ObjIdComponentsList
        value.copy< std::vector<ObjectIdComponentValue> > (v);
        break;

      case 253: // ActualParameterList
        value.copy< std::vector<Type> > (v);
        break;

      case 266: // SequenceOfValues
        value.copy< std::vector<Value> > (v);
        break;

      case 244: // SymbolList
        value.copy< std::vector<std::string> > (v);
        break;

      default:
        break;
    }
}


  // Implementation of basic_symbol constructor for each type.

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const location_type& l)
    : Base (t)
    , value ()
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Assignment v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const BuiltinType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ChoiceType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Class v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ComponentType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ComponentTypeList v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const DefinedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const DefinedValue v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const EnumeratedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const EnumerationValue v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Import v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Module v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const NamedNumber v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const NamedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ObjectIdComponentValue v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const PrefixedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const SequenceOfType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const SequenceType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const SetOfType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const SetType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Tag v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const TaggedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const TaggingMode v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Type v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Value v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const double v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const int v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const long long v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::set<std::string> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::string v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<Assignment> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<Export> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<Import> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<NamedType> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<ObjectIdComponentValue> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<Type> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<Value> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<std::string> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}


  template <typename Base>
  inline
  asn1_parser::basic_symbol<Base>::~basic_symbol ()
  {
    clear ();
  }

  template <typename Base>
  inline
  void
  asn1_parser::basic_symbol<Base>::clear ()
  {
    // User destructor.
    symbol_number_type yytype = this->type_get ();
    basic_symbol<Base>& yysym = *this;
    (void) yysym;
    switch (yytype)
    {
   default:
      break;
    }

    // Type destructor.
    switch (yytype)
    {
      case 158: // ObjectClassAssignment
      case 194: // ObjectSetAssignment
      case 198: // ParameterizedAssignment
      case 199: // ParameterizedTypeAssignment
      case 200: // ParameterizedValueAssignment
      case 201: // ParameterizedValueSetTypeAssignment
      case 202: // ParameterizedObjectClassAssignment
      case 203: // ParameterizedObjectAssignment
      case 248: // Assignment
      case 257: // TypeAssignment
      case 258: // ValueAssignment
        value.template destroy< Assignment > ();
        break;

      case 260: // BuiltinType
        value.template destroy< BuiltinType > ();
        break;

      case 291: // ChoiceType
        value.template destroy< ChoiceType > ();
        break;

      case 301: // Class
        value.template destroy< Class > ();
        break;

      case 287: // ComponentType
        value.template destroy< ComponentType > ();
        break;

      case 284: // ComponentTypeLists
      case 285: // RootComponentTypeList
      case 286: // ComponentTypeList
        value.template destroy< ComponentTypeList > ();
        break;

      case 249: // DefinedType
      case 251: // ParameterizedType
        value.template destroy< DefinedType > ();
        break;

      case 250: // DefinedValue
        value.template destroy< DefinedValue > ();
        break;

      case 273: // EnumeratedType
      case 274: // Enumerations
      case 275: // Enumeration
        value.template destroy< EnumeratedType > ();
        break;

      case 276: // EnumerationItem
        value.template destroy< EnumerationValue > ();
        break;

      case 241: // SymbolsFromModule
        value.template destroy< Import > ();
        break;

      case 235: // ModuleBody
        value.template destroy< Module > ();
        break;

      case 271: // NamedNumber
        value.template destroy< NamedNumber > ();
        break;

      case 261: // NamedType
        value.template destroy< NamedType > ();
        break;

      case 305: // ObjIdComponents
      case 306: // NameForm
      case 307: // NumberForm
      case 308: // NameAndNumberForm
        value.template destroy< ObjectIdComponentValue > ();
        break;

      case 296: // PrefixedType
        value.template destroy< PrefixedType > ();
        break;

      case 288: // SequenceOfType
        value.template destroy< SequenceOfType > ();
        break;

      case 283: // SequenceType
        value.template destroy< SequenceType > ();
        break;

      case 290: // SetOfType
        value.template destroy< SetOfType > ();
        break;

      case 289: // SetType
        value.template destroy< SetType > ();
        break;

      case 298: // Tag
        value.template destroy< Tag > ();
        break;

      case 297: // TaggedType
        value.template destroy< TaggedType > ();
        break;

      case 233: // TagDefault
        value.template destroy< TaggingMode > ();
        break;

      case 254: // ActualParameter
      case 259: // Type
        value.template destroy< Type > ();
        break;

      case 262: // ValueWithoutTypeIdentifier
      case 263: // Value
      case 347: // SingleValue
        value.template destroy< Value > ();
        break;

      case 5: // realnumber
        value.template destroy< double > ();
        break;

      case 300: // ClassNumber
        value.template destroy< int > ();
        break;

      case 4: // number
      case 272: // SignedNumber
        value.template destroy< long long > ();
        break;

      case 204: // ParameterList
      case 205: // ParameterSeries
        value.template destroy< std::set<std::string> > ();
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 21: // objectreference
      case 23: // typefieldreference
      case 24: // valuefieldreference
      case 147: // GENERIC_IDENTIFIER_UPPERCASE
      case 148: // GENERIC_IDENTIFIER_LOWERCASE
      case 206: // Parameter
      case 212: // SimpleDefinedType
      case 224: // ModuleIdentifier
      case 242: // GlobalModuleReference
      case 245: // Symbol
      case 246: // Reference
      case 372: // typereference
      case 373: // identifier
      case 374: // valuereference
      case 375: // modulereference
      case 376: // objectclassreference
      case 377: // word
        value.template destroy< std::string > ();
        break;

      case 247: // AssignmentList
        value.template destroy< std::vector<Assignment> > ();
        break;

      case 236: // Exports
        value.template destroy< std::vector<Export> > ();
        break;

      case 238: // Imports
      case 239: // SymbolsImported
      case 240: // SymbolsFromModuleList
        value.template destroy< std::vector<Import> > ();
        break;

      case 292: // AlternativeTypeLists
      case 293: // RootAlternativeTypeList
      case 294: // AlternativeTypeList
        value.template destroy< std::vector<NamedType> > ();
        break;

      case 303: // ObjectIdentifierValue
      case 304: // ObjIdComponentsList
        value.template destroy< std::vector<ObjectIdComponentValue> > ();
        break;

      case 253: // ActualParameterList
        value.template destroy< std::vector<Type> > ();
        break;

      case 266: // SequenceOfValues
        value.template destroy< std::vector<Value> > ();
        break;

      case 244: // SymbolList
        value.template destroy< std::vector<std::string> > ();
        break;

      default:
        break;
    }

    Base::clear ();
  }

  template <typename Base>
  inline
  bool
  asn1_parser::basic_symbol<Base>::empty () const
  {
    return Base::type_get () == empty_symbol;
  }

  template <typename Base>
  inline
  void
  asn1_parser::basic_symbol<Base>::move (basic_symbol& s)
  {
    super_type::move(s);
      switch (this->type_get ())
    {
      case 158: // ObjectClassAssignment
      case 194: // ObjectSetAssignment
      case 198: // ParameterizedAssignment
      case 199: // ParameterizedTypeAssignment
      case 200: // ParameterizedValueAssignment
      case 201: // ParameterizedValueSetTypeAssignment
      case 202: // ParameterizedObjectClassAssignment
      case 203: // ParameterizedObjectAssignment
      case 248: // Assignment
      case 257: // TypeAssignment
      case 258: // ValueAssignment
        value.move< Assignment > (s.value);
        break;

      case 260: // BuiltinType
        value.move< BuiltinType > (s.value);
        break;

      case 291: // ChoiceType
        value.move< ChoiceType > (s.value);
        break;

      case 301: // Class
        value.move< Class > (s.value);
        break;

      case 287: // ComponentType
        value.move< ComponentType > (s.value);
        break;

      case 284: // ComponentTypeLists
      case 285: // RootComponentTypeList
      case 286: // ComponentTypeList
        value.move< ComponentTypeList > (s.value);
        break;

      case 249: // DefinedType
      case 251: // ParameterizedType
        value.move< DefinedType > (s.value);
        break;

      case 250: // DefinedValue
        value.move< DefinedValue > (s.value);
        break;

      case 273: // EnumeratedType
      case 274: // Enumerations
      case 275: // Enumeration
        value.move< EnumeratedType > (s.value);
        break;

      case 276: // EnumerationItem
        value.move< EnumerationValue > (s.value);
        break;

      case 241: // SymbolsFromModule
        value.move< Import > (s.value);
        break;

      case 235: // ModuleBody
        value.move< Module > (s.value);
        break;

      case 271: // NamedNumber
        value.move< NamedNumber > (s.value);
        break;

      case 261: // NamedType
        value.move< NamedType > (s.value);
        break;

      case 305: // ObjIdComponents
      case 306: // NameForm
      case 307: // NumberForm
      case 308: // NameAndNumberForm
        value.move< ObjectIdComponentValue > (s.value);
        break;

      case 296: // PrefixedType
        value.move< PrefixedType > (s.value);
        break;

      case 288: // SequenceOfType
        value.move< SequenceOfType > (s.value);
        break;

      case 283: // SequenceType
        value.move< SequenceType > (s.value);
        break;

      case 290: // SetOfType
        value.move< SetOfType > (s.value);
        break;

      case 289: // SetType
        value.move< SetType > (s.value);
        break;

      case 298: // Tag
        value.move< Tag > (s.value);
        break;

      case 297: // TaggedType
        value.move< TaggedType > (s.value);
        break;

      case 233: // TagDefault
        value.move< TaggingMode > (s.value);
        break;

      case 254: // ActualParameter
      case 259: // Type
        value.move< Type > (s.value);
        break;

      case 262: // ValueWithoutTypeIdentifier
      case 263: // Value
      case 347: // SingleValue
        value.move< Value > (s.value);
        break;

      case 5: // realnumber
        value.move< double > (s.value);
        break;

      case 300: // ClassNumber
        value.move< int > (s.value);
        break;

      case 4: // number
      case 272: // SignedNumber
        value.move< long long > (s.value);
        break;

      case 204: // ParameterList
      case 205: // ParameterSeries
        value.move< std::set<std::string> > (s.value);
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 21: // objectreference
      case 23: // typefieldreference
      case 24: // valuefieldreference
      case 147: // GENERIC_IDENTIFIER_UPPERCASE
      case 148: // GENERIC_IDENTIFIER_LOWERCASE
      case 206: // Parameter
      case 212: // SimpleDefinedType
      case 224: // ModuleIdentifier
      case 242: // GlobalModuleReference
      case 245: // Symbol
      case 246: // Reference
      case 372: // typereference
      case 373: // identifier
      case 374: // valuereference
      case 375: // modulereference
      case 376: // objectclassreference
      case 377: // word
        value.move< std::string > (s.value);
        break;

      case 247: // AssignmentList
        value.move< std::vector<Assignment> > (s.value);
        break;

      case 236: // Exports
        value.move< std::vector<Export> > (s.value);
        break;

      case 238: // Imports
      case 239: // SymbolsImported
      case 240: // SymbolsFromModuleList
        value.move< std::vector<Import> > (s.value);
        break;

      case 292: // AlternativeTypeLists
      case 293: // RootAlternativeTypeList
      case 294: // AlternativeTypeList
        value.move< std::vector<NamedType> > (s.value);
        break;

      case 303: // ObjectIdentifierValue
      case 304: // ObjIdComponentsList
        value.move< std::vector<ObjectIdComponentValue> > (s.value);
        break;

      case 253: // ActualParameterList
        value.move< std::vector<Type> > (s.value);
        break;

      case 266: // SequenceOfValues
        value.move< std::vector<Value> > (s.value);
        break;

      case 244: // SymbolList
        value.move< std::vector<std::string> > (s.value);
        break;

      default:
        break;
    }

    location = s.location;
  }

  // by_type.
  inline
  asn1_parser::by_type::by_type ()
    : type (empty_symbol)
  {}

  inline
  asn1_parser::by_type::by_type (const by_type& other)
    : type (other.type)
  {}

  inline
  asn1_parser::by_type::by_type (token_type t)
    : type (yytranslate_ (t))
  {}

  inline
  void
  asn1_parser::by_type::clear ()
  {
    type = empty_symbol;
  }

  inline
  void
  asn1_parser::by_type::move (by_type& that)
  {
    type = that.type;
    that.clear ();
  }

  inline
  int
  asn1_parser::by_type::type_get () const
  {
    return type;
  }

  inline
  asn1_parser::token_type
  asn1_parser::by_type::token () const
  {
    // YYTOKNUM[NUM] -- (External) token number corresponding to the
    // (internal) symbol number NUM (which must be that of a token).  */
    static
    const unsigned short int
    yytoken_number_[] =
    {
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405
    };
    return static_cast<token_type> (yytoken_number_[type]);
  }
  // Implementation of make_symbol for each symbol type.
  asn1_parser::symbol_type
  asn1_parser::make_END_OF_FILE (const location_type& l)
  {
    return symbol_type (token::END_OF_FILE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_comment (const location_type& l)
  {
    return symbol_type (token::comment, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_number (const long long& v, const location_type& l)
  {
    return symbol_type (token::number, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_realnumber (const double& v, const location_type& l)
  {
    return symbol_type (token::realnumber, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_bstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::bstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmlbstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::xmlbstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_hstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::hstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmlhstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::xmlhstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_cstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::cstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmlcstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::xmlcstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_simplestring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::simplestring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmltstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::xmltstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_psname (const location_type& l)
  {
    return symbol_type (token::psname, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_encodingreference (const location_type& l)
  {
    return symbol_type (token::encodingreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_integerUnicodeLabel (const location_type& l)
  {
    return symbol_type (token::integerUnicodeLabel, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_tstring (const location_type& l)
  {
    return symbol_type (token::tstring, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_objectreference (const std::string& v, const location_type& l)
  {
    return symbol_type (token::objectreference, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_objectsetreference (const location_type& l)
  {
    return symbol_type (token::objectsetreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_typefieldreference (const std::string& v, const location_type& l)
  {
    return symbol_type (token::typefieldreference, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_valuefieldreference (const std::string& v, const location_type& l)
  {
    return symbol_type (token::valuefieldreference, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_valuesetfieldreference (const location_type& l)
  {
    return symbol_type (token::valuesetfieldreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_objectfieldreference (const location_type& l)
  {
    return symbol_type (token::objectfieldreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_objectsetfieldreference (const location_type& l)
  {
    return symbol_type (token::objectsetfieldreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ABSENT (const location_type& l)
  {
    return symbol_type (token::ABSENT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ABSTRACT_SYNTAX (const location_type& l)
  {
    return symbol_type (token::ABSTRACT_SYNTAX, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ALL (const location_type& l)
  {
    return symbol_type (token::ALL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_APPLICATION (const location_type& l)
  {
    return symbol_type (token::APPLICATION, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ASN_NULL (const location_type& l)
  {
    return symbol_type (token::ASN_NULL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_AUTOMATIC (const location_type& l)
  {
    return symbol_type (token::AUTOMATIC, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BEGIN (const location_type& l)
  {
    return symbol_type (token::BEGIN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BIT (const location_type& l)
  {
    return symbol_type (token::BIT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BMPString (const location_type& l)
  {
    return symbol_type (token::BMPString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BOOLEAN (const location_type& l)
  {
    return symbol_type (token::BOOLEAN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BY (const location_type& l)
  {
    return symbol_type (token::BY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CHARACTER (const location_type& l)
  {
    return symbol_type (token::CHARACTER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CHOICE (const location_type& l)
  {
    return symbol_type (token::CHOICE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CLASS (const location_type& l)
  {
    return symbol_type (token::CLASS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_COMPONENT (const location_type& l)
  {
    return symbol_type (token::COMPONENT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_COMPONENTS (const location_type& l)
  {
    return symbol_type (token::COMPONENTS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CONSTRAINED (const location_type& l)
  {
    return symbol_type (token::CONSTRAINED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CONTAINING (const location_type& l)
  {
    return symbol_type (token::CONTAINING, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DATE (const location_type& l)
  {
    return symbol_type (token::DATE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DATE_TIME (const location_type& l)
  {
    return symbol_type (token::DATE_TIME, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DEFAULT (const location_type& l)
  {
    return symbol_type (token::DEFAULT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DEFINITIONS (const location_type& l)
  {
    return symbol_type (token::DEFINITIONS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DURATION (const location_type& l)
  {
    return symbol_type (token::DURATION, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EMBEDDED (const location_type& l)
  {
    return symbol_type (token::EMBEDDED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ENCODED (const location_type& l)
  {
    return symbol_type (token::ENCODED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ENCODING_CONTROL (const location_type& l)
  {
    return symbol_type (token::ENCODING_CONTROL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_END (const location_type& l)
  {
    return symbol_type (token::END, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ENUMERATED (const location_type& l)
  {
    return symbol_type (token::ENUMERATED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXCEPT (const location_type& l)
  {
    return symbol_type (token::EXCEPT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXPLICIT (const location_type& l)
  {
    return symbol_type (token::EXPLICIT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXPORTS (const location_type& l)
  {
    return symbol_type (token::EXPORTS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXTENSIBILITY (const location_type& l)
  {
    return symbol_type (token::EXTENSIBILITY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXTERNAL (const location_type& l)
  {
    return symbol_type (token::EXTERNAL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_FALSE (const location_type& l)
  {
    return symbol_type (token::FALSE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_FROM (const location_type& l)
  {
    return symbol_type (token::FROM, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GeneralizedTime (const location_type& l)
  {
    return symbol_type (token::GeneralizedTime, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GeneralString (const location_type& l)
  {
    return symbol_type (token::GeneralString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GraphicString (const location_type& l)
  {
    return symbol_type (token::GraphicString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IA5String (const location_type& l)
  {
    return symbol_type (token::IA5String, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IDENTIFIER (const location_type& l)
  {
    return symbol_type (token::IDENTIFIER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IMPLICIT (const location_type& l)
  {
    return symbol_type (token::IMPLICIT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IMPLIED (const location_type& l)
  {
    return symbol_type (token::IMPLIED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IMPORTS (const location_type& l)
  {
    return symbol_type (token::IMPORTS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INCLUDES (const location_type& l)
  {
    return symbol_type (token::INCLUDES, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INSTANCE (const location_type& l)
  {
    return symbol_type (token::INSTANCE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INSTRUCTIONS (const location_type& l)
  {
    return symbol_type (token::INSTRUCTIONS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INTEGER (const location_type& l)
  {
    return symbol_type (token::INTEGER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INTERSECTION (const location_type& l)
  {
    return symbol_type (token::INTERSECTION, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ISO646String (const location_type& l)
  {
    return symbol_type (token::ISO646String, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_MAX (const location_type& l)
  {
    return symbol_type (token::MAX, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_MIN (const location_type& l)
  {
    return symbol_type (token::MIN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_MINUS_INFINITY (const location_type& l)
  {
    return symbol_type (token::MINUS_INFINITY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_NOT_A_NUMBER (const location_type& l)
  {
    return symbol_type (token::NOT_A_NUMBER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_NumericString (const location_type& l)
  {
    return symbol_type (token::NumericString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OBJECT (const location_type& l)
  {
    return symbol_type (token::OBJECT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ObjectDescriptor (const location_type& l)
  {
    return symbol_type (token::ObjectDescriptor, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OCTET (const location_type& l)
  {
    return symbol_type (token::OCTET, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OF (const location_type& l)
  {
    return symbol_type (token::OF, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OID_IRI (const location_type& l)
  {
    return symbol_type (token::OID_IRI, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OPTIONAL (const location_type& l)
  {
    return symbol_type (token::OPTIONAL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PATTERN (const location_type& l)
  {
    return symbol_type (token::PATTERN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PDV (const location_type& l)
  {
    return symbol_type (token::PDV, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PLUS_INFINITY (const location_type& l)
  {
    return symbol_type (token::PLUS_INFINITY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PRESENT (const location_type& l)
  {
    return symbol_type (token::PRESENT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PrintableString (const location_type& l)
  {
    return symbol_type (token::PrintableString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PRIVATE (const location_type& l)
  {
    return symbol_type (token::PRIVATE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_REAL (const location_type& l)
  {
    return symbol_type (token::REAL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_RELATIVE_OID (const location_type& l)
  {
    return symbol_type (token::RELATIVE_OID, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_RELATIVE_OID_IRI (const location_type& l)
  {
    return symbol_type (token::RELATIVE_OID_IRI, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SEQUENCE (const location_type& l)
  {
    return symbol_type (token::SEQUENCE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SET (const location_type& l)
  {
    return symbol_type (token::SET, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SETTINGS (const location_type& l)
  {
    return symbol_type (token::SETTINGS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SIZE (const location_type& l)
  {
    return symbol_type (token::SIZE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_STRING (const location_type& l)
  {
    return symbol_type (token::STRING, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SYNTAX (const location_type& l)
  {
    return symbol_type (token::SYNTAX, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_T61String (const location_type& l)
  {
    return symbol_type (token::T61String, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TAGS (const location_type& l)
  {
    return symbol_type (token::TAGS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TeletexString (const location_type& l)
  {
    return symbol_type (token::TeletexString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TIME (const location_type& l)
  {
    return symbol_type (token::TIME, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TIME_OF_DAY (const location_type& l)
  {
    return symbol_type (token::TIME_OF_DAY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TRUE (const location_type& l)
  {
    return symbol_type (token::TRUE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TYPE_IDENTIFIER (const location_type& l)
  {
    return symbol_type (token::TYPE_IDENTIFIER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UNION (const location_type& l)
  {
    return symbol_type (token::UNION, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UNIQUE (const location_type& l)
  {
    return symbol_type (token::UNIQUE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UNIVERSAL (const location_type& l)
  {
    return symbol_type (token::UNIVERSAL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UniversalString (const location_type& l)
  {
    return symbol_type (token::UniversalString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UTCTime (const location_type& l)
  {
    return symbol_type (token::UTCTime, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UTF8String (const location_type& l)
  {
    return symbol_type (token::UTF8String, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_VideotexString (const location_type& l)
  {
    return symbol_type (token::VideotexString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_VisibleString (const location_type& l)
  {
    return symbol_type (token::VisibleString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_WITH (const location_type& l)
  {
    return symbol_type (token::WITH, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DEFINED_AS (const location_type& l)
  {
    return symbol_type (token::DEFINED_AS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ELIPSIS (const location_type& l)
  {
    return symbol_type (token::ELIPSIS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_RANGE (const location_type& l)
  {
    return symbol_type (token::RANGE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OPEN_BRACE (const location_type& l)
  {
    return symbol_type (token::OPEN_BRACE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CLOSE_BRACE (const location_type& l)
  {
    return symbol_type (token::CLOSE_BRACE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OPEN_PARENTHESIS (const location_type& l)
  {
    return symbol_type (token::OPEN_PARENTHESIS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CLOSE_PARENTHESIS (const location_type& l)
  {
    return symbol_type (token::CLOSE_PARENTHESIS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OPEN_SQUARE_BRACKET (const location_type& l)
  {
    return symbol_type (token::OPEN_SQUARE_BRACKET, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CLOSE_SQUARE_BRACKET (const location_type& l)
  {
    return symbol_type (token::CLOSE_SQUARE_BRACKET, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_LESS_THAN (const location_type& l)
  {
    return symbol_type (token::LESS_THAN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GREATER_THAN (const location_type& l)
  {
    return symbol_type (token::GREATER_THAN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXCLAMATION_MARK (const location_type& l)
  {
    return symbol_type (token::EXCLAMATION_MARK, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_QUOTATION_MARK (const location_type& l)
  {
    return symbol_type (token::QUOTATION_MARK, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_AMPERSAND (const location_type& l)
  {
    return symbol_type (token::AMPERSAND, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_APOSTROPHE (const location_type& l)
  {
    return symbol_type (token::APOSTROPHE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ASTERISK (const location_type& l)
  {
    return symbol_type (token::ASTERISK, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_COMMA (const location_type& l)
  {
    return symbol_type (token::COMMA, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_FULL_STOP (const location_type& l)
  {
    return symbol_type (token::FULL_STOP, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_HYPHEN_MINUS (const location_type& l)
  {
    return symbol_type (token::HYPHEN_MINUS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SOLIDUS (const location_type& l)
  {
    return symbol_type (token::SOLIDUS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_COLON (const location_type& l)
  {
    return symbol_type (token::COLON, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SEMICOLON (const location_type& l)
  {
    return symbol_type (token::SEMICOLON, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EQUALS_SIGN (const location_type& l)
  {
    return symbol_type (token::EQUALS_SIGN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_AT (const location_type& l)
  {
    return symbol_type (token::AT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_VERTICAL_LINE (const location_type& l)
  {
    return symbol_type (token::VERTICAL_LINE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ACCENT (const location_type& l)
  {
    return symbol_type (token::ACCENT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PLUS (const location_type& l)
  {
    return symbol_type (token::PLUS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_STAR (const location_type& l)
  {
    return symbol_type (token::STAR, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GENERIC_IDENTIFIER_UPPERCASE (const std::string& v, const location_type& l)
  {
    return symbol_type (token::GENERIC_IDENTIFIER_UPPERCASE, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GENERIC_IDENTIFIER_LOWERCASE (const std::string& v, const location_type& l)
  {
    return symbol_type (token::GENERIC_IDENTIFIER_LOWERCASE, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GENERIC_INTEGER (const location_type& l)
  {
    return symbol_type (token::GENERIC_INTEGER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmlasn1typename (const location_type& l)
  {
    return symbol_type (token::xmlasn1typename, l);
  }



} // yy
#line 4180 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:408





// User implementation prologue.

#line 4188 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:412
// Unqualified %code blocks.
#line 15 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:413

    struct Context
    {
        const char* cursor;
        yy::location location;

        Asn1Tree asn1_tree;
    };
    void yy::asn1_parser::error(const location_type& l, const std::string& m)
    {
        std::cerr << (l.begin.filename ? l.begin.filename->c_str() : "(undefined)");
        std::cerr << ':' << l.begin.line << ':' << l.begin.column << '-' << l.end.column << ": " << m << '\n';
    }

    namespace yy { asn1_parser::symbol_type yylex(Context& c); }

#line 4207 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:413


#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> // FIXME: INFRINGES ON USER NAME SPACE.
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K].location)
/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

# ifndef YYLLOC_DEFAULT
#  define YYLLOC_DEFAULT(Current, Rhs, N)                               \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).begin  = YYRHSLOC (Rhs, 1).begin;                   \
          (Current).end    = YYRHSLOC (Rhs, N).end;                     \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).begin = (Current).end = YYRHSLOC (Rhs, 0).end;      \
        }                                                               \
    while (/*CONSTCOND*/ false)
# endif


// Suppress unused-variable warnings by "using" E.
#define YYUSE(E) ((void) (E))

// Enable debugging if requested.
#if YYDEBUG

// A pseudo ostream that takes yydebug_ into account.
# define YYCDEBUG if (yydebug_) (*yycdebug_)

# define YY_SYMBOL_PRINT(Title, Symbol)         \
  do {                                          \
    if (yydebug_)                               \
    {                                           \
      *yycdebug_ << Title << ' ';               \
      yy_print_ (*yycdebug_, Symbol);           \
      *yycdebug_ << std::endl;                  \
    }                                           \
  } while (false)

# define YY_REDUCE_PRINT(Rule)          \
  do {                                  \
    if (yydebug_)                       \
      yy_reduce_print_ (Rule);          \
  } while (false)

# define YY_STACK_PRINT()               \
  do {                                  \
    if (yydebug_)                       \
      yystack_print_ ();                \
  } while (false)

#else // !YYDEBUG

# define YYCDEBUG if (false) std::cerr
# define YY_SYMBOL_PRINT(Title, Symbol)  YYUSE(Symbol)
# define YY_REDUCE_PRINT(Rule)           static_cast<void>(0)
# define YY_STACK_PRINT()                static_cast<void>(0)

#endif // !YYDEBUG

#define yyerrok         (yyerrstatus_ = 0)
#define yyclearin       (yyla.clear ())

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYRECOVERING()  (!!yyerrstatus_)


namespace yy {
#line 4293 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:479

  /* Return YYSTR after stripping away unnecessary quotes and
     backslashes, so that it's suitable for yyerror.  The heuristic is
     that double-quoting is unnecessary unless the string contains an
     apostrophe, a comma, or backslash (other than backslash-backslash).
     YYSTR is taken from yytname.  */
  std::string
  asn1_parser::yytnamerr_ (const char *yystr)
  {
    if (*yystr == '"')
      {
        std::string yyr = "";
        char const *yyp = yystr;

        for (;;)
          switch (*++yyp)
            {
            case '\'':
            case ',':
              goto do_not_strip_quotes;

            case '\\':
              if (*++yyp != '\\')
                goto do_not_strip_quotes;
              // Fall through.
            default:
              yyr += *yyp;
              break;

            case '"':
              return yyr;
            }
      do_not_strip_quotes: ;
      }

    return yystr;
  }


  /// Build a parser object.
  asn1_parser::asn1_parser (Context& context_yyarg)
    :
#if YYDEBUG
      yydebug_ (false),
      yycdebug_ (&std::cerr),
#endif
      context (context_yyarg)
  {}

  asn1_parser::~asn1_parser ()
  {}


  /*---------------.
  | Symbol types.  |
  `---------------*/



  // by_state.
  inline
  asn1_parser::by_state::by_state ()
    : state (empty_state)
  {}

  inline
  asn1_parser::by_state::by_state (const by_state& other)
    : state (other.state)
  {}

  inline
  void
  asn1_parser::by_state::clear ()
  {
    state = empty_state;
  }

  inline
  void
  asn1_parser::by_state::move (by_state& that)
  {
    state = that.state;
    that.clear ();
  }

  inline
  asn1_parser::by_state::by_state (state_type s)
    : state (s)
  {}

  inline
  asn1_parser::symbol_number_type
  asn1_parser::by_state::type_get () const
  {
    if (state == empty_state)
      return empty_symbol;
    else
      return yystos_[state];
  }

  inline
  asn1_parser::stack_symbol_type::stack_symbol_type ()
  {}


  inline
  asn1_parser::stack_symbol_type::stack_symbol_type (state_type s, symbol_type& that)
    : super_type (s, that.location)
  {
      switch (that.type_get ())
    {
      case 158: // ObjectClassAssignment
      case 194: // ObjectSetAssignment
      case 198: // ParameterizedAssignment
      case 199: // ParameterizedTypeAssignment
      case 200: // ParameterizedValueAssignment
      case 201: // ParameterizedValueSetTypeAssignment
      case 202: // ParameterizedObjectClassAssignment
      case 203: // ParameterizedObjectAssignment
      case 248: // Assignment
      case 257: // TypeAssignment
      case 258: // ValueAssignment
        value.move< Assignment > (that.value);
        break;

      case 260: // BuiltinType
        value.move< BuiltinType > (that.value);
        break;

      case 291: // ChoiceType
        value.move< ChoiceType > (that.value);
        break;

      case 301: // Class
        value.move< Class > (that.value);
        break;

      case 287: // ComponentType
        value.move< ComponentType > (that.value);
        break;

      case 284: // ComponentTypeLists
      case 285: // RootComponentTypeList
      case 286: // ComponentTypeList
        value.move< ComponentTypeList > (that.value);
        break;

      case 249: // DefinedType
      case 251: // ParameterizedType
        value.move< DefinedType > (that.value);
        break;

      case 250: // DefinedValue
        value.move< DefinedValue > (that.value);
        break;

      case 273: // EnumeratedType
      case 274: // Enumerations
      case 275: // Enumeration
        value.move< EnumeratedType > (that.value);
        break;

      case 276: // EnumerationItem
        value.move< EnumerationValue > (that.value);
        break;

      case 241: // SymbolsFromModule
        value.move< Import > (that.value);
        break;

      case 235: // ModuleBody
        value.move< Module > (that.value);
        break;

      case 271: // NamedNumber
        value.move< NamedNumber > (that.value);
        break;

      case 261: // NamedType
        value.move< NamedType > (that.value);
        break;

      case 305: // ObjIdComponents
      case 306: // NameForm
      case 307: // NumberForm
      case 308: // NameAndNumberForm
        value.move< ObjectIdComponentValue > (that.value);
        break;

      case 296: // PrefixedType
        value.move< PrefixedType > (that.value);
        break;

      case 288: // SequenceOfType
        value.move< SequenceOfType > (that.value);
        break;

      case 283: // SequenceType
        value.move< SequenceType > (that.value);
        break;

      case 290: // SetOfType
        value.move< SetOfType > (that.value);
        break;

      case 289: // SetType
        value.move< SetType > (that.value);
        break;

      case 298: // Tag
        value.move< Tag > (that.value);
        break;

      case 297: // TaggedType
        value.move< TaggedType > (that.value);
        break;

      case 233: // TagDefault
        value.move< TaggingMode > (that.value);
        break;

      case 254: // ActualParameter
      case 259: // Type
        value.move< Type > (that.value);
        break;

      case 262: // ValueWithoutTypeIdentifier
      case 263: // Value
      case 347: // SingleValue
        value.move< Value > (that.value);
        break;

      case 5: // realnumber
        value.move< double > (that.value);
        break;

      case 300: // ClassNumber
        value.move< int > (that.value);
        break;

      case 4: // number
      case 272: // SignedNumber
        value.move< long long > (that.value);
        break;

      case 204: // ParameterList
      case 205: // ParameterSeries
        value.move< std::set<std::string> > (that.value);
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 21: // objectreference
      case 23: // typefieldreference
      case 24: // valuefieldreference
      case 147: // GENERIC_IDENTIFIER_UPPERCASE
      case 148: // GENERIC_IDENTIFIER_LOWERCASE
      case 206: // Parameter
      case 212: // SimpleDefinedType
      case 224: // ModuleIdentifier
      case 242: // GlobalModuleReference
      case 245: // Symbol
      case 246: // Reference
      case 372: // typereference
      case 373: // identifier
      case 374: // valuereference
      case 375: // modulereference
      case 376: // objectclassreference
      case 377: // word
        value.move< std::string > (that.value);
        break;

      case 247: // AssignmentList
        value.move< std::vector<Assignment> > (that.value);
        break;

      case 236: // Exports
        value.move< std::vector<Export> > (that.value);
        break;

      case 238: // Imports
      case 239: // SymbolsImported
      case 240: // SymbolsFromModuleList
        value.move< std::vector<Import> > (that.value);
        break;

      case 292: // AlternativeTypeLists
      case 293: // RootAlternativeTypeList
      case 294: // AlternativeTypeList
        value.move< std::vector<NamedType> > (that.value);
        break;

      case 303: // ObjectIdentifierValue
      case 304: // ObjIdComponentsList
        value.move< std::vector<ObjectIdComponentValue> > (that.value);
        break;

      case 253: // ActualParameterList
        value.move< std::vector<Type> > (that.value);
        break;

      case 266: // SequenceOfValues
        value.move< std::vector<Value> > (that.value);
        break;

      case 244: // SymbolList
        value.move< std::vector<std::string> > (that.value);
        break;

      default:
        break;
    }

    // that is emptied.
    that.type = empty_symbol;
  }

  inline
  asn1_parser::stack_symbol_type&
  asn1_parser::stack_symbol_type::operator= (const stack_symbol_type& that)
  {
    state = that.state;
      switch (that.type_get ())
    {
      case 158: // ObjectClassAssignment
      case 194: // ObjectSetAssignment
      case 198: // ParameterizedAssignment
      case 199: // ParameterizedTypeAssignment
      case 200: // ParameterizedValueAssignment
      case 201: // ParameterizedValueSetTypeAssignment
      case 202: // ParameterizedObjectClassAssignment
      case 203: // ParameterizedObjectAssignment
      case 248: // Assignment
      case 257: // TypeAssignment
      case 258: // ValueAssignment
        value.copy< Assignment > (that.value);
        break;

      case 260: // BuiltinType
        value.copy< BuiltinType > (that.value);
        break;

      case 291: // ChoiceType
        value.copy< ChoiceType > (that.value);
        break;

      case 301: // Class
        value.copy< Class > (that.value);
        break;

      case 287: // ComponentType
        value.copy< ComponentType > (that.value);
        break;

      case 284: // ComponentTypeLists
      case 285: // RootComponentTypeList
      case 286: // ComponentTypeList
        value.copy< ComponentTypeList > (that.value);
        break;

      case 249: // DefinedType
      case 251: // ParameterizedType
        value.copy< DefinedType > (that.value);
        break;

      case 250: // DefinedValue
        value.copy< DefinedValue > (that.value);
        break;

      case 273: // EnumeratedType
      case 274: // Enumerations
      case 275: // Enumeration
        value.copy< EnumeratedType > (that.value);
        break;

      case 276: // EnumerationItem
        value.copy< EnumerationValue > (that.value);
        break;

      case 241: // SymbolsFromModule
        value.copy< Import > (that.value);
        break;

      case 235: // ModuleBody
        value.copy< Module > (that.value);
        break;

      case 271: // NamedNumber
        value.copy< NamedNumber > (that.value);
        break;

      case 261: // NamedType
        value.copy< NamedType > (that.value);
        break;

      case 305: // ObjIdComponents
      case 306: // NameForm
      case 307: // NumberForm
      case 308: // NameAndNumberForm
        value.copy< ObjectIdComponentValue > (that.value);
        break;

      case 296: // PrefixedType
        value.copy< PrefixedType > (that.value);
        break;

      case 288: // SequenceOfType
        value.copy< SequenceOfType > (that.value);
        break;

      case 283: // SequenceType
        value.copy< SequenceType > (that.value);
        break;

      case 290: // SetOfType
        value.copy< SetOfType > (that.value);
        break;

      case 289: // SetType
        value.copy< SetType > (that.value);
        break;

      case 298: // Tag
        value.copy< Tag > (that.value);
        break;

      case 297: // TaggedType
        value.copy< TaggedType > (that.value);
        break;

      case 233: // TagDefault
        value.copy< TaggingMode > (that.value);
        break;

      case 254: // ActualParameter
      case 259: // Type
        value.copy< Type > (that.value);
        break;

      case 262: // ValueWithoutTypeIdentifier
      case 263: // Value
      case 347: // SingleValue
        value.copy< Value > (that.value);
        break;

      case 5: // realnumber
        value.copy< double > (that.value);
        break;

      case 300: // ClassNumber
        value.copy< int > (that.value);
        break;

      case 4: // number
      case 272: // SignedNumber
        value.copy< long long > (that.value);
        break;

      case 204: // ParameterList
      case 205: // ParameterSeries
        value.copy< std::set<std::string> > (that.value);
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 21: // objectreference
      case 23: // typefieldreference
      case 24: // valuefieldreference
      case 147: // GENERIC_IDENTIFIER_UPPERCASE
      case 148: // GENERIC_IDENTIFIER_LOWERCASE
      case 206: // Parameter
      case 212: // SimpleDefinedType
      case 224: // ModuleIdentifier
      case 242: // GlobalModuleReference
      case 245: // Symbol
      case 246: // Reference
      case 372: // typereference
      case 373: // identifier
      case 374: // valuereference
      case 375: // modulereference
      case 376: // objectclassreference
      case 377: // word
        value.copy< std::string > (that.value);
        break;

      case 247: // AssignmentList
        value.copy< std::vector<Assignment> > (that.value);
        break;

      case 236: // Exports
        value.copy< std::vector<Export> > (that.value);
        break;

      case 238: // Imports
      case 239: // SymbolsImported
      case 240: // SymbolsFromModuleList
        value.copy< std::vector<Import> > (that.value);
        break;

      case 292: // AlternativeTypeLists
      case 293: // RootAlternativeTypeList
      case 294: // AlternativeTypeList
        value.copy< std::vector<NamedType> > (that.value);
        break;

      case 303: // ObjectIdentifierValue
      case 304: // ObjIdComponentsList
        value.copy< std::vector<ObjectIdComponentValue> > (that.value);
        break;

      case 253: // ActualParameterList
        value.copy< std::vector<Type> > (that.value);
        break;

      case 266: // SequenceOfValues
        value.copy< std::vector<Value> > (that.value);
        break;

      case 244: // SymbolList
        value.copy< std::vector<std::string> > (that.value);
        break;

      default:
        break;
    }

    location = that.location;
    return *this;
  }


  template <typename Base>
  inline
  void
  asn1_parser::yy_destroy_ (const char* yymsg, basic_symbol<Base>& yysym) const
  {
    if (yymsg)
      YY_SYMBOL_PRINT (yymsg, yysym);
  }

#if YYDEBUG
  template <typename Base>
  void
  asn1_parser::yy_print_ (std::ostream& yyo,
                                     const basic_symbol<Base>& yysym) const
  {
    std::ostream& yyoutput = yyo;
    YYUSE (yyoutput);
    symbol_number_type yytype = yysym.type_get ();
    // Avoid a (spurious) G++ 4.8 warning about "array subscript is
    // below array bounds".
    if (yysym.empty ())
      std::abort ();
    yyo << (yytype < yyntokens_ ? "token" : "nterm")
        << ' ' << yytname_[yytype] << " ("
        << yysym.location << ": ";
    YYUSE (yytype);
    yyo << ')';
  }
#endif

  inline
  void
  asn1_parser::yypush_ (const char* m, state_type s, symbol_type& sym)
  {
    stack_symbol_type t (s, sym);
    yypush_ (m, t);
  }

  inline
  void
  asn1_parser::yypush_ (const char* m, stack_symbol_type& s)
  {
    if (m)
      YY_SYMBOL_PRINT (m, s);
    yystack_.push (s);
  }

  inline
  void
  asn1_parser::yypop_ (unsigned int n)
  {
    yystack_.pop (n);
  }

#if YYDEBUG
  std::ostream&
  asn1_parser::debug_stream () const
  {
    return *yycdebug_;
  }

  void
  asn1_parser::set_debug_stream (std::ostream& o)
  {
    yycdebug_ = &o;
  }


  asn1_parser::debug_level_type
  asn1_parser::debug_level () const
  {
    return yydebug_;
  }

  void
  asn1_parser::set_debug_level (debug_level_type l)
  {
    yydebug_ = l;
  }
#endif // YYDEBUG

  inline asn1_parser::state_type
  asn1_parser::yy_lr_goto_state_ (state_type yystate, int yysym)
  {
    int yyr = yypgoto_[yysym - yyntokens_] + yystate;
    if (0 <= yyr && yyr <= yylast_ && yycheck_[yyr] == yystate)
      return yytable_[yyr];
    else
      return yydefgoto_[yysym - yyntokens_];
  }

  inline bool
  asn1_parser::yy_pact_value_is_default_ (int yyvalue)
  {
    return yyvalue == yypact_ninf_;
  }

  inline bool
  asn1_parser::yy_table_value_is_error_ (int yyvalue)
  {
    return yyvalue == yytable_ninf_;
  }

  int
  asn1_parser::parse ()
  {
    // State.
    int yyn;
    /// Length of the RHS of the rule being reduced.
    int yylen = 0;

    // Error handling.
    int yynerrs_ = 0;
    int yyerrstatus_ = 0;

    /// The lookahead symbol.
    symbol_type yyla;

    /// The locations where the error started and ended.
    stack_symbol_type yyerror_range[3];

    /// The return value of parse ().
    int yyresult;

    // FIXME: This shoud be completely indented.  It is not yet to
    // avoid gratuitous conflicts when merging into the master branch.
    try
      {
    YYCDEBUG << "Starting parse" << std::endl;


    /* Initialize the stack.  The initial state will be set in
       yynewstate, since the latter expects the semantical and the
       location values to have been already stored, initialize these
       stacks with a primary value.  */
    yystack_.clear ();
    yypush_ (YY_NULLPTR, 0, yyla);

    // A new symbol was pushed on the stack.
  yynewstate:
    YYCDEBUG << "Entering state " << yystack_[0].state << std::endl;

    // Accept?
    if (yystack_[0].state == yyfinal_)
      goto yyacceptlab;

    goto yybackup;

    // Backup.
  yybackup:

    // Try to take a decision without lookahead.
    yyn = yypact_[yystack_[0].state];
    if (yy_pact_value_is_default_ (yyn))
      goto yydefault;

    // Read a lookahead token.
    if (yyla.empty ())
      {
        YYCDEBUG << "Reading a token: ";
        try
          {
            symbol_type yylookahead (yylex (context));
            yyla.move (yylookahead);
          }
        catch (const syntax_error& yyexc)
          {
            error (yyexc);
            goto yyerrlab1;
          }
      }
    YY_SYMBOL_PRINT ("Next token is", yyla);

    /* If the proper action on seeing token YYLA.TYPE is to reduce or
       to detect an error, take that action.  */
    yyn += yyla.type_get ();
    if (yyn < 0 || yylast_ < yyn || yycheck_[yyn] != yyla.type_get ())
      goto yydefault;

    // Reduce or error.
    yyn = yytable_[yyn];
    if (yyn <= 0)
      {
        if (yy_table_value_is_error_ (yyn))
          goto yyerrlab;
        yyn = -yyn;
        goto yyreduce;
      }

    // Count tokens shifted since error; after three, turn off error status.
    if (yyerrstatus_)
      --yyerrstatus_;

    // Shift the lookahead token.
    yypush_ ("Shifting", yyn, yyla);
    goto yynewstate;

  /*-----------------------------------------------------------.
  | yydefault -- do the default action for the current state.  |
  `-----------------------------------------------------------*/
  yydefault:
    yyn = yydefact_[yystack_[0].state];
    if (yyn == 0)
      goto yyerrlab;
    goto yyreduce;

  /*-----------------------------.
  | yyreduce -- Do a reduction.  |
  `-----------------------------*/
  yyreduce:
    yylen = yyr2_[yyn];
    {
      stack_symbol_type yylhs;
      yylhs.state = yy_lr_goto_state_(yystack_[yylen].state, yyr1_[yyn]);
      /* Variants are always initialized to an empty instance of the
         correct type. The default '$$ = $1' action is NOT applied
         when using variants.  */
        switch (yyr1_[yyn])
    {
      case 158: // ObjectClassAssignment
      case 194: // ObjectSetAssignment
      case 198: // ParameterizedAssignment
      case 199: // ParameterizedTypeAssignment
      case 200: // ParameterizedValueAssignment
      case 201: // ParameterizedValueSetTypeAssignment
      case 202: // ParameterizedObjectClassAssignment
      case 203: // ParameterizedObjectAssignment
      case 248: // Assignment
      case 257: // TypeAssignment
      case 258: // ValueAssignment
        yylhs.value.build< Assignment > ();
        break;

      case 260: // BuiltinType
        yylhs.value.build< BuiltinType > ();
        break;

      case 291: // ChoiceType
        yylhs.value.build< ChoiceType > ();
        break;

      case 301: // Class
        yylhs.value.build< Class > ();
        break;

      case 287: // ComponentType
        yylhs.value.build< ComponentType > ();
        break;

      case 284: // ComponentTypeLists
      case 285: // RootComponentTypeList
      case 286: // ComponentTypeList
        yylhs.value.build< ComponentTypeList > ();
        break;

      case 249: // DefinedType
      case 251: // ParameterizedType
        yylhs.value.build< DefinedType > ();
        break;

      case 250: // DefinedValue
        yylhs.value.build< DefinedValue > ();
        break;

      case 273: // EnumeratedType
      case 274: // Enumerations
      case 275: // Enumeration
        yylhs.value.build< EnumeratedType > ();
        break;

      case 276: // EnumerationItem
        yylhs.value.build< EnumerationValue > ();
        break;

      case 241: // SymbolsFromModule
        yylhs.value.build< Import > ();
        break;

      case 235: // ModuleBody
        yylhs.value.build< Module > ();
        break;

      case 271: // NamedNumber
        yylhs.value.build< NamedNumber > ();
        break;

      case 261: // NamedType
        yylhs.value.build< NamedType > ();
        break;

      case 305: // ObjIdComponents
      case 306: // NameForm
      case 307: // NumberForm
      case 308: // NameAndNumberForm
        yylhs.value.build< ObjectIdComponentValue > ();
        break;

      case 296: // PrefixedType
        yylhs.value.build< PrefixedType > ();
        break;

      case 288: // SequenceOfType
        yylhs.value.build< SequenceOfType > ();
        break;

      case 283: // SequenceType
        yylhs.value.build< SequenceType > ();
        break;

      case 290: // SetOfType
        yylhs.value.build< SetOfType > ();
        break;

      case 289: // SetType
        yylhs.value.build< SetType > ();
        break;

      case 298: // Tag
        yylhs.value.build< Tag > ();
        break;

      case 297: // TaggedType
        yylhs.value.build< TaggedType > ();
        break;

      case 233: // TagDefault
        yylhs.value.build< TaggingMode > ();
        break;

      case 254: // ActualParameter
      case 259: // Type
        yylhs.value.build< Type > ();
        break;

      case 262: // ValueWithoutTypeIdentifier
      case 263: // Value
      case 347: // SingleValue
        yylhs.value.build< Value > ();
        break;

      case 5: // realnumber
        yylhs.value.build< double > ();
        break;

      case 300: // ClassNumber
        yylhs.value.build< int > ();
        break;

      case 4: // number
      case 272: // SignedNumber
        yylhs.value.build< long long > ();
        break;

      case 204: // ParameterList
      case 205: // ParameterSeries
        yylhs.value.build< std::set<std::string> > ();
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 21: // objectreference
      case 23: // typefieldreference
      case 24: // valuefieldreference
      case 147: // GENERIC_IDENTIFIER_UPPERCASE
      case 148: // GENERIC_IDENTIFIER_LOWERCASE
      case 206: // Parameter
      case 212: // SimpleDefinedType
      case 224: // ModuleIdentifier
      case 242: // GlobalModuleReference
      case 245: // Symbol
      case 246: // Reference
      case 372: // typereference
      case 373: // identifier
      case 374: // valuereference
      case 375: // modulereference
      case 376: // objectclassreference
      case 377: // word
        yylhs.value.build< std::string > ();
        break;

      case 247: // AssignmentList
        yylhs.value.build< std::vector<Assignment> > ();
        break;

      case 236: // Exports
        yylhs.value.build< std::vector<Export> > ();
        break;

      case 238: // Imports
      case 239: // SymbolsImported
      case 240: // SymbolsFromModuleList
        yylhs.value.build< std::vector<Import> > ();
        break;

      case 292: // AlternativeTypeLists
      case 293: // RootAlternativeTypeList
      case 294: // AlternativeTypeList
        yylhs.value.build< std::vector<NamedType> > ();
        break;

      case 303: // ObjectIdentifierValue
      case 304: // ObjIdComponentsList
        yylhs.value.build< std::vector<ObjectIdComponentValue> > ();
        break;

      case 253: // ActualParameterList
        yylhs.value.build< std::vector<Type> > ();
        break;

      case 266: // SequenceOfValues
        yylhs.value.build< std::vector<Value> > ();
        break;

      case 244: // SymbolList
        yylhs.value.build< std::vector<std::string> > ();
        break;

      default:
        break;
    }


      // Compute the default @$.
      {
        slice<stack_symbol_type, stack_type> slice (yystack_, yylen);
        YYLLOC_DEFAULT (yylhs.location, slice, yylen);
      }

      // Perform the reduction.
      YY_REDUCE_PRINT (yyn);
      try
        {
          switch (yyn)
            {
  case 4:
#line 298 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yystack_[2].value.as< Module > ().module_reference = yystack_[9].value.as< std::string > ();
      yystack_[2].value.as< Module > ().tagging_default = yystack_[6].value.as< TaggingMode > ();
      context.asn1_tree.modules.push_back(yystack_[2].value.as< Module > ()); }
#line 5282 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 12:
#line 319 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{yystack_[2].value.as< std::string > (), ObjectClassAssignment{}}; }
#line 5288 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 80:
#line 470 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{yystack_[3].value.as< std::string > (), ObjectSetAssignment{}}; }
#line 5294 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 89:
#line 497 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 5300 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 90:
#line 499 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 5306 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 91:
#line 501 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 5312 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 92:
#line 503 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 5318 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 93:
#line 505 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 5324 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 94:
#line 510 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[3].value.as< std::string > (), TypeAssignment{yystack_[0].value.as< Type > ()}, {}, yystack_[2].value.as< std::set<std::string> > () }; }
#line 5330 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 95:
#line 514 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[4].value.as< std::string > (), ValueAssignment{} }; }
#line 5336 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 96:
#line 518 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[4].value.as< std::string > (), ValueAssignment{} }; }
#line 5342 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 97:
#line 522 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[3].value.as< std::string > (), ObjectClassAssignment{} }; }
#line 5348 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 98:
#line 526 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[4].value.as< std::string > (), ObjectClassAssignment{} }; }
#line 5354 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 99:
#line 534 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::set<std::string> > () = yystack_[1].value.as< std::set<std::string> > (); }
#line 5360 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 100:
#line 538 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::set<std::string> > ().insert(yystack_[0].value.as< std::string > ()); }
#line 5366 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 101:
#line 540 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::set<std::string> > () = yystack_[2].value.as< std::set<std::string> > (); yystack_[2].value.as< std::set<std::string> > ().insert(yystack_[0].value.as< std::string > ()); }
#line 5372 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 102:
#line 544 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 5378 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 103:
#line 546 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 5384 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 112:
#line 599 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 5390 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 124:
#line 623 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << "Simple constraint\n"; }
#line 5396 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 125:
#line 625 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << "Relation constraint\n"; }
#line 5402 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 138:
#line 667 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    {
    yylhs.value.as< std::string > () = yystack_[1].value.as< std::string > ();
}
#line 5410 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 153:
#line 706 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggingMode > () = TaggingMode::explicit_; }
#line 5416 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 154:
#line 708 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggingMode > () = TaggingMode::implicit; }
#line 5422 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 155:
#line 710 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggingMode > () = TaggingMode::automatic; }
#line 5428 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 156:
#line 712 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggingMode > () = TaggingMode::explicit_; }
#line 5434 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 159:
#line 720 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Module > () = Module{ {}, TaggingMode(), yystack_[2].value.as< std::vector<Export> > (), yystack_[1].value.as< std::vector<Import> > (), yystack_[0].value.as< std::vector<Assignment> > ()}; }
#line 5440 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 160:
#line 722 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { }
#line 5446 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 166:
#line 735 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Import> > () = yystack_[1].value.as< std::vector<Import> > (); }
#line 5452 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 168:
#line 740 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Import> > () = yystack_[0].value.as< std::vector<Import> > (); }
#line 5458 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 170:
#line 745 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Import> > ().push_back(yystack_[0].value.as< Import > ()); }
#line 5464 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 171:
#line 747 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Import> > () = yystack_[1].value.as< std::vector<Import> > (); yylhs.value.as< std::vector<Import> > ().push_back(yystack_[0].value.as< Import > ()); }
#line 5470 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 172:
#line 751 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Import > () = Import{ yystack_[0].value.as< std::string > (), yystack_[2].value.as< std::vector<std::string> > () }; }
#line 5476 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 173:
#line 755 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[1].value.as< std::string > (); }
#line 5482 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 177:
#line 764 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<std::string> > ().push_back(yystack_[0].value.as< std::string > ()); }
#line 5488 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 178:
#line 766 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<std::string> > () = yystack_[2].value.as< std::vector<std::string> > (); yylhs.value.as< std::vector<std::string> > ().push_back(yystack_[0].value.as< std::string > ()); }
#line 5494 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 179:
#line 770 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 5500 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 180:
#line 774 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 5506 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 181:
#line 776 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[2].value.as< std::string > (); }
#line 5512 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 182:
#line 778 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 5518 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 183:
#line 787 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Assignment> > ().push_back(yystack_[0].value.as< Assignment > ()); }
#line 5524 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 184:
#line 789 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Assignment> > () = yystack_[1].value.as< std::vector<Assignment> > (); yylhs.value.as< std::vector<Assignment> > ().push_back(yystack_[0].value.as< Assignment > ()); }
#line 5530 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 185:
#line 793 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 5536 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 186:
#line 795 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 5542 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 187:
#line 797 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 5548 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 188:
#line 801 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 5554 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 189:
#line 803 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 5560 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 191:
#line 808 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< DefinedType > () = DefinedType{yystack_[0].value.as< std::string > (), {}}; }
#line 5566 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 192:
#line 810 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< DefinedType > () = yystack_[0].value.as< DefinedType > (); }
#line 5572 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 193:
#line 816 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< DefinedValue > () = DefinedValue{yystack_[0].value.as< std::string > ()}; }
#line 5578 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 195:
#line 821 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< DefinedType > () = DefinedType{yystack_[1].value.as< std::string > (), yystack_[0].value.as< std::vector<Type> > ()}; }
#line 5584 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 197:
#line 828 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Type> > ().push_back(yystack_[1].value.as< Type > ()); }
#line 5590 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 198:
#line 832 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = yystack_[0].value.as< Type > (); }
#line 5596 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 199:
#line 834 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << "Warning: Not yet dealing with value paramaters"; }
#line 5602 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 203:
#line 877 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[2].value.as< std::string > (), TypeAssignment{yystack_[0].value.as< Type > ()}, {} }; }
#line 5608 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 204:
#line 881 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[3].value.as< std::string > (), ValueAssignment{yystack_[2].value.as< Type > (), yystack_[0].value.as< Value > ()}, {} }; }
#line 5614 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 205:
#line 885 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = yystack_[0].value.as< BuiltinType > (); }
#line 5620 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 206:
#line 887 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = Type(); }
#line 5626 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 207:
#line 889 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = yystack_[0].value.as< DefinedType > (); }
#line 5632 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 208:
#line 891 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << "Warning: Not handled - SelectionType\n"; }
#line 5638 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 209:
#line 893 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Not handled - TypeFromObject\n"); }
#line 5644 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 210:
#line 897 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = BitStringType(); }
#line 5650 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 211:
#line 898 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = BooleanType(); }
#line 5656 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 212:
#line 899 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = CharacterStringType(); }
#line 5662 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 213:
#line 900 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< ChoiceType > (); }
#line 5668 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 214:
#line 901 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = DateType(); }
#line 5674 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 215:
#line 902 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = DateTimeType(); }
#line 5680 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 216:
#line 903 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = DurationType(); }
#line 5686 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 217:
#line 904 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = EmbeddedPDVType(); }
#line 5692 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 218:
#line 905 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< EnumeratedType > (); }
#line 5698 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 219:
#line 906 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = ExternalType(); }
#line 5704 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 220:
#line 907 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = GeneralizedTimeType(); }
#line 5710 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 221:
#line 908 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = InstanceOfType(); }
#line 5716 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 222:
#line 909 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = IntegerType(); }
#line 5722 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 223:
#line 910 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = IRIType(); }
#line 5728 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 224:
#line 911 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = NullType(); }
#line 5734 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 225:
#line 912 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = ObjectClassFieldType(); }
#line 5740 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 226:
#line 913 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = ObjectDescriptorType(); }
#line 5746 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 227:
#line 914 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = ObjectIdentifierType(); }
#line 5752 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 228:
#line 915 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = OctetStringType(); }
#line 5758 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 229:
#line 916 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = RealType(); }
#line 5764 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 230:
#line 917 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = RelativeIRIType(); }
#line 5770 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 231:
#line 918 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = RelativeOIDType(); }
#line 5776 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 232:
#line 919 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< SequenceType > (); }
#line 5782 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 233:
#line 920 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< SequenceOfType > (); }
#line 5788 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 234:
#line 921 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< SetType > (); }
#line 5794 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 235:
#line 922 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< SetOfType > (); }
#line 5800 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 236:
#line 923 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< PrefixedType > (); }
#line 5806 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 237:
#line 924 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = TimeType(); }
#line 5812 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 238:
#line 925 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = TimeOfDayType(); }
#line 5818 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 239:
#line 926 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = UTCTimeType(); }
#line 5824 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 240:
#line 930 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< NamedType > () = NamedType{ yystack_[1].value.as< std::string > (), yystack_[0].value.as< Type > () }; }
#line 5830 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 241:
#line 934 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Unhandled field: BooleanValue\n"); }
#line 5836 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 242:
#line 936 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Unhandled field: IRIValue\n"); }
#line 5842 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 243:
#line 938 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Unhandled field: ASN_NULL\n"); }
#line 5848 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 244:
#line 940 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Unhandled field: TimeValue\n"); }
#line 5854 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 245:
#line 942 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Unhandled field: bstring\n"); }
#line 5860 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 246:
#line 944 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Unhandled field: hstring\n"); }
#line 5866 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 247:
#line 946 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = yystack_[0].value.as< std::string > (); }
#line 5872 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 248:
#line 948 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Unhandled field: CONTAINING\n"); }
#line 5878 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 249:
#line 950 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = yystack_[0].value.as< std::string > (); }
#line 5884 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 250:
#line 952 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = NamedNumber{yystack_[3].value.as< std::string > (), yystack_[1].value.as< long long > ()}; }
#line 5890 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 252:
#line 955 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = yystack_[0].value.as< long long > (); }
#line 5896 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 253:
#line 957 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = yystack_[0].value.as< double > (); }
#line 5902 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 254:
#line 959 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Unhandled field: ValueCommaListChoice\n"); }
#line 5908 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 255:
#line 961 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Unhandled field: ValueCommaListChoice\n"); }
#line 5914 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 256:
#line 965 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = yystack_[1].value.as< std::vector<Value> > (); }
#line 5920 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 257:
#line 967 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Unhandled field: ValueChoice\n"); }
#line 5926 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 258:
#line 969 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Unhandled field: OPTIONAL\n"); }
#line 5932 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 259:
#line 971 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Unhandled field: ValueCommaListChoice\n"); }
#line 5938 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 260:
#line 975 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > () = yystack_[0].value.as< Value > (); }
#line 5944 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 261:
#line 977 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = yystack_[0].value.as< std::string > (); }
#line 5950 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 266:
#line 989 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Value> > ().push_back(yystack_[0].value.as< Value > ()); }
#line 5956 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 267:
#line 991 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Value> > () = yystack_[1].value.as< std::vector<Value> > (); yylhs.value.as< std::vector<Value> > ().push_back(yystack_[0].value.as< Value > ()); }
#line 5962 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 275:
#line 1014 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< NamedNumber > () = NamedNumber{ yystack_[3].value.as< std::string > (), yystack_[1].value.as< long long > () }; }
#line 5968 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 276:
#line 1016 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< NamedNumber > () = NamedNumber{ yystack_[3].value.as< std::string > (), 0 }; }
#line 5974 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 277:
#line 1020 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< long long > () = yystack_[0].value.as< long long > (); }
#line 5980 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 278:
#line 1022 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< long long > () = -yystack_[0].value.as< long long > (); }
#line 5986 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 279:
#line 1026 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[1].value.as< EnumeratedType > (); }
#line 5992 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 280:
#line 1030 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[0].value.as< EnumeratedType > ();
      yylhs.value.as< EnumeratedType > ().accept_anything = false; }
#line 5999 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 281:
#line 1033 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[3].value.as< EnumeratedType > ();
      yylhs.value.as< EnumeratedType > ().accept_anything = true; }
#line 6006 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 282:
#line 1036 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[5].value.as< EnumeratedType > ();
      yylhs.value.as< EnumeratedType > ().accept_anything = true;
      yylhs.value.as< EnumeratedType > ().enum_values.insert(yylhs.value.as< EnumeratedType > ().enum_values.end(), yystack_[0].value.as< EnumeratedType > ().enum_values.begin(), yystack_[0].value.as< EnumeratedType > ().enum_values.end()); }
#line 6014 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 284:
#line 1043 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > ().enum_values.push_back(yystack_[0].value.as< EnumerationValue > ()); }
#line 6020 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 285:
#line 1045 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[2].value.as< EnumeratedType > (); yylhs.value.as< EnumeratedType > ().enum_values.push_back(yystack_[0].value.as< EnumerationValue > ()); }
#line 6026 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 286:
#line 1049 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumerationValue > ().name  = yystack_[0].value.as< std::string > (); }
#line 6032 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 287:
#line 1051 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumerationValue > ().name  = yystack_[0].value.as< NamedNumber > ().name;
      yylhs.value.as< EnumerationValue > ().value = yystack_[0].value.as< NamedNumber > ().number; }
#line 6039 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 297:
#line 1091 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SequenceType > () = SequenceType(); }
#line 6045 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 298:
#line 1093 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SequenceType > () = SequenceType{yystack_[1].value.as< ComponentTypeList > ()}; }
#line 6051 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 299:
#line 1101 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[0].value.as< ComponentTypeList > (); }
#line 6057 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 300:
#line 1105 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[0].value.as< ComponentTypeList > (); }
#line 6063 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 301:
#line 1107 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[2].value.as< ComponentTypeList > (); }
#line 6069 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 302:
#line 1109 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[4].value.as< ComponentTypeList > (); yylhs.value.as< ComponentTypeList > ().insert(yylhs.value.as< ComponentTypeList > ().end(), yystack_[0].value.as< ComponentTypeList > ().begin(), yystack_[0].value.as< ComponentTypeList > ().end()); }
#line 6075 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 303:
#line 1111 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[6].value.as< ComponentTypeList > (); yylhs.value.as< ComponentTypeList > ().insert(yylhs.value.as< ComponentTypeList > ().end(), yystack_[2].value.as< ComponentTypeList > ().begin(), yystack_[2].value.as< ComponentTypeList > ().end()); }
#line 6081 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 304:
#line 1113 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[0].value.as< ComponentTypeList > (); }
#line 6087 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 305:
#line 1115 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[2].value.as< ComponentTypeList > (); }
#line 6093 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 306:
#line 1117 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = {}; }
#line 6099 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 307:
#line 1119 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = {}; }
#line 6105 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 308:
#line 1123 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = ComponentTypeList{yystack_[0].value.as< ComponentType > ()}; }
#line 6111 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 309:
#line 1125 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yystack_[2].value.as< ComponentTypeList > ().push_back(yystack_[0].value.as< ComponentType > ()); yylhs.value.as< ComponentTypeList > () = yystack_[2].value.as< ComponentTypeList > (); }
#line 6117 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 310:
#line 1129 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentType > () = ComponentType{yystack_[0].value.as< NamedType > (), false, absl::nullopt}; }
#line 6123 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 311:
#line 1131 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentType > () = ComponentType{yystack_[1].value.as< NamedType > (), true, absl::nullopt}; }
#line 6129 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 312:
#line 1133 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentType > () = ComponentType{yystack_[2].value.as< NamedType > (), false, yystack_[0].value.as< Value > ()}; }
#line 6135 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 314:
#line 1146 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SequenceOfType > () = SequenceOfType{ false, nullptr, std::make_shared<Type>(yystack_[0].value.as< Type > ()) }; }
#line 6141 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 315:
#line 1148 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SequenceOfType > () = SequenceOfType{ true, std::make_shared<NamedType>(yystack_[0].value.as< NamedType > ()), nullptr }; }
#line 6147 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 316:
#line 1152 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SetType > () = SetType{}; }
#line 6153 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 317:
#line 1154 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SetType > () = SetType{yystack_[1].value.as< ComponentTypeList > ()}; }
#line 6159 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 318:
#line 1158 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SetOfType > () = SetOfType{ false, nullptr, std::make_shared<Type>(yystack_[0].value.as< Type > ()) }; }
#line 6165 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 319:
#line 1160 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SetOfType > () = SetOfType{ true, std::make_shared<NamedType>(yystack_[0].value.as< NamedType > ()), nullptr }; }
#line 6171 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 320:
#line 1164 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ChoiceType > () = ChoiceType{ yystack_[1].value.as< std::vector<NamedType> > () }; }
#line 6177 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 321:
#line 1168 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedType> > () = yystack_[0].value.as< std::vector<NamedType> > (); }
#line 6183 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 322:
#line 1172 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedType> > () = yystack_[0].value.as< std::vector<NamedType> > (); }
#line 6189 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 323:
#line 1174 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedType> > () = yystack_[2].value.as< std::vector<NamedType> > (); }
#line 6195 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 324:
#line 1178 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedType> > () = std::vector<NamedType> { yystack_[0].value.as< NamedType > () }; }
#line 6201 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 325:
#line 1180 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yystack_[2].value.as< std::vector<NamedType> > ().push_back( yystack_[0].value.as< NamedType > () ); yylhs.value.as< std::vector<NamedType> > () = yystack_[2].value.as< std::vector<NamedType> > (); }
#line 6207 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 327:
#line 1190 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< PrefixedType > () = PrefixedType(yystack_[0].value.as< TaggedType > ()); }
#line 6213 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 328:
#line 1194 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggedType > () = TaggedType{ yystack_[1].value.as< Tag > (), TaggingMode::automatic, yystack_[0].value.as< Type > () }; }
#line 6219 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 329:
#line 1196 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggedType > () = TaggedType{ yystack_[2].value.as< Tag > (), TaggingMode::implicit, yystack_[0].value.as< Type > () }; }
#line 6225 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 330:
#line 1198 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggedType > () = TaggedType{ yystack_[2].value.as< Tag > (), TaggingMode::explicit_, yystack_[0].value.as< Type > () }; }
#line 6231 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 331:
#line 1202 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Tag > () = Tag{ yystack_[2].value.as< Class > (), yystack_[1].value.as< int > () }; }
#line 6237 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 334:
#line 1210 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< int > () = yystack_[0].value.as< long long > (); }
#line 6243 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 336:
#line 1215 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Class > () = Class::universal; }
#line 6249 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 337:
#line 1217 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Class > () = Class::application; }
#line 6255 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 338:
#line 1219 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Class > () = Class::private_; }
#line 6261 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 339:
#line 1221 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Class > () = Class::context_specific; }
#line 6267 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 341:
#line 1234 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<ObjectIdComponentValue> > () = yystack_[1].value.as< std::vector<ObjectIdComponentValue> > (); std::reverse(yylhs.value.as< std::vector<ObjectIdComponentValue> > ().begin(), yylhs.value.as< std::vector<ObjectIdComponentValue> > ().end()); }
#line 6273 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 342:
#line 1236 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<ObjectIdComponentValue> > () = yystack_[1].value.as< std::vector<ObjectIdComponentValue> > (); std::reverse(yylhs.value.as< std::vector<ObjectIdComponentValue> > ().begin(), yylhs.value.as< std::vector<ObjectIdComponentValue> > ().end()); }
#line 6279 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 343:
#line 1240 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<ObjectIdComponentValue> > ().push_back(yystack_[0].value.as< ObjectIdComponentValue > ()); }
#line 6285 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 344:
#line 1242 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<ObjectIdComponentValue> > () = yystack_[0].value.as< std::vector<ObjectIdComponentValue> > (); yylhs.value.as< std::vector<ObjectIdComponentValue> > ().push_back(yystack_[1].value.as< ObjectIdComponentValue > ()); }
#line 6291 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 345:
#line 1246 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > () = yystack_[0].value.as< ObjectIdComponentValue > (); }
#line 6297 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 346:
#line 1248 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > () = yystack_[0].value.as< ObjectIdComponentValue > (); }
#line 6303 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 347:
#line 1250 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > () = yystack_[0].value.as< ObjectIdComponentValue > (); }
#line 6309 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 348:
#line 1254 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > ().name = yystack_[0].value.as< std::string > (); }
#line 6315 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 349:
#line 1258 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > ().value = yystack_[0].value.as< long long > (); }
#line 6321 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 351:
#line 1263 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > () = yystack_[1].value.as< ObjectIdComponentValue > (); yylhs.value.as< ObjectIdComponentValue > ().name = yystack_[3].value.as< std::string > (); }
#line 6327 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 479:
#line 1548 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 6333 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 480:
#line 1552 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 6339 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 481:
#line 1556 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 6345 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 482:
#line 1560 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 6351 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 483:
#line 1564 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 6357 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;


#line 6361 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
            default:
              break;
            }
        }
      catch (const syntax_error& yyexc)
        {
          error (yyexc);
          YYERROR;
        }
      YY_SYMBOL_PRINT ("-> $$ =", yylhs);
      yypop_ (yylen);
      yylen = 0;
      YY_STACK_PRINT ();

      // Shift the result of the reduction.
      yypush_ (YY_NULLPTR, yylhs);
    }
    goto yynewstate;

  /*--------------------------------------.
  | yyerrlab -- here on detecting error.  |
  `--------------------------------------*/
  yyerrlab:
    // If not already recovering from an error, report this error.
    if (!yyerrstatus_)
      {
        ++yynerrs_;
        error (yyla.location, yysyntax_error_ (yystack_[0].state, yyla));
      }


    yyerror_range[1].location = yyla.location;
    if (yyerrstatus_ == 3)
      {
        /* If just tried and failed to reuse lookahead token after an
           error, discard it.  */

        // Return failure if at end of input.
        if (yyla.type_get () == yyeof_)
          YYABORT;
        else if (!yyla.empty ())
          {
            yy_destroy_ ("Error: discarding", yyla);
            yyla.clear ();
          }
      }

    // Else will try to reuse lookahead token after shifting the error token.
    goto yyerrlab1;


  /*---------------------------------------------------.
  | yyerrorlab -- error raised explicitly by YYERROR.  |
  `---------------------------------------------------*/
  yyerrorlab:

    /* Pacify compilers like GCC when the user code never invokes
       YYERROR and the label yyerrorlab therefore never appears in user
       code.  */
    if (false)
      goto yyerrorlab;
    yyerror_range[1].location = yystack_[yylen - 1].location;
    /* Do not reclaim the symbols of the rule whose action triggered
       this YYERROR.  */
    yypop_ (yylen);
    yylen = 0;
    goto yyerrlab1;

  /*-------------------------------------------------------------.
  | yyerrlab1 -- common code for both syntax error and YYERROR.  |
  `-------------------------------------------------------------*/
  yyerrlab1:
    yyerrstatus_ = 3;   // Each real token shifted decrements this.
    {
      stack_symbol_type error_token;
      for (;;)
        {
          yyn = yypact_[yystack_[0].state];
          if (!yy_pact_value_is_default_ (yyn))
            {
              yyn += yyterror_;
              if (0 <= yyn && yyn <= yylast_ && yycheck_[yyn] == yyterror_)
                {
                  yyn = yytable_[yyn];
                  if (0 < yyn)
                    break;
                }
            }

          // Pop the current state because it cannot handle the error token.
          if (yystack_.size () == 1)
            YYABORT;

          yyerror_range[1].location = yystack_[0].location;
          yy_destroy_ ("Error: popping", yystack_[0]);
          yypop_ ();
          YY_STACK_PRINT ();
        }

      yyerror_range[2].location = yyla.location;
      YYLLOC_DEFAULT (error_token.location, yyerror_range, 2);

      // Shift the error token.
      error_token.state = yyn;
      yypush_ ("Shifting", error_token);
    }
    goto yynewstate;

    // Accept.
  yyacceptlab:
    yyresult = 0;
    goto yyreturn;

    // Abort.
  yyabortlab:
    yyresult = 1;
    goto yyreturn;

  yyreturn:
    if (!yyla.empty ())
      yy_destroy_ ("Cleanup: discarding lookahead", yyla);

    /* Do not reclaim the symbols of the rule whose action triggered
       this YYABORT or YYACCEPT.  */
    yypop_ (yylen);
    while (1 < yystack_.size ())
      {
        yy_destroy_ ("Cleanup: popping", yystack_[0]);
        yypop_ ();
      }

    return yyresult;
  }
    catch (...)
      {
        YYCDEBUG << "Exception caught: cleaning lookahead and stack"
                 << std::endl;
        // Do not try to display the values of the reclaimed symbols,
        // as their printer might throw an exception.
        if (!yyla.empty ())
          yy_destroy_ (YY_NULLPTR, yyla);

        while (1 < yystack_.size ())
          {
            yy_destroy_ (YY_NULLPTR, yystack_[0]);
            yypop_ ();
          }
        throw;
      }
  }

  void
  asn1_parser::error (const syntax_error& yyexc)
  {
    error (yyexc.location, yyexc.what());
  }

  // Generate an error message.
  std::string
  asn1_parser::yysyntax_error_ (state_type yystate, const symbol_type& yyla) const
  {
    // Number of reported tokens (one for the "unexpected", one per
    // "expected").
    size_t yycount = 0;
    // Its maximum.
    enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
    // Arguments of yyformat.
    char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];

    /* There are many possibilities here to consider:
       - If this state is a consistent state with a default action, then
         the only way this function was invoked is if the default action
         is an error action.  In that case, don't check for expected
         tokens because there are none.
       - The only way there can be no lookahead present (in yyla) is
         if this state is a consistent state with a default action.
         Thus, detecting the absence of a lookahead is sufficient to
         determine that there is no unexpected or expected token to
         report.  In that case, just report a simple "syntax error".
       - Don't assume there isn't a lookahead just because this state is
         a consistent state with a default action.  There might have
         been a previous inconsistent state, consistent state with a
         non-default action, or user semantic action that manipulated
         yyla.  (However, yyla is currently not documented for users.)
       - Of course, the expected token list depends on states to have
         correct lookahead information, and it depends on the parser not
         to perform extra reductions after fetching a lookahead from the
         scanner and before detecting a syntax error.  Thus, state
         merging (from LALR or IELR) and default reductions corrupt the
         expected token list.  However, the list is correct for
         canonical LR with one exception: it will still contain any
         token that will not be accepted due to an error action in a
         later state.
    */
    if (!yyla.empty ())
      {
        int yytoken = yyla.type_get ();
        yyarg[yycount++] = yytname_[yytoken];
        int yyn = yypact_[yystate];
        if (!yy_pact_value_is_default_ (yyn))
          {
            /* Start YYX at -YYN if negative to avoid negative indexes in
               YYCHECK.  In other words, skip the first -YYN actions for
               this state because they are default actions.  */
            int yyxbegin = yyn < 0 ? -yyn : 0;
            // Stay within bounds of both yycheck and yytname.
            int yychecklim = yylast_ - yyn + 1;
            int yyxend = yychecklim < yyntokens_ ? yychecklim : yyntokens_;
            for (int yyx = yyxbegin; yyx < yyxend; ++yyx)
              if (yycheck_[yyx + yyn] == yyx && yyx != yyterror_
                  && !yy_table_value_is_error_ (yytable_[yyx + yyn]))
                {
                  if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                    {
                      yycount = 1;
                      break;
                    }
                  else
                    yyarg[yycount++] = yytname_[yyx];
                }
          }
      }

    char const* yyformat = YY_NULLPTR;
    switch (yycount)
      {
#define YYCASE_(N, S)                         \
        case N:                               \
          yyformat = S;                       \
        break
        YYCASE_(0, YY_("syntax error"));
        YYCASE_(1, YY_("syntax error, unexpected %s"));
        YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
        YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
        YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
        YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
#undef YYCASE_
      }

    std::string yyres;
    // Argument number.
    size_t yyi = 0;
    for (char const* yyp = yyformat; *yyp; ++yyp)
      if (yyp[0] == '%' && yyp[1] == 's' && yyi < yycount)
        {
          yyres += yytnamerr_ (yyarg[yyi++]);
          ++yyp;
        }
      else
        yyres += *yyp;
    return yyres;
  }


  const short int asn1_parser::yypact_ninf_ = -660;

  const short int asn1_parser::yytable_ninf_ = -483;

  const short int
  asn1_parser::yypact_[] =
  {
     -23,  -660,   129,   -23,    39,    41,  -660,  -660,   171,    21,
    -660,    40,  -660,   146,   157,  -660,  -660,   151,    21,  -660,
    -660,  -660,   152,   195,  -660,  -660,   238,   248,   259,   309,
    -660,  -660,   341,    55,   232,  -660,  -660,  -660,   304,   274,
     256,  -660,  -660,  -660,    55,   265,  -660,   370,  -660,   232,
    -660,   321,  -660,   -13,  -660,   342,   273,  -660,  -660,   280,
     294,  -660,  -660,   299,  -660,   376,   260,     3,  -660,  -660,
     260,   310,  -660,   291,   260,  -660,   -27,   316,  -660,  -660,
    -660,  -660,  -660,  -660,  -660,  -660,  -660,     3,  -660,  -660,
    -660,    99,  2347,   316,  -660,  -660,  -660,  -660,   -23,  2149,
      23,  -660,  2050,  -660,   320,  -660,  2446,  -660,   305,  -660,
    -660,   344,  -660,  -660,   345,   325,  -660,  -660,  -660,   353,
     326,  -660,  -660,  -660,  -660,  -660,   364,   328,  -660,  -660,
     384,  -660,   351,  -660,  -660,  -660,  -660,  -660,   162,   168,
    -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,   438,
     185,  -660,  -660,  -660,  2644,   319,  -660,  -660,   335,  -660,
    -660,   336,    -6,  -660,  -660,  -660,  -660,  -660,  -660,  -660,
    -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,  2248,
    -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,
    -660,  -660,  -660,  -660,  -660,  -660,    91,   332,   327,   329,
     343,  -660,   107,  -660,  -660,  -660,  -660,  -660,  -660,    88,
    -660,   322,  -660,   331,   347,   159,   327,   330,  -660,   349,
     358,   350,   359,  -660,  -660,  -660,   347,   366,  2644,   184,
     346,   367,  -660,   324,  -660,   -50,    23,   324,  -660,  -660,
    2644,   347,    -1,  1054,   405,   407,  2644,    10,   409,   410,
     357,   123,   237,   401,  1534,  -660,   578,  -660,  2644,  2644,
     347,   401,  2644,   401,    12,     5,    37,  -660,  -660,  -660,
    -660,  2149,   260,    17,     9,   352,   365,  1177,  -660,   347,
     578,  -660,   324,  -660,   374,  -660,   363,  2644,   371,  -660,
     377,   368,  -660,   378,  -660,   156,  -660,   378,   347,  -660,
    2545,  -660,   419,   375,  -660,    20,   382,  -660,   379,  -660,
    -660,  -660,  -660,  -660,  -660,  -660,   450,   215,   471,  2644,
     473,  -660,   347,  -660,  -660,   578,   500,  -660,   262,  1300,
     509,   177,   381,   396,  -660,  -660,  -660,  -660,   347,  -660,
    -660,  -660,   371,  -660,  -660,   389,  -660,   -63,   -59,    -2,
      18,  -660,   450,   469,  -660,   218,  -660,  2644,  -660,   411,
     398,  -660,  -660,  -660,  -660,  -660,  -660,  2644,  2644,   347,
    -660,  -660,   408,  2644,  2644,  -660,  -660,  -660,  -660,    45,
     578,  -660,  -660,  -660,  -660,  -660,  -660,   392,  -660,  -660,
    -660,  -660,   406,   578,  -660,   578,  -660,   241,   190,  -660,
     390,   412,   347,   413,   243,   403,   400,  -660,  -660,  -660,
    -660,  -660,   416,   161,  -660,  -660,   243,   420,   347,   347,
     392,   347,   392,  -660,  -660,  -660,  -660,   335,    37,  -660,
    -660,   421,    37,  -660,  -660,  -660,   415,   423,   422,  -660,
    -660,  -660,   806,  -660,  -660,  -660,  -660,  -660,   424,  -660,
       2,  1951,    23,   196,  -660,  -660,  -660,  -660,  -660,  -660,
     427,   434,   428,   243,   202,  -660,   435,  -660,   -28,   347,
    1759,  -660,  -660,    -3,    28,  -660,   324,  2644,    33,  1904,
    -660,  -660,    35,  1417,  -660,   443,    13,   578,  -660,   243,
    -660,   347,   445,   449,  -660,   404,   451,   455,  -660,  -660,
    1417,  -660,  -660,  1417,  -660,   347,   614,  -660,   347,  -660,
     347,  -660,  -660,   347,  -660,   347,  -660,  -660,  -660,   452,
     243,   401,   243,   243,   545,   574,  -660,   578,   578,   578,
     578,   578,  -660,  -660,   458,  -660,  -660,    52,   439,  -660,
    -660,  -660,  -660,   406,  -660,  -660,   344,  -660,  -660,  -660,
     345,   325,  -660,  -660,  -660,  -660,   578,  -660,  -660,  -660,
    -660,  -660,   353,  -660,  -660,  -660,   326,  -660,  -660,  -660,
    -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,   520,   364,
    -660,   328,  -660,  -660,  -660,  -660,  -660,   384,   351,  -660,
    -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,
     162,   168,  -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,
    -660,  -660,  -660,  -660,  -660,  -660,   204,  1653,  -660,   459,
     930,  -660,  -660,   347,   243,  -660,   572,  2644,  -660,    38,
    -660,    49,   -34,    53,   477,   365,  1300,  -660,   476,  -660,
     324,    56,  -660,  -660,  -660,   -43,  -660,  -660,   108,   464,
     371,  -660,   478,   479,  -660,   347,  -660,   467,  -660,  -660,
    -660,  -660,   470,  -660,  -660,  2149,   569,   243,  -660,  -660,
      97,  -660,  -660,  -660,  -660,   -10,   206,  -660,  -660,   474,
      -2,  -660,  -660,  1873,  -660,  -660,  -660,  -660,  -660,  -660,
     243,   487,   243,   243,   243,   243,   243,  -660,   488,  -660,
    -660,   177,  -660,   475,  -660,  -660,   347,     9,  -660,  -660,
    1904,  -660,  -660,  -660,    49,  -660,  -660,  -660,   513,  -660,
    -660,  -660,  -660,   481,  -660,   501,   502,   578,    61,   493,
    -660,  -660,    57,    -4,   506,   491,   511,   286,   578,   503,
     512,   505,   347,   507,   508,  -660,  -660,   404,  1300,  -660,
    -660,  -660,   514,  -660,  -660,  -660,   519,  1300,  -660,  -660,
     243,   324,  -660,   515,  1807,  -660,   243,   324,  -660,   324,
    -660,  -660,    36,   507,   324,   324,  -660,  -660,  -660,  3130,
    -660,  -660,   517,    67,   806,  -660,   243,   524,  -660,  -660,
    -660,  -660,  -660,  -660,   508,  -660,  -660,  -660,  -660,  -660,
    -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,
    -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,
    -660,  -660,  -660,  -660,  3130,  -660,  2890,  -660,  -660,  -660,
    2770,  -660,   324,  -660,   243,  -660,  3010,  -660,  -660,  -660,
    -660,  -660
  };

  const unsigned short int
  asn1_parser::yydefact_[] =
  {
       0,   482,     0,     2,     0,   141,     1,     3,   152,     0,
     138,   139,   140,     0,   156,   149,   480,     0,   144,   147,
     148,   146,   348,     0,   143,   151,     0,     0,     0,   158,
     142,   145,     0,     0,   357,   155,   153,   154,     0,     0,
       0,   358,   359,   355,     0,     0,   157,     0,   150,   357,
     354,   163,   356,   165,   137,   167,     0,   479,   481,     0,
     164,   177,   179,   180,   182,     0,   169,     0,   162,   161,
       0,     0,     4,     0,   168,   170,     0,     0,   479,   187,
     188,   189,    89,    90,    91,    92,    93,   159,   183,   185,
     186,     0,     0,     0,   178,   181,   166,   171,     0,     0,
       0,   184,     0,   479,     0,    77,     0,    78,     0,    62,
     296,     0,   371,   268,     0,     0,   365,   367,   368,     0,
       0,   362,   220,   372,   373,   374,     0,   271,   375,   376,
       0,   226,     0,   353,   377,   288,   352,   360,     0,     0,
     379,   378,   363,   366,   380,   239,   381,   382,   383,   333,
     480,   108,    61,   225,     0,     0,   209,   221,     0,   207,
     192,   190,     0,   205,   211,   222,   218,   229,   210,   228,
     224,   232,   233,   234,   235,   213,   208,   236,   327,     0,
     227,   231,   223,   230,   217,   219,   237,   214,   238,   215,
     216,   212,   369,   370,   206,   386,   191,     0,     0,     0,
       0,   172,   176,    11,    10,   479,   107,     6,     8,     0,
     100,     0,   104,   103,   106,   180,   182,     0,     7,   483,
       0,     0,     0,    13,    12,    14,   203,     0,     0,     0,
       0,   289,   384,     0,   361,     0,     0,     0,   340,   295,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   339,     0,     0,     0,   195,     0,   385,     0,     0,
     328,     0,     0,     0,     0,     0,     0,   173,   174,   175,
      99,     0,     0,     0,     0,     0,     0,     0,    80,    94,
       0,    79,     0,   324,     0,   321,   322,     0,   475,   287,
       0,   280,   284,   286,   110,     0,   273,     0,   314,   315,
       0,   452,     0,   306,   297,   310,     0,   299,   300,   308,
     277,   440,   434,   435,   436,   364,     0,   296,     0,     0,
       0,   270,     0,   442,   449,     0,     0,   269,     0,     0,
       0,   437,   438,   124,   397,   115,   116,   117,   453,   431,
     439,   433,   475,   396,   398,   399,   402,   404,     0,   406,
       0,   409,     0,   412,   420,   422,   423,     0,   424,     0,
     444,   426,   427,   425,   428,   429,   430,     0,     0,   318,
     319,   316,     0,     0,     0,   332,   337,   338,   336,     0,
       0,    23,    24,    25,    26,    27,    28,   109,   253,   245,
     246,   247,   243,     0,   258,     0,   251,   479,   249,   200,
     225,     0,   198,   260,     0,   259,   257,   241,   252,   242,
     244,   243,   261,   249,   254,   260,   204,     0,   330,   329,
      87,   326,    88,    63,   201,    97,   349,     0,   350,   194,
     113,     0,   343,   345,   346,   347,   348,   193,     0,   101,
     102,     9,     0,    64,    98,    65,    66,    67,     0,   483,
      33,     0,     0,     0,    16,    18,    19,    20,    21,    22,
      84,     0,    82,    96,     0,   291,     0,   320,     0,   240,
       0,   283,   279,     0,     0,   272,     0,     0,     0,     0,
     311,   298,     0,     0,   405,     0,   134,     0,   454,   472,
     473,     0,     0,     0,   278,     0,     0,     0,   417,   416,
       0,   419,   418,     0,   413,   441,     0,   445,   389,   393,
     390,   394,   317,   387,   391,   388,   392,   334,   335,     0,
      95,     0,   248,   266,     0,     0,   197,     0,     0,     0,
       0,     0,   196,   350,     0,   341,   344,     0,     0,   485,
     486,   487,   488,   243,   490,   491,   492,   371,   268,   495,
     496,   497,   498,   499,   500,   501,   502,   365,   367,   505,
     506,   368,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   362,   270,   519,   520,   521,   522,   523,     0,   525,
     526,   271,   528,   529,   530,   531,   532,   533,   534,   535,
     353,   258,   538,   539,   540,   541,   542,   288,   352,   360,
     546,   547,   548,   549,   550,   551,   552,   363,   366,   269,
     556,   557,   558,   559,   560,    60,   261,     0,    73,     0,
       0,    71,    74,    75,    76,    59,     0,     0,    31,    44,
      30,    39,    35,    48,    50,     0,     0,    81,     0,   290,
       0,     0,   323,   325,   477,     0,   476,   474,   193,     0,
     475,   285,     0,     0,   274,   313,   307,   304,   432,   437,
     438,   312,   301,   309,   415,   123,     0,   135,   457,   455,
       0,   456,   458,   459,   421,     0,     0,   126,   395,   400,
     407,   410,   451,     0,   450,   443,   446,   331,    29,   256,
     267,     0,   262,   255,   264,   263,   265,   342,     0,   202,
     524,   261,    69,     0,    70,    72,    32,     0,    42,    41,
       0,    37,    40,    34,    39,    47,    46,    45,     0,    15,
      17,    85,   403,    83,   292,     0,     0,     0,     0,   281,
     276,   275,     0,     0,   107,     0,     0,   106,     0,     0,
       0,   462,   467,   131,   128,   132,   125,     0,     0,   447,
     250,   351,     0,    43,    38,    36,     0,     0,   293,   294,
     478,     0,   305,   302,     0,   118,   136,     0,   460,     0,
     466,   464,   471,   131,     0,     0,   127,   401,    68,     0,
      49,    86,   282,     0,     0,   120,   119,     0,   463,   469,
     470,   468,   465,   130,   129,   133,   489,   492,   493,   494,
     496,   497,   502,   503,   504,   507,   508,   512,   517,   518,
     525,   527,   533,   534,   536,   537,   543,   544,   545,   546,
     547,   553,   554,   555,     0,   484,     0,    51,    54,    53,
       0,    57,     0,   303,    76,   461,     0,     5,    52,    56,
      58,    55
  };

  const short int
  asn1_parser::yypgoto_[] =
  {
    -660,   633,  -660,  -660,   -97,  -660,  -660,  -660,   383,  -660,
    -660,     7,  -436,   142,  -660,  -660,  -660,  -660,   -65,  -660,
    -660,  -660,  -660,  -660,  -660,  -170,  -576,  -660,  -660,  -660,
    -424,  -273,  -660,  -659,  -660,  -660,  -660,  -660,  -660,    43,
      47,  -660,  -660,  -660,   414,  -660,    42,  -660,  -660,  -660,
    -660,  -660,  -660,   308,  -660,   385,  -660,    -7,  -660,  -660,
    -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,   -92,  -103,
    -114,  -660,  -660,  -660,  -660,  -660,  -660,   654,  -660,   641,
    -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,
     600,  -660,  -660,   624,   608,   -70,  -660,   592,  -660,  -264,
    -660,  -660,   253,  -660,  -660,  -660,  -660,  -660,   -80,  -660,
    -179,   429,  -113,  -660,  -660,  -660,  -660,  -156,  -660,  -660,
    -210,  -168,  -660,  -660,   -76,  -463,  -660,  -660,  -660,    48,
    -660,  -660,  -660,   440,  -660,  -462,  -471,  -660,  -660,  -660,
    -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,
    -660,  -660,  -660,   -37,  -660,   225,   144,  -660,  -660,  -660,
     678,  -660,   645,   646,  -660,  -660,  -660,  -660,  -149,  -660,
    -660,  -660,  -660,  -660,  -660,  -660,  -660,  -660,  -125,  -660,
    -660,  -660,   418,  -448,  -131,  -660,  -660,   197,  -660,   193,
    -660,   354,  -660,  -660,   216,  -660,  -451,  -660,  -660,  -660,
    -660,  -660,  -660,    19,  -118,  -660,  -660,  -660,  -660,  -660,
    -660,  -660,  -515,  -660,  -660,  -660,  -660,  -660,  -660,  -334,
    -660,    -8,    -9,   -30,     4,   -24,  -660
  };

  const short int
  asn1_parser::yydefgoto_[] =
  {
      -1,     2,     3,   780,   206,   207,   208,    79,   224,   225,
     453,   454,   386,   387,   455,   630,   714,   456,   712,   457,
     458,   709,   459,   717,   719,   826,   827,   828,   829,   830,
     831,   151,   152,   444,   445,   446,   619,   447,   620,   621,
     622,   104,   105,    80,   278,   461,   153,    81,    82,    83,
      84,    85,    86,   100,   209,   210,   211,   212,   155,   156,
     157,   158,   427,   334,   335,   736,   336,   676,   677,   774,
     744,   337,    65,     4,    10,    11,    12,    17,    18,    19,
      20,    14,    29,    39,    54,    55,    59,    67,    73,    74,
      75,   201,   267,    76,    61,    62,    87,    88,   159,   533,
     160,   429,   255,   401,   161,   430,    89,    90,   338,   163,
     305,   415,   624,   405,   406,   524,   164,   407,   165,   295,
     289,   408,   166,   290,   291,   292,   167,   168,   464,   465,
     169,   170,   171,   306,   307,   308,   309,   172,   173,   174,
     175,   284,   285,   286,   176,   177,   178,   179,   251,   519,
     379,   180,   268,   431,   432,   433,   434,   435,   181,   182,
     409,    34,    45,    43,   183,   184,   185,   186,   410,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   257,   342,
     343,   344,   345,   721,   722,   347,   348,   349,   350,   351,
     352,   484,   500,   503,   353,   354,   355,   356,   357,   358,
     359,   685,   360,   686,   361,   362,   363,   364,   669,   671,
     672,   673,   740,   741,   771,   772,   792,   365,   366,   471,
     647,   196,   197,   198,   199,   218,   625
  };

  const short int
  asn1_parser::yytable_[] =
  {
      22,   443,   428,   220,     5,   223,   617,     5,   496,    22,
     651,   663,   162,   244,   248,   631,   657,    56,   618,   214,
     245,   249,   226,    64,    77,    15,   229,   296,   661,   213,
     109,   203,   310,   423,   203,    98,    64,    92,   423,   302,
      64,   426,   302,    93,    64,    63,   222,  -408,   753,   517,
     627,   498,   203,   302,   283,   684,   426,    92,    63,    91,
     725,   299,    63,    93,   789,   666,    63,   370,   479,   216,
     288,    41,    42,  -411,   252,   340,   302,   713,   302,    91,
    -408,   243,   423,   107,   499,   688,   707,   339,     8,   628,
     243,   215,   642,   501,   341,   108,   727,   710,    16,   260,
     302,   715,   202,   217,   221,   785,   217,   480,    70,   340,
     302,   204,   346,   256,   204,   518,   301,   650,   243,   303,
      16,   339,   304,   790,     1,   708,   743,   791,   341,     6,
     303,   442,   204,   371,    57,    58,   711,   243,    16,   294,
     716,   404,  -411,   416,    16,    16,   346,    16,   279,   219,
      78,    58,   219,   656,   376,   662,     1,   399,    16,    57,
     298,   340,   502,     9,    78,   330,   369,   463,   223,    16,
     219,    23,   269,   339,   402,     1,    58,   762,   418,   419,
     341,    16,   421,    16,     1,   150,    13,   833,   509,   511,
      26,   214,     1,    58,   514,   516,   618,   488,   493,     1,
      58,   213,   440,     1,    58,    16,   644,   469,    57,    58,
     652,   270,   489,  -112,    27,    16,   377,   739,   102,    25,
     469,    99,   281,   271,   287,    28,   293,   261,   297,   266,
    -114,   300,   684,   287,    21,   378,   437,   300,   287,   486,
     221,   216,    64,    21,   263,    16,   103,   240,   417,   441,
     838,   441,   787,   246,   788,    58,   424,   436,   217,   754,
     838,   663,   241,   215,    63,   424,   654,   520,   241,   221,
     438,   763,   417,   466,    30,   217,    32,   505,   448,   475,
     522,    71,   523,  -191,   242,   525,   243,   508,   510,   643,
     247,   476,   243,   513,   515,   261,   400,  -481,   414,  -479,
     777,  -479,   646,   280,   491,   492,   653,  -481,   243,   781,
    -481,   340,   663,  -479,   525,   340,   729,   417,  -480,   634,
    -481,  -481,   414,   339,  -481,   639,  -481,   339,  -479,   746,
     341,   635,   340,    33,   341,   340,  -432,   640,   340,  -448,
    -479,   747,    35,  -432,   339,    15,  -448,   339,   617,   437,
     339,   341,    36,   629,   341,   633,   380,   341,   300,   300,
     618,   243,   623,    37,   300,   300,   668,   414,    38,   651,
      44,   632,   417,    46,   667,  -160,  -261,   726,   527,    53,
    -261,    48,   528,   438,  -261,   417,   529,   417,   450,   451,
     645,   534,   452,    47,   839,   536,    50,   655,   437,   106,
     154,   200,   437,   420,    51,   422,   840,    57,    58,  -121,
     243,   690,    66,    68,   692,   693,   694,   695,   696,   436,
      69,    71,   414,   436,   381,   382,   383,   384,   385,    70,
      72,    96,   438,    95,   443,   414,   438,   414,    99,   227,
     648,   230,   234,   522,   437,   231,   232,   233,   235,   236,
     237,   238,   239,   250,   221,   253,   221,   254,  -111,   287,
     262,   272,   265,   263,   293,   264,   273,   297,   340,   287,
    -105,   243,    16,   287,   649,   244,   248,   274,   438,   417,
     339,   276,   245,   249,   400,  -482,   275,   341,   277,   282,
     367,   443,   368,    57,   373,   374,   375,   467,   468,   449,
     472,   470,   474,   473,   477,   481,   483,   437,   699,   485,
     478,   487,   490,   494,   482,   340,   417,  -481,   495,   417,
     417,   417,   417,   417,   497,  -414,   507,   339,   521,   414,
    -296,   512,   506,  -254,   341,   526,  -199,   623,   530,   537,
     623,   438,   340,   531,   535,  -114,   675,   706,   417,   310,
     388,   389,  -479,   390,   339,   391,   261,   637,   538,   641,
     626,   341,   636,   638,   315,   665,   414,   670,   734,   414,
     414,   414,   414,   414,   674,   679,   678,   411,   691,   687,
     340,   697,   310,   388,   389,   737,   390,    58,   391,   340,
     393,   700,   339,   423,   703,   718,   723,   315,   414,   341,
     728,   339,   732,   730,   731,   733,   321,   738,   341,   748,
     411,   437,   750,   751,   760,   756,   757,   770,   310,   311,
     312,   752,   313,   393,   314,   766,   758,   759,   761,  -122,
     764,   466,   394,   315,   765,   768,     7,   778,   767,   321,
     769,   779,   720,   773,   775,   438,   658,   835,   425,   755,
     783,   786,   832,   327,   836,   776,   439,   333,   735,   400,
     794,   742,   400,   705,   702,   394,   745,   395,   689,   217,
     793,   834,    31,    40,    97,   321,    23,    60,    94,   101,
     532,   698,   330,   403,   396,   782,   327,   372,   724,    24,
      49,   682,   412,   413,    52,   462,   681,   680,   699,   664,
     395,     0,   749,     0,   623,     0,   504,     0,     0,    23,
       0,   448,     0,     0,     0,   330,     0,   396,     0,   417,
     424,     0,   327,   287,   287,   412,   413,     0,     0,     0,
     417,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   683,     0,     0,     0,     0,     0,     0,     0,
       0,   330,   293,     0,     0,     0,   417,     0,   742,     0,
     742,   659,   660,     0,     0,   745,   795,     0,   448,   414,
       0,     0,     0,     0,   287,     0,     0,     0,     0,     0,
     414,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   414,     0,     0,     0,
     310,   388,   389,     0,   390,     0,   391,     0,     0,     0,
       0,     0,     0,   293,     0,   315,   400,   109,     0,   381,
     382,   383,   384,   385,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   122,
     123,   124,   125,   574,   575,   576,   577,   578,   579,   580,
     581,   582,   128,   583,   584,   585,   586,   129,   587,   131,
     588,   589,   590,   591,   592,   593,   594,   595,   134,   596,
     597,   598,   599,   600,   601,   602,   603,   604,   605,   140,
     606,   141,   607,   608,   609,   610,   611,   612,   613,   144,
     145,   146,   147,   148,   614,     0,     0,     0,   395,     0,
       0,     0,   149,     0,   310,   388,   389,    23,   390,     0,
     391,   615,     0,   330,     0,   396,     0,     0,     0,   315,
       0,   109,     0,   616,   398,     0,     0,     0,   539,   540,
     541,   542,   543,   544,   545,   546,   547,   548,   549,   550,
     551,   552,   553,   554,   555,   556,   557,   558,   559,   560,
     561,   562,   563,   564,   565,   566,   567,   568,   569,   570,
     571,   572,   573,   122,   123,   124,   125,   574,   575,   576,
     577,   578,   579,   580,   581,   582,   128,   583,   584,   585,
     586,   129,   587,   131,   588,   589,   590,   591,   592,   593,
     594,   595,   134,   596,   597,   598,   599,   600,   601,   602,
     603,   604,   605,   140,   606,   141,   607,   608,   609,   610,
     611,   612,   613,   144,   145,   146,   147,   148,   614,     0,
       0,     0,   395,   704,     0,     0,   149,     0,   310,   311,
     312,    23,   313,     0,   314,   615,     0,   330,     0,   396,
       0,     0,     0,   315,     0,   109,     0,   616,   398,     0,
       0,     0,     0,     0,   316,     0,   317,     0,     0,   111,
     112,   113,     0,   114,   115,     0,     0,     0,   318,   319,
     116,   117,     0,     0,   118,   119,   320,     0,     0,   120,
       0,     0,     0,     0,   121,   321,   322,   122,   123,   124,
     125,     0,     0,     0,     0,   323,   126,     0,   127,     0,
     128,     0,   324,     0,     0,   129,   130,   131,   132,     0,
     133,     0,   325,     0,     0,     0,   134,     0,   135,   136,
     137,   138,   139,   326,   241,     0,     0,   140,     0,   141,
     142,   143,   327,     0,     0,     0,     0,   144,   145,   146,
     147,   148,   328,     0,     0,     0,   277,     0,   329,     0,
     149,   310,   311,   312,     0,   313,     0,   314,     0,     0,
       0,   330,     0,     0,     0,     0,   315,     0,   109,     0,
       0,   331,   332,     0,     0,     0,     0,   316,     0,   317,
       0,     0,   111,   112,   113,     0,   114,   115,     0,     0,
       0,     0,     0,   116,   117,     0,     0,   118,   119,     0,
       0,     0,   120,     0,     0,     0,     0,   121,   321,   322,
     122,   123,   124,   125,     0,     0,     0,     0,   323,   126,
       0,   127,     0,   128,     0,   324,     0,     0,   129,   130,
     131,   132,     0,   133,     0,   325,     0,     0,     0,   134,
       0,   135,   136,   137,   138,   139,   326,   241,     0,     0,
     140,     0,   141,   142,   143,   327,     0,     0,     0,     0,
     144,   145,   146,   147,   148,   328,     0,   460,     0,     0,
       0,   329,     0,   149,   310,   311,   312,     0,   313,     0,
     314,     0,     0,     0,   330,     0,     0,     0,     0,   315,
       0,   109,     0,     0,   331,   332,     0,     0,     0,     0,
     316,     0,   317,     0,     0,   111,   112,   113,     0,   114,
     115,     0,     0,     0,     0,     0,   116,   117,     0,     0,
     118,   119,     0,     0,     0,   120,     0,     0,     0,     0,
     121,   321,   322,   122,   123,   124,   125,     0,     0,     0,
       0,   323,   126,     0,   127,     0,   128,     0,   324,     0,
       0,   129,   130,   131,   132,     0,   133,     0,   325,     0,
       0,     0,   134,     0,   135,   136,   137,   138,   139,   326,
     241,     0,     0,   140,     0,   141,   142,   143,   327,     0,
       0,     0,     0,   144,   145,   146,   147,   148,   328,     0,
       0,   310,   311,   312,   329,   313,   149,   314,     0,     0,
       0,     0,     0,     0,     0,     0,   315,   330,   109,     0,
       0,     0,     0,     0,     0,     0,     0,   331,   332,   317,
       0,     0,   111,   112,   113,     0,   114,   115,     0,     0,
       0,     0,     0,   116,   117,     0,     0,   118,   119,     0,
       0,     0,   120,     0,     0,     0,     0,   121,   321,   322,
     122,   123,   124,   125,     0,     0,     0,     0,   323,   126,
       0,   127,     0,   128,     0,   324,     0,     0,   129,   130,
     131,   132,     0,   133,     0,   325,     0,     0,     0,   134,
       0,   135,   136,   137,   138,   139,   326,   241,     0,     0,
     140,     0,   141,   142,   143,   327,     0,     0,     0,     0,
     144,   145,   146,   147,   148,   328,     0,     0,   310,   388,
     389,   329,   390,   149,   391,     0,     0,     0,     0,     0,
       0,     0,     0,   315,   330,   109,     0,     0,     0,     0,
       0,     0,     0,   203,   331,   332,   392,     0,     0,   111,
     112,   113,     0,   114,   115,     0,     0,     0,     0,   393,
     116,   117,     0,     0,   118,   119,     0,     0,     0,   120,
       0,     0,     0,     0,   121,   321,     0,   122,   123,   124,
     125,     0,     0,     0,     0,     0,   126,     0,   127,     0,
     128,     0,     0,     0,     0,   129,   130,   131,   132,     0,
     133,   394,     0,     0,     0,     0,   134,     0,   135,   136,
     137,   138,   139,     0,     0,     0,     0,   140,     0,   141,
     142,   143,   327,   204,     0,     0,     0,   144,   145,   146,
     147,   148,     0,     0,     0,     0,   395,   310,   388,   389,
     149,   390,     0,   391,     0,    23,     0,     0,     0,     0,
       0,   330,   315,   396,   109,     0,     0,     0,     0,     0,
       0,   397,   398,     0,     0,   392,     0,     0,   111,   112,
     113,     0,   114,   115,     0,     0,     0,     0,   393,   116,
     117,     0,     0,   118,   119,     0,     0,     0,   120,     0,
       0,     0,     0,   121,   321,     0,   122,   123,   124,   125,
       0,     0,     0,     0,     0,   126,     0,   127,     0,   128,
       0,     0,     0,     0,   129,   130,   131,   132,     0,   133,
     394,     0,     0,     0,     0,   134,     0,   135,   136,   137,
     138,   139,     0,     0,     0,     0,   140,     0,   141,   142,
     143,   327,     0,   310,     0,     0,   144,   145,   146,   147,
     148,     0,     0,     0,     0,   395,     0,     0,     0,   149,
     109,     0,     0,     0,    23,     0,     0,     0,     0,     0,
     330,   110,   396,     0,   111,   112,   113,     0,   114,   115,
     701,   398,     0,     0,     0,   116,   117,     0,     0,   118,
     119,   310,   388,   389,   120,   390,     0,   391,     0,   121,
       0,     0,   122,   123,   124,   125,   315,     0,   109,     0,
       0,   126,     0,   127,     0,   128,     0,     0,     0,   411,
     129,   130,   131,   132,     0,   133,     0,     0,     0,     0,
       0,   134,   393,   135,   136,   137,   138,   139,     0,     0,
       0,     0,   140,     0,   141,   142,   143,     0,   321,     0,
       0,     0,   144,   145,   146,   147,   148,   310,   311,   312,
       0,   313,     0,   314,     0,   149,     0,     0,     0,     0,
       0,     0,   315,     0,   394,     0,   330,     0,     0,     0,
       0,     0,     0,     0,     0,   658,   103,   150,   310,   311,
     312,     0,   313,     0,   314,   327,     0,     0,     0,     0,
       0,     0,     0,   315,     0,     0,     0,     0,     0,   784,
       0,     0,     0,     0,   321,     0,   658,     0,    23,     0,
       0,     0,     0,     0,   330,     0,   396,     0,     0,     0,
     682,     0,     0,     0,   701,   413,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,     0,     0,     0,     0,
       0,     0,   109,     0,   381,   382,   383,   384,   385,     0,
       0,   327,     0,   110,     0,     0,   111,   112,   113,     0,
     114,   115,     0,     0,     0,     0,     0,   116,   117,     0,
       0,   118,   119,     0,     0,     0,   120,     0,     0,     0,
     330,   121,   327,     0,   122,   123,   124,   125,     0,     0,
     659,   660,     0,   126,     0,   127,     0,   128,     0,     0,
       0,     0,   129,   130,   131,   132,     0,   133,     0,     0,
       0,   330,     0,   134,     0,   135,   136,   137,   138,   139,
       0,   659,   660,     0,   140,     0,   141,   142,   143,     0,
       0,     0,     0,     0,   144,   145,   146,   147,   148,     0,
       0,   109,     0,     0,     0,     0,     0,   149,     0,   203,
       0,     0,   110,     0,     0,   111,   112,   113,     0,   114,
     115,   222,     0,     0,     0,     0,   116,   117,   103,   150,
     118,   119,     0,     0,     0,   120,     0,     0,     0,     0,
     121,     0,     0,   122,   123,   124,   125,     0,     0,     0,
       0,     0,   126,     0,   127,     0,   128,     0,     0,     0,
       0,   129,   130,   131,   132,     0,   133,     0,     0,     0,
       0,     0,   134,     0,   135,   136,   137,   138,   139,     0,
       0,     0,     0,   140,     0,   141,   142,   143,     0,   204,
       0,     0,     0,   144,   145,   146,   147,   148,     0,     0,
     109,     0,     0,     0,     0,     0,   149,     0,   203,     0,
       0,   110,     0,     0,   111,   112,   113,     0,   114,   115,
       0,     0,     0,     0,     0,   116,   117,   205,   150,   118,
     119,     0,     0,     0,   120,     0,     0,     0,     0,   121,
       0,     0,   122,   123,   124,   125,     0,     0,     0,     0,
       0,   126,     0,   127,     0,   128,     0,     0,     0,     0,
     129,   130,   131,   132,     0,   133,     0,     0,     0,     0,
       0,   134,     0,   135,   136,   137,   138,   139,     0,     0,
       0,     0,   140,     0,   141,   142,   143,     0,   204,     0,
       0,     0,   144,   145,   146,   147,   148,     0,     0,   109,
       0,     0,     0,     0,     0,   149,     0,     0,     0,     0,
     110,     0,     0,   111,   112,   113,     0,   114,   115,     0,
       0,     0,     0,     0,   116,   117,   205,   150,   118,   119,
       0,     0,     0,   120,     0,   258,     0,     0,   121,     0,
       0,   122,   123,   124,   125,     0,   259,     0,     0,     0,
     126,     0,   127,     0,   128,     0,     0,     0,     0,   129,
     130,   131,   132,     0,   133,     0,     0,     0,     0,     0,
     134,     0,   135,   136,   137,   138,   139,     0,     0,     0,
       0,   140,     0,   141,   142,   143,     0,     0,     0,     0,
       0,   144,   145,   146,   147,   148,     0,     0,   109,     0,
       0,     0,     0,     0,   149,     0,     0,     0,     0,   110,
       0,     0,   111,   112,   113,     0,   114,   115,     0,     0,
       0,     0,     0,   116,   117,   103,   150,   118,   119,     0,
       0,     0,   120,     0,     0,     0,     0,   121,     0,     0,
     122,   123,   124,   125,     0,     0,     0,     0,     0,   126,
       0,   127,     0,   128,     0,     0,     0,     0,   129,   130,
     131,   132,     0,   133,     0,     0,     0,     0,     0,   134,
       0,   135,   136,   137,   138,   139,     0,     0,     0,     0,
     140,     0,   141,   142,   143,     0,     0,     0,     0,     0,
     144,   145,   146,   147,   148,     0,     0,   109,     0,    99,
       0,     0,     0,   149,     0,     0,     0,     0,   110,     0,
       0,   111,   112,   113,     0,   114,   115,     0,     0,     0,
       0,     0,   116,   117,   103,   150,   118,   119,     0,     0,
       0,   120,     0,     0,     0,     0,   121,     0,     0,   122,
     123,   124,   125,     0,     0,     0,     0,     0,   126,     0,
     127,     0,   128,     0,     0,     0,     0,   129,   130,   131,
     132,     0,   133,     0,     0,     0,     0,     0,   134,     0,
     135,   136,   137,   138,   139,     0,     0,     0,     0,   140,
       0,   141,   142,   143,     0,     0,     0,     0,     0,   144,
     145,   146,   147,   148,     0,   228,   109,     0,     0,     0,
       0,     0,   149,     0,     0,     0,     0,   110,     0,     0,
     111,   112,   113,     0,   114,   115,     0,     0,     0,     0,
       0,   116,   117,   103,   150,   118,   119,     0,     0,     0,
     120,     0,     0,     0,     0,   121,     0,     0,   122,   123,
     124,   125,     0,     0,     0,     0,     0,   126,     0,   127,
       0,   128,     0,     0,     0,     0,   129,   130,   131,   132,
       0,   133,     0,     0,     0,     0,     0,   134,     0,   135,
     136,   137,   138,   139,     0,     0,     0,     0,   140,     0,
     141,   142,   143,     0,     0,     0,     0,     0,   144,   145,
     146,   147,   148,     0,     0,   109,     0,     0,     0,     0,
       0,   149,     0,   262,     0,     0,   110,     0,     0,   111,
     112,   113,     0,   114,   115,     0,     0,     0,     0,     0,
     116,   117,   103,   150,   118,   119,     0,     0,     0,   120,
       0,     0,     0,     0,   121,     0,     0,   122,   123,   124,
     125,     0,     0,     0,     0,     0,   126,     0,   127,     0,
     128,     0,     0,     0,     0,   129,   130,   131,   132,     0,
     133,     0,     0,     0,     0,     0,   134,     0,   135,   136,
     137,   138,   139,     0,     0,     0,     0,   140,     0,   141,
     142,   143,     0,     0,     0,     0,     0,   144,   145,   146,
     147,   148,     0,     0,     0,     0,     0,     0,     0,     0,
     149,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   103,   150,   381,   382,   383,   384,   385,   539,   540,
     541,   542,   796,   544,   545,   797,   798,   799,   549,   800,
     801,   552,   553,   554,   555,   802,   803,   804,   559,   560,
     805,   806,   563,   564,   565,   807,   567,   568,   569,   570,
     808,   809,   573,     0,     0,     0,     0,   574,   575,   576,
     577,   578,   810,   580,   811,   582,     0,   583,   584,   585,
     586,     0,   812,     0,   813,   589,   814,   815,   592,   593,
     594,   595,     0,   596,   816,   817,   818,   819,   820,   602,
     603,   604,   605,     0,   606,     0,   821,   822,   823,   610,
     611,   612,   613,     0,     0,     0,     0,     0,   614,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   615,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   825,   539,   540,
     541,   542,   796,   544,   545,   797,   798,   799,   549,   800,
     801,   552,   553,   554,   555,   802,   803,   804,   559,   560,
     805,   806,   563,   564,   565,   807,   567,   568,   569,   570,
     808,   809,   573,     0,     0,     0,     0,   574,   575,   576,
     577,   578,   810,   580,   811,   582,     0,   583,   584,   585,
     586,     0,   812,     0,   813,   589,   814,   815,   592,   593,
     594,   595,     0,   596,   816,   817,   818,   819,   820,   602,
     603,   604,   605,     0,   606,     0,   821,   822,   823,   610,
     611,   612,   613,     0,     0,     0,     0,     0,   614,     0,
       0,     0,     0,   837,     0,     0,   824,     0,     0,     0,
       0,     0,     0,     0,     0,   615,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   825,   539,   540,
     541,   542,   796,   544,   545,   797,   798,   799,   549,   800,
     801,   552,   553,   554,   555,   802,   803,   804,   559,   560,
     805,   806,   563,   564,   565,   807,   567,   568,   569,   570,
     808,   809,   573,     0,     0,     0,     0,   574,   575,   576,
     577,   578,   810,   580,   811,   582,     0,   583,   584,   585,
     586,     0,   812,     0,   813,   589,   814,   815,   592,   593,
     594,   595,     0,   596,   816,   817,   818,   819,   820,   602,
     603,   604,   605,     0,   606,     0,   821,   822,   823,   610,
     611,   612,   613,     0,     0,     0,     0,     0,   614,     0,
       0,     0,     0,     0,     0,     0,   824,   841,     0,     0,
       0,     0,     0,     0,     0,   615,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   825,   539,   540,
     541,   542,   796,   544,   545,   797,   798,   799,   549,   800,
     801,   552,   553,   554,   555,   802,   803,   804,   559,   560,
     805,   806,   563,   564,   565,   807,   567,   568,   569,   570,
     808,   809,   573,     0,     0,     0,     0,   574,   575,   576,
     577,   578,   810,   580,   811,   582,     0,   583,   584,   585,
     586,     0,   812,     0,   813,   589,   814,   815,   592,   593,
     594,   595,     0,   596,   816,   817,   818,   819,   820,   602,
     603,   604,   605,     0,   606,     0,   821,   822,   823,   610,
     611,   612,   613,     0,     0,     0,     0,     0,   614,     0,
       0,     0,     0,     0,     0,     0,   824,     0,     0,     0,
       0,     0,     0,     0,     0,   615,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   825
  };

  const short int
  asn1_parser::yycheck_[] =
  {
       9,   274,   266,   100,     0,   102,   442,     3,   342,    18,
     473,   482,    92,   138,   139,   451,   478,    30,   442,    99,
     138,   139,   102,    53,    21,     4,   106,   237,   479,    99,
      21,    29,     4,    21,    29,    62,    66,    67,    21,    43,
      70,     4,    43,    67,    74,    53,    41,   110,   707,     4,
      48,   110,    29,    43,   233,   506,     4,    87,    66,    67,
       4,   240,    70,    87,    28,    52,    74,   246,    48,    99,
     120,    16,    17,    75,   154,   243,    43,   111,    43,    87,
     143,   124,    21,    91,   143,   521,    48,   243,    49,    87,
     124,    99,   120,    75,   243,    91,   139,    48,   148,   179,
      43,    48,    98,    99,   100,   764,   102,    87,   135,   277,
      43,   109,   243,   119,   109,   379,   241,   120,   124,   120,
     148,   277,   123,    87,   147,    87,   136,    91,   277,     0,
     120,   122,   109,   123,   147,   148,    87,   124,   148,   236,
      87,   254,   144,   256,   148,   148,   277,   148,   228,   147,
     147,   148,   147,   120,    31,   120,   147,   254,   148,   147,
     240,   329,   144,   122,   147,   137,   246,   280,   265,   148,
     147,   131,   202,   329,   254,   147,   148,   120,   258,   259,
     329,   148,   262,   148,   147,   148,    15,   120,   367,   368,
      33,   271,   147,   148,   373,   374,   620,   322,   329,   147,
     148,   271,   272,   147,   148,   148,   470,   287,   147,   148,
     474,   123,   325,   122,    57,   148,    93,   120,   119,    73,
     300,   122,   230,   135,   233,    68,   235,   136,   237,   122,
     122,   240,   683,   242,     9,   112,   266,   246,   247,   319,
     236,   271,   272,    18,   136,   148,   147,    85,   256,   273,
     826,   275,   767,    85,   769,   148,   264,   266,   254,   710,
     836,   732,   100,   271,   272,   273,   476,   380,   100,   265,
     266,   733,   280,   282,   123,   271,   124,   357,   274,   123,
     393,   122,   395,   124,   122,   124,   124,   367,   368,   468,
     122,   135,   124,   373,   374,   136,   254,   136,   256,   122,
     748,   124,   470,   119,    42,    43,   474,   122,   124,   757,
     125,   479,   783,   136,   124,   483,   650,   325,   128,   123,
     135,   136,   280,   479,   139,   123,   136,   483,   124,   123,
     479,   135,   500,   138,   483,   503,   121,   135,   506,   121,
     136,   135,   104,   128,   500,     4,   128,   503,   784,   379,
     506,   500,   104,   450,   503,   452,   119,   506,   367,   368,
     784,   124,   442,   104,   373,   374,   491,   325,    59,   832,
     138,   451,   380,    69,   487,    54,   135,   641,   135,    58,
     139,   125,   139,   379,   143,   393,   143,   395,    23,    24,
     470,   428,    27,   119,   830,   432,   131,   477,   428,    91,
      92,    93,   432,   261,    34,   263,   830,   147,   148,   123,
     124,   524,    70,   140,   527,   528,   529,   530,   531,   428,
     140,   122,   380,   432,    23,    24,    25,    26,    27,   135,
      54,   140,   428,   123,   707,   393,   432,   395,   122,   119,
     470,   136,    89,   556,   474,   101,   101,   122,   122,    85,
     122,    67,   101,    15,   450,   136,   452,   122,   122,   468,
     128,   139,   119,   136,   473,   136,   136,   476,   636,   478,
     139,   124,   148,   482,   470,   600,   601,   119,   474,   487,
     636,   122,   600,   601,   442,   136,   136,   636,   122,   122,
      85,   764,    85,   147,    85,    85,   139,   123,   135,   147,
     123,   130,   124,   135,    85,   123,    56,   537,   538,    38,
     135,    38,    12,     4,   135,   683,   524,   136,   122,   527,
     528,   529,   530,   531,   135,    56,   128,   683,   136,   487,
     124,   123,   121,   143,   683,   123,   123,   617,   135,   124,
     620,   537,   710,   143,   123,   122,   142,   627,   556,     4,
       5,     6,   136,     8,   710,    10,   136,   123,   136,   124,
     136,   710,   135,   135,    19,   122,   524,   122,   665,   527,
     528,   529,   530,   531,   125,   120,   125,    32,     4,   127,
     748,   123,     4,     5,     6,   665,     8,   148,    10,   757,
      45,    71,   748,    21,   135,   118,   120,    19,   556,   748,
     136,   757,   135,   125,   125,   135,    61,    38,   757,   135,
      32,   641,   125,   125,   727,   102,   135,   742,     4,     5,
       6,   146,     8,    45,    10,   738,   125,   125,   135,   123,
     139,   640,    87,    19,   123,   123,     3,   123,   135,    61,
     135,   122,   635,   136,   136,   641,    32,   123,   265,   714,
     135,   764,   135,   108,   824,   747,   271,   243,   665,   617,
     774,   670,   620,   620,   617,    87,   675,   122,   123,   665,
     773,   784,    18,    32,    74,    61,   131,    53,    70,    87,
     427,   537,   137,   254,   139,   761,   108,   247,   640,    11,
      44,    77,   147,   148,    49,   277,   503,   500,   728,   483,
     122,    -1,   683,    -1,   784,    -1,   352,    -1,    -1,   131,
      -1,   707,    -1,    -1,    -1,   137,    -1,   139,    -1,   727,
     728,    -1,   108,   732,   733,   147,   148,    -1,    -1,    -1,
     738,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   128,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   137,   761,    -1,    -1,    -1,   764,    -1,   767,    -1,
     769,   147,   148,    -1,    -1,   774,   775,    -1,   764,   727,
      -1,    -1,    -1,    -1,   783,    -1,    -1,    -1,    -1,    -1,
     738,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   764,    -1,    -1,    -1,
       4,     5,     6,    -1,     8,    -1,    10,    -1,    -1,    -1,
      -1,    -1,    -1,   832,    -1,    19,   784,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,    -1,   122,    -1,
      -1,    -1,   126,    -1,     4,     5,     6,   131,     8,    -1,
      10,   135,    -1,   137,    -1,   139,    -1,    -1,    -1,    19,
      -1,    21,    -1,   147,   148,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,    -1,   122,   123,    -1,    -1,   126,    -1,     4,     5,
       6,   131,     8,    -1,    10,   135,    -1,   137,    -1,   139,
      -1,    -1,    -1,    19,    -1,    21,    -1,   147,   148,    -1,
      -1,    -1,    -1,    -1,    30,    -1,    32,    -1,    -1,    35,
      36,    37,    -1,    39,    40,    -1,    -1,    -1,    44,    45,
      46,    47,    -1,    -1,    50,    51,    52,    -1,    -1,    55,
      -1,    -1,    -1,    -1,    60,    61,    62,    63,    64,    65,
      66,    -1,    -1,    -1,    -1,    71,    72,    -1,    74,    -1,
      76,    -1,    78,    -1,    -1,    81,    82,    83,    84,    -1,
      86,    -1,    88,    -1,    -1,    -1,    92,    -1,    94,    95,
      96,    97,    98,    99,   100,    -1,    -1,   103,    -1,   105,
     106,   107,   108,    -1,    -1,    -1,    -1,   113,   114,   115,
     116,   117,   118,    -1,    -1,    -1,   122,    -1,   124,    -1,
     126,     4,     5,     6,    -1,     8,    -1,    10,    -1,    -1,
      -1,   137,    -1,    -1,    -1,    -1,    19,    -1,    21,    -1,
      -1,   147,   148,    -1,    -1,    -1,    -1,    30,    -1,    32,
      -1,    -1,    35,    36,    37,    -1,    39,    40,    -1,    -1,
      -1,    -1,    -1,    46,    47,    -1,    -1,    50,    51,    -1,
      -1,    -1,    55,    -1,    -1,    -1,    -1,    60,    61,    62,
      63,    64,    65,    66,    -1,    -1,    -1,    -1,    71,    72,
      -1,    74,    -1,    76,    -1,    78,    -1,    -1,    81,    82,
      83,    84,    -1,    86,    -1,    88,    -1,    -1,    -1,    92,
      -1,    94,    95,    96,    97,    98,    99,   100,    -1,    -1,
     103,    -1,   105,   106,   107,   108,    -1,    -1,    -1,    -1,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,    -1,
      -1,   124,    -1,   126,     4,     5,     6,    -1,     8,    -1,
      10,    -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,    19,
      -1,    21,    -1,    -1,   147,   148,    -1,    -1,    -1,    -1,
      30,    -1,    32,    -1,    -1,    35,    36,    37,    -1,    39,
      40,    -1,    -1,    -1,    -1,    -1,    46,    47,    -1,    -1,
      50,    51,    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,
      60,    61,    62,    63,    64,    65,    66,    -1,    -1,    -1,
      -1,    71,    72,    -1,    74,    -1,    76,    -1,    78,    -1,
      -1,    81,    82,    83,    84,    -1,    86,    -1,    88,    -1,
      -1,    -1,    92,    -1,    94,    95,    96,    97,    98,    99,
     100,    -1,    -1,   103,    -1,   105,   106,   107,   108,    -1,
      -1,    -1,    -1,   113,   114,   115,   116,   117,   118,    -1,
      -1,     4,     5,     6,   124,     8,   126,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    19,   137,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   147,   148,    32,
      -1,    -1,    35,    36,    37,    -1,    39,    40,    -1,    -1,
      -1,    -1,    -1,    46,    47,    -1,    -1,    50,    51,    -1,
      -1,    -1,    55,    -1,    -1,    -1,    -1,    60,    61,    62,
      63,    64,    65,    66,    -1,    -1,    -1,    -1,    71,    72,
      -1,    74,    -1,    76,    -1,    78,    -1,    -1,    81,    82,
      83,    84,    -1,    86,    -1,    88,    -1,    -1,    -1,    92,
      -1,    94,    95,    96,    97,    98,    99,   100,    -1,    -1,
     103,    -1,   105,   106,   107,   108,    -1,    -1,    -1,    -1,
     113,   114,   115,   116,   117,   118,    -1,    -1,     4,     5,
       6,   124,     8,   126,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,   137,    21,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    29,   147,   148,    32,    -1,    -1,    35,
      36,    37,    -1,    39,    40,    -1,    -1,    -1,    -1,    45,
      46,    47,    -1,    -1,    50,    51,    -1,    -1,    -1,    55,
      -1,    -1,    -1,    -1,    60,    61,    -1,    63,    64,    65,
      66,    -1,    -1,    -1,    -1,    -1,    72,    -1,    74,    -1,
      76,    -1,    -1,    -1,    -1,    81,    82,    83,    84,    -1,
      86,    87,    -1,    -1,    -1,    -1,    92,    -1,    94,    95,
      96,    97,    98,    -1,    -1,    -1,    -1,   103,    -1,   105,
     106,   107,   108,   109,    -1,    -1,    -1,   113,   114,   115,
     116,   117,    -1,    -1,    -1,    -1,   122,     4,     5,     6,
     126,     8,    -1,    10,    -1,   131,    -1,    -1,    -1,    -1,
      -1,   137,    19,   139,    21,    -1,    -1,    -1,    -1,    -1,
      -1,   147,   148,    -1,    -1,    32,    -1,    -1,    35,    36,
      37,    -1,    39,    40,    -1,    -1,    -1,    -1,    45,    46,
      47,    -1,    -1,    50,    51,    -1,    -1,    -1,    55,    -1,
      -1,    -1,    -1,    60,    61,    -1,    63,    64,    65,    66,
      -1,    -1,    -1,    -1,    -1,    72,    -1,    74,    -1,    76,
      -1,    -1,    -1,    -1,    81,    82,    83,    84,    -1,    86,
      87,    -1,    -1,    -1,    -1,    92,    -1,    94,    95,    96,
      97,    98,    -1,    -1,    -1,    -1,   103,    -1,   105,   106,
     107,   108,    -1,     4,    -1,    -1,   113,   114,   115,   116,
     117,    -1,    -1,    -1,    -1,   122,    -1,    -1,    -1,   126,
      21,    -1,    -1,    -1,   131,    -1,    -1,    -1,    -1,    -1,
     137,    32,   139,    -1,    35,    36,    37,    -1,    39,    40,
     147,   148,    -1,    -1,    -1,    46,    47,    -1,    -1,    50,
      51,     4,     5,     6,    55,     8,    -1,    10,    -1,    60,
      -1,    -1,    63,    64,    65,    66,    19,    -1,    21,    -1,
      -1,    72,    -1,    74,    -1,    76,    -1,    -1,    -1,    32,
      81,    82,    83,    84,    -1,    86,    -1,    -1,    -1,    -1,
      -1,    92,    45,    94,    95,    96,    97,    98,    -1,    -1,
      -1,    -1,   103,    -1,   105,   106,   107,    -1,    61,    -1,
      -1,    -1,   113,   114,   115,   116,   117,     4,     5,     6,
      -1,     8,    -1,    10,    -1,   126,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    -1,    87,    -1,   137,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    32,   147,   148,     4,     5,
       6,    -1,     8,    -1,    10,   108,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,    -1,   122,
      -1,    -1,    -1,    -1,    61,    -1,    32,    -1,   131,    -1,
      -1,    -1,    -1,    -1,   137,    -1,   139,    -1,    -1,    -1,
      77,    -1,    -1,    -1,   147,   148,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    -1,
      -1,   108,    -1,    32,    -1,    -1,    35,    36,    37,    -1,
      39,    40,    -1,    -1,    -1,    -1,    -1,    46,    47,    -1,
      -1,    50,    51,    -1,    -1,    -1,    55,    -1,    -1,    -1,
     137,    60,   108,    -1,    63,    64,    65,    66,    -1,    -1,
     147,   148,    -1,    72,    -1,    74,    -1,    76,    -1,    -1,
      -1,    -1,    81,    82,    83,    84,    -1,    86,    -1,    -1,
      -1,   137,    -1,    92,    -1,    94,    95,    96,    97,    98,
      -1,   147,   148,    -1,   103,    -1,   105,   106,   107,    -1,
      -1,    -1,    -1,    -1,   113,   114,   115,   116,   117,    -1,
      -1,    21,    -1,    -1,    -1,    -1,    -1,   126,    -1,    29,
      -1,    -1,    32,    -1,    -1,    35,    36,    37,    -1,    39,
      40,    41,    -1,    -1,    -1,    -1,    46,    47,   147,   148,
      50,    51,    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    66,    -1,    -1,    -1,
      -1,    -1,    72,    -1,    74,    -1,    76,    -1,    -1,    -1,
      -1,    81,    82,    83,    84,    -1,    86,    -1,    -1,    -1,
      -1,    -1,    92,    -1,    94,    95,    96,    97,    98,    -1,
      -1,    -1,    -1,   103,    -1,   105,   106,   107,    -1,   109,
      -1,    -1,    -1,   113,   114,   115,   116,   117,    -1,    -1,
      21,    -1,    -1,    -1,    -1,    -1,   126,    -1,    29,    -1,
      -1,    32,    -1,    -1,    35,    36,    37,    -1,    39,    40,
      -1,    -1,    -1,    -1,    -1,    46,    47,   147,   148,    50,
      51,    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,    60,
      -1,    -1,    63,    64,    65,    66,    -1,    -1,    -1,    -1,
      -1,    72,    -1,    74,    -1,    76,    -1,    -1,    -1,    -1,
      81,    82,    83,    84,    -1,    86,    -1,    -1,    -1,    -1,
      -1,    92,    -1,    94,    95,    96,    97,    98,    -1,    -1,
      -1,    -1,   103,    -1,   105,   106,   107,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,   116,   117,    -1,    -1,    21,
      -1,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,
      32,    -1,    -1,    35,    36,    37,    -1,    39,    40,    -1,
      -1,    -1,    -1,    -1,    46,    47,   147,   148,    50,    51,
      -1,    -1,    -1,    55,    -1,    57,    -1,    -1,    60,    -1,
      -1,    63,    64,    65,    66,    -1,    68,    -1,    -1,    -1,
      72,    -1,    74,    -1,    76,    -1,    -1,    -1,    -1,    81,
      82,    83,    84,    -1,    86,    -1,    -1,    -1,    -1,    -1,
      92,    -1,    94,    95,    96,    97,    98,    -1,    -1,    -1,
      -1,   103,    -1,   105,   106,   107,    -1,    -1,    -1,    -1,
      -1,   113,   114,   115,   116,   117,    -1,    -1,    21,    -1,
      -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    32,
      -1,    -1,    35,    36,    37,    -1,    39,    40,    -1,    -1,
      -1,    -1,    -1,    46,    47,   147,   148,    50,    51,    -1,
      -1,    -1,    55,    -1,    -1,    -1,    -1,    60,    -1,    -1,
      63,    64,    65,    66,    -1,    -1,    -1,    -1,    -1,    72,
      -1,    74,    -1,    76,    -1,    -1,    -1,    -1,    81,    82,
      83,    84,    -1,    86,    -1,    -1,    -1,    -1,    -1,    92,
      -1,    94,    95,    96,    97,    98,    -1,    -1,    -1,    -1,
     103,    -1,   105,   106,   107,    -1,    -1,    -1,    -1,    -1,
     113,   114,   115,   116,   117,    -1,    -1,    21,    -1,   122,
      -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    32,    -1,
      -1,    35,    36,    37,    -1,    39,    40,    -1,    -1,    -1,
      -1,    -1,    46,    47,   147,   148,    50,    51,    -1,    -1,
      -1,    55,    -1,    -1,    -1,    -1,    60,    -1,    -1,    63,
      64,    65,    66,    -1,    -1,    -1,    -1,    -1,    72,    -1,
      74,    -1,    76,    -1,    -1,    -1,    -1,    81,    82,    83,
      84,    -1,    86,    -1,    -1,    -1,    -1,    -1,    92,    -1,
      94,    95,    96,    97,    98,    -1,    -1,    -1,    -1,   103,
      -1,   105,   106,   107,    -1,    -1,    -1,    -1,    -1,   113,
     114,   115,   116,   117,    -1,   119,    21,    -1,    -1,    -1,
      -1,    -1,   126,    -1,    -1,    -1,    -1,    32,    -1,    -1,
      35,    36,    37,    -1,    39,    40,    -1,    -1,    -1,    -1,
      -1,    46,    47,   147,   148,    50,    51,    -1,    -1,    -1,
      55,    -1,    -1,    -1,    -1,    60,    -1,    -1,    63,    64,
      65,    66,    -1,    -1,    -1,    -1,    -1,    72,    -1,    74,
      -1,    76,    -1,    -1,    -1,    -1,    81,    82,    83,    84,
      -1,    86,    -1,    -1,    -1,    -1,    -1,    92,    -1,    94,
      95,    96,    97,    98,    -1,    -1,    -1,    -1,   103,    -1,
     105,   106,   107,    -1,    -1,    -1,    -1,    -1,   113,   114,
     115,   116,   117,    -1,    -1,    21,    -1,    -1,    -1,    -1,
      -1,   126,    -1,   128,    -1,    -1,    32,    -1,    -1,    35,
      36,    37,    -1,    39,    40,    -1,    -1,    -1,    -1,    -1,
      46,    47,   147,   148,    50,    51,    -1,    -1,    -1,    55,
      -1,    -1,    -1,    -1,    60,    -1,    -1,    63,    64,    65,
      66,    -1,    -1,    -1,    -1,    -1,    72,    -1,    74,    -1,
      76,    -1,    -1,    -1,    -1,    81,    82,    83,    84,    -1,
      86,    -1,    -1,    -1,    -1,    -1,    92,    -1,    94,    95,
      96,    97,    98,    -1,    -1,    -1,    -1,   103,    -1,   105,
     106,   107,    -1,    -1,    -1,    -1,    -1,   113,   114,   115,
     116,   117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   147,   148,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    -1,    82,    -1,    84,    85,    86,    87,    88,    89,
      90,    91,    -1,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,    -1,   104,    -1,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,    -1,    -1,    -1,   118,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   147,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    -1,    82,    -1,    84,    85,    86,    87,    88,    89,
      90,    91,    -1,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,    -1,   104,    -1,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,    -1,    -1,    -1,   118,    -1,
      -1,    -1,    -1,   123,    -1,    -1,   126,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   147,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    -1,    82,    -1,    84,    85,    86,    87,    88,    89,
      90,    91,    -1,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,    -1,   104,    -1,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,    -1,    -1,    -1,   118,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   126,   127,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   147,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    -1,    77,    78,    79,
      80,    -1,    82,    -1,    84,    85,    86,    87,    88,    89,
      90,    91,    -1,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,    -1,   104,    -1,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,    -1,    -1,    -1,   118,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   147
  };

  const unsigned short int
  asn1_parser::yystos_[] =
  {
       0,   147,   152,   153,   224,   375,     0,   152,    49,   122,
     225,   226,   227,    15,   232,     4,   148,   228,   229,   230,
     231,   306,   373,   131,   311,    73,    33,    57,    68,   233,
     123,   228,   124,   138,   312,   104,   104,   104,    59,   234,
     230,    16,    17,   314,   138,   313,    69,   119,   125,   314,
     131,    34,   313,    58,   235,   236,    30,   147,   148,   237,
     244,   245,   246,   372,   374,   223,    70,   238,   140,   140,
     135,   122,    54,   239,   240,   241,   244,    21,   147,   158,
     194,   198,   199,   200,   201,   202,   203,   247,   248,   257,
     258,   372,   374,   376,   245,   123,   140,   241,    62,   122,
     204,   248,   119,   147,   192,   193,   204,   372,   375,    21,
      32,    35,    36,    37,    39,    40,    46,    47,    50,    51,
      55,    60,    63,    64,    65,    66,    72,    74,    76,    81,
      82,    83,    84,    86,    92,    94,    95,    96,    97,    98,
     103,   105,   106,   107,   113,   114,   115,   116,   117,   126,
     148,   182,   183,   197,   204,   209,   210,   211,   212,   249,
     251,   255,   259,   260,   267,   269,   273,   277,   278,   281,
     282,   283,   288,   289,   290,   291,   295,   296,   297,   298,
     302,   309,   310,   315,   316,   317,   318,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   372,   373,   374,   375,
     204,   242,   375,    29,   109,   147,   155,   156,   157,   205,
     206,   207,   208,   246,   259,   372,   374,   375,   376,   147,
     155,   375,    41,   155,   159,   160,   259,   119,   119,   259,
     136,   101,   101,   122,    89,   122,    85,   122,    67,   101,
      85,   100,   122,   124,   329,   355,    85,   122,   329,   355,
      15,   299,   259,   136,   122,   253,   119,   329,    57,    68,
     259,   136,   128,   136,   136,   119,   122,   243,   303,   374,
     123,   135,   139,   136,   119,   136,   122,   122,   195,   259,
     119,   372,   122,   261,   292,   293,   294,   373,   120,   271,
     274,   275,   276,   373,   155,   270,   271,   373,   259,   261,
     373,   329,    43,   120,   123,   261,   284,   285,   286,   287,
       4,     5,     6,     8,    10,    19,    30,    32,    44,    45,
      52,    61,    62,    71,    78,    88,    99,   108,   118,   124,
     137,   147,   148,   195,   214,   215,   217,   222,   259,   268,
     272,   319,   330,   331,   332,   333,   335,   336,   337,   338,
     339,   340,   341,   345,   346,   347,   348,   349,   350,   351,
     353,   355,   356,   357,   358,   368,   369,    85,    85,   259,
     261,   123,   284,    85,    85,   139,    31,    93,   112,   301,
     119,    23,    24,    25,    26,    27,   163,   164,     5,     6,
       8,    10,    32,    45,    87,   122,   139,   147,   148,   155,
     197,   254,   259,   262,   263,   264,   265,   268,   272,   311,
     319,    32,   147,   148,   197,   262,   263,   372,   259,   259,
     164,   259,   164,    21,   372,   159,     4,   213,   250,   252,
     256,   304,   305,   306,   307,   308,   373,   374,   375,   206,
     246,   376,   122,   182,   184,   185,   186,   188,   375,   147,
      23,    24,    27,   161,   162,   165,   168,   170,   171,   173,
     120,   196,   333,   263,   279,   280,   373,   123,   135,   259,
     130,   370,   123,   135,   124,   123,   135,    85,   135,    48,
      87,   123,   135,    56,   342,    38,   259,    38,   329,   263,
      12,    42,    43,   335,     4,   122,   370,   135,   110,   143,
     343,    75,   144,   344,   342,   259,   121,   128,   259,   261,
     259,   261,   123,   259,   261,   259,   261,     4,   250,   300,
     263,   136,   263,   263,   266,   124,   123,   135,   139,   143,
     135,   143,   253,   250,   304,   123,   304,   124,   136,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    77,    78,    79,    80,    82,    84,    85,
      86,    87,    88,    89,    90,    91,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   104,   106,   107,   108,
     109,   110,   111,   112,   118,   135,   147,   163,   181,   187,
     189,   190,   191,   259,   263,   377,   136,    48,    87,   155,
     166,   163,   259,   155,   123,   135,   135,   123,   135,   123,
     135,   124,   120,   261,   250,   259,   272,   371,   374,   375,
     120,   276,   250,   272,   271,   259,   120,   286,    32,   147,
     148,   347,   120,   287,   345,   122,    52,   263,   329,   359,
     122,   360,   361,   362,   125,   142,   218,   219,   125,   120,
     338,   340,    77,   128,   347,   352,   354,   127,   163,   123,
     263,     4,   263,   263,   263,   263,   263,   123,   307,   374,
      71,   147,   191,   135,   123,   190,   259,    48,    87,   172,
      48,    87,   169,   111,   167,    48,    87,   174,   118,   175,
     162,   334,   335,   120,   280,     4,   250,   139,   136,   370,
     125,   125,   135,   135,   155,   208,   216,   259,    38,   120,
     363,   364,   373,   136,   221,   373,   123,   135,   135,   354,
     125,   125,   146,   184,   347,   169,   102,   135,   125,   125,
     263,   135,   120,   286,   139,   123,   263,   135,   123,   135,
     329,   365,   366,   136,   220,   136,   219,   334,   123,   122,
     154,   334,   275,   135,   122,   184,   263,   363,   363,    28,
      87,    91,   367,   220,   221,   373,    32,    35,    36,    37,
      39,    40,    45,    46,    47,    50,    51,    55,    60,    61,
      72,    74,    82,    84,    86,    87,    94,    95,    96,    97,
      98,   106,   107,   108,   126,   147,   176,   177,   178,   179,
     180,   181,   135,   120,   263,   123,   176,   123,   177,   163,
     181,   127
  };

  const unsigned short int
  asn1_parser::yyr1_[] =
  {
       0,   151,   152,   152,   153,   154,   155,   155,   155,   156,
     157,   157,   158,   159,   159,   160,   161,   161,   162,   162,
     162,   162,   162,   163,   163,   163,   163,   163,   164,   164,
     165,   166,   166,   166,   167,   167,   168,   169,   169,   169,
     170,   171,   172,   172,   172,   173,   174,   174,   174,   175,
     175,   176,   176,   177,   177,   178,   179,   180,   180,   181,
     181,   182,   182,   183,   184,   184,   185,   185,   186,   187,
     188,   189,   189,   190,   190,   191,   191,   192,   192,   193,
     194,   195,   196,   196,   196,   196,   196,   197,   197,   198,
     198,   198,   198,   198,   199,   200,   201,   202,   203,   204,
     205,   205,   206,   206,   207,   207,   208,   208,   209,   210,
     211,   212,   212,   213,   213,   214,   214,   214,   215,   216,
     216,   216,   216,   216,   217,   217,   218,   218,   219,   219,
     220,   220,   221,   221,   222,   222,   222,   223,   224,   225,
     225,   225,   226,   227,   228,   228,   229,   229,   229,   230,
     231,   232,   232,   233,   233,   233,   233,   234,   234,   235,
     235,   236,   236,   236,   237,   237,   238,   238,   239,   239,
     240,   240,   241,   242,   243,   243,   243,   244,   244,   245,
     246,   246,   246,   247,   247,   248,   248,   248,   248,   248,
     249,   249,   249,   250,   250,   251,   252,   253,   254,   254,
     254,   255,   256,   257,   258,   259,   259,   259,   259,   259,
     260,   260,   260,   260,   260,   260,   260,   260,   260,   260,
     260,   260,   260,   260,   260,   260,   260,   260,   260,   260,
     260,   260,   260,   260,   260,   260,   260,   260,   260,   260,
     261,   262,   262,   262,   262,   262,   262,   262,   262,   262,
     262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
     263,   263,   264,   264,   265,   265,   266,   266,   267,   268,
     268,   269,   269,   270,   270,   271,   271,   272,   272,   273,
     274,   274,   274,   274,   275,   275,   276,   276,   277,   278,
     278,   279,   279,   280,   280,   281,   282,   283,   283,   284,
     285,   285,   285,   285,   285,   285,   285,   285,   286,   286,
     287,   287,   287,   287,   288,   288,   289,   289,   290,   290,
     291,   292,   293,   293,   294,   294,   295,   296,   297,   297,
     297,   298,   299,   299,   300,   300,   301,   301,   301,   301,
     302,   303,   303,   304,   304,   305,   305,   305,   306,   307,
     307,   308,   309,   310,   311,   312,   313,   313,   314,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     324,   325,   325,   325,   325,   325,   325,   325,   325,   325,
     325,   325,   325,   325,   326,   327,   327,   328,   328,   328,
     328,   328,   328,   328,   328,   329,   330,   330,   331,   332,
     332,   332,   333,   334,   335,   335,   336,   336,   337,   338,
     338,   339,   340,   340,   341,   342,   343,   343,   344,   344,
     345,   345,   346,   346,   346,   346,   346,   346,   346,   346,
     346,   347,   347,   347,   347,   347,   347,   347,   347,   347,
     347,   348,   349,   350,   351,   351,   352,   352,   353,   353,
     354,   354,   355,   356,   357,   358,   358,   359,   360,   360,
     361,   362,   363,   363,   364,   365,   366,   366,   367,   367,
     367,   367,   368,   369,   370,   370,   371,   371,   371,   372,
     373,   374,   375,   376,   377,   377,   377,   377,   377,   377,
     377,   377,   377,   377,   377,   377,   377,   377,   377,   377,
     377,   377,   377,   377,   377,   377,   377,   377,   377,   377,
     377,   377,   377,   377,   377,   377,   377,   377,   377,   377,
     377,   377,   377,   377,   377,   377,   377,   377,   377,   377,
     377,   377,   377,   377,   377,   377,   377,   377,   377,   377,
     377,   377,   377,   377,   377,   377,   377,   377,   377,   377,
     377,   377,   377,   377,   377,   377,   377,   377,   377,   377,
     377
  };

  const unsigned char
  asn1_parser::yyr2_[] =
  {
       0,     2,     1,     2,    10,     3,     1,     1,     1,     3,
       1,     1,     3,     1,     1,     5,     1,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       2,     1,     2,     0,     1,     0,     4,     1,     2,     0,
       3,     3,     1,     2,     0,     3,     1,     1,     0,     3,
       0,     1,     2,     1,     1,     3,     2,     1,     2,     1,
       1,     1,     1,     3,     1,     1,     1,     1,     5,     2,
       3,     1,     2,     1,     1,     1,     1,     1,     1,     3,
       4,     3,     1,     3,     1,     3,     5,     3,     3,     1,
       1,     1,     1,     1,     4,     5,     5,     4,     5,     3,
       1,     3,     3,     1,     1,     1,     1,     1,     1,     3,
       3,     1,     1,     1,     1,     1,     1,     1,     5,     3,
       3,     1,     1,     0,     1,     4,     1,     3,     2,     4,
       2,     0,     1,     3,     2,     3,     5,     0,     2,     1,
       1,     0,     3,     2,     1,     2,     1,     1,     1,     1,
       4,     2,     0,     2,     2,     2,     0,     2,     0,     3,
       0,     3,     3,     0,     1,     0,     3,     0,     1,     0,
       1,     2,     3,     2,     1,     1,     0,     1,     3,     1,
       1,     3,     1,     1,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     2,     3,     1,     1,
       1,     3,     3,     3,     4,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     1,     1,     1,     1,     1,     1,     1,     2,     1,
       4,     1,     1,     1,     1,     3,     3,     1,     1,     1,
       1,     1,     3,     3,     3,     3,     1,     2,     1,     1,
       1,     1,     4,     1,     3,     4,     4,     1,     2,     4,
       1,     4,     6,     2,     1,     3,     1,     1,     1,     2,
       5,     1,     3,     4,     4,     2,     1,     3,     4,     1,
       1,     3,     5,     7,     3,     5,     1,     3,     1,     3,
       1,     2,     3,     3,     3,     3,     3,     4,     3,     3,
       4,     1,     1,     3,     1,     3,     3,     1,     2,     3,
       3,     5,     2,     0,     1,     1,     1,     1,     1,     0,
       2,     3,     4,     1,     2,     1,     1,     1,     1,     1,
       1,     4,     1,     1,     4,     2,     3,     0,     1,     1,
       1,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     2,     1,     4,     4,     4,
       4,     4,     4,     4,     4,     4,     1,     1,     1,     1,
       3,     5,     1,     1,     1,     2,     1,     3,     1,     1,
       3,     1,     1,     2,     1,     2,     1,     1,     1,     1,
       1,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     1,     3,     1,     2,     1,     2,     1,     1,
       1,     1,     2,     1,     2,     3,     3,     1,     1,     1,
       3,     5,     1,     3,     2,     2,     1,     0,     1,     1,
       1,     0,     2,     2,     2,     0,     1,     1,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1
  };



  // YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
  // First, the terminals, then, starting at \a yyntokens_, nonterminals.
  const char*
  const asn1_parser::yytname_[] =
  {
  "END_OF_FILE", "error", "$undefined", "comment", "number", "realnumber",
  "bstring", "xmlbstring", "hstring", "xmlhstring", "cstring",
  "xmlcstring", "simplestring", "xmltstring", "psname",
  "encodingreference", "integerUnicodeLabel", "non-integerUnicodeLabel",
  "extended-true", "tstring", "extended-false", "objectreference",
  "objectsetreference", "typefieldreference", "valuefieldreference",
  "valuesetfieldreference", "objectfieldreference",
  "objectsetfieldreference", "ABSENT", "ABSTRACT_SYNTAX", "ALL",
  "APPLICATION", "ASN_NULL", "AUTOMATIC", "BEGIN", "BIT", "BMPString",
  "BOOLEAN", "BY", "CHARACTER", "CHOICE", "CLASS", "COMPONENT",
  "COMPONENTS", "CONSTRAINED", "CONTAINING", "DATE", "DATE_TIME",
  "DEFAULT", "DEFINITIONS", "DURATION", "EMBEDDED", "ENCODED",
  "ENCODING_CONTROL", "END", "ENUMERATED", "EXCEPT", "EXPLICIT", "EXPORTS",
  "EXTENSIBILITY", "EXTERNAL", "FALSE", "FROM", "GeneralizedTime",
  "GeneralString", "GraphicString", "IA5String", "IDENTIFIER", "IMPLICIT",
  "IMPLIED", "IMPORTS", "\"INCLUDES\"", "INSTANCE", "INSTRUCTIONS",
  "INTEGER", "INTERSECTION", "ISO646String", "MAX", "MIN",
  "MINUS_INFINITY", "NOT_A_NUMBER", "NumericString", "OBJECT",
  "ObjectDescriptor", "OCTET", "OF", "OID_IRI", "OPTIONAL", "PATTERN",
  "PDV", "PLUS_INFINITY", "PRESENT", "PrintableString", "PRIVATE", "REAL",
  "RELATIVE_OID", "RELATIVE_OID_IRI", "SEQUENCE", "SET", "SETTINGS",
  "SIZE", "STRING", "SYNTAX", "T61String", "TAGS", "TeletexString", "TIME",
  "TIME_OF_DAY", "TRUE", "TYPE_IDENTIFIER", "UNION", "UNIQUE", "UNIVERSAL",
  "UniversalString", "UTCTime", "UTF8String", "VideotexString",
  "VisibleString", "WITH", "\"::=\"", "\"...\"", "\"..\"", "\"{\"",
  "\"}\"", "\"(\"", "\")\"", "\"[\"", "\"]\"", "\"<\"", "\">\"", "\"!\"",
  "\"\\\"\"", "\"&\"", "\"'\"", "\"*\"", "\",\"", "\".\"", "\"-\"",
  "\"/\"", "\":\"", "\";\"", "\"=\"", "\"@\"", "\"|\"", "\"^\"", "PLUS",
  "STAR", "GENERIC_IDENTIFIER_UPPERCASE", "GENERIC_IDENTIFIER_LOWERCASE",
  "GENERIC_INTEGER", "xmlasn1typename", "$accept", "ModuleDefinitionList",
  "ModuleDefinition", "SyntaxList", "DefinedObjectClass",
  "ExternalObjectClassReference", "UsefulObjectClassReference",
  "ObjectClassAssignment", "ObjectClass", "ObjectClassDefn",
  "FieldSpecList", "FieldSpec", "FieldName", "FieldNameList",
  "TypeFieldSpec", "TypeOptionalitySpec", "OptionalUnique",
  "FixedTypeValueFieldSpec", "ValueOptionalitySpec",
  "VariableTypeValueFieldSpec", "ObjectFieldSpec", "ObjectOptionalitySpec",
  "ObjectSetFieldSpec", "ObjectSetOptionalitySpec", "WithSyntaxSpec",
  "TokenOrGroupSpecList", "TokenOrGroupSpec", "OptionalGroup",
  "RequiredToken", "LiteralList", "Literal", "DefinedObject",
  "ExternalObjectReference", "Object", "ObjectDefn", "DefaultSyntax",
  "FieldSetting", "DefinedSyntax", "DefinedSyntaxList",
  "DefinedSyntaxToken", "Setting", "DefinedObjectSet",
  "ExternalObjectSetReference", "ObjectSetAssignment", "ObjectSet",
  "ObjectSetSpec", "ObjectClassFieldType", "ParameterizedAssignment",
  "ParameterizedTypeAssignment", "ParameterizedValueAssignment",
  "ParameterizedValueSetTypeAssignment",
  "ParameterizedObjectClassAssignment", "ParameterizedObjectAssignment",
  "ParameterList", "ParameterSeries", "Parameter", "ParamGovernor",
  "Governor", "ReferencedObjects", "TypeFromObject", "InstanceOfType",
  "SimpleDefinedType", "SimpleDefinedValue", "GeneralConstraint",
  "UserDefinedConstraint", "UserDefinedConstraintParameter",
  "TableConstraint", "AtNotationList", "AtNotation", "Level",
  "ComponentIdList", "ContentsConstraint", "EncodingControlSections",
  "ModuleIdentifier", "DefinitiveIdentification", "DefinitiveOID",
  "DefinitiveOIDandIRI", "DefinitiveObjIdComponentList",
  "DefinitiveObjIdComponent", "DefinitiveNumberForm",
  "DefinitiveNameAndNumberForm", "EncodingReferenceDefault", "TagDefault",
  "ExtensionDefault", "ModuleBody", "Exports", "SymbolsExported",
  "Imports", "SymbolsImported", "SymbolsFromModuleList",
  "SymbolsFromModule", "GlobalModuleReference", "AssignedIdentifier",
  "SymbolList", "Symbol", "Reference", "AssignmentList", "Assignment",
  "DefinedType", "DefinedValue", "ParameterizedType", "ParameterizedValue",
  "ActualParameterList", "ActualParameter", "ExternalTypeReference",
  "ExternalValueReference", "TypeAssignment", "ValueAssignment", "Type",
  "BuiltinType", "NamedType", "ValueWithoutTypeIdentifier", "Value",
  "ValueCommaListChoice", "ValueChoice", "SequenceOfValues", "BooleanType",
  "BooleanValue", "IntegerType", "NamedNumberList", "NamedNumber",
  "SignedNumber", "EnumeratedType", "Enumerations", "Enumeration",
  "EnumerationItem", "RealType", "BitStringType", "NamedBitList",
  "NamedBit", "OctetStringType", "NullType", "SequenceType",
  "ComponentTypeLists", "RootComponentTypeList", "ComponentTypeList",
  "ComponentType", "SequenceOfType", "SetType", "SetOfType", "ChoiceType",
  "AlternativeTypeLists", "RootAlternativeTypeList", "AlternativeTypeList",
  "SelectionType", "PrefixedType", "TaggedType", "Tag",
  "EncodingReference", "ClassNumber", "Class", "ObjectIdentifierType",
  "ObjectIdentifierValue", "ObjIdComponentsList", "ObjIdComponents",
  "NameForm", "NumberForm", "NameAndNumberForm", "RelativeOIDType",
  "IRIType", "IRIValue", "FirstArcIdentifier", "SubsequentArcIdentifier",
  "ArcIdentifier", "RelativeIRIType", "EmbeddedPDVType", "ExternalType",
  "TimeType", "TimeValue", "DateType", "TimeOfDayType", "DateTimeType",
  "DurationType", "CharacterStringType", "RestrictedCharacterStringType",
  "UnrestrictedCharacterStringType", "ConstrainedType",
  "TypeWithConstraint", "Constraint", "ConstraintSpec",
  "SubtypeConstraint", "ElementSetSpecs", "RootElementSetSpec",
  "AdditionalElementSetSpec", "ElementSetSpec", "Unions", "UElems",
  "Intersections", "IElems", "IntersectionElements", "Elems", "Exclusions",
  "UnionMark", "IntersectionMark", "Elements", "SubtypeElements",
  "SingleValue", "ContainedSubtype", "Includes", "ValueRange",
  "LowerEndpoint", "UpperEndpoint", "LowerEndValue", "UpperEndValue",
  "SizeConstraint", "TypeConstraint", "PermittedAlphabet",
  "InnerTypeConstraints", "SingleTypeConstraint",
  "MultipleTypeConstraints", "FullSpecification", "PartialSpecification",
  "TypeConstraints", "NamedConstraint", "ComponentConstraint",
  "ValueConstraint", "PresenceConstraint", "PatternConstraint",
  "PropertySettings", "ExceptionSpec", "ExceptionIdentification",
  "typereference", "identifier", "valuereference", "modulereference",
  "objectclassreference", "word", YY_NULLPTR
  };

#if YYDEBUG
  const unsigned short int
  asn1_parser::yyrline_[] =
  {
       0,   284,   284,   285,   288,   303,   306,   307,   308,   311,
     314,   315,   318,   322,   323,   327,   330,   331,   334,   335,
     336,   337,   338,   341,   342,   343,   344,   345,   348,   349,
     352,   355,   356,   357,   360,   361,   364,   367,   368,   369,
     372,   375,   378,   379,   380,   383,   386,   387,   388,   394,
     395,   398,   399,   402,   403,   406,   409,   412,   413,   416,
     417,   420,   421,   424,   430,   431,   436,   437,   440,   443,
     446,   449,   450,   453,   454,   457,   458,   462,   463,   466,
     469,   473,   476,   477,   478,   479,   480,   489,   490,   496,
     498,   500,   502,   504,   509,   513,   517,   521,   525,   533,
     537,   539,   543,   545,   549,   550,   553,   554,   569,   581,
     590,   597,   598,   602,   603,   606,   607,   608,   611,   614,
     615,   617,   618,   619,   622,   624,   628,   629,   632,   633,
     636,   637,   640,   641,   644,   645,   646,   657,   665,   672,
     673,   674,   677,   680,   684,   685,   689,   690,   691,   694,
     697,   701,   702,   705,   707,   709,   711,   715,   716,   719,
     721,   725,   726,   727,   730,   731,   734,   736,   739,   741,
     744,   746,   750,   754,   758,   759,   760,   763,   765,   769,
     773,   775,   777,   786,   788,   792,   794,   796,   800,   802,
     806,   807,   809,   815,   817,   820,   824,   827,   831,   833,
     836,   846,   851,   876,   880,   884,   886,   888,   890,   892,
     897,   898,   899,   900,   901,   902,   903,   904,   905,   906,
     907,   908,   909,   910,   911,   912,   913,   914,   915,   916,
     917,   918,   919,   920,   921,   922,   923,   924,   925,   926,
     929,   933,   935,   937,   939,   941,   943,   945,   947,   949,
     951,   953,   954,   956,   958,   960,   964,   966,   968,   970,
     974,   976,   980,   981,   984,   985,   988,   990,   998,  1001,
    1002,  1005,  1006,  1009,  1010,  1013,  1015,  1019,  1021,  1025,
    1029,  1032,  1035,  1039,  1042,  1044,  1048,  1050,  1058,  1061,
    1062,  1065,  1066,  1069,  1070,  1084,  1087,  1090,  1092,  1100,
    1104,  1106,  1108,  1110,  1112,  1114,  1116,  1118,  1122,  1124,
    1128,  1130,  1132,  1134,  1145,  1147,  1151,  1153,  1157,  1159,
    1163,  1167,  1171,  1173,  1177,  1179,  1186,  1189,  1193,  1195,
    1197,  1201,  1205,  1206,  1209,  1211,  1214,  1216,  1218,  1220,
    1230,  1233,  1235,  1239,  1241,  1245,  1247,  1249,  1253,  1257,
    1259,  1262,  1266,  1278,  1281,  1287,  1290,  1291,  1294,  1295,
    1298,  1304,  1311,  1317,  1320,  1323,  1326,  1329,  1332,  1335,
    1336,  1339,  1340,  1341,  1342,  1343,  1344,  1345,  1346,  1347,
    1348,  1349,  1350,  1351,  1355,  1358,  1359,  1362,  1363,  1364,
    1365,  1366,  1367,  1368,  1369,  1372,  1375,  1376,  1379,  1382,
    1383,  1384,  1387,  1390,  1393,  1394,  1397,  1398,  1401,  1404,
    1405,  1408,  1411,  1412,  1415,  1418,  1421,  1422,  1425,  1426,
    1429,  1431,  1434,  1435,  1436,  1437,  1438,  1439,  1440,  1441,
    1442,  1448,  1450,  1451,  1452,  1453,  1454,  1455,  1456,  1457,
    1458,  1461,  1464,  1467,  1470,  1471,  1474,  1475,  1478,  1479,
    1482,  1483,  1486,  1489,  1492,  1495,  1496,  1499,  1502,  1503,
    1506,  1509,  1512,  1513,  1516,  1519,  1522,  1523,  1526,  1527,
    1528,  1529,  1532,  1535,  1538,  1539,  1542,  1543,  1544,  1547,
    1551,  1555,  1559,  1563,  1567,  1568,  1569,  1570,  1571,  1572,
    1573,  1574,  1575,  1576,  1577,  1578,  1579,  1580,  1581,  1582,
    1583,  1584,  1585,  1586,  1587,  1588,  1589,  1590,  1591,  1592,
    1593,  1594,  1595,  1596,  1597,  1598,  1599,  1600,  1601,  1602,
    1603,  1604,  1605,  1606,  1607,  1608,  1609,  1610,  1611,  1612,
    1613,  1614,  1615,  1616,  1617,  1618,  1619,  1620,  1621,  1622,
    1623,  1624,  1625,  1626,  1627,  1628,  1629,  1630,  1631,  1632,
    1633,  1634,  1635,  1636,  1637,  1638,  1639,  1640,  1641,  1642,
    1643
  };

  // Print the state stack on the debug stream.
  void
  asn1_parser::yystack_print_ ()
  {
    *yycdebug_ << "Stack now";
    for (stack_type::const_iterator
           i = yystack_.begin (),
           i_end = yystack_.end ();
         i != i_end; ++i)
      *yycdebug_ << ' ' << i->state;
    *yycdebug_ << std::endl;
  }

  // Report on the debug stream that the rule \a yyrule is going to be reduced.
  void
  asn1_parser::yy_reduce_print_ (int yyrule)
  {
    unsigned int yylno = yyrline_[yyrule];
    int yynrhs = yyr2_[yyrule];
    // Print the symbols being reduced, and their result.
    *yycdebug_ << "Reducing stack by rule " << yyrule - 1
               << " (line " << yylno << "):" << std::endl;
    // The symbols being reduced.
    for (int yyi = 0; yyi < yynrhs; yyi++)
      YY_SYMBOL_PRINT ("   $" << yyi + 1 << " =",
                       yystack_[(yynrhs) - (yyi + 1)]);
  }
#endif // YYDEBUG



} // yy
#line 7938 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:1167
#line 1645 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:1168



namespace yy {

    asn1_parser::symbol_type yylex(Context& context)
    {
        const char* start = context.cursor;
        const char* YYMARKER = nullptr;
        context.location.step();
        // Lexer

#line 7954 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
{
	char yych;
	unsigned int yyaccept = 0;
	yych = *context.cursor;
	switch (yych) {
	case 0x00:	goto yy2;
	case 0x08:
	case '\t':
	case '\v':
	case '\f':
	case ' ':	goto yy6;
	case '\n':	goto yy8;
	case '\r':	goto yy10;
	case '!':	goto yy11;
	case '"':	goto yy13;
	case '&':	goto yy15;
	case '(':	goto yy16;
	case ')':	goto yy18;
	case ',':	goto yy20;
	case '-':	goto yy22;
	case '.':	goto yy24;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy26;
	case ':':	goto yy29;
	case ';':	goto yy31;
	case '<':	goto yy33;
	case '@':	goto yy35;
	case 'A':	goto yy37;
	case 'B':	goto yy39;
	case 'C':	goto yy40;
	case 'D':	goto yy41;
	case 'E':	goto yy42;
	case 'F':	goto yy43;
	case 'G':	goto yy44;
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'Q':
	case 'X':
	case 'Y':
	case 'Z':	goto yy45;
	case 'I':	goto yy47;
	case 'M':	goto yy48;
	case 'N':	goto yy49;
	case 'O':	goto yy50;
	case 'P':	goto yy51;
	case 'R':	goto yy52;
	case 'S':	goto yy53;
	case 'T':	goto yy54;
	case 'U':	goto yy55;
	case 'V':	goto yy56;
	case 'W':	goto yy57;
	case '[':	goto yy58;
	case ']':	goto yy60;
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy62;
	case '{':	goto yy65;
	case '|':	goto yy67;
	case '}':	goto yy69;
	default:	goto yy4;
	}
yy2:
	++context.cursor;
#line 8064 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_END_OF_FILE(context.location); }
#line 8053 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy4:
	++context.cursor;
yy5:
#line 8089 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ throw(std::runtime_error(std::string("Unknown symbol!") + *start)); context.location.columns(context.cursor - start); return asn1_parser::symbol_type(asn1_parser::token_type(*start), context.location); }
#line 8059 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy6:
	++context.cursor;
#line 8068 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); context.location.columns(); return yylex(context); }
#line 8064 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy8:
	++context.cursor;
#line 8067 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); context.location.lines();   return yylex(context); }
#line 8069 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy10:
	yych = *++context.cursor;
	switch (yych) {
	case '\n':	goto yy8;
	default:	goto yy5;
	}
yy11:
	++context.cursor;
#line 8086 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXCLAMATION_MARK (context.location); }
#line 8080 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy13:
	yych = *++context.cursor;
	switch (yych) {
	case '"':	goto yy71;
	case '\\':	goto yy73;
	default:	goto yy13;
	}
yy15:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':	goto yy75;
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy78;
	default:	goto yy5;
	}
yy16:
	++context.cursor;
#line 8076 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPEN_PARENTHESIS (context.location); }
#line 8149 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy18:
	++context.cursor;
#line 8077 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLOSE_PARENTHESIS (context.location); }
#line 8154 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy20:
	++context.cursor;
#line 8082 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COMMA (context.location); }
#line 8159 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy22:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy81;
	default:	goto yy23;
	}
yy23:
#line 8083 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_HYPHEN_MINUS (context.location); }
#line 8169 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy24:
	yych = *++context.cursor;
	switch (yych) {
	case '.':	goto yy84;
	default:	goto yy25;
	}
yy25:
#line 8084 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_FULL_STOP (context.location); }
#line 8179 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy26:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy26;
	default:	goto yy28;
	}
yy28:
#line 8055 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_number(std::stoll(std::string(start, context.cursor)), context.location); }
#line 8198 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy29:
	yyaccept = 0;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case ':':	goto yy86;
	default:	goto yy30;
	}
yy30:
#line 8080 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COLON (context.location); }
#line 8209 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy31:
	++context.cursor;
#line 8081 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SEMICOLON (context.location); }
#line 8214 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy33:
	++context.cursor;
#line 8087 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_LESS_THAN (context.location); }
#line 8219 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy35:
	++context.cursor;
#line 8088 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_AT (context.location); }
#line 8224 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy37:
	yych = *++context.cursor;
	switch (yych) {
	case 'B':	goto yy88;
	case 'L':	goto yy89;
	case 'P':	goto yy90;
	case 'U':	goto yy91;
	default:	goto yy46;
	}
yy38:
#line 8058 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GENERIC_IDENTIFIER_UPPERCASE(santize_name(std::string(start, context.cursor)), context.location); }
#line 8237 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy39:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy92;
	case 'I':	goto yy93;
	case 'M':	goto yy94;
	case 'O':	goto yy95;
	case 'Y':	goto yy96;
	default:	goto yy46;
	}
yy40:
	yych = *++context.cursor;
	switch (yych) {
	case 'H':	goto yy98;
	case 'L':	goto yy99;
	case 'O':	goto yy100;
	default:	goto yy46;
	}
yy41:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy101;
	case 'E':	goto yy102;
	case 'U':	goto yy103;
	default:	goto yy46;
	}
yy42:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy104;
	case 'N':	goto yy105;
	case 'X':	goto yy106;
	default:	goto yy46;
	}
yy43:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy107;
	case 'R':	goto yy108;
	default:	goto yy46;
	}
yy44:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy109;
	case 'r':	goto yy110;
	default:	goto yy46;
	}
yy45:
	yych = *++context.cursor;
yy46:
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy38;
	}
yy47:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy111;
	case 'D':	goto yy112;
	case 'M':	goto yy113;
	case 'N':	goto yy114;
	case 'S':	goto yy115;
	default:	goto yy46;
	}
yy48:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy116;
	case 'I':	goto yy117;
	default:	goto yy46;
	}
yy49:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy118;
	case 'U':	goto yy119;
	case 'u':	goto yy120;
	default:	goto yy46;
	}
yy50:
	yych = *++context.cursor;
	switch (yych) {
	case 'B':	goto yy121;
	case 'C':	goto yy122;
	case 'F':	goto yy123;
	case 'I':	goto yy125;
	case 'P':	goto yy126;
	case 'b':	goto yy127;
	default:	goto yy46;
	}
yy51:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy128;
	case 'D':	goto yy129;
	case 'L':	goto yy130;
	case 'R':	goto yy131;
	case 'r':	goto yy132;
	default:	goto yy46;
	}
yy52:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy133;
	default:	goto yy46;
	}
yy53:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy134;
	case 'I':	goto yy135;
	case 'T':	goto yy136;
	case 'Y':	goto yy137;
	default:	goto yy46;
	}
yy54:
	yych = *++context.cursor;
	switch (yych) {
	case '6':	goto yy138;
	case 'A':	goto yy139;
	case 'I':	goto yy140;
	case 'R':	goto yy141;
	case 'Y':	goto yy142;
	case 'e':	goto yy143;
	default:	goto yy46;
	}
yy55:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy144;
	case 'T':	goto yy145;
	case 'n':	goto yy146;
	default:	goto yy46;
	}
yy56:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy147;
	default:	goto yy46;
	}
yy57:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy148;
	default:	goto yy46;
	}
yy58:
	++context.cursor;
#line 8078 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPEN_SQUARE_BRACKET (context.location); }
#line 8452 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy60:
	++context.cursor;
#line 8079 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLOSE_SQUARE_BRACKET (context.location); }
#line 8457 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy62:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy62;
	default:	goto yy64;
	}
yy64:
#line 8059 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GENERIC_IDENTIFIER_LOWERCASE(santize_name(std::string(start, context.cursor)), context.location); }
#line 8530 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy65:
	++context.cursor;
#line 8074 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPEN_BRACE (context.location); }
#line 8535 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy67:
	++context.cursor;
#line 8085 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_VERTICAL_LINE (context.location); }
#line 8540 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy69:
	++context.cursor;
#line 8075 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLOSE_BRACE (context.location); }
#line 8545 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy71:
	++context.cursor;
#line 8057 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_cstring(std::string(start, context.cursor), context.location); }
#line 8550 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy73:
	yych = *++context.cursor;
	switch (yych) {
	case '\\':	goto yy73;
	default:	goto yy13;
	}
yy75:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy75;
	default:	goto yy77;
	}
yy77:
#line 8060 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_typefieldreference(santize_name(std::string(start, context.cursor)), context.location); }
#line 8629 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy78:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy78;
	default:	goto yy80;
	}
yy80:
#line 8061 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_valuefieldreference(santize_name(std::string(start, context.cursor)), context.location); }
#line 8702 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy81:
	yyaccept = 1;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '\n':
	case '\r':	goto yy83;
	case '-':	goto yy149;
	default:	goto yy81;
	}
yy83:
#line 8051 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return yylex(context); }
#line 8715 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy84:
	yych = *++context.cursor;
	switch (yych) {
	case '.':	goto yy150;
	default:	goto yy85;
	}
yy85:
#line 8073 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_RANGE (context.location); }
#line 8725 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy86:
	yych = *++context.cursor;
	switch (yych) {
	case '=':	goto yy152;
	default:	goto yy87;
	}
yy87:
	context.cursor = YYMARKER;
	if (yyaccept == 0) {
		goto yy30;
	} else {
		goto yy83;
	}
yy88:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy154;
	default:	goto yy46;
	}
yy89:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy155;
	default:	goto yy46;
	}
yy90:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy157;
	default:	goto yy46;
	}
yy91:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy158;
	default:	goto yy46;
	}
yy92:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy159;
	default:	goto yy46;
	}
yy93:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy160;
	default:	goto yy46;
	}
yy94:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy162;
	default:	goto yy46;
	}
yy95:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy163;
	default:	goto yy46;
	}
yy96:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy97;
	}
yy97:
#line 7965 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BY (context.location); }
#line 8859 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy98:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy164;
	case 'O':	goto yy165;
	default:	goto yy46;
	}
yy99:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy166;
	default:	goto yy46;
	}
yy100:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy167;
	case 'N':	goto yy168;
	default:	goto yy46;
	}
yy101:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy169;
	default:	goto yy46;
	}
yy102:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy170;
	default:	goto yy46;
	}
yy103:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy171;
	default:	goto yy46;
	}
yy104:
	yych = *++context.cursor;
	switch (yych) {
	case 'B':	goto yy172;
	default:	goto yy46;
	}
yy105:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy173;
	case 'D':	goto yy174;
	case 'U':	goto yy176;
	default:	goto yy46;
	}
yy106:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy177;
	case 'P':	goto yy178;
	case 'T':	goto yy179;
	default:	goto yy46;
	}
yy107:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy180;
	default:	goto yy46;
	}
yy108:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy181;
	default:	goto yy46;
	}
yy109:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy182;
	default:	goto yy46;
	}
yy110:
	yych = *++context.cursor;
	switch (yych) {
	case 'a':	goto yy183;
	default:	goto yy46;
	}
yy111:
	yych = *++context.cursor;
	switch (yych) {
	case '5':	goto yy184;
	default:	goto yy46;
	}
yy112:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy185;
	default:	goto yy46;
	}
yy113:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy186;
	default:	goto yy46;
	}
yy114:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy187;
	case 'S':	goto yy188;
	case 'T':	goto yy189;
	default:	goto yy46;
	}
yy115:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy190;
	default:	goto yy46;
	}
yy116:
	yych = *++context.cursor;
	switch (yych) {
	case 'X':	goto yy191;
	default:	goto yy46;
	}
yy117:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy193;
	default:	goto yy46;
	}
yy118:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy195;
	default:	goto yy46;
	}
yy119:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy196;
	default:	goto yy46;
	}
yy120:
	yych = *++context.cursor;
	switch (yych) {
	case 'm':	goto yy197;
	default:	goto yy46;
	}
yy121:
	yych = *++context.cursor;
	switch (yych) {
	case 'J':	goto yy198;
	default:	goto yy46;
	}
yy122:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy199;
	default:	goto yy46;
	}
yy123:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy124;
	}
yy124:
#line 8013 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OF (context.location); }
#line 9090 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy125:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy200;
	default:	goto yy46;
	}
yy126:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy201;
	default:	goto yy46;
	}
yy127:
	yych = *++context.cursor;
	switch (yych) {
	case 'j':	goto yy202;
	default:	goto yy46;
	}
yy128:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy203;
	default:	goto yy46;
	}
yy129:
	yych = *++context.cursor;
	switch (yych) {
	case 'V':	goto yy204;
	default:	goto yy46;
	}
yy130:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy206;
	default:	goto yy46;
	}
yy131:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy207;
	case 'I':	goto yy208;
	default:	goto yy46;
	}
yy132:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy209;
	default:	goto yy46;
	}
yy133:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy210;
	case 'L':	goto yy211;
	default:	goto yy46;
	}
yy134:
	yych = *++context.cursor;
	switch (yych) {
	case 'Q':	goto yy212;
	case 'T':	goto yy213;
	default:	goto yy46;
	}
yy135:
	yych = *++context.cursor;
	switch (yych) {
	case 'Z':	goto yy215;
	default:	goto yy46;
	}
yy136:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy216;
	default:	goto yy46;
	}
yy137:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy217;
	default:	goto yy46;
	}
yy138:
	yych = *++context.cursor;
	switch (yych) {
	case '1':	goto yy218;
	default:	goto yy46;
	}
yy139:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy219;
	default:	goto yy46;
	}
yy140:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy220;
	default:	goto yy46;
	}
yy141:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy221;
	default:	goto yy46;
	}
yy142:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy222;
	default:	goto yy46;
	}
yy143:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy223;
	default:	goto yy46;
	}
yy144:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy224;
	default:	goto yy46;
	}
yy145:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy225;
	case 'F':	goto yy226;
	default:	goto yy46;
	}
yy146:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy227;
	default:	goto yy46;
	}
yy147:
	yych = *++context.cursor;
	switch (yych) {
	case 'd':	goto yy228;
	case 's':	goto yy229;
	default:	goto yy46;
	}
yy148:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy230;
	default:	goto yy46;
	}
yy149:
	yych = *++context.cursor;
	switch (yych) {
	case '\n':
	case '\r':	goto yy87;
	case '-':	goto yy231;
	default:	goto yy81;
	}
yy150:
	++context.cursor;
#line 8072 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ELIPSIS (context.location); }
#line 9252 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy152:
	++context.cursor;
#line 8071 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DEFINED_AS (context.location); }
#line 9257 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy154:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy233;
	case 'T':	goto yy234;
	default:	goto yy46;
	}
yy155:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy156;
	}
yy156:
#line 7958 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ALL (context.location); }
#line 9337 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy157:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy235;
	default:	goto yy46;
	}
yy158:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy236;
	default:	goto yy46;
	}
yy159:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy237;
	default:	goto yy46;
	}
yy160:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy161;
	}
yy161:
#line 7962 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BIT (context.location); }
#line 9428 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy162:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy238;
	default:	goto yy46;
	}
yy163:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy239;
	default:	goto yy46;
	}
yy164:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy240;
	default:	goto yy46;
	}
yy165:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy241;
	default:	goto yy46;
	}
yy166:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy242;
	default:	goto yy46;
	}
yy167:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy243;
	default:	goto yy46;
	}
yy168:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy244;
	case 'T':	goto yy245;
	default:	goto yy46;
	}
yy169:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy246;
	default:	goto yy46;
	}
yy170:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy248;
	case 'I':	goto yy249;
	default:	goto yy46;
	}
yy171:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy250;
	default:	goto yy46;
	}
yy172:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy251;
	default:	goto yy46;
	}
yy173:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy252;
	default:	goto yy46;
	}
yy174:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy175;
	}
yy175:
#line 7981 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_END (context.location); }
#line 9575 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy176:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy253;
	default:	goto yy46;
	}
yy177:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy254;
	default:	goto yy46;
	}
yy178:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy255;
	case 'O':	goto yy256;
	default:	goto yy46;
	}
yy179:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy257;
	default:	goto yy46;
	}
yy180:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy258;
	default:	goto yy46;
	}
yy181:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy259;
	default:	goto yy46;
	}
yy182:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy261;
	default:	goto yy46;
	}
yy183:
	yych = *++context.cursor;
	switch (yych) {
	case 'p':	goto yy262;
	default:	goto yy46;
	}
yy184:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy263;
	default:	goto yy46;
	}
yy185:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy264;
	default:	goto yy46;
	}
yy186:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy265;
	case 'O':	goto yy266;
	default:	goto yy46;
	}
yy187:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy267;
	default:	goto yy46;
	}
yy188:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy268;
	default:	goto yy46;
	}
yy189:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy269;
	default:	goto yy46;
	}
yy190:
	yych = *++context.cursor;
	switch (yych) {
	case '6':	goto yy270;
	default:	goto yy46;
	}
yy191:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy192;
	}
yy192:
#line 8004 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_MAX (context.location); }
#line 9740 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy193:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	case 'U':	goto yy271;
	default:	goto yy194;
	}
yy194:
#line 8005 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_MIN (context.location); }
#line 9813 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy195:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy272;
	default:	goto yy46;
	}
yy196:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy273;
	default:	goto yy46;
	}
yy197:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy275;
	default:	goto yy46;
	}
yy198:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy276;
	default:	goto yy46;
	}
yy199:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy277;
	default:	goto yy46;
	}
yy200:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy278;
	default:	goto yy46;
	}
yy201:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy279;
	default:	goto yy46;
	}
yy202:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy280;
	default:	goto yy46;
	}
yy203:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy281;
	default:	goto yy46;
	}
yy204:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy205;
	}
yy205:
#line 8017 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PDV (context.location); }
#line 9940 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy206:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy282;
	default:	goto yy46;
	}
yy207:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy283;
	default:	goto yy46;
	}
yy208:
	yych = *++context.cursor;
	switch (yych) {
	case 'V':	goto yy284;
	default:	goto yy46;
	}
yy209:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy285;
	default:	goto yy46;
	}
yy210:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy286;
	default:	goto yy46;
	}
yy211:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy288;
	default:	goto yy46;
	}
yy212:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy289;
	default:	goto yy46;
	}
yy213:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	case 'T':	goto yy290;
	default:	goto yy214;
	}
yy214:
#line 8026 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SET (context.location); }
#line 10055 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy215:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy291;
	default:	goto yy46;
	}
yy216:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy293;
	default:	goto yy46;
	}
yy217:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy294;
	default:	goto yy46;
	}
yy218:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy295;
	default:	goto yy46;
	}
yy219:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy296;
	default:	goto yy46;
	}
yy220:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy298;
	default:	goto yy46;
	}
yy221:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy300;
	default:	goto yy46;
	}
yy222:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy302;
	default:	goto yy46;
	}
yy223:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy303;
	default:	goto yy46;
	}
yy224:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy304;
	case 'Q':	goto yy305;
	case 'V':	goto yy306;
	default:	goto yy46;
	}
yy225:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy307;
	default:	goto yy46;
	}
yy226:
	yych = *++context.cursor;
	switch (yych) {
	case '8':	goto yy308;
	default:	goto yy46;
	}
yy227:
	yych = *++context.cursor;
	switch (yych) {
	case 'v':	goto yy309;
	default:	goto yy46;
	}
yy228:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy310;
	default:	goto yy46;
	}
yy229:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy311;
	default:	goto yy46;
	}
yy230:
	yych = *++context.cursor;
	switch (yych) {
	case 'H':	goto yy312;
	default:	goto yy46;
	}
yy231:
	++context.cursor;
#line 8050 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return yylex(context); }
#line 10158 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy233:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy314;
	default:	goto yy46;
	}
yy234:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy315;
	default:	goto yy46;
	}
yy235:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy316;
	default:	goto yy46;
	}
yy236:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy317;
	default:	goto yy46;
	}
yy237:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy318;
	default:	goto yy46;
	}
yy238:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy320;
	default:	goto yy46;
	}
yy239:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy321;
	default:	goto yy46;
	}
yy240:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy322;
	default:	goto yy46;
	}
yy241:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy323;
	default:	goto yy46;
	}
yy242:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy324;
	default:	goto yy46;
	}
yy243:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy326;
	default:	goto yy46;
	}
yy244:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy327;
	default:	goto yy46;
	}
yy245:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy328;
	default:	goto yy46;
	}
yy246:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy329;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy247;
	}
yy247:
#line 7973 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DATE (context.location); }
#line 10309 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy248:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy330;
	default:	goto yy46;
	}
yy249:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy331;
	default:	goto yy46;
	}
yy250:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy332;
	default:	goto yy46;
	}
yy251:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy333;
	default:	goto yy46;
	}
yy252:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy334;
	default:	goto yy46;
	}
yy253:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy335;
	default:	goto yy46;
	}
yy254:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy336;
	default:	goto yy46;
	}
yy255:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy337;
	default:	goto yy46;
	}
yy256:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy338;
	default:	goto yy46;
	}
yy257:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy339;
	case 'R':	goto yy340;
	default:	goto yy46;
	}
yy258:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy341;
	default:	goto yy46;
	}
yy259:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy260;
	}
yy260:
#line 7989 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_FROM (context.location); }
#line 10449 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy261:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy343;
	default:	goto yy46;
	}
yy262:
	yych = *++context.cursor;
	switch (yych) {
	case 'h':	goto yy344;
	default:	goto yy46;
	}
yy263:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy345;
	default:	goto yy46;
	}
yy264:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy346;
	default:	goto yy46;
	}
yy265:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy347;
	default:	goto yy46;
	}
yy266:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy348;
	default:	goto yy46;
	}
yy267:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy349;
	default:	goto yy46;
	}
yy268:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy350;
	case 'R':	goto yy351;
	default:	goto yy46;
	}
yy269:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy352;
	case 'R':	goto yy353;
	default:	goto yy46;
	}
yy270:
	yych = *++context.cursor;
	switch (yych) {
	case '4':	goto yy354;
	default:	goto yy46;
	}
yy271:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy355;
	default:	goto yy46;
	}
yy272:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy356;
	default:	goto yy46;
	}
yy273:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy274;
	}
yy274:
#line 8008 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ASN_NULL (context.location); }
#line 10596 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy275:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy357;
	default:	goto yy46;
	}
yy276:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy358;
	default:	goto yy46;
	}
yy277:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy359;
	default:	goto yy46;
	}
yy278:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy361;
	default:	goto yy46;
	}
yy279:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy362;
	default:	goto yy46;
	}
yy280:
	yych = *++context.cursor;
	switch (yych) {
	case 'c':	goto yy363;
	default:	goto yy46;
	}
yy281:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy364;
	default:	goto yy46;
	}
yy282:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy365;
	default:	goto yy46;
	}
yy283:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy366;
	default:	goto yy46;
	}
yy284:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy367;
	default:	goto yy46;
	}
yy285:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy368;
	default:	goto yy46;
	}
yy286:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy287;
	}
yy287:
#line 8022 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_REAL (context.location); }
#line 10735 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy288:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy369;
	default:	goto yy46;
	}
yy289:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy370;
	default:	goto yy46;
	}
yy290:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy371;
	default:	goto yy46;
	}
yy291:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy292;
	}
yy292:
#line 8028 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SIZE (context.location); }
#line 10826 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy293:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy372;
	default:	goto yy46;
	}
yy294:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy373;
	default:	goto yy46;
	}
yy295:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy374;
	default:	goto yy46;
	}
yy296:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy297;
	}
yy297:
#line 8032 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TAGS (context.location); }
#line 10917 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy298:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy375;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy299;
	}
yy299:
#line 8034 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TIME (context.location); }
#line 10990 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy300:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy301;
	}
yy301:
#line 8036 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TRUE (context.location); }
#line 11063 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy302:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy376;
	default:	goto yy46;
	}
yy303:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy377;
	default:	goto yy46;
	}
yy304:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy378;
	default:	goto yy46;
	}
yy305:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy380;
	default:	goto yy46;
	}
yy306:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy381;
	default:	goto yy46;
	}
yy307:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy382;
	default:	goto yy46;
	}
yy308:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy383;
	default:	goto yy46;
	}
yy309:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy384;
	default:	goto yy46;
	}
yy310:
	yych = *++context.cursor;
	switch (yych) {
	case 'o':	goto yy385;
	default:	goto yy46;
	}
yy311:
	yych = *++context.cursor;
	switch (yych) {
	case 'b':	goto yy386;
	default:	goto yy46;
	}
yy312:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy313;
	}
yy313:
#line 8046 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_WITH (context.location); }
#line 11196 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy314:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy387;
	default:	goto yy46;
	}
yy315:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy389;
	default:	goto yy46;
	}
yy316:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy390;
	default:	goto yy46;
	}
yy317:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy391;
	default:	goto yy46;
	}
yy318:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy319;
	}
yy319:
#line 7961 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BEGIN (context.location); }
#line 11293 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy320:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy392;
	default:	goto yy46;
	}
yy321:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy393;
	default:	goto yy46;
	}
yy322:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy394;
	default:	goto yy46;
	}
yy323:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy395;
	default:	goto yy46;
	}
yy324:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy325;
	}
yy325:
#line 7968 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLASS (context.location); }
#line 11390 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy326:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy397;
	default:	goto yy46;
	}
yy327:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy398;
	default:	goto yy46;
	}
yy328:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy399;
	default:	goto yy46;
	}
yy329:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy400;
	default:	goto yy46;
	}
yy330:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy401;
	default:	goto yy46;
	}
yy331:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy402;
	default:	goto yy46;
	}
yy332:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy403;
	default:	goto yy46;
	}
yy333:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy404;
	default:	goto yy46;
	}
yy334:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy405;
	case 'I':	goto yy406;
	default:	goto yy46;
	}
yy335:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy407;
	default:	goto yy46;
	}
yy336:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy408;
	default:	goto yy46;
	}
yy337:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy410;
	default:	goto yy46;
	}
yy338:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy411;
	default:	goto yy46;
	}
yy339:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy412;
	default:	goto yy46;
	}
yy340:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy413;
	default:	goto yy46;
	}
yy341:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy342;
	}
yy342:
#line 7988 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_FALSE (context.location); }
#line 11554 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy343:
	yych = *++context.cursor;
	switch (yych) {
	case 'a':	goto yy414;
	default:	goto yy46;
	}
yy344:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy415;
	default:	goto yy46;
	}
yy345:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy416;
	default:	goto yy46;
	}
yy346:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy417;
	default:	goto yy46;
	}
yy347:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy418;
	case 'E':	goto yy419;
	default:	goto yy46;
	}
yy348:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy420;
	default:	goto yy46;
	}
yy349:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy421;
	default:	goto yy46;
	}
yy350:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy422;
	default:	goto yy46;
	}
yy351:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy423;
	default:	goto yy46;
	}
yy352:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy424;
	default:	goto yy46;
	}
yy353:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy425;
	default:	goto yy46;
	}
yy354:
	yych = *++context.cursor;
	switch (yych) {
	case '6':	goto yy426;
	default:	goto yy46;
	}
yy355:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy427;
	default:	goto yy46;
	}
yy356:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy428;
	default:	goto yy46;
	}
yy357:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy429;
	default:	goto yy46;
	}
yy358:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy430;
	default:	goto yy46;
	}
yy359:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy360;
	}
yy360:
#line 8012 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OCTET (context.location); }
#line 11724 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy361:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy432;
	default:	goto yy46;
	}
yy362:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy433;
	default:	goto yy46;
	}
yy363:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy434;
	default:	goto yy46;
	}
yy364:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy435;
	default:	goto yy46;
	}
yy365:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy436;
	default:	goto yy46;
	}
yy366:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy437;
	default:	goto yy46;
	}
yy367:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy438;
	default:	goto yy46;
	}
yy368:
	yych = *++context.cursor;
	switch (yych) {
	case 'a':	goto yy439;
	default:	goto yy46;
	}
yy369:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy440;
	default:	goto yy46;
	}
yy370:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy441;
	default:	goto yy46;
	}
yy371:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy442;
	default:	goto yy46;
	}
yy372:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy443;
	default:	goto yy46;
	}
yy373:
	yych = *++context.cursor;
	switch (yych) {
	case 'X':	goto yy445;
	default:	goto yy46;
	}
yy374:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy447;
	default:	goto yy46;
	}
yy375:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy448;
	default:	goto yy46;
	}
yy376:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy449;
	default:	goto yy46;
	}
yy377:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy450;
	default:	goto yy46;
	}
yy378:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy379;
	}
yy379:
#line 8038 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UNION (context.location); }
#line 11899 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy380:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy451;
	default:	goto yy46;
	}
yy381:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy453;
	default:	goto yy46;
	}
yy382:
	yych = *++context.cursor;
	switch (yych) {
	case 'm':	goto yy454;
	default:	goto yy46;
	}
yy383:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy455;
	default:	goto yy46;
	}
yy384:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy456;
	default:	goto yy46;
	}
yy385:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy457;
	default:	goto yy46;
	}
yy386:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy458;
	default:	goto yy46;
	}
yy387:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy388;
	}
yy388:
#line 7956 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ABSENT (context.location); }
#line 12014 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy389:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy459;
	default:	goto yy46;
	}
yy390:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy460;
	default:	goto yy46;
	}
yy391:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy461;
	default:	goto yy46;
	}
yy392:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy462;
	default:	goto yy46;
	}
yy393:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy463;
	default:	goto yy46;
	}
yy394:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy465;
	default:	goto yy46;
	}
yy395:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy396;
	}
yy396:
#line 7967 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CHOICE (context.location); }
#line 12123 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy397:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy466;
	default:	goto yy46;
	}
yy398:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy467;
	default:	goto yy46;
	}
yy399:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy468;
	default:	goto yy46;
	}
yy400:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy469;
	default:	goto yy46;
	}
yy401:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy470;
	default:	goto yy46;
	}
yy402:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy472;
	default:	goto yy46;
	}
yy403:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy473;
	default:	goto yy46;
	}
yy404:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy474;
	default:	goto yy46;
	}
yy405:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy475;
	default:	goto yy46;
	}
yy406:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy477;
	default:	goto yy46;
	}
yy407:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy478;
	default:	goto yy46;
	}
yy408:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy409;
	}
yy409:
#line 7983 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXCEPT (context.location); }
#line 12262 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy410:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy479;
	default:	goto yy46;
	}
yy411:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy480;
	default:	goto yy46;
	}
yy412:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy482;
	default:	goto yy46;
	}
yy413:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy483;
	default:	goto yy46;
	}
yy414:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy484;
	default:	goto yy46;
	}
yy415:
	yych = *++context.cursor;
	switch (yych) {
	case 'c':	goto yy485;
	default:	goto yy46;
	}
yy416:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy486;
	default:	goto yy46;
	}
yy417:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy487;
	default:	goto yy46;
	}
yy418:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy488;
	default:	goto yy46;
	}
yy419:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy489;
	default:	goto yy46;
	}
yy420:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy491;
	default:	goto yy46;
	}
yy421:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy493;
	default:	goto yy46;
	}
yy422:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy494;
	default:	goto yy46;
	}
yy423:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy495;
	default:	goto yy46;
	}
yy424:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy496;
	default:	goto yy46;
	}
yy425:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy498;
	default:	goto yy46;
	}
yy426:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy499;
	default:	goto yy46;
	}
yy427:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy500;
	default:	goto yy46;
	}
yy428:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy501;
	default:	goto yy46;
	}
yy429:
	yych = *++context.cursor;
	switch (yych) {
	case 'c':	goto yy502;
	default:	goto yy46;
	}
yy430:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy431;
	}
yy431:
#line 8010 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OBJECT (context.location); }
#line 12455 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy432:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy503;
	default:	goto yy46;
	}
yy433:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy505;
	default:	goto yy46;
	}
yy434:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy506;
	default:	goto yy46;
	}
yy435:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy507;
	default:	goto yy46;
	}
yy436:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy509;
	default:	goto yy46;
	}
yy437:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy510;
	default:	goto yy46;
	}
yy438:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy512;
	default:	goto yy46;
	}
yy439:
	yych = *++context.cursor;
	switch (yych) {
	case 'b':	goto yy514;
	default:	goto yy46;
	}
yy440:
	yych = *++context.cursor;
	switch (yych) {
	case 'V':	goto yy515;
	default:	goto yy46;
	}
yy441:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy516;
	default:	goto yy46;
	}
yy442:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy517;
	default:	goto yy46;
	}
yy443:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy444;
	}
yy444:
#line 8029 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_STRING (context.location); }
#line 12594 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy445:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy446;
	}
yy446:
#line 8030 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SYNTAX (context.location); }
#line 12667 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy447:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy518;
	default:	goto yy46;
	}
yy448:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy519;
	default:	goto yy46;
	}
yy449:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy520;
	default:	goto yy46;
	}
yy450:
	yych = *++context.cursor;
	switch (yych) {
	case 'x':	goto yy521;
	default:	goto yy46;
	}
yy451:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy452;
	}
yy452:
#line 8039 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UNIQUE (context.location); }
#line 12764 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy453:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy522;
	default:	goto yy46;
	}
yy454:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy523;
	default:	goto yy46;
	}
yy455:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy525;
	default:	goto yy46;
	}
yy456:
	yych = *++context.cursor;
	switch (yych) {
	case 's':	goto yy526;
	default:	goto yy46;
	}
yy457:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy527;
	default:	goto yy46;
	}
yy458:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy528;
	default:	goto yy46;
	}
yy459:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy529;
	default:	goto yy46;
	}
yy460:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy530;
	default:	goto yy46;
	}
yy461:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy531;
	default:	goto yy46;
	}
yy462:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy532;
	default:	goto yy46;
	}
yy463:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy464;
	}
yy464:
#line 7964 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BOOLEAN (context.location); }
#line 12897 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy465:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy533;
	default:	goto yy46;
	}
yy466:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy534;
	default:	goto yy46;
	}
yy467:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy535;
	default:	goto yy46;
	}
yy468:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy536;
	default:	goto yy46;
	}
yy469:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy537;
	default:	goto yy46;
	}
yy470:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy471;
	}
yy471:
#line 7975 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DEFAULT (context.location); }
#line 13000 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy472:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy538;
	default:	goto yy46;
	}
yy473:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy539;
	default:	goto yy46;
	}
yy474:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy541;
	default:	goto yy46;
	}
yy475:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy476;
	}
yy476:
#line 7979 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ENCODED (context.location); }
#line 13091 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy477:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy543;
	default:	goto yy46;
	}
yy478:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy544;
	default:	goto yy46;
	}
yy479:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy545;
	default:	goto yy46;
	}
yy480:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy481;
	}
yy481:
#line 7985 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXPORTS (context.location); }
#line 13182 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy482:
	yych = *++context.cursor;
	switch (yych) {
	case 'B':	goto yy547;
	default:	goto yy46;
	}
yy483:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy548;
	default:	goto yy46;
	}
yy484:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy550;
	case 'i':	goto yy551;
	default:	goto yy46;
	}
yy485:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy552;
	default:	goto yy46;
	}
yy486:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy553;
	default:	goto yy46;
	}
yy487:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy554;
	default:	goto yy46;
	}
yy488:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy555;
	default:	goto yy46;
	}
yy489:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy490;
	}
yy490:
#line 7996 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IMPLIED (context.location); }
#line 13298 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy491:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy492;
	}
yy492:
#line 7997 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IMPORTS (context.location); }
#line 13371 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy493:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy557;
	default:	goto yy46;
	}
yy494:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy559;
	default:	goto yy46;
	}
yy495:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy561;
	default:	goto yy46;
	}
yy496:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy497;
	}
yy497:
#line 8001 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INTEGER (context.location); }
#line 13462 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy498:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy562;
	default:	goto yy46;
	}
yy499:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy563;
	default:	goto yy46;
	}
yy500:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy564;
	default:	goto yy46;
	}
yy501:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy565;
	default:	goto yy46;
	}
yy502:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy566;
	default:	goto yy46;
	}
yy503:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy504;
	}
yy504:
#line 8014 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OID_IRI (context.location); }
#line 13565 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy505:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy567;
	default:	goto yy46;
	}
yy506:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy569;
	default:	goto yy46;
	}
yy507:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy508;
	}
yy508:
#line 8016 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PATTERN (context.location); }
#line 13650 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy509:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy570;
	default:	goto yy46;
	}
yy510:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy511;
	}
yy511:
#line 8019 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PRESENT (context.location); }
#line 13729 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy512:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy513;
	}
yy513:
#line 8021 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PRIVATE (context.location); }
#line 13802 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy514:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy571;
	default:	goto yy46;
	}
yy515:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy572;
	default:	goto yy46;
	}
yy516:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy573;
	default:	goto yy46;
	}
yy517:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy575;
	default:	goto yy46;
	}
yy518:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy577;
	default:	goto yy46;
	}
yy519:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy578;
	default:	goto yy46;
	}
yy520:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy579;
	default:	goto yy46;
	}
yy521:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy580;
	default:	goto yy46;
	}
yy522:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy581;
	default:	goto yy46;
	}
yy523:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy524;
	}
yy524:
#line 8042 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UTCTime (context.location); }
#line 13929 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy525:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy582;
	default:	goto yy46;
	}
yy526:
	yych = *++context.cursor;
	switch (yych) {
	case 'a':	goto yy583;
	default:	goto yy46;
	}
yy527:
	yych = *++context.cursor;
	switch (yych) {
	case 'x':	goto yy584;
	default:	goto yy46;
	}
yy528:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy585;
	default:	goto yy46;
	}
yy529:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy586;
	default:	goto yy46;
	}
yy530:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy587;
	default:	goto yy46;
	}
yy531:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy588;
	default:	goto yy46;
	}
yy532:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy590;
	default:	goto yy46;
	}
yy533:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy592;
	default:	goto yy46;
	}
yy534:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy594;
	default:	goto yy46;
	}
yy535:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy596;
	default:	goto yy46;
	}
yy536:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy597;
	default:	goto yy46;
	}
yy537:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy598;
	default:	goto yy46;
	}
yy538:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy600;
	default:	goto yy46;
	}
yy539:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy540;
	}
yy540:
#line 7977 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DURATION (context.location); }
#line 14086 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy541:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy542;
	}
yy542:
#line 7978 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EMBEDDED (context.location); }
#line 14159 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy543:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy601;
	default:	goto yy46;
	}
yy544:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy602;
	default:	goto yy46;
	}
yy545:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy546;
	}
yy546:
#line 7984 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXPLICIT (context.location); }
#line 14244 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy547:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy603;
	default:	goto yy46;
	}
yy548:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy549;
	}
yy549:
#line 7987 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXTERNAL (context.location); }
#line 14323 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy550:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy604;
	default:	goto yy46;
	}
yy551:
	yych = *++context.cursor;
	switch (yych) {
	case 'z':	goto yy605;
	default:	goto yy46;
	}
yy552:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy606;
	default:	goto yy46;
	}
yy553:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy607;
	default:	goto yy46;
	}
yy554:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy609;
	default:	goto yy46;
	}
yy555:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy556;
	}
yy556:
#line 7995 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IMPLICIT (context.location); }
#line 14426 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy557:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy558;
	}
yy558:
#line 7998 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INCLUDES (context.location); }
#line 14499 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy559:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy560;
	}
yy560:
#line 7999 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INSTANCE (context.location); }
#line 14572 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy561:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy610;
	default:	goto yy46;
	}
yy562:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy611;
	default:	goto yy46;
	}
yy563:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy612;
	default:	goto yy46;
	}
yy564:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy613;
	default:	goto yy46;
	}
yy565:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy614;
	default:	goto yy46;
	}
yy566:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy615;
	default:	goto yy46;
	}
yy567:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy568;
	}
yy568:
#line 8015 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPTIONAL (context.location); }
#line 14681 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy569:
	yych = *++context.cursor;
	switch (yych) {
	case 's':	goto yy616;
	default:	goto yy46;
	}
yy570:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy617;
	default:	goto yy46;
	}
yy571:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy618;
	default:	goto yy46;
	}
yy572:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy619;
	default:	goto yy46;
	}
yy573:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy574;
	}
yy574:
#line 8025 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SEQUENCE (context.location); }
#line 14778 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy575:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy576;
	}
yy576:
#line 8027 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SETTINGS (context.location); }
#line 14851 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy577:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy620;
	default:	goto yy46;
	}
yy578:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy622;
	default:	goto yy46;
	}
yy579:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy623;
	default:	goto yy46;
	}
yy580:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy624;
	default:	goto yy46;
	}
yy581:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy625;
	default:	goto yy46;
	}
yy582:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy627;
	default:	goto yy46;
	}
yy583:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy628;
	default:	goto yy46;
	}
yy584:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy629;
	default:	goto yy46;
	}
yy585:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy630;
	default:	goto yy46;
	}
yy586:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy631;
	default:	goto yy46;
	}
yy587:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy632;
	default:	goto yy46;
	}
yy588:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy589;
	}
yy589:
#line 7960 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_AUTOMATIC (context.location); }
#line 14990 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy590:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy591;
	}
yy591:
#line 7963 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BMPString (context.location); }
#line 15063 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy592:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy593;
	}
yy593:
#line 7966 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CHARACTER (context.location); }
#line 15136 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy594:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	case 'S':	goto yy633;
	default:	goto yy595;
	}
yy595:
#line 7969 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COMPONENT (context.location); }
#line 15209 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy596:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy635;
	default:	goto yy46;
	}
yy597:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy636;
	default:	goto yy46;
	}
yy598:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy599;
	}
yy599:
#line 7974 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DATE_TIME (context.location); }
#line 15294 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy600:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy638;
	default:	goto yy46;
	}
yy601:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy639;
	default:	goto yy46;
	}
yy602:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy640;
	default:	goto yy46;
	}
yy603:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy642;
	default:	goto yy46;
	}
yy604:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy643;
	default:	goto yy46;
	}
yy605:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy644;
	default:	goto yy46;
	}
yy606:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy645;
	default:	goto yy46;
	}
yy607:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy608;
	}
yy608:
#line 7993 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IA5String (context.location); }
#line 15409 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy609:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy646;
	default:	goto yy46;
	}
yy610:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy648;
	default:	goto yy46;
	}
yy611:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy649;
	default:	goto yy46;
	}
yy612:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy650;
	default:	goto yy46;
	}
yy613:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy651;
	default:	goto yy46;
	}
yy614:
	yych = *++context.cursor;
	switch (yych) {
	case 'B':	goto yy652;
	default:	goto yy46;
	}
yy615:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy653;
	default:	goto yy46;
	}
yy616:
	yych = *++context.cursor;
	switch (yych) {
	case 'c':	goto yy654;
	default:	goto yy46;
	}
yy617:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy655;
	default:	goto yy46;
	}
yy618:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy656;
	default:	goto yy46;
	}
yy619:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy657;
	default:	goto yy46;
	}
yy620:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy621;
	}
yy621:
#line 8031 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_T61String (context.location); }
#line 15548 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy622:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy658;
	default:	goto yy46;
	}
yy623:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy659;
	default:	goto yy46;
	}
yy624:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy660;
	default:	goto yy46;
	}
yy625:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy626;
	}
yy626:
#line 8040 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UNIVERSAL (context.location); }
#line 15639 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy627:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy661;
	default:	goto yy46;
	}
yy628:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy663;
	default:	goto yy46;
	}
yy629:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy664;
	default:	goto yy46;
	}
yy630:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy665;
	default:	goto yy46;
	}
yy631:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy666;
	default:	goto yy46;
	}
yy632:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy667;
	default:	goto yy46;
	}
yy633:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy634;
	}
yy634:
#line 7970 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COMPONENTS (context.location); }
#line 15748 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy635:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy669;
	default:	goto yy46;
	}
yy636:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy637;
	}
yy637:
#line 7972 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CONTAINING (context.location); }
#line 15827 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy638:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy671;
	default:	goto yy46;
	}
yy639:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy673;
	default:	goto yy46;
	}
yy640:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy641;
	}
yy641:
#line 7982 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ENUMERATED (context.location); }
#line 15912 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy642:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy674;
	default:	goto yy46;
	}
yy643:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy675;
	default:	goto yy46;
	}
yy644:
	yych = *++context.cursor;
	switch (yych) {
	case 'd':	goto yy676;
	default:	goto yy46;
	}
yy645:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy677;
	default:	goto yy46;
	}
yy646:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy647;
	}
yy647:
#line 7994 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IDENTIFIER (context.location); }
#line 16009 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy648:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy678;
	default:	goto yy46;
	}
yy649:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy679;
	default:	goto yy46;
	}
yy650:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy680;
	default:	goto yy46;
	}
yy651:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy681;
	default:	goto yy46;
	}
yy652:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy682;
	default:	goto yy46;
	}
yy653:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy683;
	default:	goto yy46;
	}
yy654:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy684;
	default:	goto yy46;
	}
yy655:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy685;
	default:	goto yy46;
	}
yy656:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy686;
	default:	goto yy46;
	}
yy657:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy687;
	default:	goto yy46;
	}
yy658:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy688;
	default:	goto yy46;
	}
yy659:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy690;
	default:	goto yy46;
	}
yy660:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy691;
	default:	goto yy46;
	}
yy661:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy662;
	}
yy662:
#line 8043 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UTF8String (context.location); }
#line 16160 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy663:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy692;
	default:	goto yy46;
	}
yy664:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy693;
	default:	goto yy46;
	}
yy665:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy694;
	default:	goto yy46;
	}
yy666:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy695;
	default:	goto yy46;
	}
yy667:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy668;
	}
yy668:
#line 7959 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_APPLICATION (context.location); }
#line 16257 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy669:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy670;
	}
yy670:
#line 7971 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CONSTRAINED (context.location); }
#line 16330 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy671:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy672;
	}
yy672:
#line 7976 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DEFINITIONS (context.location); }
#line 16403 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy673:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy696;
	default:	goto yy46;
	}
yy674:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy697;
	default:	goto yy46;
	}
yy675:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy698;
	default:	goto yy46;
	}
yy676:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy699;
	default:	goto yy46;
	}
yy677:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy700;
	default:	goto yy46;
	}
yy678:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy701;
	default:	goto yy46;
	}
yy679:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy703;
	default:	goto yy46;
	}
yy680:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy705;
	default:	goto yy46;
	}
yy681:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy707;
	default:	goto yy46;
	}
yy682:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy708;
	default:	goto yy46;
	}
yy683:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy710;
	default:	goto yy46;
	}
yy684:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy711;
	default:	goto yy46;
	}
yy685:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy712;
	default:	goto yy46;
	}
yy686:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy713;
	default:	goto yy46;
	}
yy687:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy714;
	default:	goto yy46;
	}
yy688:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy689;
	}
yy689:
#line 8035 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TIME_OF_DAY (context.location); }
#line 16566 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy690:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy716;
	default:	goto yy46;
	}
yy691:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy717;
	default:	goto yy46;
	}
yy692:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy718;
	default:	goto yy46;
	}
yy693:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy719;
	default:	goto yy46;
	}
yy694:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy720;
	default:	goto yy46;
	}
yy695:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy721;
	default:	goto yy46;
	}
yy696:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy722;
	default:	goto yy46;
	}
yy697:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy723;
	default:	goto yy46;
	}
yy698:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy725;
	default:	goto yy46;
	}
yy699:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy727;
	default:	goto yy46;
	}
yy700:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy728;
	default:	goto yy46;
	}
yy701:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy702;
	}
yy702:
#line 8000 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INSTRUCTIONS (context.location); }
#line 16705 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy703:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy704;
	}
yy704:
#line 8002 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INTERSECTION (context.location); }
#line 16778 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy705:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy706;
	}
yy706:
#line 8003 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ISO646String (context.location); }
#line 16851 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy707:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy730;
	default:	goto yy46;
	}
yy708:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy709;
	}
yy709:
#line 8007 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_NOT_A_NUMBER (context.location); }
#line 16930 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy710:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy731;
	default:	goto yy46;
	}
yy711:
	yych = *++context.cursor;
	switch (yych) {
	case 'p':	goto yy733;
	default:	goto yy46;
	}
yy712:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy734;
	default:	goto yy46;
	}
yy713:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy736;
	default:	goto yy46;
	}
yy714:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy737;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy715;
	}
yy715:
#line 8023 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_RELATIVE_OID (context.location); }
#line 17027 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy716:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy738;
	default:	goto yy46;
	}
yy717:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy739;
	default:	goto yy46;
	}
yy718:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy741;
	default:	goto yy46;
	}
yy719:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy742;
	default:	goto yy46;
	}
yy720:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy743;
	default:	goto yy46;
	}
yy721:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy745;
	default:	goto yy46;
	}
yy722:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy746;
	default:	goto yy46;
	}
yy723:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy724;
	}
yy724:
#line 7986 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXTENSIBILITY (context.location); }
#line 17142 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy725:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy726;
	}
yy726:
#line 7991 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GeneralString (context.location); }
#line 17215 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy727:
	yych = *++context.cursor;
	switch (yych) {
	case 'm':	goto yy747;
	default:	goto yy46;
	}
yy728:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy729;
	}
yy729:
#line 7992 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GraphicString (context.location); }
#line 17294 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy730:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy748;
	default:	goto yy46;
	}
yy731:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy732;
	}
yy732:
#line 8009 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_NumericString (context.location); }
#line 17373 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy733:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy750;
	default:	goto yy46;
	}
yy734:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy735;
	}
yy735:
#line 8018 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PLUS_INFINITY (context.location); }
#line 17452 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy736:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy751;
	default:	goto yy46;
	}
yy737:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy752;
	default:	goto yy46;
	}
yy738:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy753;
	default:	goto yy46;
	}
yy739:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy740;
	}
yy740:
#line 8033 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TeletexString (context.location); }
#line 17543 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy741:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy754;
	default:	goto yy46;
	}
yy742:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy755;
	default:	goto yy46;
	}
yy743:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy744;
	}
yy744:
#line 8045 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_VisibleString (context.location); }
#line 17628 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy745:
	yych = *++context.cursor;
	switch (yych) {
	case 'X':	goto yy757;
	default:	goto yy46;
	}
yy746:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy759;
	default:	goto yy46;
	}
yy747:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy760;
	default:	goto yy46;
	}
yy748:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy749;
	}
yy749:
#line 8006 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_MINUS_INFINITY (context.location); }
#line 17719 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy750:
	yych = *++context.cursor;
	switch (yych) {
	case 'o':	goto yy762;
	default:	goto yy46;
	}
yy751:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy763;
	default:	goto yy46;
	}
yy752:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy765;
	default:	goto yy46;
	}
yy753:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy766;
	default:	goto yy46;
	}
yy754:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy768;
	default:	goto yy46;
	}
yy755:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy756;
	}
yy756:
#line 8044 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_VideotexString (context.location); }
#line 17822 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy757:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy758;
	}
yy758:
#line 7957 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ABSTRACT_SYNTAX (context.location); }
#line 17895 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy759:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy770;
	default:	goto yy46;
	}
yy760:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy761;
	}
yy761:
#line 7990 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GeneralizedTime (context.location); }
#line 17974 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy762:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy772;
	default:	goto yy46;
	}
yy763:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy764;
	}
yy764:
#line 8020 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PrintableString (context.location); }
#line 18053 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy765:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy774;
	default:	goto yy46;
	}
yy766:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy767;
	}
yy767:
#line 8037 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TYPE_IDENTIFIER (context.location); }
#line 18132 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy768:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy769;
	}
yy769:
#line 8041 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UniversalString (context.location); }
#line 18205 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy770:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy771;
	}
yy771:
#line 7980 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ENCODING_CONTROL (context.location); }
#line 18278 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy772:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy773;
	}
yy773:
#line 8011 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ObjectDescriptor (context.location); }
#line 18351 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy774:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy45;
	default:	goto yy775;
	}
yy775:
#line 8024 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_RELATIVE_OID_IRI (context.location); }
#line 18424 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
}
#line 8090 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"

    }
}
