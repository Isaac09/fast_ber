/* Generated by re2c 1.1.1 */
#line 1 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
// A Bison parser, made by GNU Bison 3.0.4.

// Skeleton implementation for Bison LALR(1) parsers in C++

// Copyright (C) 2002-2015 Free Software Foundation, Inc.

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// As a special exception, you may create a larger work that contains
// part or all of the Bison parser skeleton and distribute that work
// under terms of your choice, so long as that work isn't itself a
// parser generator using the skeleton or a modified version thereof
// as a parser skeleton.  Alternatively, if you modify or redistribute
// the parser skeleton itself, you may (at your option) remove this
// special exception, which will cause the skeleton and the resulting
// Bison output files to be licensed under the GNU General Public
// License without this special exception.

// This special exception was added by the Free Software Foundation in
// version 2.2 of Bison.


// First part of user declarations.

#line 37 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:404

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

// //                    "%code requires" blocks.
#line 10 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:408

    #include "fast_ber/compiler/CompilerTypes.hpp"

#line 52 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:408

# include <cassert>
# include <cstdlib> // std::abort
# include <iostream>
# include <stdexcept>
# include <string>
# include <vector>
#include <typeinfo>
#ifndef YYASSERT
# include <cassert>
# define YYASSERT assert
#endif


#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif


namespace yy {
#line 127 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:408

  template <class T, class S = std::vector<T> >
  class stack
  {
  public:
    // Hide our reversed order.
    typedef typename S::reverse_iterator iterator;
    typedef typename S::const_reverse_iterator const_iterator;

    stack ()
      : seq_ ()
    {
      seq_.reserve (200);
    }

    stack (unsigned int n)
      : seq_ (n)
    {}

    inline
    T&
    operator[] (unsigned int i)
    {
      return seq_[seq_.size () - 1 - i];
    }

    inline
    const T&
    operator[] (unsigned int i) const
    {
      return seq_[seq_.size () - 1 - i];
    }

    /// Steal the contents of \a t.
    ///
    /// Close to move-semantics.
    inline
    void
    push (T& t)
    {
      seq_.push_back (T());
      operator[](0).move (t);
    }

    inline
    void
    pop (unsigned int n = 1)
    {
      for (; n; --n)
        seq_.pop_back ();
    }

    void
    clear ()
    {
      seq_.clear ();
    }

    inline
    typename S::size_type
    size () const
    {
      return seq_.size ();
    }

    inline
    const_iterator
    begin () const
    {
      return seq_.rbegin ();
    }

    inline
    const_iterator
    end () const
    {
      return seq_.rend ();
    }

  private:
    stack (const stack&);
    stack& operator= (const stack&);
    /// The wrapped container.
    S seq_;
  };

  /// Present a slice of the top of a stack.
  template <class T, class S = stack<T> >
  class slice
  {
  public:
    slice (const S& stack, unsigned int range)
      : stack_ (stack)
      , range_ (range)
    {}

    inline
    const T&
    operator [] (unsigned int i) const
    {
      return stack_[range_ - i];
    }

  private:
    const S& stack_;
    unsigned int range_;
  };

  /// Abstract a position.
  class position
  {
  public:
    /// Construct a position.
    explicit position (std::string* f = YY_NULLPTR,
                       unsigned int l = 1u,
                       unsigned int c = 1u)
      : filename (f)
      , line (l)
      , column (c)
    {
    }


    /// Initialization.
    void initialize (std::string* fn = YY_NULLPTR,
                     unsigned int l = 1u,
                     unsigned int c = 1u)
    {
      filename = fn;
      line = l;
      column = c;
    }

    /** \name Line and Column related manipulators
     ** \{ */
    /// (line related) Advance to the COUNT next lines.
    void lines (int count = 1)
    {
      if (count)
        {
          column = 1u;
          line = add_ (line, count, 1);
        }
    }

    /// (column related) Advance to the COUNT next columns.
    void columns (int count = 1)
    {
      column = add_ (column, count, 1);
    }
    /** \} */

    /// File name to which this position refers.
    std::string* filename;
    /// Current line number.
    unsigned int line;
    /// Current column number.
    unsigned int column;

  private:
    /// Compute max(min, lhs+rhs) (provided min <= lhs).
    static unsigned int add_ (unsigned int lhs, int rhs, unsigned int min)
    {
      return (0 < rhs || -static_cast<unsigned int>(rhs) < lhs
              ? rhs + lhs
              : min);
    }
  };

  /// Add \a width columns, in place.
  inline position&
  operator+= (position& res, int width)
  {
    res.columns (width);
    return res;
  }

  /// Add \a width columns.
  inline position
  operator+ (position res, int width)
  {
    return res += width;
  }

  /// Subtract \a width columns, in place.
  inline position&
  operator-= (position& res, int width)
  {
    return res += -width;
  }

  /// Subtract \a width columns.
  inline position
  operator- (position res, int width)
  {
    return res -= width;
  }

  /// Compare two position objects.
  inline bool
  operator== (const position& pos1, const position& pos2)
  {
    return (pos1.line == pos2.line
            && pos1.column == pos2.column
            && (pos1.filename == pos2.filename
                || (pos1.filename && pos2.filename
                    && *pos1.filename == *pos2.filename)));
  }

  /// Compare two position objects.
  inline bool
  operator!= (const position& pos1, const position& pos2)
  {
    return !(pos1 == pos2);
  }

  /** \brief Intercept output stream redirection.
   ** \param ostr the destination output stream
   ** \param pos a reference to the position to redirect
   */
  template <typename YYChar>
  inline std::basic_ostream<YYChar>&
  operator<< (std::basic_ostream<YYChar>& ostr, const position& pos)
  {
    if (pos.filename)
      ostr << *pos.filename << ':';
    return ostr << pos.line << '.' << pos.column;
  }

  /// Abstract a location.
  class location
  {
  public:

    /// Construct a location from \a b to \a e.
    location (const position& b, const position& e)
      : begin (b)
      , end (e)
    {
    }

    /// Construct a 0-width location in \a p.
    explicit location (const position& p = position ())
      : begin (p)
      , end (p)
    {
    }

    /// Construct a 0-width location in \a f, \a l, \a c.
    explicit location (std::string* f,
                       unsigned int l = 1u,
                       unsigned int c = 1u)
      : begin (f, l, c)
      , end (f, l, c)
    {
    }


    /// Initialization.
    void initialize (std::string* f = YY_NULLPTR,
                     unsigned int l = 1u,
                     unsigned int c = 1u)
    {
      begin.initialize (f, l, c);
      end = begin;
    }

    /** \name Line and Column related manipulators
     ** \{ */
  public:
    /// Reset initial location to final location.
    void step ()
    {
      begin = end;
    }

    /// Extend the current location to the COUNT next columns.
    void columns (int count = 1)
    {
      end += count;
    }

    /// Extend the current location to the COUNT next lines.
    void lines (int count = 1)
    {
      end.lines (count);
    }
    /** \} */


  public:
    /// Beginning of the located region.
    position begin;
    /// End of the located region.
    position end;
  };

  /// Join two locations, in place.
  inline location& operator+= (location& res, const location& end)
  {
    res.end = end.end;
    return res;
  }

  /// Join two locations.
  inline location operator+ (location res, const location& end)
  {
    return res += end;
  }

  /// Add \a width columns to the end position, in place.
  inline location& operator+= (location& res, int width)
  {
    res.columns (width);
    return res;
  }

  /// Add \a width columns to the end position.
  inline location operator+ (location res, int width)
  {
    return res += width;
  }

  /// Subtract \a width columns to the end position, in place.
  inline location& operator-= (location& res, int width)
  {
    return res += -width;
  }

  /// Subtract \a width columns to the end position.
  inline location operator- (location res, int width)
  {
    return res -= width;
  }

  /// Compare two location objects.
  inline bool
  operator== (const location& loc1, const location& loc2)
  {
    return loc1.begin == loc2.begin && loc1.end == loc2.end;
  }

  /// Compare two location objects.
  inline bool
  operator!= (const location& loc1, const location& loc2)
  {
    return !(loc1 == loc2);
  }

  /** \brief Intercept output stream redirection.
   ** \param ostr the destination output stream
   ** \param loc a reference to the location to redirect
   **
   ** Avoid duplicate information.
   */
  template <typename YYChar>
  inline std::basic_ostream<YYChar>&
  operator<< (std::basic_ostream<YYChar>& ostr, const location& loc)
  {
    unsigned int end_col = 0 < loc.end.column ? loc.end.column - 1 : 0;
    ostr << loc.begin;
    if (loc.end.filename
        && (!loc.begin.filename
            || *loc.begin.filename != *loc.end.filename))
      ostr << '-' << loc.end.filename << ':' << loc.end.line << '.' << end_col;
    else if (loc.begin.line < loc.end.line)
      ostr << '-' << loc.end.line << '.' << end_col;
    else if (loc.begin.column < end_col)
      ostr << '-' << end_col;
    return ostr;
  }


  /// A char[S] buffer to store and retrieve objects.
  ///
  /// Sort of a variant, but does not keep track of the nature
  /// of the stored data, since that knowledge is available
  /// via the current state.
  template <size_t S>
  struct variant
  {
    /// Type of *this.
    typedef variant<S> self_type;

    /// Empty construction.
    variant ()
      : yytypeid_ (YY_NULLPTR)
    {}

    /// Construct and fill.
    template <typename T>
    variant (const T& t)
      : yytypeid_ (&typeid (T))
    {
      YYASSERT (sizeof (T) <= S);
      new (yyas_<T> ()) T (t);
    }

    /// Destruction, allowed only if empty.
    ~variant ()
    {
      YYASSERT (!yytypeid_);
    }

    /// Instantiate an empty \a T in here.
    template <typename T>
    T&
    build ()
    {
      YYASSERT (!yytypeid_);
      YYASSERT (sizeof (T) <= S);
      yytypeid_ = & typeid (T);
      return *new (yyas_<T> ()) T;
    }

    /// Instantiate a \a T in here from \a t.
    template <typename T>
    T&
    build (const T& t)
    {
      YYASSERT (!yytypeid_);
      YYASSERT (sizeof (T) <= S);
      yytypeid_ = & typeid (T);
      return *new (yyas_<T> ()) T (t);
    }

    /// Accessor to a built \a T.
    template <typename T>
    T&
    as ()
    {
      YYASSERT (*yytypeid_ == typeid (T));
      YYASSERT (sizeof (T) <= S);
      return *yyas_<T> ();
    }

    /// Const accessor to a built \a T (for %printer).
    template <typename T>
    const T&
    as () const
    {
      YYASSERT (*yytypeid_ == typeid (T));
      YYASSERT (sizeof (T) <= S);
      return *yyas_<T> ();
    }

    /// Swap the content with \a other, of same type.
    ///
    /// Both variants must be built beforehand, because swapping the actual
    /// data requires reading it (with as()), and this is not possible on
    /// unconstructed variants: it would require some dynamic testing, which
    /// should not be the variant's responsability.
    /// Swapping between built and (possibly) non-built is done with
    /// variant::move ().
    template <typename T>
    void
    swap (self_type& other)
    {
      YYASSERT (yytypeid_);
      YYASSERT (*yytypeid_ == *other.yytypeid_);
      std::swap (as<T> (), other.as<T> ());
    }

    /// Move the content of \a other to this.
    ///
    /// Destroys \a other.
    template <typename T>
    void
    move (self_type& other)
    {
      build<T> ();
      swap<T> (other);
      other.destroy<T> ();
    }

    /// Copy the content of \a other to this.
    template <typename T>
    void
    copy (const self_type& other)
    {
      build<T> (other.as<T> ());
    }

    /// Destroy the stored \a T.
    template <typename T>
    void
    destroy ()
    {
      as<T> ().~T ();
      yytypeid_ = YY_NULLPTR;
    }

  private:
    /// Prohibit blind copies.
    self_type& operator=(const self_type&);
    variant (const self_type&);

    /// Accessor to raw memory as \a T.
    template <typename T>
    T*
    yyas_ ()
    {
      void *yyp = yybuffer_.yyraw;
      return static_cast<T*> (yyp);
     }

    /// Const accessor to raw memory as \a T.
    template <typename T>
    const T*
    yyas_ () const
    {
      const void *yyp = yybuffer_.yyraw;
      return static_cast<const T*> (yyp);
     }

    union
    {
      /// Strongest alignment constraints.
      long double yyalign_me;
      /// A buffer large enough to store any of the semantic values.
      char yyraw[S];
    } yybuffer_;

    /// Whether the content is built: if defined, the name of the stored type.
    const std::type_info *yytypeid_;
  };


  /// A Bison parser.
  class asn1_parser
  {
  public:
#ifndef YYSTYPE
    /// An auxiliary type to compute the largest semantic type.
    union union_type
    {
      // Assignment
      // TypeAssignment
      // ValueAssignment
      char dummy1[sizeof(Assignment)];

      // BuiltinType
      char dummy2[sizeof(BuiltinType)];

      // ChoiceType
      char dummy3[sizeof(ChoiceType)];

      // Class
      char dummy4[sizeof(Class)];

      // ComponentType
      char dummy5[sizeof(ComponentType)];

      // ComponentTypeLists
      // RootComponentTypeList
      // ComponentTypeList
      char dummy6[sizeof(ComponentTypeList)];

      // DefinedType
      char dummy7[sizeof(DefinedType)];

      // DefinedValue
      char dummy8[sizeof(DefinedValue)];

      // EnumeratedType
      // Enumerations
      // Enumeration
      char dummy9[sizeof(EnumeratedType)];

      // EnumerationItem
      char dummy10[sizeof(EnumerationValue)];

      // SymbolsFromModule
      char dummy11[sizeof(Import)];

      // ModuleBody
      char dummy12[sizeof(Module)];

      // NamedNumber
      char dummy13[sizeof(NamedNumber)];

      // NamedType
      char dummy14[sizeof(NamedType)];

      // ObjIdComponents
      // NameForm
      // NumberForm
      // NameAndNumberForm
      char dummy15[sizeof(ObjectIdComponentValue)];

      // PrefixedType
      char dummy16[sizeof(PrefixedType)];

      // SequenceOfType
      char dummy17[sizeof(SequenceOfType)];

      // SequenceType
      char dummy18[sizeof(SequenceType)];

      // SetOfType
      char dummy19[sizeof(SetOfType)];

      // SetType
      char dummy20[sizeof(SetType)];

      // Tag
      char dummy21[sizeof(Tag)];

      // TaggedType
      char dummy22[sizeof(TaggedType)];

      // TagDefault
      char dummy23[sizeof(TaggingMode)];

      // Type
      char dummy24[sizeof(Type)];

      // Value
      // BuiltinValue
      // ReferencedValue
      char dummy25[sizeof(Value)];

      // realnumber
      char dummy26[sizeof(double)];

      // ClassNumber
      char dummy27[sizeof(int)];

      // number
      // SignedNumber
      // IntegerValue
      char dummy28[sizeof(long long)];

      // bstring
      // xmlbstring
      // hstring
      // xmlhstring
      // cstring
      // xmlcstring
      // simplestring
      // xmltstring
      // GENERIC_IDENTIFIER_UPPERCASE
      // GENERIC_IDENTIFIER_LOWERCASE
      // ModuleIdentifier
      // GlobalModuleReference
      // Symbol
      // Reference
      // typereference
      // identifier
      // valuereference
      // modulereference
      char dummy29[sizeof(std::string)];

      // AssignmentList
      char dummy30[sizeof(std::vector<Assignment>)];

      // Exports
      char dummy31[sizeof(std::vector<Export>)];

      // Imports
      // SymbolsImported
      // SymbolsFromModuleList
      char dummy32[sizeof(std::vector<Import>)];

      // AlternativeTypeLists
      // RootAlternativeTypeList
      // AlternativeTypeList
      char dummy33[sizeof(std::vector<NamedType>)];

      // ObjectIdentifierValue
      // ObjIdComponentsList
      char dummy34[sizeof(std::vector<ObjectIdComponentValue>)];

      // SymbolList
      char dummy35[sizeof(std::vector<std::string>)];
};

    /// Symbol semantic values.
    typedef variant<sizeof(union_type)> semantic_type;
#else
    typedef YYSTYPE semantic_type;
#endif
    /// Symbol locations.
    typedef location location_type;

    /// Syntax errors thrown from user actions.
    struct syntax_error : std::runtime_error
    {
      syntax_error (const location_type& l, const std::string& m);
      location_type location;
    };

    /// Tokens.
    struct token
    {
      enum yytokentype
      {
        END_OF_FILE = 0,
        comment = 258,
        number = 259,
        realnumber = 260,
        bstring = 261,
        xmlbstring = 262,
        hstring = 263,
        xmlhstring = 264,
        cstring = 265,
        xmlcstring = 266,
        simplestring = 267,
        xmltstring = 268,
        psname = 269,
        encodingreference = 270,
        integerUnicodeLabel = 271,
        tstring = 274,
        objectclassreference = 276,
        objectreference = 277,
        objectsetreference = 278,
        typefieldreference = 279,
        valuefieldreference = 280,
        valuesetfieldreference = 281,
        objectfieldreference = 282,
        objectsetfieldreference = 283,
        word = 284,
        ABSENT = 285,
        ABSTRACT_SYNTAX = 286,
        ALL = 287,
        APPLICATION = 288,
        ASN_NULL = 289,
        AUTOMATIC = 290,
        BEGIN = 291,
        BIT = 292,
        BMPString = 293,
        BOOLEAN = 294,
        BY = 295,
        CHARACTER = 296,
        CHOICE = 297,
        CLASS = 298,
        COMPONENT = 299,
        COMPONENTS = 300,
        CONSTRAINED = 301,
        CONTAINING = 302,
        DATE = 303,
        DATE_TIME = 304,
        DEFAULT = 305,
        DEFINITIONS = 306,
        DURATION = 307,
        EMBEDDED = 308,
        ENCODED = 309,
        ENCODING_CONTROL = 310,
        END = 311,
        ENUMERATED = 312,
        EXCEPT = 313,
        EXPLICIT = 314,
        EXPORTS = 315,
        EXTENSIBILITY = 316,
        EXTERNAL = 317,
        FALSE = 318,
        FROM = 319,
        GeneralizedTime = 320,
        GeneralString = 321,
        GraphicString = 322,
        IA5String = 323,
        IDENTIFIER = 324,
        IMPLICIT = 325,
        IMPLIED = 326,
        IMPORTS = 327,
        INCLUDES = 328,
        INSTANCE = 329,
        INSTRUCTIONS = 330,
        INTEGER = 331,
        INTERSECTION = 332,
        ISO646String = 333,
        MAX = 334,
        MIN = 335,
        MINUS_INFINITY = 336,
        NOT_A_NUMBER = 337,
        NumericString = 338,
        OBJECT = 339,
        ObjectDescriptor = 340,
        OCTET = 341,
        OF = 342,
        OID_IRI = 343,
        OPTIONAL = 344,
        PATTERN = 345,
        PDV = 346,
        PLUS_INFINITY = 347,
        PRESENT = 348,
        PrintableString = 349,
        PRIVATE = 350,
        REAL = 351,
        RELATIVE_OID = 352,
        RELATIVE_OID_IRI = 353,
        SEQUENCE = 354,
        SET = 355,
        SETTINGS = 356,
        SIZE = 357,
        STRING = 358,
        SYNTAX = 359,
        T61String = 360,
        TAGS = 361,
        TeletexString = 362,
        TIME = 363,
        TIME_OF_DAY = 364,
        TRUE = 365,
        TYPE_IDENTIFIER = 366,
        UNION = 367,
        UNIQUE = 368,
        UNIVERSAL = 369,
        UniversalString = 370,
        UTCTime = 371,
        UTF8String = 372,
        VideotexString = 373,
        VisibleString = 374,
        WITH = 375,
        DEFINED_AS = 376,
        ELIPSIS = 377,
        RANGE = 378,
        OPEN_BRACE = 379,
        CLOSE_BRACE = 380,
        OPEN_PARENTHESIS = 381,
        CLOSE_PARENTHESIS = 382,
        OPEN_SQUARE_BRACKET = 383,
        CLOSE_SQUARE_BRACKET = 384,
        LESS_THAN = 385,
        GREATER_THAN = 386,
        EXCLAMATION_MARK = 387,
        QUOTATION_MARK = 388,
        AMPERSAND = 389,
        APOSTROPHE = 390,
        ASTERISK = 391,
        COMMA = 392,
        FULL_STOP = 393,
        HYPHEN_MINUS = 394,
        SOLIDUS = 395,
        COLON = 396,
        SEMICOLON = 397,
        EQUALS_SIGN = 398,
        AT = 399,
        VERTICAL_LINE = 400,
        ACCENT = 401,
        PLUS = 402,
        STAR = 403,
        QUESTION_MARK = 404,
        GENERIC_IDENTIFIER_UPPERCASE = 405,
        GENERIC_IDENTIFIER_LOWERCASE = 406,
        GENERIC_INTEGER = 407,
        xmlasn1typename = 408
      };
    };

    /// (External) token type, as returned by yylex.
    typedef token::yytokentype token_type;

    /// Symbol type: an internal symbol number.
    typedef int symbol_number_type;

    /// The symbol type number to denote an empty symbol.
    enum { empty_symbol = -2 };

    /// Internal symbol number for tokens (subsumed by symbol_number_type).
    typedef unsigned char token_number_type;

    /// A complete symbol.
    ///
    /// Expects its Base type to provide access to the symbol type
    /// via type_get().
    ///
    /// Provide access to semantic value and location.
    template <typename Base>
    struct basic_symbol : Base
    {
      /// Alias to Base.
      typedef Base super_type;

      /// Default constructor.
      basic_symbol ();

      /// Copy constructor.
      basic_symbol (const basic_symbol& other);

      /// Constructor for valueless symbols, and symbols from each type.

  basic_symbol (typename Base::kind_type t, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Assignment v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const BuiltinType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ChoiceType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Class v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ComponentType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ComponentTypeList v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const DefinedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const DefinedValue v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const EnumeratedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const EnumerationValue v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Import v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Module v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const NamedNumber v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const NamedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ObjectIdComponentValue v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const PrefixedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const SequenceOfType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const SequenceType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const SetOfType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const SetType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Tag v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const TaggedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const TaggingMode v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Type v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Value v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const double v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const int v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const long long v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::string v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<Assignment> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<Export> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<Import> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<NamedType> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<ObjectIdComponentValue> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<std::string> v, const location_type& l);


      /// Constructor for symbols with semantic value.
      basic_symbol (typename Base::kind_type t,
                    const semantic_type& v,
                    const location_type& l);

      /// Destroy the symbol.
      ~basic_symbol ();

      /// Destroy contents, and record that is empty.
      void clear ();

      /// Whether empty.
      bool empty () const;

      /// Destructive move, \a s is emptied into this.
      void move (basic_symbol& s);

      /// The semantic value.
      semantic_type value;

      /// The location.
      location_type location;

    private:
      /// Assignment operator.
      basic_symbol& operator= (const basic_symbol& other);
    };

    /// Type access provider for token (enum) based symbols.
    struct by_type
    {
      /// Default constructor.
      by_type ();

      /// Copy constructor.
      by_type (const by_type& other);

      /// The symbol type as needed by the constructor.
      typedef token_type kind_type;

      /// Constructor from (external) token numbers.
      by_type (kind_type t);

      /// Record that this symbol is empty.
      void clear ();

      /// Steal the symbol type from \a that.
      void move (by_type& that);

      /// The (internal) type number (corresponding to \a type).
      /// \a empty when empty.
      symbol_number_type type_get () const;

      /// The token.
      token_type token () const;

      /// The symbol type.
      /// \a empty_symbol when empty.
      /// An int, not token_number_type, to be able to store empty_symbol.
      int type;
    };

    /// "External" symbols: returned by the scanner.
    typedef basic_symbol<by_type> symbol_type;

    // Symbol constructors declarations.
    static inline
    symbol_type
    make_END_OF_FILE (const location_type& l);

    static inline
    symbol_type
    make_comment (const location_type& l);

    static inline
    symbol_type
    make_number (const long long& v, const location_type& l);

    static inline
    symbol_type
    make_realnumber (const double& v, const location_type& l);

    static inline
    symbol_type
    make_bstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_xmlbstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_hstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_xmlhstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_cstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_xmlcstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_simplestring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_xmltstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_psname (const location_type& l);

    static inline
    symbol_type
    make_encodingreference (const location_type& l);

    static inline
    symbol_type
    make_integerUnicodeLabel (const location_type& l);

    static inline
    symbol_type
    make_tstring (const location_type& l);

    static inline
    symbol_type
    make_objectclassreference (const location_type& l);

    static inline
    symbol_type
    make_objectreference (const location_type& l);

    static inline
    symbol_type
    make_objectsetreference (const location_type& l);

    static inline
    symbol_type
    make_typefieldreference (const location_type& l);

    static inline
    symbol_type
    make_valuefieldreference (const location_type& l);

    static inline
    symbol_type
    make_valuesetfieldreference (const location_type& l);

    static inline
    symbol_type
    make_objectfieldreference (const location_type& l);

    static inline
    symbol_type
    make_objectsetfieldreference (const location_type& l);

    static inline
    symbol_type
    make_word (const location_type& l);

    static inline
    symbol_type
    make_ABSENT (const location_type& l);

    static inline
    symbol_type
    make_ABSTRACT_SYNTAX (const location_type& l);

    static inline
    symbol_type
    make_ALL (const location_type& l);

    static inline
    symbol_type
    make_APPLICATION (const location_type& l);

    static inline
    symbol_type
    make_ASN_NULL (const location_type& l);

    static inline
    symbol_type
    make_AUTOMATIC (const location_type& l);

    static inline
    symbol_type
    make_BEGIN (const location_type& l);

    static inline
    symbol_type
    make_BIT (const location_type& l);

    static inline
    symbol_type
    make_BMPString (const location_type& l);

    static inline
    symbol_type
    make_BOOLEAN (const location_type& l);

    static inline
    symbol_type
    make_BY (const location_type& l);

    static inline
    symbol_type
    make_CHARACTER (const location_type& l);

    static inline
    symbol_type
    make_CHOICE (const location_type& l);

    static inline
    symbol_type
    make_CLASS (const location_type& l);

    static inline
    symbol_type
    make_COMPONENT (const location_type& l);

    static inline
    symbol_type
    make_COMPONENTS (const location_type& l);

    static inline
    symbol_type
    make_CONSTRAINED (const location_type& l);

    static inline
    symbol_type
    make_CONTAINING (const location_type& l);

    static inline
    symbol_type
    make_DATE (const location_type& l);

    static inline
    symbol_type
    make_DATE_TIME (const location_type& l);

    static inline
    symbol_type
    make_DEFAULT (const location_type& l);

    static inline
    symbol_type
    make_DEFINITIONS (const location_type& l);

    static inline
    symbol_type
    make_DURATION (const location_type& l);

    static inline
    symbol_type
    make_EMBEDDED (const location_type& l);

    static inline
    symbol_type
    make_ENCODED (const location_type& l);

    static inline
    symbol_type
    make_ENCODING_CONTROL (const location_type& l);

    static inline
    symbol_type
    make_END (const location_type& l);

    static inline
    symbol_type
    make_ENUMERATED (const location_type& l);

    static inline
    symbol_type
    make_EXCEPT (const location_type& l);

    static inline
    symbol_type
    make_EXPLICIT (const location_type& l);

    static inline
    symbol_type
    make_EXPORTS (const location_type& l);

    static inline
    symbol_type
    make_EXTENSIBILITY (const location_type& l);

    static inline
    symbol_type
    make_EXTERNAL (const location_type& l);

    static inline
    symbol_type
    make_FALSE (const location_type& l);

    static inline
    symbol_type
    make_FROM (const location_type& l);

    static inline
    symbol_type
    make_GeneralizedTime (const location_type& l);

    static inline
    symbol_type
    make_GeneralString (const location_type& l);

    static inline
    symbol_type
    make_GraphicString (const location_type& l);

    static inline
    symbol_type
    make_IA5String (const location_type& l);

    static inline
    symbol_type
    make_IDENTIFIER (const location_type& l);

    static inline
    symbol_type
    make_IMPLICIT (const location_type& l);

    static inline
    symbol_type
    make_IMPLIED (const location_type& l);

    static inline
    symbol_type
    make_IMPORTS (const location_type& l);

    static inline
    symbol_type
    make_INCLUDES (const location_type& l);

    static inline
    symbol_type
    make_INSTANCE (const location_type& l);

    static inline
    symbol_type
    make_INSTRUCTIONS (const location_type& l);

    static inline
    symbol_type
    make_INTEGER (const location_type& l);

    static inline
    symbol_type
    make_INTERSECTION (const location_type& l);

    static inline
    symbol_type
    make_ISO646String (const location_type& l);

    static inline
    symbol_type
    make_MAX (const location_type& l);

    static inline
    symbol_type
    make_MIN (const location_type& l);

    static inline
    symbol_type
    make_MINUS_INFINITY (const location_type& l);

    static inline
    symbol_type
    make_NOT_A_NUMBER (const location_type& l);

    static inline
    symbol_type
    make_NumericString (const location_type& l);

    static inline
    symbol_type
    make_OBJECT (const location_type& l);

    static inline
    symbol_type
    make_ObjectDescriptor (const location_type& l);

    static inline
    symbol_type
    make_OCTET (const location_type& l);

    static inline
    symbol_type
    make_OF (const location_type& l);

    static inline
    symbol_type
    make_OID_IRI (const location_type& l);

    static inline
    symbol_type
    make_OPTIONAL (const location_type& l);

    static inline
    symbol_type
    make_PATTERN (const location_type& l);

    static inline
    symbol_type
    make_PDV (const location_type& l);

    static inline
    symbol_type
    make_PLUS_INFINITY (const location_type& l);

    static inline
    symbol_type
    make_PRESENT (const location_type& l);

    static inline
    symbol_type
    make_PrintableString (const location_type& l);

    static inline
    symbol_type
    make_PRIVATE (const location_type& l);

    static inline
    symbol_type
    make_REAL (const location_type& l);

    static inline
    symbol_type
    make_RELATIVE_OID (const location_type& l);

    static inline
    symbol_type
    make_RELATIVE_OID_IRI (const location_type& l);

    static inline
    symbol_type
    make_SEQUENCE (const location_type& l);

    static inline
    symbol_type
    make_SET (const location_type& l);

    static inline
    symbol_type
    make_SETTINGS (const location_type& l);

    static inline
    symbol_type
    make_SIZE (const location_type& l);

    static inline
    symbol_type
    make_STRING (const location_type& l);

    static inline
    symbol_type
    make_SYNTAX (const location_type& l);

    static inline
    symbol_type
    make_T61String (const location_type& l);

    static inline
    symbol_type
    make_TAGS (const location_type& l);

    static inline
    symbol_type
    make_TeletexString (const location_type& l);

    static inline
    symbol_type
    make_TIME (const location_type& l);

    static inline
    symbol_type
    make_TIME_OF_DAY (const location_type& l);

    static inline
    symbol_type
    make_TRUE (const location_type& l);

    static inline
    symbol_type
    make_TYPE_IDENTIFIER (const location_type& l);

    static inline
    symbol_type
    make_UNION (const location_type& l);

    static inline
    symbol_type
    make_UNIQUE (const location_type& l);

    static inline
    symbol_type
    make_UNIVERSAL (const location_type& l);

    static inline
    symbol_type
    make_UniversalString (const location_type& l);

    static inline
    symbol_type
    make_UTCTime (const location_type& l);

    static inline
    symbol_type
    make_UTF8String (const location_type& l);

    static inline
    symbol_type
    make_VideotexString (const location_type& l);

    static inline
    symbol_type
    make_VisibleString (const location_type& l);

    static inline
    symbol_type
    make_WITH (const location_type& l);

    static inline
    symbol_type
    make_DEFINED_AS (const location_type& l);

    static inline
    symbol_type
    make_ELIPSIS (const location_type& l);

    static inline
    symbol_type
    make_RANGE (const location_type& l);

    static inline
    symbol_type
    make_OPEN_BRACE (const location_type& l);

    static inline
    symbol_type
    make_CLOSE_BRACE (const location_type& l);

    static inline
    symbol_type
    make_OPEN_PARENTHESIS (const location_type& l);

    static inline
    symbol_type
    make_CLOSE_PARENTHESIS (const location_type& l);

    static inline
    symbol_type
    make_OPEN_SQUARE_BRACKET (const location_type& l);

    static inline
    symbol_type
    make_CLOSE_SQUARE_BRACKET (const location_type& l);

    static inline
    symbol_type
    make_LESS_THAN (const location_type& l);

    static inline
    symbol_type
    make_GREATER_THAN (const location_type& l);

    static inline
    symbol_type
    make_EXCLAMATION_MARK (const location_type& l);

    static inline
    symbol_type
    make_QUOTATION_MARK (const location_type& l);

    static inline
    symbol_type
    make_AMPERSAND (const location_type& l);

    static inline
    symbol_type
    make_APOSTROPHE (const location_type& l);

    static inline
    symbol_type
    make_ASTERISK (const location_type& l);

    static inline
    symbol_type
    make_COMMA (const location_type& l);

    static inline
    symbol_type
    make_FULL_STOP (const location_type& l);

    static inline
    symbol_type
    make_HYPHEN_MINUS (const location_type& l);

    static inline
    symbol_type
    make_SOLIDUS (const location_type& l);

    static inline
    symbol_type
    make_COLON (const location_type& l);

    static inline
    symbol_type
    make_SEMICOLON (const location_type& l);

    static inline
    symbol_type
    make_EQUALS_SIGN (const location_type& l);

    static inline
    symbol_type
    make_AT (const location_type& l);

    static inline
    symbol_type
    make_VERTICAL_LINE (const location_type& l);

    static inline
    symbol_type
    make_ACCENT (const location_type& l);

    static inline
    symbol_type
    make_PLUS (const location_type& l);

    static inline
    symbol_type
    make_STAR (const location_type& l);

    static inline
    symbol_type
    make_QUESTION_MARK (const location_type& l);

    static inline
    symbol_type
    make_GENERIC_IDENTIFIER_UPPERCASE (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_GENERIC_IDENTIFIER_LOWERCASE (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_GENERIC_INTEGER (const location_type& l);

    static inline
    symbol_type
    make_xmlasn1typename (const location_type& l);


    /// Build a parser object.
    asn1_parser (Context& context_yyarg);
    virtual ~asn1_parser ();

    /// Parse.
    /// \returns  0 iff parsing succeeded.
    virtual int parse ();

#if YYDEBUG
    /// The current debugging stream.
    std::ostream& debug_stream () const YY_ATTRIBUTE_PURE;
    /// Set the current debugging stream.
    void set_debug_stream (std::ostream &);

    /// Type for debugging levels.
    typedef int debug_level_type;
    /// The current debugging level.
    debug_level_type debug_level () const YY_ATTRIBUTE_PURE;
    /// Set the current debugging level.
    void set_debug_level (debug_level_type l);
#endif

    /// Report a syntax error.
    /// \param loc    where the syntax error is found.
    /// \param msg    a description of the syntax error.
    virtual void error (const location_type& loc, const std::string& msg);

    /// Report a syntax error.
    void error (const syntax_error& err);

  private:
    /// This class is not copyable.
    asn1_parser (const asn1_parser&);
    asn1_parser& operator= (const asn1_parser&);

    /// State numbers.
    typedef int state_type;

    /// Generate an error message.
    /// \param yystate   the state where the error occurred.
    /// \param yyla      the lookahead token.
    virtual std::string yysyntax_error_ (state_type yystate,
                                         const symbol_type& yyla) const;

    /// Compute post-reduction state.
    /// \param yystate   the current state
    /// \param yysym     the nonterminal to push on the stack
    state_type yy_lr_goto_state_ (state_type yystate, int yysym);

    /// Whether the given \c yypact_ value indicates a defaulted state.
    /// \param yyvalue   the value to check
    static bool yy_pact_value_is_default_ (int yyvalue);

    /// Whether the given \c yytable_ value indicates a syntax error.
    /// \param yyvalue   the value to check
    static bool yy_table_value_is_error_ (int yyvalue);

    static const short int yypact_ninf_;
    static const short int yytable_ninf_;

    /// Convert a scanner token number \a t to a symbol number.
    static token_number_type yytranslate_ (token_type t);

    // Tables.
  // YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
  // STATE-NUM.
  static const short int yypact_[];

  // YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
  // Performed when YYTABLE does not specify something else to do.  Zero
  // means the default is an error.
  static const unsigned short int yydefact_[];

  // YYPGOTO[NTERM-NUM].
  static const short int yypgoto_[];

  // YYDEFGOTO[NTERM-NUM].
  static const short int yydefgoto_[];

  // YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
  // positive, shift that token.  If negative, reduce the rule whose
  // number is the opposite.  If YYTABLE_NINF, syntax error.
  static const short int yytable_[];

  static const short int yycheck_[];

  // YYSTOS[STATE-NUM] -- The (internal number of the) accessing
  // symbol of state STATE-NUM.
  static const unsigned short int yystos_[];

  // YYR1[YYN] -- Symbol number of symbol that rule YYN derives.
  static const unsigned short int yyr1_[];

  // YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.
  static const unsigned char yyr2_[];


    /// Convert the symbol name \a n to a form suitable for a diagnostic.
    static std::string yytnamerr_ (const char *n);


    /// For a symbol, its name in clear.
    static const char* const yytname_[];
#if YYDEBUG
  // YYRLINE[YYN] -- Source line where rule number YYN was defined.
  static const unsigned short int yyrline_[];
    /// Report on the debug stream that the rule \a r is going to be reduced.
    virtual void yy_reduce_print_ (int r);
    /// Print the state stack on the debug stream.
    virtual void yystack_print_ ();

    // Debugging.
    int yydebug_;
    std::ostream* yycdebug_;

    /// \brief Display a symbol type, value and location.
    /// \param yyo    The output stream.
    /// \param yysym  The symbol.
    template <typename Base>
    void yy_print_ (std::ostream& yyo, const basic_symbol<Base>& yysym) const;
#endif

    /// \brief Reclaim the memory associated to a symbol.
    /// \param yymsg     Why this token is reclaimed.
    ///                  If null, print nothing.
    /// \param yysym     The symbol.
    template <typename Base>
    void yy_destroy_ (const char* yymsg, basic_symbol<Base>& yysym) const;

  private:
    /// Type access provider for state based symbols.
    struct by_state
    {
      /// Default constructor.
      by_state ();

      /// The symbol type as needed by the constructor.
      typedef state_type kind_type;

      /// Constructor.
      by_state (kind_type s);

      /// Copy constructor.
      by_state (const by_state& other);

      /// Record that this symbol is empty.
      void clear ();

      /// Steal the symbol type from \a that.
      void move (by_state& that);

      /// The (internal) type number (corresponding to \a state).
      /// \a empty_symbol when empty.
      symbol_number_type type_get () const;

      /// The state number used to denote an empty symbol.
      enum { empty_state = -1 };

      /// The state.
      /// \a empty when empty.
      state_type state;
    };

    /// "Internal" symbol: element of the stack.
    struct stack_symbol_type : basic_symbol<by_state>
    {
      /// Superclass.
      typedef basic_symbol<by_state> super_type;
      /// Construct an empty symbol.
      stack_symbol_type ();
      /// Steal the contents from \a sym to build this.
      stack_symbol_type (state_type s, symbol_type& sym);
      /// Assignment, needed by push_back.
      stack_symbol_type& operator= (const stack_symbol_type& that);
    };

    /// Stack type.
    typedef stack<stack_symbol_type> stack_type;

    /// The stack.
    stack_type yystack_;

    /// Push a new state on the stack.
    /// \param m    a debug message to display
    ///             if null, no trace is output.
    /// \param s    the symbol
    /// \warning the contents of \a s.value is stolen.
    void yypush_ (const char* m, stack_symbol_type& s);

    /// Push a new look ahead token on the state on the stack.
    /// \param m    a debug message to display
    ///             if null, no trace is output.
    /// \param s    the state
    /// \param sym  the symbol (for its value and location).
    /// \warning the contents of \a s.value is stolen.
    void yypush_ (const char* m, state_type s, symbol_type& sym);

    /// Pop \a n symbols the three stacks.
    void yypop_ (unsigned int n = 1);

    /// Constants.
    enum
    {
      yyeof_ = 0,
      yylast_ = 1908,     ///< Last index in yytable_.
      yynnts_ = 176,  ///< Number of nonterminal symbols.
      yyfinal_ = 6, ///< Termination state number.
      yyterror_ = 1,
      yyerrcode_ = 256,
      yyntokens_ = 155  ///< Number of tokens.
    };


    // User arguments.
    Context& context;
  };

  // Symbol number corresponding to token number t.
  inline
  asn1_parser::token_number_type
  asn1_parser::yytranslate_ (token_type t)
  {
    static
    const token_number_type
    translate_table[] =
    {
     0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154
    };
    const unsigned int user_token_number_max_ = 409;
    const token_number_type undef_token_ = 2;

    if (static_cast<int>(t) <= yyeof_)
      return yyeof_;
    else if (static_cast<unsigned int> (t) <= user_token_number_max_)
      return translate_table[t];
    else
      return undef_token_;
  }

  inline
  asn1_parser::syntax_error::syntax_error (const location_type& l, const std::string& m)
    : std::runtime_error (m)
    , location (l)
  {}

  // basic_symbol.
  template <typename Base>
  inline
  asn1_parser::basic_symbol<Base>::basic_symbol ()
    : value ()
  {}

  template <typename Base>
  inline
  asn1_parser::basic_symbol<Base>::basic_symbol (const basic_symbol& other)
    : Base (other)
    , value ()
    , location (other.location)
  {
      switch (other.type_get ())
    {
      case 209: // Assignment
      case 213: // TypeAssignment
      case 214: // ValueAssignment
        value.copy< Assignment > (other.value);
        break;

      case 216: // BuiltinType
        value.copy< BuiltinType > (other.value);
        break;

      case 246: // ChoiceType
        value.copy< ChoiceType > (other.value);
        break;

      case 256: // Class
        value.copy< Class > (other.value);
        break;

      case 242: // ComponentType
        value.copy< ComponentType > (other.value);
        break;

      case 239: // ComponentTypeLists
      case 240: // RootComponentTypeList
      case 241: // ComponentTypeList
        value.copy< ComponentTypeList > (other.value);
        break;

      case 210: // DefinedType
        value.copy< DefinedType > (other.value);
        break;

      case 211: // DefinedValue
        value.copy< DefinedValue > (other.value);
        break;

      case 228: // EnumeratedType
      case 229: // Enumerations
      case 230: // Enumeration
        value.copy< EnumeratedType > (other.value);
        break;

      case 231: // EnumerationItem
        value.copy< EnumerationValue > (other.value);
        break;

      case 202: // SymbolsFromModule
        value.copy< Import > (other.value);
        break;

      case 196: // ModuleBody
        value.copy< Module > (other.value);
        break;

      case 225: // NamedNumber
        value.copy< NamedNumber > (other.value);
        break;

      case 217: // NamedType
        value.copy< NamedType > (other.value);
        break;

      case 260: // ObjIdComponents
      case 261: // NameForm
      case 262: // NumberForm
      case 263: // NameAndNumberForm
        value.copy< ObjectIdComponentValue > (other.value);
        break;

      case 251: // PrefixedType
        value.copy< PrefixedType > (other.value);
        break;

      case 243: // SequenceOfType
        value.copy< SequenceOfType > (other.value);
        break;

      case 238: // SequenceType
        value.copy< SequenceType > (other.value);
        break;

      case 245: // SetOfType
        value.copy< SetOfType > (other.value);
        break;

      case 244: // SetType
        value.copy< SetType > (other.value);
        break;

      case 253: // Tag
        value.copy< Tag > (other.value);
        break;

      case 252: // TaggedType
        value.copy< TaggedType > (other.value);
        break;

      case 194: // TagDefault
        value.copy< TaggingMode > (other.value);
        break;

      case 215: // Type
        value.copy< Type > (other.value);
        break;

      case 218: // Value
      case 219: // BuiltinValue
      case 220: // ReferencedValue
        value.copy< Value > (other.value);
        break;

      case 5: // realnumber
        value.copy< double > (other.value);
        break;

      case 255: // ClassNumber
        value.copy< int > (other.value);
        break;

      case 4: // number
      case 226: // SignedNumber
      case 227: // IntegerValue
        value.copy< long long > (other.value);
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 150: // GENERIC_IDENTIFIER_UPPERCASE
      case 151: // GENERIC_IDENTIFIER_LOWERCASE
      case 185: // ModuleIdentifier
      case 203: // GlobalModuleReference
      case 206: // Symbol
      case 207: // Reference
      case 327: // typereference
      case 328: // identifier
      case 329: // valuereference
      case 330: // modulereference
        value.copy< std::string > (other.value);
        break;

      case 208: // AssignmentList
        value.copy< std::vector<Assignment> > (other.value);
        break;

      case 197: // Exports
        value.copy< std::vector<Export> > (other.value);
        break;

      case 199: // Imports
      case 200: // SymbolsImported
      case 201: // SymbolsFromModuleList
        value.copy< std::vector<Import> > (other.value);
        break;

      case 247: // AlternativeTypeLists
      case 248: // RootAlternativeTypeList
      case 249: // AlternativeTypeList
        value.copy< std::vector<NamedType> > (other.value);
        break;

      case 258: // ObjectIdentifierValue
      case 259: // ObjIdComponentsList
        value.copy< std::vector<ObjectIdComponentValue> > (other.value);
        break;

      case 205: // SymbolList
        value.copy< std::vector<std::string> > (other.value);
        break;

      default:
        break;
    }

  }


  template <typename Base>
  inline
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const semantic_type& v, const location_type& l)
    : Base (t)
    , value ()
    , location (l)
  {
    (void) v;
      switch (this->type_get ())
    {
      case 209: // Assignment
      case 213: // TypeAssignment
      case 214: // ValueAssignment
        value.copy< Assignment > (v);
        break;

      case 216: // BuiltinType
        value.copy< BuiltinType > (v);
        break;

      case 246: // ChoiceType
        value.copy< ChoiceType > (v);
        break;

      case 256: // Class
        value.copy< Class > (v);
        break;

      case 242: // ComponentType
        value.copy< ComponentType > (v);
        break;

      case 239: // ComponentTypeLists
      case 240: // RootComponentTypeList
      case 241: // ComponentTypeList
        value.copy< ComponentTypeList > (v);
        break;

      case 210: // DefinedType
        value.copy< DefinedType > (v);
        break;

      case 211: // DefinedValue
        value.copy< DefinedValue > (v);
        break;

      case 228: // EnumeratedType
      case 229: // Enumerations
      case 230: // Enumeration
        value.copy< EnumeratedType > (v);
        break;

      case 231: // EnumerationItem
        value.copy< EnumerationValue > (v);
        break;

      case 202: // SymbolsFromModule
        value.copy< Import > (v);
        break;

      case 196: // ModuleBody
        value.copy< Module > (v);
        break;

      case 225: // NamedNumber
        value.copy< NamedNumber > (v);
        break;

      case 217: // NamedType
        value.copy< NamedType > (v);
        break;

      case 260: // ObjIdComponents
      case 261: // NameForm
      case 262: // NumberForm
      case 263: // NameAndNumberForm
        value.copy< ObjectIdComponentValue > (v);
        break;

      case 251: // PrefixedType
        value.copy< PrefixedType > (v);
        break;

      case 243: // SequenceOfType
        value.copy< SequenceOfType > (v);
        break;

      case 238: // SequenceType
        value.copy< SequenceType > (v);
        break;

      case 245: // SetOfType
        value.copy< SetOfType > (v);
        break;

      case 244: // SetType
        value.copy< SetType > (v);
        break;

      case 253: // Tag
        value.copy< Tag > (v);
        break;

      case 252: // TaggedType
        value.copy< TaggedType > (v);
        break;

      case 194: // TagDefault
        value.copy< TaggingMode > (v);
        break;

      case 215: // Type
        value.copy< Type > (v);
        break;

      case 218: // Value
      case 219: // BuiltinValue
      case 220: // ReferencedValue
        value.copy< Value > (v);
        break;

      case 5: // realnumber
        value.copy< double > (v);
        break;

      case 255: // ClassNumber
        value.copy< int > (v);
        break;

      case 4: // number
      case 226: // SignedNumber
      case 227: // IntegerValue
        value.copy< long long > (v);
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 150: // GENERIC_IDENTIFIER_UPPERCASE
      case 151: // GENERIC_IDENTIFIER_LOWERCASE
      case 185: // ModuleIdentifier
      case 203: // GlobalModuleReference
      case 206: // Symbol
      case 207: // Reference
      case 327: // typereference
      case 328: // identifier
      case 329: // valuereference
      case 330: // modulereference
        value.copy< std::string > (v);
        break;

      case 208: // AssignmentList
        value.copy< std::vector<Assignment> > (v);
        break;

      case 197: // Exports
        value.copy< std::vector<Export> > (v);
        break;

      case 199: // Imports
      case 200: // SymbolsImported
      case 201: // SymbolsFromModuleList
        value.copy< std::vector<Import> > (v);
        break;

      case 247: // AlternativeTypeLists
      case 248: // RootAlternativeTypeList
      case 249: // AlternativeTypeList
        value.copy< std::vector<NamedType> > (v);
        break;

      case 258: // ObjectIdentifierValue
      case 259: // ObjIdComponentsList
        value.copy< std::vector<ObjectIdComponentValue> > (v);
        break;

      case 205: // SymbolList
        value.copy< std::vector<std::string> > (v);
        break;

      default:
        break;
    }
}


  // Implementation of basic_symbol constructor for each type.

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const location_type& l)
    : Base (t)
    , value ()
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Assignment v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const BuiltinType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ChoiceType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Class v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ComponentType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ComponentTypeList v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const DefinedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const DefinedValue v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const EnumeratedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const EnumerationValue v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Import v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Module v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const NamedNumber v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const NamedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ObjectIdComponentValue v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const PrefixedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const SequenceOfType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const SequenceType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const SetOfType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const SetType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Tag v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const TaggedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const TaggingMode v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Type v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Value v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const double v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const int v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const long long v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::string v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<Assignment> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<Export> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<Import> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<NamedType> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<ObjectIdComponentValue> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<std::string> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}


  template <typename Base>
  inline
  asn1_parser::basic_symbol<Base>::~basic_symbol ()
  {
    clear ();
  }

  template <typename Base>
  inline
  void
  asn1_parser::basic_symbol<Base>::clear ()
  {
    // User destructor.
    symbol_number_type yytype = this->type_get ();
    basic_symbol<Base>& yysym = *this;
    (void) yysym;
    switch (yytype)
    {
   default:
      break;
    }

    // Type destructor.
    switch (yytype)
    {
      case 209: // Assignment
      case 213: // TypeAssignment
      case 214: // ValueAssignment
        value.template destroy< Assignment > ();
        break;

      case 216: // BuiltinType
        value.template destroy< BuiltinType > ();
        break;

      case 246: // ChoiceType
        value.template destroy< ChoiceType > ();
        break;

      case 256: // Class
        value.template destroy< Class > ();
        break;

      case 242: // ComponentType
        value.template destroy< ComponentType > ();
        break;

      case 239: // ComponentTypeLists
      case 240: // RootComponentTypeList
      case 241: // ComponentTypeList
        value.template destroy< ComponentTypeList > ();
        break;

      case 210: // DefinedType
        value.template destroy< DefinedType > ();
        break;

      case 211: // DefinedValue
        value.template destroy< DefinedValue > ();
        break;

      case 228: // EnumeratedType
      case 229: // Enumerations
      case 230: // Enumeration
        value.template destroy< EnumeratedType > ();
        break;

      case 231: // EnumerationItem
        value.template destroy< EnumerationValue > ();
        break;

      case 202: // SymbolsFromModule
        value.template destroy< Import > ();
        break;

      case 196: // ModuleBody
        value.template destroy< Module > ();
        break;

      case 225: // NamedNumber
        value.template destroy< NamedNumber > ();
        break;

      case 217: // NamedType
        value.template destroy< NamedType > ();
        break;

      case 260: // ObjIdComponents
      case 261: // NameForm
      case 262: // NumberForm
      case 263: // NameAndNumberForm
        value.template destroy< ObjectIdComponentValue > ();
        break;

      case 251: // PrefixedType
        value.template destroy< PrefixedType > ();
        break;

      case 243: // SequenceOfType
        value.template destroy< SequenceOfType > ();
        break;

      case 238: // SequenceType
        value.template destroy< SequenceType > ();
        break;

      case 245: // SetOfType
        value.template destroy< SetOfType > ();
        break;

      case 244: // SetType
        value.template destroy< SetType > ();
        break;

      case 253: // Tag
        value.template destroy< Tag > ();
        break;

      case 252: // TaggedType
        value.template destroy< TaggedType > ();
        break;

      case 194: // TagDefault
        value.template destroy< TaggingMode > ();
        break;

      case 215: // Type
        value.template destroy< Type > ();
        break;

      case 218: // Value
      case 219: // BuiltinValue
      case 220: // ReferencedValue
        value.template destroy< Value > ();
        break;

      case 5: // realnumber
        value.template destroy< double > ();
        break;

      case 255: // ClassNumber
        value.template destroy< int > ();
        break;

      case 4: // number
      case 226: // SignedNumber
      case 227: // IntegerValue
        value.template destroy< long long > ();
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 150: // GENERIC_IDENTIFIER_UPPERCASE
      case 151: // GENERIC_IDENTIFIER_LOWERCASE
      case 185: // ModuleIdentifier
      case 203: // GlobalModuleReference
      case 206: // Symbol
      case 207: // Reference
      case 327: // typereference
      case 328: // identifier
      case 329: // valuereference
      case 330: // modulereference
        value.template destroy< std::string > ();
        break;

      case 208: // AssignmentList
        value.template destroy< std::vector<Assignment> > ();
        break;

      case 197: // Exports
        value.template destroy< std::vector<Export> > ();
        break;

      case 199: // Imports
      case 200: // SymbolsImported
      case 201: // SymbolsFromModuleList
        value.template destroy< std::vector<Import> > ();
        break;

      case 247: // AlternativeTypeLists
      case 248: // RootAlternativeTypeList
      case 249: // AlternativeTypeList
        value.template destroy< std::vector<NamedType> > ();
        break;

      case 258: // ObjectIdentifierValue
      case 259: // ObjIdComponentsList
        value.template destroy< std::vector<ObjectIdComponentValue> > ();
        break;

      case 205: // SymbolList
        value.template destroy< std::vector<std::string> > ();
        break;

      default:
        break;
    }

    Base::clear ();
  }

  template <typename Base>
  inline
  bool
  asn1_parser::basic_symbol<Base>::empty () const
  {
    return Base::type_get () == empty_symbol;
  }

  template <typename Base>
  inline
  void
  asn1_parser::basic_symbol<Base>::move (basic_symbol& s)
  {
    super_type::move(s);
      switch (this->type_get ())
    {
      case 209: // Assignment
      case 213: // TypeAssignment
      case 214: // ValueAssignment
        value.move< Assignment > (s.value);
        break;

      case 216: // BuiltinType
        value.move< BuiltinType > (s.value);
        break;

      case 246: // ChoiceType
        value.move< ChoiceType > (s.value);
        break;

      case 256: // Class
        value.move< Class > (s.value);
        break;

      case 242: // ComponentType
        value.move< ComponentType > (s.value);
        break;

      case 239: // ComponentTypeLists
      case 240: // RootComponentTypeList
      case 241: // ComponentTypeList
        value.move< ComponentTypeList > (s.value);
        break;

      case 210: // DefinedType
        value.move< DefinedType > (s.value);
        break;

      case 211: // DefinedValue
        value.move< DefinedValue > (s.value);
        break;

      case 228: // EnumeratedType
      case 229: // Enumerations
      case 230: // Enumeration
        value.move< EnumeratedType > (s.value);
        break;

      case 231: // EnumerationItem
        value.move< EnumerationValue > (s.value);
        break;

      case 202: // SymbolsFromModule
        value.move< Import > (s.value);
        break;

      case 196: // ModuleBody
        value.move< Module > (s.value);
        break;

      case 225: // NamedNumber
        value.move< NamedNumber > (s.value);
        break;

      case 217: // NamedType
        value.move< NamedType > (s.value);
        break;

      case 260: // ObjIdComponents
      case 261: // NameForm
      case 262: // NumberForm
      case 263: // NameAndNumberForm
        value.move< ObjectIdComponentValue > (s.value);
        break;

      case 251: // PrefixedType
        value.move< PrefixedType > (s.value);
        break;

      case 243: // SequenceOfType
        value.move< SequenceOfType > (s.value);
        break;

      case 238: // SequenceType
        value.move< SequenceType > (s.value);
        break;

      case 245: // SetOfType
        value.move< SetOfType > (s.value);
        break;

      case 244: // SetType
        value.move< SetType > (s.value);
        break;

      case 253: // Tag
        value.move< Tag > (s.value);
        break;

      case 252: // TaggedType
        value.move< TaggedType > (s.value);
        break;

      case 194: // TagDefault
        value.move< TaggingMode > (s.value);
        break;

      case 215: // Type
        value.move< Type > (s.value);
        break;

      case 218: // Value
      case 219: // BuiltinValue
      case 220: // ReferencedValue
        value.move< Value > (s.value);
        break;

      case 5: // realnumber
        value.move< double > (s.value);
        break;

      case 255: // ClassNumber
        value.move< int > (s.value);
        break;

      case 4: // number
      case 226: // SignedNumber
      case 227: // IntegerValue
        value.move< long long > (s.value);
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 150: // GENERIC_IDENTIFIER_UPPERCASE
      case 151: // GENERIC_IDENTIFIER_LOWERCASE
      case 185: // ModuleIdentifier
      case 203: // GlobalModuleReference
      case 206: // Symbol
      case 207: // Reference
      case 327: // typereference
      case 328: // identifier
      case 329: // valuereference
      case 330: // modulereference
        value.move< std::string > (s.value);
        break;

      case 208: // AssignmentList
        value.move< std::vector<Assignment> > (s.value);
        break;

      case 197: // Exports
        value.move< std::vector<Export> > (s.value);
        break;

      case 199: // Imports
      case 200: // SymbolsImported
      case 201: // SymbolsFromModuleList
        value.move< std::vector<Import> > (s.value);
        break;

      case 247: // AlternativeTypeLists
      case 248: // RootAlternativeTypeList
      case 249: // AlternativeTypeList
        value.move< std::vector<NamedType> > (s.value);
        break;

      case 258: // ObjectIdentifierValue
      case 259: // ObjIdComponentsList
        value.move< std::vector<ObjectIdComponentValue> > (s.value);
        break;

      case 205: // SymbolList
        value.move< std::vector<std::string> > (s.value);
        break;

      default:
        break;
    }

    location = s.location;
  }

  // by_type.
  inline
  asn1_parser::by_type::by_type ()
    : type (empty_symbol)
  {}

  inline
  asn1_parser::by_type::by_type (const by_type& other)
    : type (other.type)
  {}

  inline
  asn1_parser::by_type::by_type (token_type t)
    : type (yytranslate_ (t))
  {}

  inline
  void
  asn1_parser::by_type::clear ()
  {
    type = empty_symbol;
  }

  inline
  void
  asn1_parser::by_type::move (by_type& that)
  {
    type = that.type;
    that.clear ();
  }

  inline
  int
  asn1_parser::by_type::type_get () const
  {
    return type;
  }

  inline
  asn1_parser::token_type
  asn1_parser::by_type::token () const
  {
    // YYTOKNUM[NUM] -- (External) token number corresponding to the
    // (internal) symbol number NUM (which must be that of a token).  */
    static
    const unsigned short int
    yytoken_number_[] =
    {
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409
    };
    return static_cast<token_type> (yytoken_number_[type]);
  }
  // Implementation of make_symbol for each symbol type.
  asn1_parser::symbol_type
  asn1_parser::make_END_OF_FILE (const location_type& l)
  {
    return symbol_type (token::END_OF_FILE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_comment (const location_type& l)
  {
    return symbol_type (token::comment, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_number (const long long& v, const location_type& l)
  {
    return symbol_type (token::number, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_realnumber (const double& v, const location_type& l)
  {
    return symbol_type (token::realnumber, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_bstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::bstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmlbstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::xmlbstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_hstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::hstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmlhstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::xmlhstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_cstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::cstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmlcstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::xmlcstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_simplestring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::simplestring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmltstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::xmltstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_psname (const location_type& l)
  {
    return symbol_type (token::psname, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_encodingreference (const location_type& l)
  {
    return symbol_type (token::encodingreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_integerUnicodeLabel (const location_type& l)
  {
    return symbol_type (token::integerUnicodeLabel, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_tstring (const location_type& l)
  {
    return symbol_type (token::tstring, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_objectclassreference (const location_type& l)
  {
    return symbol_type (token::objectclassreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_objectreference (const location_type& l)
  {
    return symbol_type (token::objectreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_objectsetreference (const location_type& l)
  {
    return symbol_type (token::objectsetreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_typefieldreference (const location_type& l)
  {
    return symbol_type (token::typefieldreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_valuefieldreference (const location_type& l)
  {
    return symbol_type (token::valuefieldreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_valuesetfieldreference (const location_type& l)
  {
    return symbol_type (token::valuesetfieldreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_objectfieldreference (const location_type& l)
  {
    return symbol_type (token::objectfieldreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_objectsetfieldreference (const location_type& l)
  {
    return symbol_type (token::objectsetfieldreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_word (const location_type& l)
  {
    return symbol_type (token::word, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ABSENT (const location_type& l)
  {
    return symbol_type (token::ABSENT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ABSTRACT_SYNTAX (const location_type& l)
  {
    return symbol_type (token::ABSTRACT_SYNTAX, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ALL (const location_type& l)
  {
    return symbol_type (token::ALL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_APPLICATION (const location_type& l)
  {
    return symbol_type (token::APPLICATION, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ASN_NULL (const location_type& l)
  {
    return symbol_type (token::ASN_NULL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_AUTOMATIC (const location_type& l)
  {
    return symbol_type (token::AUTOMATIC, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BEGIN (const location_type& l)
  {
    return symbol_type (token::BEGIN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BIT (const location_type& l)
  {
    return symbol_type (token::BIT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BMPString (const location_type& l)
  {
    return symbol_type (token::BMPString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BOOLEAN (const location_type& l)
  {
    return symbol_type (token::BOOLEAN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BY (const location_type& l)
  {
    return symbol_type (token::BY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CHARACTER (const location_type& l)
  {
    return symbol_type (token::CHARACTER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CHOICE (const location_type& l)
  {
    return symbol_type (token::CHOICE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CLASS (const location_type& l)
  {
    return symbol_type (token::CLASS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_COMPONENT (const location_type& l)
  {
    return symbol_type (token::COMPONENT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_COMPONENTS (const location_type& l)
  {
    return symbol_type (token::COMPONENTS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CONSTRAINED (const location_type& l)
  {
    return symbol_type (token::CONSTRAINED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CONTAINING (const location_type& l)
  {
    return symbol_type (token::CONTAINING, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DATE (const location_type& l)
  {
    return symbol_type (token::DATE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DATE_TIME (const location_type& l)
  {
    return symbol_type (token::DATE_TIME, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DEFAULT (const location_type& l)
  {
    return symbol_type (token::DEFAULT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DEFINITIONS (const location_type& l)
  {
    return symbol_type (token::DEFINITIONS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DURATION (const location_type& l)
  {
    return symbol_type (token::DURATION, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EMBEDDED (const location_type& l)
  {
    return symbol_type (token::EMBEDDED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ENCODED (const location_type& l)
  {
    return symbol_type (token::ENCODED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ENCODING_CONTROL (const location_type& l)
  {
    return symbol_type (token::ENCODING_CONTROL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_END (const location_type& l)
  {
    return symbol_type (token::END, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ENUMERATED (const location_type& l)
  {
    return symbol_type (token::ENUMERATED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXCEPT (const location_type& l)
  {
    return symbol_type (token::EXCEPT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXPLICIT (const location_type& l)
  {
    return symbol_type (token::EXPLICIT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXPORTS (const location_type& l)
  {
    return symbol_type (token::EXPORTS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXTENSIBILITY (const location_type& l)
  {
    return symbol_type (token::EXTENSIBILITY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXTERNAL (const location_type& l)
  {
    return symbol_type (token::EXTERNAL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_FALSE (const location_type& l)
  {
    return symbol_type (token::FALSE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_FROM (const location_type& l)
  {
    return symbol_type (token::FROM, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GeneralizedTime (const location_type& l)
  {
    return symbol_type (token::GeneralizedTime, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GeneralString (const location_type& l)
  {
    return symbol_type (token::GeneralString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GraphicString (const location_type& l)
  {
    return symbol_type (token::GraphicString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IA5String (const location_type& l)
  {
    return symbol_type (token::IA5String, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IDENTIFIER (const location_type& l)
  {
    return symbol_type (token::IDENTIFIER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IMPLICIT (const location_type& l)
  {
    return symbol_type (token::IMPLICIT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IMPLIED (const location_type& l)
  {
    return symbol_type (token::IMPLIED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IMPORTS (const location_type& l)
  {
    return symbol_type (token::IMPORTS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INCLUDES (const location_type& l)
  {
    return symbol_type (token::INCLUDES, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INSTANCE (const location_type& l)
  {
    return symbol_type (token::INSTANCE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INSTRUCTIONS (const location_type& l)
  {
    return symbol_type (token::INSTRUCTIONS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INTEGER (const location_type& l)
  {
    return symbol_type (token::INTEGER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INTERSECTION (const location_type& l)
  {
    return symbol_type (token::INTERSECTION, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ISO646String (const location_type& l)
  {
    return symbol_type (token::ISO646String, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_MAX (const location_type& l)
  {
    return symbol_type (token::MAX, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_MIN (const location_type& l)
  {
    return symbol_type (token::MIN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_MINUS_INFINITY (const location_type& l)
  {
    return symbol_type (token::MINUS_INFINITY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_NOT_A_NUMBER (const location_type& l)
  {
    return symbol_type (token::NOT_A_NUMBER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_NumericString (const location_type& l)
  {
    return symbol_type (token::NumericString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OBJECT (const location_type& l)
  {
    return symbol_type (token::OBJECT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ObjectDescriptor (const location_type& l)
  {
    return symbol_type (token::ObjectDescriptor, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OCTET (const location_type& l)
  {
    return symbol_type (token::OCTET, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OF (const location_type& l)
  {
    return symbol_type (token::OF, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OID_IRI (const location_type& l)
  {
    return symbol_type (token::OID_IRI, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OPTIONAL (const location_type& l)
  {
    return symbol_type (token::OPTIONAL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PATTERN (const location_type& l)
  {
    return symbol_type (token::PATTERN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PDV (const location_type& l)
  {
    return symbol_type (token::PDV, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PLUS_INFINITY (const location_type& l)
  {
    return symbol_type (token::PLUS_INFINITY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PRESENT (const location_type& l)
  {
    return symbol_type (token::PRESENT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PrintableString (const location_type& l)
  {
    return symbol_type (token::PrintableString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PRIVATE (const location_type& l)
  {
    return symbol_type (token::PRIVATE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_REAL (const location_type& l)
  {
    return symbol_type (token::REAL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_RELATIVE_OID (const location_type& l)
  {
    return symbol_type (token::RELATIVE_OID, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_RELATIVE_OID_IRI (const location_type& l)
  {
    return symbol_type (token::RELATIVE_OID_IRI, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SEQUENCE (const location_type& l)
  {
    return symbol_type (token::SEQUENCE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SET (const location_type& l)
  {
    return symbol_type (token::SET, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SETTINGS (const location_type& l)
  {
    return symbol_type (token::SETTINGS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SIZE (const location_type& l)
  {
    return symbol_type (token::SIZE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_STRING (const location_type& l)
  {
    return symbol_type (token::STRING, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SYNTAX (const location_type& l)
  {
    return symbol_type (token::SYNTAX, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_T61String (const location_type& l)
  {
    return symbol_type (token::T61String, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TAGS (const location_type& l)
  {
    return symbol_type (token::TAGS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TeletexString (const location_type& l)
  {
    return symbol_type (token::TeletexString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TIME (const location_type& l)
  {
    return symbol_type (token::TIME, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TIME_OF_DAY (const location_type& l)
  {
    return symbol_type (token::TIME_OF_DAY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TRUE (const location_type& l)
  {
    return symbol_type (token::TRUE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TYPE_IDENTIFIER (const location_type& l)
  {
    return symbol_type (token::TYPE_IDENTIFIER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UNION (const location_type& l)
  {
    return symbol_type (token::UNION, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UNIQUE (const location_type& l)
  {
    return symbol_type (token::UNIQUE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UNIVERSAL (const location_type& l)
  {
    return symbol_type (token::UNIVERSAL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UniversalString (const location_type& l)
  {
    return symbol_type (token::UniversalString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UTCTime (const location_type& l)
  {
    return symbol_type (token::UTCTime, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UTF8String (const location_type& l)
  {
    return symbol_type (token::UTF8String, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_VideotexString (const location_type& l)
  {
    return symbol_type (token::VideotexString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_VisibleString (const location_type& l)
  {
    return symbol_type (token::VisibleString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_WITH (const location_type& l)
  {
    return symbol_type (token::WITH, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DEFINED_AS (const location_type& l)
  {
    return symbol_type (token::DEFINED_AS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ELIPSIS (const location_type& l)
  {
    return symbol_type (token::ELIPSIS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_RANGE (const location_type& l)
  {
    return symbol_type (token::RANGE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OPEN_BRACE (const location_type& l)
  {
    return symbol_type (token::OPEN_BRACE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CLOSE_BRACE (const location_type& l)
  {
    return symbol_type (token::CLOSE_BRACE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OPEN_PARENTHESIS (const location_type& l)
  {
    return symbol_type (token::OPEN_PARENTHESIS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CLOSE_PARENTHESIS (const location_type& l)
  {
    return symbol_type (token::CLOSE_PARENTHESIS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OPEN_SQUARE_BRACKET (const location_type& l)
  {
    return symbol_type (token::OPEN_SQUARE_BRACKET, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CLOSE_SQUARE_BRACKET (const location_type& l)
  {
    return symbol_type (token::CLOSE_SQUARE_BRACKET, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_LESS_THAN (const location_type& l)
  {
    return symbol_type (token::LESS_THAN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GREATER_THAN (const location_type& l)
  {
    return symbol_type (token::GREATER_THAN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXCLAMATION_MARK (const location_type& l)
  {
    return symbol_type (token::EXCLAMATION_MARK, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_QUOTATION_MARK (const location_type& l)
  {
    return symbol_type (token::QUOTATION_MARK, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_AMPERSAND (const location_type& l)
  {
    return symbol_type (token::AMPERSAND, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_APOSTROPHE (const location_type& l)
  {
    return symbol_type (token::APOSTROPHE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ASTERISK (const location_type& l)
  {
    return symbol_type (token::ASTERISK, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_COMMA (const location_type& l)
  {
    return symbol_type (token::COMMA, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_FULL_STOP (const location_type& l)
  {
    return symbol_type (token::FULL_STOP, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_HYPHEN_MINUS (const location_type& l)
  {
    return symbol_type (token::HYPHEN_MINUS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SOLIDUS (const location_type& l)
  {
    return symbol_type (token::SOLIDUS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_COLON (const location_type& l)
  {
    return symbol_type (token::COLON, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SEMICOLON (const location_type& l)
  {
    return symbol_type (token::SEMICOLON, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EQUALS_SIGN (const location_type& l)
  {
    return symbol_type (token::EQUALS_SIGN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_AT (const location_type& l)
  {
    return symbol_type (token::AT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_VERTICAL_LINE (const location_type& l)
  {
    return symbol_type (token::VERTICAL_LINE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ACCENT (const location_type& l)
  {
    return symbol_type (token::ACCENT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PLUS (const location_type& l)
  {
    return symbol_type (token::PLUS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_STAR (const location_type& l)
  {
    return symbol_type (token::STAR, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_QUESTION_MARK (const location_type& l)
  {
    return symbol_type (token::QUESTION_MARK, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GENERIC_IDENTIFIER_UPPERCASE (const std::string& v, const location_type& l)
  {
    return symbol_type (token::GENERIC_IDENTIFIER_UPPERCASE, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GENERIC_IDENTIFIER_LOWERCASE (const std::string& v, const location_type& l)
  {
    return symbol_type (token::GENERIC_IDENTIFIER_LOWERCASE, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GENERIC_INTEGER (const location_type& l)
  {
    return symbol_type (token::GENERIC_INTEGER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmlasn1typename (const location_type& l)
  {
    return symbol_type (token::xmlasn1typename, l);
  }



} // yy
#line 4044 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:408





// User implementation prologue.

#line 4052 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:412
// Unqualified %code blocks.
#line 15 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:413

    struct Context
    {
        const char* cursor;
        yy::location location;

        Asn1Tree asn1_tree;
    };
    void yy::asn1_parser::error(const location_type& l, const std::string& m)
    {
        std::cerr << (l.begin.filename ? l.begin.filename->c_str() : "(undefined)");
        std::cerr << ':' << l.begin.line << ':' << l.begin.column << '-' << l.end.column << ": " << m << '\n';
    }

    namespace yy { asn1_parser::symbol_type yylex(Context& c); }

#line 4071 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:413


#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> // FIXME: INFRINGES ON USER NAME SPACE.
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K].location)
/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

# ifndef YYLLOC_DEFAULT
#  define YYLLOC_DEFAULT(Current, Rhs, N)                               \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).begin  = YYRHSLOC (Rhs, 1).begin;                   \
          (Current).end    = YYRHSLOC (Rhs, N).end;                     \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).begin = (Current).end = YYRHSLOC (Rhs, 0).end;      \
        }                                                               \
    while (/*CONSTCOND*/ false)
# endif


// Suppress unused-variable warnings by "using" E.
#define YYUSE(E) ((void) (E))

// Enable debugging if requested.
#if YYDEBUG

// A pseudo ostream that takes yydebug_ into account.
# define YYCDEBUG if (yydebug_) (*yycdebug_)

# define YY_SYMBOL_PRINT(Title, Symbol)         \
  do {                                          \
    if (yydebug_)                               \
    {                                           \
      *yycdebug_ << Title << ' ';               \
      yy_print_ (*yycdebug_, Symbol);           \
      *yycdebug_ << std::endl;                  \
    }                                           \
  } while (false)

# define YY_REDUCE_PRINT(Rule)          \
  do {                                  \
    if (yydebug_)                       \
      yy_reduce_print_ (Rule);          \
  } while (false)

# define YY_STACK_PRINT()               \
  do {                                  \
    if (yydebug_)                       \
      yystack_print_ ();                \
  } while (false)

#else // !YYDEBUG

# define YYCDEBUG if (false) std::cerr
# define YY_SYMBOL_PRINT(Title, Symbol)  YYUSE(Symbol)
# define YY_REDUCE_PRINT(Rule)           static_cast<void>(0)
# define YY_STACK_PRINT()                static_cast<void>(0)

#endif // !YYDEBUG

#define yyerrok         (yyerrstatus_ = 0)
#define yyclearin       (yyla.clear ())

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYRECOVERING()  (!!yyerrstatus_)


namespace yy {
#line 4157 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:479

  /* Return YYSTR after stripping away unnecessary quotes and
     backslashes, so that it's suitable for yyerror.  The heuristic is
     that double-quoting is unnecessary unless the string contains an
     apostrophe, a comma, or backslash (other than backslash-backslash).
     YYSTR is taken from yytname.  */
  std::string
  asn1_parser::yytnamerr_ (const char *yystr)
  {
    if (*yystr == '"')
      {
        std::string yyr = "";
        char const *yyp = yystr;

        for (;;)
          switch (*++yyp)
            {
            case '\'':
            case ',':
              goto do_not_strip_quotes;

            case '\\':
              if (*++yyp != '\\')
                goto do_not_strip_quotes;
              // Fall through.
            default:
              yyr += *yyp;
              break;

            case '"':
              return yyr;
            }
      do_not_strip_quotes: ;
      }

    return yystr;
  }


  /// Build a parser object.
  asn1_parser::asn1_parser (Context& context_yyarg)
    :
#if YYDEBUG
      yydebug_ (false),
      yycdebug_ (&std::cerr),
#endif
      context (context_yyarg)
  {}

  asn1_parser::~asn1_parser ()
  {}


  /*---------------.
  | Symbol types.  |
  `---------------*/



  // by_state.
  inline
  asn1_parser::by_state::by_state ()
    : state (empty_state)
  {}

  inline
  asn1_parser::by_state::by_state (const by_state& other)
    : state (other.state)
  {}

  inline
  void
  asn1_parser::by_state::clear ()
  {
    state = empty_state;
  }

  inline
  void
  asn1_parser::by_state::move (by_state& that)
  {
    state = that.state;
    that.clear ();
  }

  inline
  asn1_parser::by_state::by_state (state_type s)
    : state (s)
  {}

  inline
  asn1_parser::symbol_number_type
  asn1_parser::by_state::type_get () const
  {
    if (state == empty_state)
      return empty_symbol;
    else
      return yystos_[state];
  }

  inline
  asn1_parser::stack_symbol_type::stack_symbol_type ()
  {}


  inline
  asn1_parser::stack_symbol_type::stack_symbol_type (state_type s, symbol_type& that)
    : super_type (s, that.location)
  {
      switch (that.type_get ())
    {
      case 209: // Assignment
      case 213: // TypeAssignment
      case 214: // ValueAssignment
        value.move< Assignment > (that.value);
        break;

      case 216: // BuiltinType
        value.move< BuiltinType > (that.value);
        break;

      case 246: // ChoiceType
        value.move< ChoiceType > (that.value);
        break;

      case 256: // Class
        value.move< Class > (that.value);
        break;

      case 242: // ComponentType
        value.move< ComponentType > (that.value);
        break;

      case 239: // ComponentTypeLists
      case 240: // RootComponentTypeList
      case 241: // ComponentTypeList
        value.move< ComponentTypeList > (that.value);
        break;

      case 210: // DefinedType
        value.move< DefinedType > (that.value);
        break;

      case 211: // DefinedValue
        value.move< DefinedValue > (that.value);
        break;

      case 228: // EnumeratedType
      case 229: // Enumerations
      case 230: // Enumeration
        value.move< EnumeratedType > (that.value);
        break;

      case 231: // EnumerationItem
        value.move< EnumerationValue > (that.value);
        break;

      case 202: // SymbolsFromModule
        value.move< Import > (that.value);
        break;

      case 196: // ModuleBody
        value.move< Module > (that.value);
        break;

      case 225: // NamedNumber
        value.move< NamedNumber > (that.value);
        break;

      case 217: // NamedType
        value.move< NamedType > (that.value);
        break;

      case 260: // ObjIdComponents
      case 261: // NameForm
      case 262: // NumberForm
      case 263: // NameAndNumberForm
        value.move< ObjectIdComponentValue > (that.value);
        break;

      case 251: // PrefixedType
        value.move< PrefixedType > (that.value);
        break;

      case 243: // SequenceOfType
        value.move< SequenceOfType > (that.value);
        break;

      case 238: // SequenceType
        value.move< SequenceType > (that.value);
        break;

      case 245: // SetOfType
        value.move< SetOfType > (that.value);
        break;

      case 244: // SetType
        value.move< SetType > (that.value);
        break;

      case 253: // Tag
        value.move< Tag > (that.value);
        break;

      case 252: // TaggedType
        value.move< TaggedType > (that.value);
        break;

      case 194: // TagDefault
        value.move< TaggingMode > (that.value);
        break;

      case 215: // Type
        value.move< Type > (that.value);
        break;

      case 218: // Value
      case 219: // BuiltinValue
      case 220: // ReferencedValue
        value.move< Value > (that.value);
        break;

      case 5: // realnumber
        value.move< double > (that.value);
        break;

      case 255: // ClassNumber
        value.move< int > (that.value);
        break;

      case 4: // number
      case 226: // SignedNumber
      case 227: // IntegerValue
        value.move< long long > (that.value);
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 150: // GENERIC_IDENTIFIER_UPPERCASE
      case 151: // GENERIC_IDENTIFIER_LOWERCASE
      case 185: // ModuleIdentifier
      case 203: // GlobalModuleReference
      case 206: // Symbol
      case 207: // Reference
      case 327: // typereference
      case 328: // identifier
      case 329: // valuereference
      case 330: // modulereference
        value.move< std::string > (that.value);
        break;

      case 208: // AssignmentList
        value.move< std::vector<Assignment> > (that.value);
        break;

      case 197: // Exports
        value.move< std::vector<Export> > (that.value);
        break;

      case 199: // Imports
      case 200: // SymbolsImported
      case 201: // SymbolsFromModuleList
        value.move< std::vector<Import> > (that.value);
        break;

      case 247: // AlternativeTypeLists
      case 248: // RootAlternativeTypeList
      case 249: // AlternativeTypeList
        value.move< std::vector<NamedType> > (that.value);
        break;

      case 258: // ObjectIdentifierValue
      case 259: // ObjIdComponentsList
        value.move< std::vector<ObjectIdComponentValue> > (that.value);
        break;

      case 205: // SymbolList
        value.move< std::vector<std::string> > (that.value);
        break;

      default:
        break;
    }

    // that is emptied.
    that.type = empty_symbol;
  }

  inline
  asn1_parser::stack_symbol_type&
  asn1_parser::stack_symbol_type::operator= (const stack_symbol_type& that)
  {
    state = that.state;
      switch (that.type_get ())
    {
      case 209: // Assignment
      case 213: // TypeAssignment
      case 214: // ValueAssignment
        value.copy< Assignment > (that.value);
        break;

      case 216: // BuiltinType
        value.copy< BuiltinType > (that.value);
        break;

      case 246: // ChoiceType
        value.copy< ChoiceType > (that.value);
        break;

      case 256: // Class
        value.copy< Class > (that.value);
        break;

      case 242: // ComponentType
        value.copy< ComponentType > (that.value);
        break;

      case 239: // ComponentTypeLists
      case 240: // RootComponentTypeList
      case 241: // ComponentTypeList
        value.copy< ComponentTypeList > (that.value);
        break;

      case 210: // DefinedType
        value.copy< DefinedType > (that.value);
        break;

      case 211: // DefinedValue
        value.copy< DefinedValue > (that.value);
        break;

      case 228: // EnumeratedType
      case 229: // Enumerations
      case 230: // Enumeration
        value.copy< EnumeratedType > (that.value);
        break;

      case 231: // EnumerationItem
        value.copy< EnumerationValue > (that.value);
        break;

      case 202: // SymbolsFromModule
        value.copy< Import > (that.value);
        break;

      case 196: // ModuleBody
        value.copy< Module > (that.value);
        break;

      case 225: // NamedNumber
        value.copy< NamedNumber > (that.value);
        break;

      case 217: // NamedType
        value.copy< NamedType > (that.value);
        break;

      case 260: // ObjIdComponents
      case 261: // NameForm
      case 262: // NumberForm
      case 263: // NameAndNumberForm
        value.copy< ObjectIdComponentValue > (that.value);
        break;

      case 251: // PrefixedType
        value.copy< PrefixedType > (that.value);
        break;

      case 243: // SequenceOfType
        value.copy< SequenceOfType > (that.value);
        break;

      case 238: // SequenceType
        value.copy< SequenceType > (that.value);
        break;

      case 245: // SetOfType
        value.copy< SetOfType > (that.value);
        break;

      case 244: // SetType
        value.copy< SetType > (that.value);
        break;

      case 253: // Tag
        value.copy< Tag > (that.value);
        break;

      case 252: // TaggedType
        value.copy< TaggedType > (that.value);
        break;

      case 194: // TagDefault
        value.copy< TaggingMode > (that.value);
        break;

      case 215: // Type
        value.copy< Type > (that.value);
        break;

      case 218: // Value
      case 219: // BuiltinValue
      case 220: // ReferencedValue
        value.copy< Value > (that.value);
        break;

      case 5: // realnumber
        value.copy< double > (that.value);
        break;

      case 255: // ClassNumber
        value.copy< int > (that.value);
        break;

      case 4: // number
      case 226: // SignedNumber
      case 227: // IntegerValue
        value.copy< long long > (that.value);
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 150: // GENERIC_IDENTIFIER_UPPERCASE
      case 151: // GENERIC_IDENTIFIER_LOWERCASE
      case 185: // ModuleIdentifier
      case 203: // GlobalModuleReference
      case 206: // Symbol
      case 207: // Reference
      case 327: // typereference
      case 328: // identifier
      case 329: // valuereference
      case 330: // modulereference
        value.copy< std::string > (that.value);
        break;

      case 208: // AssignmentList
        value.copy< std::vector<Assignment> > (that.value);
        break;

      case 197: // Exports
        value.copy< std::vector<Export> > (that.value);
        break;

      case 199: // Imports
      case 200: // SymbolsImported
      case 201: // SymbolsFromModuleList
        value.copy< std::vector<Import> > (that.value);
        break;

      case 247: // AlternativeTypeLists
      case 248: // RootAlternativeTypeList
      case 249: // AlternativeTypeList
        value.copy< std::vector<NamedType> > (that.value);
        break;

      case 258: // ObjectIdentifierValue
      case 259: // ObjIdComponentsList
        value.copy< std::vector<ObjectIdComponentValue> > (that.value);
        break;

      case 205: // SymbolList
        value.copy< std::vector<std::string> > (that.value);
        break;

      default:
        break;
    }

    location = that.location;
    return *this;
  }


  template <typename Base>
  inline
  void
  asn1_parser::yy_destroy_ (const char* yymsg, basic_symbol<Base>& yysym) const
  {
    if (yymsg)
      YY_SYMBOL_PRINT (yymsg, yysym);
  }

#if YYDEBUG
  template <typename Base>
  void
  asn1_parser::yy_print_ (std::ostream& yyo,
                                     const basic_symbol<Base>& yysym) const
  {
    std::ostream& yyoutput = yyo;
    YYUSE (yyoutput);
    symbol_number_type yytype = yysym.type_get ();
    // Avoid a (spurious) G++ 4.8 warning about "array subscript is
    // below array bounds".
    if (yysym.empty ())
      std::abort ();
    yyo << (yytype < yyntokens_ ? "token" : "nterm")
        << ' ' << yytname_[yytype] << " ("
        << yysym.location << ": ";
    YYUSE (yytype);
    yyo << ')';
  }
#endif

  inline
  void
  asn1_parser::yypush_ (const char* m, state_type s, symbol_type& sym)
  {
    stack_symbol_type t (s, sym);
    yypush_ (m, t);
  }

  inline
  void
  asn1_parser::yypush_ (const char* m, stack_symbol_type& s)
  {
    if (m)
      YY_SYMBOL_PRINT (m, s);
    yystack_.push (s);
  }

  inline
  void
  asn1_parser::yypop_ (unsigned int n)
  {
    yystack_.pop (n);
  }

#if YYDEBUG
  std::ostream&
  asn1_parser::debug_stream () const
  {
    return *yycdebug_;
  }

  void
  asn1_parser::set_debug_stream (std::ostream& o)
  {
    yycdebug_ = &o;
  }


  asn1_parser::debug_level_type
  asn1_parser::debug_level () const
  {
    return yydebug_;
  }

  void
  asn1_parser::set_debug_level (debug_level_type l)
  {
    yydebug_ = l;
  }
#endif // YYDEBUG

  inline asn1_parser::state_type
  asn1_parser::yy_lr_goto_state_ (state_type yystate, int yysym)
  {
    int yyr = yypgoto_[yysym - yyntokens_] + yystate;
    if (0 <= yyr && yyr <= yylast_ && yycheck_[yyr] == yystate)
      return yytable_[yyr];
    else
      return yydefgoto_[yysym - yyntokens_];
  }

  inline bool
  asn1_parser::yy_pact_value_is_default_ (int yyvalue)
  {
    return yyvalue == yypact_ninf_;
  }

  inline bool
  asn1_parser::yy_table_value_is_error_ (int yyvalue)
  {
    return yyvalue == yytable_ninf_;
  }

  int
  asn1_parser::parse ()
  {
    // State.
    int yyn;
    /// Length of the RHS of the rule being reduced.
    int yylen = 0;

    // Error handling.
    int yynerrs_ = 0;
    int yyerrstatus_ = 0;

    /// The lookahead symbol.
    symbol_type yyla;

    /// The locations where the error started and ended.
    stack_symbol_type yyerror_range[3];

    /// The return value of parse ().
    int yyresult;

    // FIXME: This shoud be completely indented.  It is not yet to
    // avoid gratuitous conflicts when merging into the master branch.
    try
      {
    YYCDEBUG << "Starting parse" << std::endl;


    /* Initialize the stack.  The initial state will be set in
       yynewstate, since the latter expects the semantical and the
       location values to have been already stored, initialize these
       stacks with a primary value.  */
    yystack_.clear ();
    yypush_ (YY_NULLPTR, 0, yyla);

    // A new symbol was pushed on the stack.
  yynewstate:
    YYCDEBUG << "Entering state " << yystack_[0].state << std::endl;

    // Accept?
    if (yystack_[0].state == yyfinal_)
      goto yyacceptlab;

    goto yybackup;

    // Backup.
  yybackup:

    // Try to take a decision without lookahead.
    yyn = yypact_[yystack_[0].state];
    if (yy_pact_value_is_default_ (yyn))
      goto yydefault;

    // Read a lookahead token.
    if (yyla.empty ())
      {
        YYCDEBUG << "Reading a token: ";
        try
          {
            symbol_type yylookahead (yylex (context));
            yyla.move (yylookahead);
          }
        catch (const syntax_error& yyexc)
          {
            error (yyexc);
            goto yyerrlab1;
          }
      }
    YY_SYMBOL_PRINT ("Next token is", yyla);

    /* If the proper action on seeing token YYLA.TYPE is to reduce or
       to detect an error, take that action.  */
    yyn += yyla.type_get ();
    if (yyn < 0 || yylast_ < yyn || yycheck_[yyn] != yyla.type_get ())
      goto yydefault;

    // Reduce or error.
    yyn = yytable_[yyn];
    if (yyn <= 0)
      {
        if (yy_table_value_is_error_ (yyn))
          goto yyerrlab;
        yyn = -yyn;
        goto yyreduce;
      }

    // Count tokens shifted since error; after three, turn off error status.
    if (yyerrstatus_)
      --yyerrstatus_;

    // Shift the lookahead token.
    yypush_ ("Shifting", yyn, yyla);
    goto yynewstate;

  /*-----------------------------------------------------------.
  | yydefault -- do the default action for the current state.  |
  `-----------------------------------------------------------*/
  yydefault:
    yyn = yydefact_[yystack_[0].state];
    if (yyn == 0)
      goto yyerrlab;
    goto yyreduce;

  /*-----------------------------.
  | yyreduce -- Do a reduction.  |
  `-----------------------------*/
  yyreduce:
    yylen = yyr2_[yyn];
    {
      stack_symbol_type yylhs;
      yylhs.state = yy_lr_goto_state_(yystack_[yylen].state, yyr1_[yyn]);
      /* Variants are always initialized to an empty instance of the
         correct type. The default '$$ = $1' action is NOT applied
         when using variants.  */
        switch (yyr1_[yyn])
    {
      case 209: // Assignment
      case 213: // TypeAssignment
      case 214: // ValueAssignment
        yylhs.value.build< Assignment > ();
        break;

      case 216: // BuiltinType
        yylhs.value.build< BuiltinType > ();
        break;

      case 246: // ChoiceType
        yylhs.value.build< ChoiceType > ();
        break;

      case 256: // Class
        yylhs.value.build< Class > ();
        break;

      case 242: // ComponentType
        yylhs.value.build< ComponentType > ();
        break;

      case 239: // ComponentTypeLists
      case 240: // RootComponentTypeList
      case 241: // ComponentTypeList
        yylhs.value.build< ComponentTypeList > ();
        break;

      case 210: // DefinedType
        yylhs.value.build< DefinedType > ();
        break;

      case 211: // DefinedValue
        yylhs.value.build< DefinedValue > ();
        break;

      case 228: // EnumeratedType
      case 229: // Enumerations
      case 230: // Enumeration
        yylhs.value.build< EnumeratedType > ();
        break;

      case 231: // EnumerationItem
        yylhs.value.build< EnumerationValue > ();
        break;

      case 202: // SymbolsFromModule
        yylhs.value.build< Import > ();
        break;

      case 196: // ModuleBody
        yylhs.value.build< Module > ();
        break;

      case 225: // NamedNumber
        yylhs.value.build< NamedNumber > ();
        break;

      case 217: // NamedType
        yylhs.value.build< NamedType > ();
        break;

      case 260: // ObjIdComponents
      case 261: // NameForm
      case 262: // NumberForm
      case 263: // NameAndNumberForm
        yylhs.value.build< ObjectIdComponentValue > ();
        break;

      case 251: // PrefixedType
        yylhs.value.build< PrefixedType > ();
        break;

      case 243: // SequenceOfType
        yylhs.value.build< SequenceOfType > ();
        break;

      case 238: // SequenceType
        yylhs.value.build< SequenceType > ();
        break;

      case 245: // SetOfType
        yylhs.value.build< SetOfType > ();
        break;

      case 244: // SetType
        yylhs.value.build< SetType > ();
        break;

      case 253: // Tag
        yylhs.value.build< Tag > ();
        break;

      case 252: // TaggedType
        yylhs.value.build< TaggedType > ();
        break;

      case 194: // TagDefault
        yylhs.value.build< TaggingMode > ();
        break;

      case 215: // Type
        yylhs.value.build< Type > ();
        break;

      case 218: // Value
      case 219: // BuiltinValue
      case 220: // ReferencedValue
        yylhs.value.build< Value > ();
        break;

      case 5: // realnumber
        yylhs.value.build< double > ();
        break;

      case 255: // ClassNumber
        yylhs.value.build< int > ();
        break;

      case 4: // number
      case 226: // SignedNumber
      case 227: // IntegerValue
        yylhs.value.build< long long > ();
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 150: // GENERIC_IDENTIFIER_UPPERCASE
      case 151: // GENERIC_IDENTIFIER_LOWERCASE
      case 185: // ModuleIdentifier
      case 203: // GlobalModuleReference
      case 206: // Symbol
      case 207: // Reference
      case 327: // typereference
      case 328: // identifier
      case 329: // valuereference
      case 330: // modulereference
        yylhs.value.build< std::string > ();
        break;

      case 208: // AssignmentList
        yylhs.value.build< std::vector<Assignment> > ();
        break;

      case 197: // Exports
        yylhs.value.build< std::vector<Export> > ();
        break;

      case 199: // Imports
      case 200: // SymbolsImported
      case 201: // SymbolsFromModuleList
        yylhs.value.build< std::vector<Import> > ();
        break;

      case 247: // AlternativeTypeLists
      case 248: // RootAlternativeTypeList
      case 249: // AlternativeTypeList
        yylhs.value.build< std::vector<NamedType> > ();
        break;

      case 258: // ObjectIdentifierValue
      case 259: // ObjIdComponentsList
        yylhs.value.build< std::vector<ObjectIdComponentValue> > ();
        break;

      case 205: // SymbolList
        yylhs.value.build< std::vector<std::string> > ();
        break;

      default:
        break;
    }


      // Compute the default @$.
      {
        slice<stack_symbol_type, stack_type> slice (yystack_, yylen);
        YYLLOC_DEFAULT (yylhs.location, slice, yylen);
      }

      // Perform the reduction.
      YY_REDUCE_PRINT (yyn);
      try
        {
          switch (yyn)
            {
  case 4:
#line 282 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yystack_[2].value.as< Module > ().module_reference = yystack_[9].value.as< std::string > ();
      yystack_[2].value.as< Module > ().tagging_default = yystack_[6].value.as< TaggingMode > ();
      context.asn1_tree.modules.push_back(yystack_[2].value.as< Module > ()); }
#line 5059 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 50:
#line 557 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    {
    yylhs.value.as< std::string > () = yystack_[1].value.as< std::string > ();
}
#line 5067 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 65:
#line 596 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggingMode > () = TaggingMode::explicit_; }
#line 5073 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 66:
#line 598 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggingMode > () = TaggingMode::implicit; }
#line 5079 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 67:
#line 600 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggingMode > () = TaggingMode::automatic; }
#line 5085 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 68:
#line 602 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggingMode > () = TaggingMode::explicit_; }
#line 5091 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 71:
#line 610 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Module > () = Module{ {}, TaggingMode(), yystack_[2].value.as< std::vector<Export> > (), yystack_[1].value.as< std::vector<Import> > (), yystack_[0].value.as< std::vector<Assignment> > ()}; }
#line 5097 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 72:
#line 612 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { }
#line 5103 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 78:
#line 625 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Import> > () = yystack_[1].value.as< std::vector<Import> > (); }
#line 5109 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 80:
#line 630 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Import> > () = yystack_[0].value.as< std::vector<Import> > (); }
#line 5115 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 82:
#line 635 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Import> > ().push_back(yystack_[0].value.as< Import > ()); }
#line 5121 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 83:
#line 637 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Import> > () = yystack_[1].value.as< std::vector<Import> > (); yylhs.value.as< std::vector<Import> > ().push_back(yystack_[0].value.as< Import > ()); }
#line 5127 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 84:
#line 641 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Import > () = Import{ yystack_[0].value.as< std::string > (), yystack_[2].value.as< std::vector<std::string> > () }; }
#line 5133 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 85:
#line 645 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[1].value.as< std::string > (); }
#line 5139 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 89:
#line 654 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<std::string> > ().push_back(yystack_[0].value.as< std::string > ()); }
#line 5145 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 90:
#line 656 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<std::string> > () = yystack_[2].value.as< std::vector<std::string> > (); yylhs.value.as< std::vector<std::string> > ().push_back(yystack_[0].value.as< std::string > ()); }
#line 5151 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 91:
#line 660 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 5157 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 92:
#line 664 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 5163 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 93:
#line 666 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 5169 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 97:
#line 673 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Assignment> > ().push_back(yystack_[0].value.as< Assignment > ());}
#line 5175 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 98:
#line 675 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Assignment> > () = yystack_[1].value.as< std::vector<Assignment> > (); yylhs.value.as< std::vector<Assignment> > ().push_back(yystack_[0].value.as< Assignment > ()); }
#line 5181 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 99:
#line 679 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 5187 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 100:
#line 681 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 5193 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 102:
#line 691 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< DefinedType > () = DefinedType{yystack_[0].value.as< std::string > ()}; }
#line 5199 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 103:
#line 698 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< DefinedValue > () = DefinedValue{yystack_[0].value.as< std::string > ()}; }
#line 5205 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 105:
#line 740 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[2].value.as< std::string > (), yystack_[0].value.as< Type > (), absl::nullopt, {} }; }
#line 5211 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 106:
#line 747 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[3].value.as< std::string > (), yystack_[2].value.as< Type > (), yystack_[0].value.as< Value > (), {} }; }
#line 5217 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 107:
#line 751 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = yystack_[0].value.as< BuiltinType > (); }
#line 5223 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 108:
#line 753 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = Type(); }
#line 5229 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 109:
#line 755 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = yystack_[0].value.as< DefinedType > (); }
#line 5235 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 110:
#line 757 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { throw std::runtime_error("Not handled - SelectionType"); }
#line 5241 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 111:
#line 759 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { throw std::runtime_error("Not handled - TypeFromObject"); }
#line 5247 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 112:
#line 763 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = BitStringType(); }
#line 5253 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 113:
#line 764 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = BooleanType(); }
#line 5259 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 114:
#line 765 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = CharacterStringType(); }
#line 5265 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 115:
#line 766 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< ChoiceType > (); }
#line 5271 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 116:
#line 767 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = DateType(); }
#line 5277 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 117:
#line 768 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = DateTimeType(); }
#line 5283 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 118:
#line 769 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = DurationType(); }
#line 5289 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 119:
#line 770 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = EmbeddedPDVType(); }
#line 5295 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 120:
#line 771 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< EnumeratedType > (); }
#line 5301 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 121:
#line 772 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = ExternalType(); }
#line 5307 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 122:
#line 773 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = GeneralizedTimeType(); }
#line 5313 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 123:
#line 774 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = InstanceOfType(); }
#line 5319 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 124:
#line 775 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = IntegerType(); }
#line 5325 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 125:
#line 776 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = IRIType(); }
#line 5331 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 126:
#line 777 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = NullType(); }
#line 5337 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 127:
#line 778 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = ObjectClassFieldType(); }
#line 5343 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 128:
#line 779 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = ObjectDescriptorType(); }
#line 5349 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 129:
#line 780 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = ObjectIdentifierType(); }
#line 5355 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 130:
#line 781 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = OctetStringType(); }
#line 5361 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 131:
#line 782 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = RealType(); }
#line 5367 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 132:
#line 783 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = RelativeIRIType(); }
#line 5373 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 133:
#line 784 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = RelativeOIDType(); }
#line 5379 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 134:
#line 785 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< SequenceType > (); }
#line 5385 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 135:
#line 786 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< SequenceOfType > (); }
#line 5391 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 136:
#line 787 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< SetType > (); }
#line 5397 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 137:
#line 788 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< SetOfType > (); }
#line 5403 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 138:
#line 789 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< PrefixedType > (); }
#line 5409 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 139:
#line 790 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = TimeType(); }
#line 5415 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 140:
#line 791 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = TimeOfDayType(); }
#line 5421 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 141:
#line 792 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = UTCTimeType(); }
#line 5427 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 142:
#line 796 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< NamedType > () = NamedType{ yystack_[1].value.as< std::string > (), yystack_[0].value.as< Type > () }; }
#line 5433 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 143:
#line 800 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > () = yystack_[0].value.as< Value > (); }
#line 5439 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 144:
#line 802 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > () = yystack_[0].value.as< Value > (); }
#line 5445 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 145:
#line 804 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { throw std::runtime_error("Unhandled field: ObjectClassFieldValue"); }
#line 5451 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 147:
#line 814 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = yystack_[0].value.as< long long > (); }
#line 5457 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 149:
#line 818 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = yystack_[0].value.as< std::vector<ObjectIdComponentValue> > (); }
#line 5463 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 153:
#line 824 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = yystack_[0].value.as< std::string > (); }
#line 5469 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 155:
#line 829 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().defined_value = yystack_[0].value.as< DefinedValue > (); }
#line 5475 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 163:
#line 853 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< NamedNumber > () = NamedNumber{ yystack_[3].value.as< std::string > (), yystack_[1].value.as< long long > () }; }
#line 5481 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 164:
#line 855 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< NamedNumber > () = NamedNumber{ yystack_[3].value.as< std::string > (), 0 }; }
#line 5487 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 165:
#line 859 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< long long > () = yystack_[0].value.as< long long > (); }
#line 5493 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 166:
#line 861 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< long long > () = -yystack_[0].value.as< long long > (); }
#line 5499 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 167:
#line 865 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< long long > () = yystack_[0].value.as< long long > (); }
#line 5505 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 168:
#line 869 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[1].value.as< EnumeratedType > (); }
#line 5511 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 169:
#line 873 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[0].value.as< EnumeratedType > ();
      yylhs.value.as< EnumeratedType > ().accept_anything = false; }
#line 5518 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 170:
#line 876 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[3].value.as< EnumeratedType > ();
      yylhs.value.as< EnumeratedType > ().accept_anything = true; }
#line 5525 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 171:
#line 879 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[5].value.as< EnumeratedType > ();
      yylhs.value.as< EnumeratedType > ().accept_anything = true;
      yylhs.value.as< EnumeratedType > ().enum_values.insert(yylhs.value.as< EnumeratedType > ().enum_values.end(), yystack_[0].value.as< EnumeratedType > ().enum_values.begin(), yystack_[0].value.as< EnumeratedType > ().enum_values.end()); }
#line 5533 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 172:
#line 885 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > ().enum_values.push_back(yystack_[0].value.as< EnumerationValue > ()); }
#line 5539 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 173:
#line 887 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[2].value.as< EnumeratedType > (); yylhs.value.as< EnumeratedType > ().enum_values.push_back(yystack_[0].value.as< EnumerationValue > ()); }
#line 5545 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 174:
#line 891 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumerationValue > ().name  = yystack_[0].value.as< std::string > (); }
#line 5551 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 175:
#line 893 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumerationValue > ().name  = yystack_[0].value.as< NamedNumber > ().name;
      yylhs.value.as< EnumerationValue > ().value = yystack_[0].value.as< NamedNumber > ().number; }
#line 5558 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 185:
#line 933 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SequenceType > () = SequenceType(); }
#line 5564 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 186:
#line 935 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SequenceType > () = SequenceType{yystack_[1].value.as< ComponentTypeList > ()}; }
#line 5570 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 187:
#line 943 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[0].value.as< ComponentTypeList > (); }
#line 5576 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 188:
#line 947 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[0].value.as< ComponentTypeList > (); }
#line 5582 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 189:
#line 949 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[2].value.as< ComponentTypeList > (); }
#line 5588 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 190:
#line 951 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[4].value.as< ComponentTypeList > (); yylhs.value.as< ComponentTypeList > ().insert(yylhs.value.as< ComponentTypeList > ().end(), yystack_[0].value.as< ComponentTypeList > ().begin(), yystack_[0].value.as< ComponentTypeList > ().end()); }
#line 5594 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 191:
#line 953 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[0].value.as< ComponentTypeList > (); }
#line 5600 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 192:
#line 957 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = ComponentTypeList{yystack_[0].value.as< ComponentType > ()}; }
#line 5606 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 193:
#line 959 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yystack_[2].value.as< ComponentTypeList > ().push_back(yystack_[0].value.as< ComponentType > ()); yylhs.value.as< ComponentTypeList > () = yystack_[2].value.as< ComponentTypeList > (); }
#line 5612 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 194:
#line 963 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentType > () = ComponentType{yystack_[0].value.as< NamedType > (), false, absl::nullopt}; }
#line 5618 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 195:
#line 965 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentType > () = ComponentType{yystack_[1].value.as< NamedType > (), true, absl::nullopt}; }
#line 5624 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 196:
#line 967 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentType > () = ComponentType{yystack_[2].value.as< NamedType > (), false, yystack_[0].value.as< Value > ()}; }
#line 5630 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 198:
#line 980 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SequenceOfType > () = SequenceOfType{ false, nullptr, std::make_shared<Type>(yystack_[0].value.as< Type > ()) }; }
#line 5636 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 199:
#line 982 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SequenceOfType > () = SequenceOfType{ true, std::make_shared<NamedType>(yystack_[0].value.as< NamedType > ()), nullptr }; }
#line 5642 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 200:
#line 986 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SetType > () = SetType{}; }
#line 5648 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 201:
#line 988 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SetType > () = SetType{yystack_[1].value.as< ComponentTypeList > ()}; }
#line 5654 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 202:
#line 992 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SetOfType > () = SetOfType{ false, nullptr, std::make_shared<Type>(yystack_[0].value.as< Type > ()) }; }
#line 5660 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 203:
#line 994 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SetOfType > () = SetOfType{ true, std::make_shared<NamedType>(yystack_[0].value.as< NamedType > ()), nullptr }; }
#line 5666 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 204:
#line 998 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ChoiceType > () = ChoiceType{ yystack_[1].value.as< std::vector<NamedType> > () }; }
#line 5672 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 205:
#line 1002 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedType> > () = yystack_[0].value.as< std::vector<NamedType> > (); }
#line 5678 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 206:
#line 1006 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedType> > () = yystack_[0].value.as< std::vector<NamedType> > (); }
#line 5684 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 207:
#line 1008 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedType> > () = yystack_[2].value.as< std::vector<NamedType> > (); }
#line 5690 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 208:
#line 1012 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedType> > () = std::vector<NamedType> { yystack_[0].value.as< NamedType > () }; }
#line 5696 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 209:
#line 1014 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yystack_[2].value.as< std::vector<NamedType> > ().push_back( yystack_[0].value.as< NamedType > () ); yylhs.value.as< std::vector<NamedType> > () = yystack_[2].value.as< std::vector<NamedType> > (); }
#line 5702 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 211:
#line 1024 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< PrefixedType > () = PrefixedType(yystack_[0].value.as< TaggedType > ()); }
#line 5708 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 212:
#line 1028 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggedType > () = TaggedType{ yystack_[1].value.as< Tag > (), TaggingMode::automatic, yystack_[0].value.as< Type > () }; }
#line 5714 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 213:
#line 1030 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggedType > () = TaggedType{ yystack_[2].value.as< Tag > (), TaggingMode::implicit, yystack_[0].value.as< Type > () }; }
#line 5720 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 214:
#line 1032 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggedType > () = TaggedType{ yystack_[2].value.as< Tag > (), TaggingMode::explicit_, yystack_[0].value.as< Type > () }; }
#line 5726 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 215:
#line 1036 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Tag > () = Tag{ yystack_[2].value.as< Class > (), yystack_[1].value.as< int > () }; }
#line 5732 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 218:
#line 1044 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< int > () = yystack_[0].value.as< long long > (); }
#line 5738 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 220:
#line 1049 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Class > () = Class::universal; }
#line 5744 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 221:
#line 1051 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Class > () = Class::application; }
#line 5750 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 222:
#line 1053 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Class > () = Class::private_; }
#line 5756 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 223:
#line 1055 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Class > () = Class::context_specific; }
#line 5762 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 225:
#line 1068 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<ObjectIdComponentValue> > () = yystack_[1].value.as< std::vector<ObjectIdComponentValue> > (); std::reverse(yylhs.value.as< std::vector<ObjectIdComponentValue> > ().begin(), yylhs.value.as< std::vector<ObjectIdComponentValue> > ().end()); }
#line 5768 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 226:
#line 1070 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<ObjectIdComponentValue> > () = yystack_[1].value.as< std::vector<ObjectIdComponentValue> > (); std::reverse(yylhs.value.as< std::vector<ObjectIdComponentValue> > ().begin(), yylhs.value.as< std::vector<ObjectIdComponentValue> > ().end()); }
#line 5774 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 227:
#line 1074 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<ObjectIdComponentValue> > ().push_back(yystack_[0].value.as< ObjectIdComponentValue > ()); }
#line 5780 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 228:
#line 1076 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<ObjectIdComponentValue> > () = yystack_[0].value.as< std::vector<ObjectIdComponentValue> > (); yylhs.value.as< std::vector<ObjectIdComponentValue> > ().push_back(yystack_[1].value.as< ObjectIdComponentValue > ()); }
#line 5786 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 229:
#line 1080 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > () = yystack_[0].value.as< ObjectIdComponentValue > (); }
#line 5792 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 230:
#line 1082 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > () = yystack_[0].value.as< ObjectIdComponentValue > (); }
#line 5798 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 231:
#line 1084 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > () = yystack_[0].value.as< ObjectIdComponentValue > (); }
#line 5804 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 232:
#line 1088 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > ().name = yystack_[0].value.as< std::string > (); }
#line 5810 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 233:
#line 1092 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > ().value = yystack_[0].value.as< long long > (); }
#line 5816 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 235:
#line 1097 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > () = yystack_[1].value.as< ObjectIdComponentValue > (); yylhs.value.as< ObjectIdComponentValue > ().name = yystack_[3].value.as< std::string > (); }
#line 5822 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 355:
#line 1372 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 5828 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 356:
#line 1376 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 5834 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 357:
#line 1380 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 5840 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 358:
#line 1384 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 5846 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;


#line 5850 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
            default:
              break;
            }
        }
      catch (const syntax_error& yyexc)
        {
          error (yyexc);
          YYERROR;
        }
      YY_SYMBOL_PRINT ("-> $$ =", yylhs);
      yypop_ (yylen);
      yylen = 0;
      YY_STACK_PRINT ();

      // Shift the result of the reduction.
      yypush_ (YY_NULLPTR, yylhs);
    }
    goto yynewstate;

  /*--------------------------------------.
  | yyerrlab -- here on detecting error.  |
  `--------------------------------------*/
  yyerrlab:
    // If not already recovering from an error, report this error.
    if (!yyerrstatus_)
      {
        ++yynerrs_;
        error (yyla.location, yysyntax_error_ (yystack_[0].state, yyla));
      }


    yyerror_range[1].location = yyla.location;
    if (yyerrstatus_ == 3)
      {
        /* If just tried and failed to reuse lookahead token after an
           error, discard it.  */

        // Return failure if at end of input.
        if (yyla.type_get () == yyeof_)
          YYABORT;
        else if (!yyla.empty ())
          {
            yy_destroy_ ("Error: discarding", yyla);
            yyla.clear ();
          }
      }

    // Else will try to reuse lookahead token after shifting the error token.
    goto yyerrlab1;


  /*---------------------------------------------------.
  | yyerrorlab -- error raised explicitly by YYERROR.  |
  `---------------------------------------------------*/
  yyerrorlab:

    /* Pacify compilers like GCC when the user code never invokes
       YYERROR and the label yyerrorlab therefore never appears in user
       code.  */
    if (false)
      goto yyerrorlab;
    yyerror_range[1].location = yystack_[yylen - 1].location;
    /* Do not reclaim the symbols of the rule whose action triggered
       this YYERROR.  */
    yypop_ (yylen);
    yylen = 0;
    goto yyerrlab1;

  /*-------------------------------------------------------------.
  | yyerrlab1 -- common code for both syntax error and YYERROR.  |
  `-------------------------------------------------------------*/
  yyerrlab1:
    yyerrstatus_ = 3;   // Each real token shifted decrements this.
    {
      stack_symbol_type error_token;
      for (;;)
        {
          yyn = yypact_[yystack_[0].state];
          if (!yy_pact_value_is_default_ (yyn))
            {
              yyn += yyterror_;
              if (0 <= yyn && yyn <= yylast_ && yycheck_[yyn] == yyterror_)
                {
                  yyn = yytable_[yyn];
                  if (0 < yyn)
                    break;
                }
            }

          // Pop the current state because it cannot handle the error token.
          if (yystack_.size () == 1)
            YYABORT;

          yyerror_range[1].location = yystack_[0].location;
          yy_destroy_ ("Error: popping", yystack_[0]);
          yypop_ ();
          YY_STACK_PRINT ();
        }

      yyerror_range[2].location = yyla.location;
      YYLLOC_DEFAULT (error_token.location, yyerror_range, 2);

      // Shift the error token.
      error_token.state = yyn;
      yypush_ ("Shifting", error_token);
    }
    goto yynewstate;

    // Accept.
  yyacceptlab:
    yyresult = 0;
    goto yyreturn;

    // Abort.
  yyabortlab:
    yyresult = 1;
    goto yyreturn;

  yyreturn:
    if (!yyla.empty ())
      yy_destroy_ ("Cleanup: discarding lookahead", yyla);

    /* Do not reclaim the symbols of the rule whose action triggered
       this YYABORT or YYACCEPT.  */
    yypop_ (yylen);
    while (1 < yystack_.size ())
      {
        yy_destroy_ ("Cleanup: popping", yystack_[0]);
        yypop_ ();
      }

    return yyresult;
  }
    catch (...)
      {
        YYCDEBUG << "Exception caught: cleaning lookahead and stack"
                 << std::endl;
        // Do not try to display the values of the reclaimed symbols,
        // as their printer might throw an exception.
        if (!yyla.empty ())
          yy_destroy_ (YY_NULLPTR, yyla);

        while (1 < yystack_.size ())
          {
            yy_destroy_ (YY_NULLPTR, yystack_[0]);
            yypop_ ();
          }
        throw;
      }
  }

  void
  asn1_parser::error (const syntax_error& yyexc)
  {
    error (yyexc.location, yyexc.what());
  }

  // Generate an error message.
  std::string
  asn1_parser::yysyntax_error_ (state_type yystate, const symbol_type& yyla) const
  {
    // Number of reported tokens (one for the "unexpected", one per
    // "expected").
    size_t yycount = 0;
    // Its maximum.
    enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
    // Arguments of yyformat.
    char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];

    /* There are many possibilities here to consider:
       - If this state is a consistent state with a default action, then
         the only way this function was invoked is if the default action
         is an error action.  In that case, don't check for expected
         tokens because there are none.
       - The only way there can be no lookahead present (in yyla) is
         if this state is a consistent state with a default action.
         Thus, detecting the absence of a lookahead is sufficient to
         determine that there is no unexpected or expected token to
         report.  In that case, just report a simple "syntax error".
       - Don't assume there isn't a lookahead just because this state is
         a consistent state with a default action.  There might have
         been a previous inconsistent state, consistent state with a
         non-default action, or user semantic action that manipulated
         yyla.  (However, yyla is currently not documented for users.)
       - Of course, the expected token list depends on states to have
         correct lookahead information, and it depends on the parser not
         to perform extra reductions after fetching a lookahead from the
         scanner and before detecting a syntax error.  Thus, state
         merging (from LALR or IELR) and default reductions corrupt the
         expected token list.  However, the list is correct for
         canonical LR with one exception: it will still contain any
         token that will not be accepted due to an error action in a
         later state.
    */
    if (!yyla.empty ())
      {
        int yytoken = yyla.type_get ();
        yyarg[yycount++] = yytname_[yytoken];
        int yyn = yypact_[yystate];
        if (!yy_pact_value_is_default_ (yyn))
          {
            /* Start YYX at -YYN if negative to avoid negative indexes in
               YYCHECK.  In other words, skip the first -YYN actions for
               this state because they are default actions.  */
            int yyxbegin = yyn < 0 ? -yyn : 0;
            // Stay within bounds of both yycheck and yytname.
            int yychecklim = yylast_ - yyn + 1;
            int yyxend = yychecklim < yyntokens_ ? yychecklim : yyntokens_;
            for (int yyx = yyxbegin; yyx < yyxend; ++yyx)
              if (yycheck_[yyx + yyn] == yyx && yyx != yyterror_
                  && !yy_table_value_is_error_ (yytable_[yyx + yyn]))
                {
                  if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                    {
                      yycount = 1;
                      break;
                    }
                  else
                    yyarg[yycount++] = yytname_[yyx];
                }
          }
      }

    char const* yyformat = YY_NULLPTR;
    switch (yycount)
      {
#define YYCASE_(N, S)                         \
        case N:                               \
          yyformat = S;                       \
        break
        YYCASE_(0, YY_("syntax error"));
        YYCASE_(1, YY_("syntax error, unexpected %s"));
        YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
        YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
        YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
        YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
#undef YYCASE_
      }

    std::string yyres;
    // Argument number.
    size_t yyi = 0;
    for (char const* yyp = yyformat; *yyp; ++yyp)
      if (yyp[0] == '%' && yyp[1] == 's' && yyi < yycount)
        {
          yyres += yytnamerr_ (yyarg[yyi++]);
          ++yyp;
        }
      else
        yyres += *yyp;
    return yyres;
  }


  const short int asn1_parser::yypact_ninf_ = -445;

  const short int asn1_parser::yytable_ninf_ = -359;

  const short int
  asn1_parser::yypact_[] =
  {
    -107,  -445,    77,  -107,    29,   -67,  -445,  -445,    88,    19,
    -445,   -14,  -445,    54,    34,  -445,  -445,    13,    19,  -445,
    -445,  -445,    23,   -16,  -445,  -445,    51,    65,    73,   129,
    -445,  -445,   193,   139,    72,  -445,  -445,  -445,   150,   108,
      98,  -445,  -445,  -445,   139,    99,  -445,   201,  -445,    72,
    -445,    81,  -445,    49,  -445,   174,  -445,  -445,  -445,   106,
    -445,  -445,   109,   115,  -445,  -445,  -445,  -445,   198,    53,
      59,  -445,  -445,    53,  -445,   118,    53,  -445,   -30,    59,
    -445,  -445,  -445,   136,  1757,  -445,  -445,  -445,  -107,  -445,
    1757,  -445,  -445,  -445,  -445,   158,  -445,  -445,   159,   140,
    -445,  -445,  -445,   172,   141,  -445,  -445,  -445,  -445,  -445,
     181,   143,  -445,  -445,   200,  -445,   167,  -445,  -445,  -445,
    -445,  -445,   -29,   104,  -445,  -445,  -445,  -445,  -445,  -445,
    -445,  -445,  -445,  -445,   257,   135,   137,  -445,  -445,  -445,
    -445,  -445,   138,  -445,  -445,  -445,  -445,     6,  -445,  -445,
    -445,  -445,  -445,  -445,  -445,  -445,  -445,  -445,  -445,  -445,
    -445,  -445,  -445,  -445,  1565,  -445,  -445,  -445,  -445,  -445,
    -445,  -445,  -445,  -445,  -445,  -445,  -445,  -445,  -445,  -445,
    -445,  -445,   144,   142,  -445,     2,   151,   155,  -445,   131,
    -445,   131,    57,   131,  -445,  -445,  1757,   151,   -12,   480,
     196,   197,  1757,    -7,   199,   202,   146,    67,   191,   191,
    1219,  -445,  1757,  1757,   151,  1757,    -2,    21,  -445,  -445,
    -445,  -445,   131,  -445,   160,  -445,   153,  1757,  -445,   166,
     156,  -445,   169,  -445,   154,   -69,  -445,   169,   151,  -445,
    1657,  -445,   209,   161,  -445,     1,   175,  -445,   162,  -445,
    -445,  -445,  -445,  -445,  -445,  -445,   239,  1219,   261,  -445,
     151,  -445,  -445,  1219,   290,  -445,   190,   856,   601,   299,
      10,   168,  -445,  -445,  -445,  -445,  -445,  -445,  -445,  -445,
    -445,  -445,  -445,  -445,   -25,   -64,  -445,  -445,  -445,  -445,
    -445,  -445,  -445,  -445,   173,  -445,  -445,   171,  -445,   -59,
     -58,   -40,   -35,  -445,   239,   246,  -445,  -445,  -445,  1757,
    -445,   186,   185,  -445,  -445,  -445,  -445,  -445,  -445,   178,
    1757,  1757,   151,  -445,  -445,   194,  1757,  1757,  -445,  -445,
    -445,  -445,    22,  -445,  -445,  -445,  -445,  -445,   183,  -445,
    -445,  1219,   -25,  -445,   151,   151,   151,  -445,  -445,  -445,
    -445,    21,   204,    21,  -445,  -445,  -445,   184,    -3,  -445,
     206,  -445,   -62,   151,  -445,   -57,    12,   301,  -445,   131,
    1757,    -5,  1219,  -445,  -445,    -1,   722,  -445,   -18,  -445,
    1219,  -445,  -445,  -445,   151,   203,   176,  -445,  -445,  1340,
    -445,  -445,   189,   182,  -445,    18,   -25,  -445,    94,   207,
    -445,  1219,  1461,   208,   211,  -445,  -445,   722,  -445,  -445,
     722,  -445,   151,   977,  -445,    24,   151,  -445,   151,  -445,
    -445,   151,  -445,   151,  -445,  -445,  -445,   210,   205,  -445,
     212,  -445,  -445,    25,  -445,   131,    27,  -445,  -445,   173,
    -445,   213,   214,  -445,   151,   217,  -445,   218,  -445,  -445,
     283,  -445,  -445,  -445,   -55,  -445,  -445,  -445,  -445,   188,
     220,  -445,  -445,  -445,    26,  -445,  -445,  -445,   221,   -40,
    -445,  -445,  1098,  -445,  -445,  -445,  -445,  -445,  -445,  -445,
     216,  -445,   219,   222,   224,  -445,  -445,    -5,    -5,  1219,
     227,   223,   228,   151,   225,  -445,  1219,   601,  -445,  -445,
    -445,  -445,   131,   217,  -445,   131,  -445,   131,  -445,  -445,
       9,  -445,  -445,  -445,  -445,   230,   226,  -445,  -445,  -445,
    -445,  -445,   131,  -445
  };

  const unsigned short int
  asn1_parser::yydefact_[] =
  {
       0,   358,     0,     2,     0,    53,     1,     3,    64,     0,
      50,    51,    52,     0,    68,    61,   356,     0,    56,    59,
      60,    58,   232,     0,    55,    63,     0,     0,     0,    70,
      54,    57,     0,     0,   241,    67,    65,    66,     0,     0,
       0,   242,   243,   239,     0,     0,    69,     0,    62,   241,
     238,    75,   240,    77,    49,    79,    94,    95,    96,     0,
     355,   357,     0,    76,    89,    91,    92,    93,     0,    81,
       0,    74,    73,     0,     4,     0,    80,    82,     0,    71,
      97,    99,   100,     0,     0,    90,    78,    83,     0,    98,
       0,     6,    20,    10,   184,     0,   255,   156,     0,     0,
     249,   251,   252,     0,     0,   246,   122,   256,   257,   258,
       0,   159,   259,   260,     0,   128,     0,   237,   261,   176,
     236,   244,     0,     0,   263,   262,   247,   250,     9,   264,
     141,   265,   266,   267,   217,   355,     0,     5,     7,    42,
      19,   127,     0,   111,   123,   109,   101,     0,   107,   113,
     124,   120,   131,   112,   130,   126,   134,   135,   136,   137,
     115,   110,   138,   211,     0,   129,   133,   125,   132,   119,
     121,   139,   116,   140,   117,   118,   114,   253,   254,   108,
     270,   102,     0,     0,    84,    88,   105,   177,   268,     0,
     245,     0,     0,     0,   224,   183,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   223,     0,     0,
       0,   269,     0,     0,   212,     0,     0,     0,    85,    87,
      86,   103,     0,   208,     0,   205,   206,     0,   175,     0,
     169,   172,   174,    44,     0,     0,   161,     0,   198,   199,
       0,   328,     0,     0,   185,   194,     0,   187,   188,   192,
     165,   151,   152,   153,   248,    35,     0,     0,     0,   158,
       0,   318,   325,     0,     0,   157,     0,     0,     0,     0,
     357,    22,    37,    23,    24,    25,    38,    34,   305,   145,
      40,   281,    45,   155,   329,   316,   143,   144,   146,   167,
     147,   149,   148,   150,   351,   280,   282,   283,   286,   288,
       0,   290,     0,   293,     0,   296,   304,   307,   308,     0,
     309,     0,   320,   311,   312,   310,   313,   314,   315,     0,
       0,     0,   202,   203,   200,     0,     0,     0,   216,   221,
     222,   220,     0,    11,    12,    13,    14,    15,     0,    39,
      43,     0,     0,   106,   214,   213,   210,     8,    21,   104,
     233,   234,     0,   227,   229,   230,   231,   232,     0,   179,
       0,   204,     0,   142,   168,     0,     0,     0,   160,     0,
       0,     0,     0,   195,   186,     0,     0,   289,    46,   154,
       0,   330,   348,   349,     0,     0,   233,    17,    18,     0,
      29,    33,     0,     0,    30,   155,    31,    32,   232,     0,
     166,     0,     0,     0,     0,   301,   300,     0,   303,   302,
       0,   297,   317,     0,   321,     0,   273,   277,   274,   278,
     201,   271,   275,   272,   276,   218,   219,     0,     0,   234,
       0,   225,   228,     0,   178,     0,     0,   207,   209,   351,
     173,     0,     0,   162,   197,   191,   196,   189,   193,   299,
       0,    47,   333,   331,     0,   332,   334,   335,    27,     0,
       0,   306,    41,   353,     0,   352,   350,   279,   284,   291,
     294,   327,     0,   326,   319,   322,    36,   215,    16,   226,
       0,   180,     0,     0,   170,   164,   163,     0,     0,     0,
       0,     0,   338,   343,     0,    28,     0,     0,   323,   235,
     181,   182,     0,   190,    48,     0,   336,     0,   342,   340,
     347,    26,   354,   285,   287,   171,     0,   339,   345,   346,
     344,   341,     0,   337
  };

  const short int
  asn1_parser::yypgoto_[] =
  {
    -445,   344,  -445,   165,  -445,  -445,    92,   163,  -445,  -184,
    -445,  -235,  -445,  -445,  -445,  -445,  -445,   -21,  -445,  -445,
    -445,  -445,  -445,  -445,  -445,  -445,  -445,  -445,  -445,  -445,
    -445,  -445,  -445,  -445,   351,  -445,   338,  -445,  -445,  -445,
    -445,  -445,  -445,  -445,  -445,  -445,  -445,   295,  -445,  -445,
     320,   303,  -445,  -445,   298,  -445,  -155,  -445,  -445,  -445,
     -82,  -445,  -161,  -158,  -445,  -445,  -445,  -445,  -445,  -445,
    -181,  -317,  -445,  -445,  -445,  -128,  -355,  -445,  -445,  -445,
     -54,  -445,  -445,  -445,   177,  -445,  -360,  -362,  -445,  -445,
    -445,  -445,  -445,  -445,  -445,  -445,  -445,  -445,  -445,  -445,
    -445,  -445,  -445,   215,  -303,  -445,    46,   -51,  -445,  -445,
    -445,   367,  -445,   334,   340,  -445,  -445,  -445,  -445,  -445,
    -445,  -445,  -445,  -445,  -445,  -445,  -445,  -445,  -445,  -118,
    -445,  -445,  -445,  -445,  -445,  -261,  -445,  -445,   -22,  -445,
     -23,  -445,    84,  -445,  -445,    14,  -445,  -445,  -445,  -445,
    -445,  -445,  -445,  -445,   -83,   119,  -445,  -445,  -445,  -445,
    -445,  -445,  -445,  -444,  -445,  -445,  -445,  -445,  -445,  -445,
     -48,  -445,   -52,    -9,   180,     3
  };

  const short int
  asn1_parser::yydefgoto_[] =
  {
      -1,     2,     3,   136,   137,   138,   338,   339,   390,   139,
     140,   272,   273,   274,   392,   275,   393,   394,   276,   277,
     278,   141,   279,   280,   142,   143,   144,   281,   282,    68,
       4,    10,    11,    12,    17,    18,    19,    20,    14,    29,
      39,    54,    55,    62,    70,    75,    76,    77,   184,   218,
      78,    64,    65,    79,    80,   145,   283,   146,    81,    82,
     342,   148,   245,   285,   286,   287,   149,   288,   150,   235,
     228,   289,   290,   151,   229,   230,   231,   152,   153,   358,
     359,   154,   155,   156,   246,   247,   248,   249,   157,   158,
     159,   160,   224,   225,   226,   161,   162,   163,   164,   207,
     427,   332,   165,   291,   352,   353,   354,   355,   356,   166,
     167,   292,    34,    45,    43,   168,   169,   170,   171,   293,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   211,
     294,   295,   296,   297,   513,   298,   299,   300,   301,   302,
     303,   304,   377,   407,   410,   305,   306,   307,   308,   309,
     310,   311,   474,   312,   475,   313,   314,   315,   316,   453,
     455,   456,   457,   491,   492,   509,   510,   521,   317,   318,
     403,   466,   181,   182,   221,   183
  };

  const short int
  asn1_parser::yytable_[] =
  {
      22,    66,   147,     5,   200,   204,     5,   399,   186,    22,
     440,   445,   236,   448,  -356,   271,   250,    66,    83,   347,
     348,    66,   350,    15,    66,   350,   425,    83,   223,   350,
     219,   482,   391,   242,    88,   239,   450,  -295,   242,   518,
     242,   323,   408,     1,   242,   347,   348,   476,   430,   442,
     432,   372,   343,  -292,   405,    21,   368,     9,   196,  -324,
     437,   516,   351,   517,    21,   439,  -324,   490,   369,    26,
      56,    57,    58,   197,    56,    57,    58,     6,    91,   241,
       8,    59,   214,   271,   271,   465,  -292,   406,    93,    16,
     373,   185,   430,    27,    16,   198,    16,   199,   519,   379,
     329,   199,   520,    13,    28,   382,  -295,    73,   199,   397,
     243,   409,   395,   244,   238,   243,   401,   284,   324,    23,
     322,   447,   434,   401,    33,   448,   217,   210,   503,    25,
     344,   345,   199,   346,   435,  -356,  -356,   -72,    30,    16,
    -356,    53,   381,  -234,    16,   363,    16,   496,    60,    32,
      16,   269,   199,    61,   391,    41,    42,    35,   363,   417,
     419,  -356,   330,    61,   349,   422,   424,   440,   128,   270,
      16,    36,   270,    61,    60,   378,    61,   426,    61,    37,
     227,   331,   232,   379,   237,   396,   284,   240,   443,   227,
      38,   202,   271,   240,   227,   234,   429,    15,   429,    60,
      61,   438,   319,    60,    61,   271,   197,     1,   357,    60,
      61,   441,    44,   360,   446,   333,   334,   335,   336,   337,
     433,    46,   451,   271,   215,    48,   271,   412,   203,    47,
     199,   397,    50,    67,   384,   385,   514,    51,   416,   418,
     429,   201,   205,   462,   421,   423,    69,   463,    71,    67,
      84,    72,    73,    67,    74,   473,    67,    90,   398,    84,
      86,   187,   188,   190,   189,   191,   452,   193,   192,   194,
     195,   319,   206,  -358,   215,   208,   209,   199,   429,   222,
     216,   483,    16,   320,   321,   361,   326,   328,   444,   327,
     362,   364,   367,   365,   284,   366,   370,   376,   371,   375,
     374,   380,   383,   400,  -298,   402,   -42,   396,   404,   413,
     433,   240,   240,   271,   473,   414,   415,   240,   240,   420,
     464,   428,   347,   489,  -165,   284,   459,   454,   284,   431,
     460,   504,   436,   468,   461,   467,   494,   479,   512,   477,
     485,   486,   357,   499,   357,   495,   500,     7,   506,   501,
     511,   523,   478,   227,   487,   488,   232,   233,   497,   389,
     237,   502,   227,   349,   505,   507,   227,   522,   458,    31,
      40,    87,   340,    63,   515,   508,    85,    89,    24,   319,
     325,   481,   480,    52,    49,   469,   357,   470,   411,   498,
     449,   484,     0,     0,     0,     0,     0,     0,     0,     0,
     220,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     319,     0,     0,   319,     0,   284,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   360,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   493,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   227,   227,
       0,     0,     0,     0,   250,     0,   251,     0,   252,     0,
     253,     0,     0,   232,     0,     0,   493,     0,   493,   254,
     319,    91,    92,   255,     0,     0,     0,     0,     0,     0,
       0,    93,   256,   232,    94,     0,     0,    95,    96,    97,
       0,    98,    99,     0,     0,     0,     0,   257,   100,   101,
       0,     0,   102,   103,   258,     0,     0,   104,     0,     0,
       0,     0,   105,   259,   260,   106,   107,   108,   109,     0,
       0,     0,     0,   261,   110,     0,   111,     0,   112,     0,
     262,     0,     0,   113,   114,   115,   116,     0,   117,     0,
     263,     0,     0,     0,   118,     0,   119,   120,   121,   122,
     123,   264,   197,     0,     0,   124,     0,   125,   126,   127,
     265,   128,     0,     0,     0,   129,   130,   131,   132,   133,
     266,     0,     0,     0,   267,   250,   268,   251,   134,   252,
       0,   253,     0,    23,     0,     0,     0,     0,     0,   269,
     254,     0,    91,    92,   255,     0,     0,     0,     0,     0,
     135,   270,    93,   256,     0,    94,     0,     0,    95,    96,
      97,     0,    98,    99,     0,     0,     0,     0,   341,   100,
     101,     0,     0,   102,   103,     0,     0,     0,   104,     0,
       0,     0,     0,   105,   259,   260,   106,   107,   108,   109,
       0,     0,     0,     0,   261,   110,     0,   111,     0,   112,
       0,   262,     0,     0,   113,   114,   115,   116,     0,   117,
       0,   263,     0,     0,     0,   118,     0,   119,   120,   121,
     122,   123,   264,   197,     0,     0,   124,     0,   125,   126,
     127,   265,   128,     0,     0,     0,   129,   130,   131,   132,
     133,   266,     0,     0,     0,   267,   250,   268,   251,   134,
     252,     0,   253,     0,    23,     0,     0,     0,     0,     0,
     269,   254,     0,    91,    92,   255,     0,     0,     0,     0,
       0,   135,   270,    93,     0,     0,    94,     0,     0,    95,
      96,    97,     0,    98,    99,     0,     0,     0,     0,   341,
     100,   101,     0,     0,   102,   103,     0,     0,     0,   104,
       0,     0,     0,     0,   105,   259,   260,   106,   107,   108,
     109,     0,     0,     0,     0,   261,   110,     0,   111,     0,
     112,     0,   262,     0,     0,   113,   114,   115,   116,     0,
     117,     0,   263,     0,     0,     0,   118,     0,   119,   120,
     121,   122,   123,   264,   197,     0,     0,   124,     0,   125,
     126,   127,   265,   128,     0,     0,     0,   129,   130,   131,
     132,   133,   266,     0,     0,     0,   267,     0,   268,     0,
     134,     0,     0,     0,     0,    23,     0,     0,     0,     0,
     386,   269,   251,     0,   252,     0,   253,     0,     0,     0,
       0,     0,   135,   270,     0,   254,     0,    91,    92,     0,
     333,   334,   335,   336,   337,   387,     0,    93,     0,     0,
      94,     0,     0,    95,    96,    97,     0,    98,    99,     0,
       0,     0,     0,   341,   100,   101,     0,     0,   102,   103,
       0,     0,     0,   104,     0,     0,     0,     0,   105,   259,
       0,   106,   107,   108,   109,     0,     0,     0,     0,     0,
     110,     0,   111,     0,   112,     0,     0,     0,     0,   113,
     114,   115,   116,     0,   117,     0,     0,     0,     0,     0,
     118,     0,   119,   120,   121,   122,   123,     0,     0,     0,
       0,   124,     0,   125,   126,   127,   265,   128,     0,     0,
       0,   129,   130,   131,   132,   133,     0,     0,     0,     0,
     267,   250,     0,   251,   134,   252,     0,   253,     0,    23,
       0,     0,     0,   388,     0,   269,   254,     0,    91,    92,
       0,     0,     0,     0,     0,     0,   135,   270,    93,     0,
       0,    94,     0,     0,    95,    96,    97,     0,    98,    99,
       0,     0,     0,     0,   341,   100,   101,     0,     0,   102,
     103,     0,     0,     0,   104,     0,     0,     0,     0,   105,
     259,     0,   106,   107,   108,   109,     0,     0,     0,     0,
       0,   110,     0,   111,     0,   112,   471,     0,     0,     0,
     113,   114,   115,   116,     0,   117,     0,     0,     0,     0,
       0,   118,     0,   119,   120,   121,   122,   123,     0,     0,
       0,     0,   124,     0,   125,   126,   127,   265,   128,     0,
       0,     0,   129,   130,   131,   132,   133,     0,     0,     0,
       0,   217,   250,     0,   251,   134,   252,   472,   253,     0,
      23,     0,     0,     0,     0,     0,   269,   254,     0,    91,
      92,     0,     0,     0,     0,     0,     0,   135,   270,    93,
       0,     0,    94,     0,     0,    95,    96,    97,     0,    98,
      99,     0,     0,     0,     0,   341,   100,   101,     0,     0,
     102,   103,     0,     0,     0,   104,     0,     0,     0,     0,
     105,   259,     0,   106,   107,   108,   109,     0,     0,     0,
       0,     0,   110,     0,   111,     0,   112,   471,     0,     0,
       0,   113,   114,   115,   116,     0,   117,     0,     0,     0,
       0,     0,   118,     0,   119,   120,   121,   122,   123,     0,
       0,     0,     0,   124,     0,   125,   126,   127,   265,   128,
       0,     0,     0,   129,   130,   131,   132,   133,     0,     0,
       0,     0,   217,   250,     0,   251,   134,   252,     0,   253,
       0,    23,     0,     0,     0,     0,     0,   269,   254,     0,
      91,    92,     0,     0,     0,     0,     0,     0,   135,   270,
      93,     0,     0,    94,     0,     0,    95,    96,    97,     0,
      98,    99,     0,     0,     0,     0,   341,   100,   101,     0,
       0,   102,   103,     0,     0,     0,   104,     0,     0,     0,
       0,   105,   259,     0,   106,   107,   108,   109,     0,     0,
       0,     0,     0,   110,     0,   111,     0,   112,     0,     0,
       0,     0,   113,   114,   115,   116,     0,   117,     0,     0,
       0,     0,     0,   118,     0,   119,   120,   121,   122,   123,
       0,     0,     0,     0,   124,     0,   125,   126,   127,   265,
     128,     0,     0,     0,   129,   130,   131,   132,   133,     0,
       0,     0,     0,   217,   250,     0,   251,   134,   252,     0,
     253,     0,    23,     0,     0,     0,     0,     0,   269,   254,
       0,    91,    92,     0,     0,     0,     0,     0,     0,   135,
     270,    93,     0,     0,    94,     0,     0,    95,    96,    97,
       0,    98,    99,     0,     0,     0,     0,   341,   100,   101,
       0,     0,   102,   103,     0,     0,     0,   104,     0,     0,
       0,     0,   105,   259,     0,   106,   107,   108,   109,     0,
       0,     0,     0,     0,   110,     0,   111,     0,   112,     0,
       0,     0,     0,   113,   114,   115,   116,     0,   117,     0,
       0,     0,     0,     0,   118,     0,   119,   120,   121,   122,
     123,     0,     0,     0,     0,   124,     0,   125,   126,   127,
     265,   128,     0,     0,     0,   129,   130,   131,   132,   133,
       0,     0,     0,     0,   267,   250,     0,     0,   134,     0,
       0,     0,     0,    23,     0,     0,     0,     0,     0,   269,
       0,     0,    91,    92,     0,     0,     0,     0,     0,     0,
     135,   270,    93,     0,     0,    94,     0,     0,    95,    96,
      97,     0,    98,    99,     0,     0,     0,     0,     0,   100,
     101,     0,     0,   102,   103,     0,     0,     0,   104,     0,
       0,     0,     0,   105,     0,     0,   106,   107,   108,   109,
       0,     0,     0,     0,     0,   110,     0,   111,     0,   112,
       0,     0,     0,     0,   113,   114,   115,   116,     0,   117,
       0,     0,     0,     0,     0,   118,     0,   119,   120,   121,
     122,   123,     0,     0,     0,     0,   124,     0,   125,   126,
     127,     0,   128,     0,     0,     0,   129,   130,   131,   132,
     133,     0,     0,     0,     0,     0,    91,    92,     0,   134,
       0,     0,     0,     0,     0,     0,    93,     0,     0,    94,
     269,     0,    95,    96,    97,     0,    98,    99,     0,     0,
       0,   135,   270,   100,   101,     0,     0,   102,   103,     0,
       0,     0,   104,     0,   212,     0,     0,   105,     0,     0,
     106,   107,   108,   109,     0,   213,     0,     0,     0,   110,
       0,   111,     0,   112,     0,     0,     0,     0,   113,   114,
     115,   116,     0,   117,     0,     0,     0,     0,     0,   118,
       0,   119,   120,   121,   122,   123,     0,     0,     0,     0,
     124,     0,   125,   126,   127,     0,   128,     0,    91,    92,
     129,   130,   131,   132,   133,     0,     0,     0,    93,     0,
       0,    94,     0,   134,    95,    96,    97,     0,    98,    99,
       0,     0,     0,     0,     0,   100,   101,     0,     0,   102,
     103,     0,     0,     0,   104,   135,    16,     0,     0,   105,
       0,     0,   106,   107,   108,   109,     0,     0,     0,     0,
       0,   110,     0,   111,     0,   112,     0,     0,     0,     0,
     113,   114,   115,   116,     0,   117,     0,     0,     0,     0,
       0,   118,     0,   119,   120,   121,   122,   123,     0,     0,
       0,     0,   124,     0,   125,   126,   127,     0,   128,     0,
       0,     0,   129,   130,   131,   132,   133,     0,    91,    92,
       0,     0,     0,     0,     0,   134,     0,   215,    93,     0,
       0,    94,     0,     0,    95,    96,    97,     0,    98,    99,
       0,     0,     0,     0,     0,   100,   101,   135,    16,   102,
     103,     0,     0,     0,   104,     0,     0,     0,     0,   105,
       0,     0,   106,   107,   108,   109,     0,     0,     0,     0,
       0,   110,     0,   111,     0,   112,     0,     0,     0,     0,
     113,   114,   115,   116,     0,   117,     0,     0,     0,     0,
       0,   118,     0,   119,   120,   121,   122,   123,     0,     0,
       0,     0,   124,     0,   125,   126,   127,     0,   128,     0,
       0,     0,   129,   130,   131,   132,   133,     0,     0,     0,
       0,     0,     0,     0,     0,   134,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   135,    16
  };

  const short int
  asn1_parser::yycheck_[] =
  {
       9,    53,    84,     0,   122,   123,     3,   268,    90,    18,
     365,   371,   193,   375,     4,   199,     4,    69,    70,    21,
      22,    73,     4,     4,    76,     4,     4,    79,   189,     4,
     185,     4,   267,    45,    64,   196,    54,    77,    45,    30,
      45,   202,    77,   150,    45,    21,    22,    23,   351,   366,
     353,    50,   210,   112,   112,     9,   125,   124,    87,   123,
     122,   505,   217,   507,    18,   122,   130,   122,   137,    35,
      21,    22,    23,   102,    21,    22,    23,     0,    21,   197,
      51,    32,   164,   267,   268,   402,   145,   145,    31,   151,
      89,    88,   395,    59,   151,   124,   151,   126,    89,   257,
      33,   126,    93,    15,    70,   263,   146,   137,   126,   267,
     122,   146,   267,   125,   196,   122,   141,   199,   125,   133,
     202,   122,   125,   141,   140,   487,   124,   121,   488,    75,
     212,   213,   126,   215,   137,   125,   126,    56,   125,   151,
     130,    60,   260,   125,   151,   227,   151,   121,   150,   126,
     151,   139,   126,   151,   389,    16,    17,   106,   240,   320,
     321,   151,    95,   151,   216,   326,   327,   522,   111,   151,
     151,   106,   151,   151,   150,   257,   151,   332,   151,   106,
     189,   114,   191,   341,   193,   267,   268,   196,   369,   198,
      61,    87,   376,   202,   203,   192,   351,     4,   353,   150,
     151,   362,   199,   150,   151,   389,   102,   150,   217,   150,
     151,   366,   140,   222,   372,    24,    25,    26,    27,    28,
     126,    71,   380,   407,   130,   127,   410,   309,   124,   121,
     126,   389,   133,    53,    44,    45,   497,    36,   320,   321,
     395,   122,   123,   401,   326,   327,    72,   402,   142,    69,
      70,   142,   137,    73,    56,   413,    76,   121,   267,    79,
     142,   103,   103,    91,   124,   124,   384,   124,    87,    69,
     103,   268,    15,   138,   130,   138,   138,   126,   433,   124,
     138,   436,   151,    87,    87,   125,    87,   141,   370,    87,
     137,   125,   138,   137,   376,   126,    87,    58,   137,   137,
     125,    40,    12,     4,    58,   132,   138,   389,   137,   123,
     126,   320,   321,   497,   472,   130,   138,   326,   327,   125,
     402,   138,    21,    40,   148,   407,   137,   124,   410,   125,
     148,   489,   126,   122,   127,   127,   148,   125,   496,   129,
     127,   127,   351,   127,   353,   125,   127,     3,   125,   127,
     125,   125,   147,   362,   137,   137,   365,   192,   137,   267,
     369,   137,   371,   415,   137,   137,   375,   137,   389,    18,
      32,    76,   209,    53,   502,   493,    73,    79,    11,   376,
     203,   435,   433,    49,    44,   407,   395,   410,   304,   472,
     376,   439,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     185,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     407,    -1,    -1,   410,    -1,   497,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   435,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   454,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   487,   488,
      -1,    -1,    -1,    -1,     4,    -1,     6,    -1,     8,    -1,
      10,    -1,    -1,   502,    -1,    -1,   505,    -1,   507,    19,
     497,    21,    22,    23,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    31,    32,   522,    34,    -1,    -1,    37,    38,    39,
      -1,    41,    42,    -1,    -1,    -1,    -1,    47,    48,    49,
      -1,    -1,    52,    53,    54,    -1,    -1,    57,    -1,    -1,
      -1,    -1,    62,    63,    64,    65,    66,    67,    68,    -1,
      -1,    -1,    -1,    73,    74,    -1,    76,    -1,    78,    -1,
      80,    -1,    -1,    83,    84,    85,    86,    -1,    88,    -1,
      90,    -1,    -1,    -1,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,    -1,    -1,   105,    -1,   107,   108,   109,
     110,   111,    -1,    -1,    -1,   115,   116,   117,   118,   119,
     120,    -1,    -1,    -1,   124,     4,   126,     6,   128,     8,
      -1,    10,    -1,   133,    -1,    -1,    -1,    -1,    -1,   139,
      19,    -1,    21,    22,    23,    -1,    -1,    -1,    -1,    -1,
     150,   151,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    -1,    41,    42,    -1,    -1,    -1,    -1,    47,    48,
      49,    -1,    -1,    52,    53,    -1,    -1,    -1,    57,    -1,
      -1,    -1,    -1,    62,    63,    64,    65,    66,    67,    68,
      -1,    -1,    -1,    -1,    73,    74,    -1,    76,    -1,    78,
      -1,    80,    -1,    -1,    83,    84,    85,    86,    -1,    88,
      -1,    90,    -1,    -1,    -1,    94,    -1,    96,    97,    98,
      99,   100,   101,   102,    -1,    -1,   105,    -1,   107,   108,
     109,   110,   111,    -1,    -1,    -1,   115,   116,   117,   118,
     119,   120,    -1,    -1,    -1,   124,     4,   126,     6,   128,
       8,    -1,    10,    -1,   133,    -1,    -1,    -1,    -1,    -1,
     139,    19,    -1,    21,    22,    23,    -1,    -1,    -1,    -1,
      -1,   150,   151,    31,    -1,    -1,    34,    -1,    -1,    37,
      38,    39,    -1,    41,    42,    -1,    -1,    -1,    -1,    47,
      48,    49,    -1,    -1,    52,    53,    -1,    -1,    -1,    57,
      -1,    -1,    -1,    -1,    62,    63,    64,    65,    66,    67,
      68,    -1,    -1,    -1,    -1,    73,    74,    -1,    76,    -1,
      78,    -1,    80,    -1,    -1,    83,    84,    85,    86,    -1,
      88,    -1,    90,    -1,    -1,    -1,    94,    -1,    96,    97,
      98,    99,   100,   101,   102,    -1,    -1,   105,    -1,   107,
     108,   109,   110,   111,    -1,    -1,    -1,   115,   116,   117,
     118,   119,   120,    -1,    -1,    -1,   124,    -1,   126,    -1,
     128,    -1,    -1,    -1,    -1,   133,    -1,    -1,    -1,    -1,
       4,   139,     6,    -1,     8,    -1,    10,    -1,    -1,    -1,
      -1,    -1,   150,   151,    -1,    19,    -1,    21,    22,    -1,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      34,    -1,    -1,    37,    38,    39,    -1,    41,    42,    -1,
      -1,    -1,    -1,    47,    48,    49,    -1,    -1,    52,    53,
      -1,    -1,    -1,    57,    -1,    -1,    -1,    -1,    62,    63,
      -1,    65,    66,    67,    68,    -1,    -1,    -1,    -1,    -1,
      74,    -1,    76,    -1,    78,    -1,    -1,    -1,    -1,    83,
      84,    85,    86,    -1,    88,    -1,    -1,    -1,    -1,    -1,
      94,    -1,    96,    97,    98,    99,   100,    -1,    -1,    -1,
      -1,   105,    -1,   107,   108,   109,   110,   111,    -1,    -1,
      -1,   115,   116,   117,   118,   119,    -1,    -1,    -1,    -1,
     124,     4,    -1,     6,   128,     8,    -1,    10,    -1,   133,
      -1,    -1,    -1,   137,    -1,   139,    19,    -1,    21,    22,
      -1,    -1,    -1,    -1,    -1,    -1,   150,   151,    31,    -1,
      -1,    34,    -1,    -1,    37,    38,    39,    -1,    41,    42,
      -1,    -1,    -1,    -1,    47,    48,    49,    -1,    -1,    52,
      53,    -1,    -1,    -1,    57,    -1,    -1,    -1,    -1,    62,
      63,    -1,    65,    66,    67,    68,    -1,    -1,    -1,    -1,
      -1,    74,    -1,    76,    -1,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    -1,    88,    -1,    -1,    -1,    -1,
      -1,    94,    -1,    96,    97,    98,    99,   100,    -1,    -1,
      -1,    -1,   105,    -1,   107,   108,   109,   110,   111,    -1,
      -1,    -1,   115,   116,   117,   118,   119,    -1,    -1,    -1,
      -1,   124,     4,    -1,     6,   128,     8,   130,    10,    -1,
     133,    -1,    -1,    -1,    -1,    -1,   139,    19,    -1,    21,
      22,    -1,    -1,    -1,    -1,    -1,    -1,   150,   151,    31,
      -1,    -1,    34,    -1,    -1,    37,    38,    39,    -1,    41,
      42,    -1,    -1,    -1,    -1,    47,    48,    49,    -1,    -1,
      52,    53,    -1,    -1,    -1,    57,    -1,    -1,    -1,    -1,
      62,    63,    -1,    65,    66,    67,    68,    -1,    -1,    -1,
      -1,    -1,    74,    -1,    76,    -1,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    -1,    88,    -1,    -1,    -1,
      -1,    -1,    94,    -1,    96,    97,    98,    99,   100,    -1,
      -1,    -1,    -1,   105,    -1,   107,   108,   109,   110,   111,
      -1,    -1,    -1,   115,   116,   117,   118,   119,    -1,    -1,
      -1,    -1,   124,     4,    -1,     6,   128,     8,    -1,    10,
      -1,   133,    -1,    -1,    -1,    -1,    -1,   139,    19,    -1,
      21,    22,    -1,    -1,    -1,    -1,    -1,    -1,   150,   151,
      31,    -1,    -1,    34,    -1,    -1,    37,    38,    39,    -1,
      41,    42,    -1,    -1,    -1,    -1,    47,    48,    49,    -1,
      -1,    52,    53,    -1,    -1,    -1,    57,    -1,    -1,    -1,
      -1,    62,    63,    -1,    65,    66,    67,    68,    -1,    -1,
      -1,    -1,    -1,    74,    -1,    76,    -1,    78,    -1,    -1,
      -1,    -1,    83,    84,    85,    86,    -1,    88,    -1,    -1,
      -1,    -1,    -1,    94,    -1,    96,    97,    98,    99,   100,
      -1,    -1,    -1,    -1,   105,    -1,   107,   108,   109,   110,
     111,    -1,    -1,    -1,   115,   116,   117,   118,   119,    -1,
      -1,    -1,    -1,   124,     4,    -1,     6,   128,     8,    -1,
      10,    -1,   133,    -1,    -1,    -1,    -1,    -1,   139,    19,
      -1,    21,    22,    -1,    -1,    -1,    -1,    -1,    -1,   150,
     151,    31,    -1,    -1,    34,    -1,    -1,    37,    38,    39,
      -1,    41,    42,    -1,    -1,    -1,    -1,    47,    48,    49,
      -1,    -1,    52,    53,    -1,    -1,    -1,    57,    -1,    -1,
      -1,    -1,    62,    63,    -1,    65,    66,    67,    68,    -1,
      -1,    -1,    -1,    -1,    74,    -1,    76,    -1,    78,    -1,
      -1,    -1,    -1,    83,    84,    85,    86,    -1,    88,    -1,
      -1,    -1,    -1,    -1,    94,    -1,    96,    97,    98,    99,
     100,    -1,    -1,    -1,    -1,   105,    -1,   107,   108,   109,
     110,   111,    -1,    -1,    -1,   115,   116,   117,   118,   119,
      -1,    -1,    -1,    -1,   124,     4,    -1,    -1,   128,    -1,
      -1,    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,   139,
      -1,    -1,    21,    22,    -1,    -1,    -1,    -1,    -1,    -1,
     150,   151,    31,    -1,    -1,    34,    -1,    -1,    37,    38,
      39,    -1,    41,    42,    -1,    -1,    -1,    -1,    -1,    48,
      49,    -1,    -1,    52,    53,    -1,    -1,    -1,    57,    -1,
      -1,    -1,    -1,    62,    -1,    -1,    65,    66,    67,    68,
      -1,    -1,    -1,    -1,    -1,    74,    -1,    76,    -1,    78,
      -1,    -1,    -1,    -1,    83,    84,    85,    86,    -1,    88,
      -1,    -1,    -1,    -1,    -1,    94,    -1,    96,    97,    98,
      99,   100,    -1,    -1,    -1,    -1,   105,    -1,   107,   108,
     109,    -1,   111,    -1,    -1,    -1,   115,   116,   117,   118,
     119,    -1,    -1,    -1,    -1,    -1,    21,    22,    -1,   128,
      -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,    34,
     139,    -1,    37,    38,    39,    -1,    41,    42,    -1,    -1,
      -1,   150,   151,    48,    49,    -1,    -1,    52,    53,    -1,
      -1,    -1,    57,    -1,    59,    -1,    -1,    62,    -1,    -1,
      65,    66,    67,    68,    -1,    70,    -1,    -1,    -1,    74,
      -1,    76,    -1,    78,    -1,    -1,    -1,    -1,    83,    84,
      85,    86,    -1,    88,    -1,    -1,    -1,    -1,    -1,    94,
      -1,    96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,
     105,    -1,   107,   108,   109,    -1,   111,    -1,    21,    22,
     115,   116,   117,   118,   119,    -1,    -1,    -1,    31,    -1,
      -1,    34,    -1,   128,    37,    38,    39,    -1,    41,    42,
      -1,    -1,    -1,    -1,    -1,    48,    49,    -1,    -1,    52,
      53,    -1,    -1,    -1,    57,   150,   151,    -1,    -1,    62,
      -1,    -1,    65,    66,    67,    68,    -1,    -1,    -1,    -1,
      -1,    74,    -1,    76,    -1,    78,    -1,    -1,    -1,    -1,
      83,    84,    85,    86,    -1,    88,    -1,    -1,    -1,    -1,
      -1,    94,    -1,    96,    97,    98,    99,   100,    -1,    -1,
      -1,    -1,   105,    -1,   107,   108,   109,    -1,   111,    -1,
      -1,    -1,   115,   116,   117,   118,   119,    -1,    21,    22,
      -1,    -1,    -1,    -1,    -1,   128,    -1,   130,    31,    -1,
      -1,    34,    -1,    -1,    37,    38,    39,    -1,    41,    42,
      -1,    -1,    -1,    -1,    -1,    48,    49,   150,   151,    52,
      53,    -1,    -1,    -1,    57,    -1,    -1,    -1,    -1,    62,
      -1,    -1,    65,    66,    67,    68,    -1,    -1,    -1,    -1,
      -1,    74,    -1,    76,    -1,    78,    -1,    -1,    -1,    -1,
      83,    84,    85,    86,    -1,    88,    -1,    -1,    -1,    -1,
      -1,    94,    -1,    96,    97,    98,    99,   100,    -1,    -1,
      -1,    -1,   105,    -1,   107,   108,   109,    -1,   111,    -1,
      -1,    -1,   115,   116,   117,   118,   119,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   128,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   150,   151
  };

  const unsigned short int
  asn1_parser::yystos_[] =
  {
       0,   150,   156,   157,   185,   330,     0,   156,    51,   124,
     186,   187,   188,    15,   193,     4,   151,   189,   190,   191,
     192,   261,   328,   133,   266,    75,    35,    59,    70,   194,
     125,   189,   126,   140,   267,   106,   106,   106,    61,   195,
     191,    16,    17,   269,   140,   268,    71,   121,   127,   269,
     133,    36,   268,    60,   196,   197,    21,    22,    23,    32,
     150,   151,   198,   205,   206,   207,   327,   329,   184,    72,
     199,   142,   142,   137,    56,   200,   201,   202,   205,   208,
     209,   213,   214,   327,   329,   206,   142,   202,    64,   209,
     121,    21,    22,    31,    34,    37,    38,    39,    41,    42,
      48,    49,    52,    53,    57,    62,    65,    66,    67,    68,
      74,    76,    78,    83,    84,    85,    86,    88,    94,    96,
      97,    98,    99,   100,   105,   107,   108,   109,   111,   115,
     116,   117,   118,   119,   128,   150,   158,   159,   160,   164,
     165,   176,   179,   180,   181,   210,   212,   215,   216,   221,
     223,   228,   232,   233,   236,   237,   238,   243,   244,   245,
     246,   250,   251,   252,   253,   257,   264,   265,   270,   271,
     272,   273,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   327,   328,   330,   203,   330,   215,   103,   103,   124,
      91,   124,    87,   124,    69,   103,    87,   102,   124,   126,
     284,   310,    87,   124,   284,   310,    15,   254,   138,   138,
     121,   284,    59,    70,   215,   130,   138,   124,   204,   211,
     258,   329,   124,   217,   247,   248,   249,   328,   225,   229,
     230,   231,   328,   158,   330,   224,   225,   328,   215,   217,
     328,   284,    45,   122,   125,   217,   239,   240,   241,   242,
       4,     6,     8,    10,    19,    23,    32,    47,    54,    63,
      64,    73,    80,    90,   101,   110,   120,   124,   126,   139,
     151,   164,   166,   167,   168,   170,   173,   174,   175,   177,
     178,   182,   183,   211,   215,   218,   219,   220,   222,   226,
     227,   258,   266,   274,   285,   286,   287,   288,   290,   291,
     292,   293,   294,   295,   296,   300,   301,   302,   303,   304,
     305,   306,   308,   310,   311,   312,   313,   323,   324,   330,
      87,    87,   215,   217,   125,   239,    87,    87,   141,    33,
      95,   114,   256,    24,    25,    26,    27,    28,   161,   162,
     162,    47,   215,   218,   215,   215,   215,    21,    22,   327,
       4,   211,   259,   260,   261,   262,   263,   328,   234,   235,
     328,   125,   137,   215,   125,   137,   126,   138,   125,   137,
      87,   137,    50,    89,   125,   137,    58,   297,   215,   218,
      40,   284,   218,    12,    44,    45,     4,    29,   137,   161,
     163,   166,   169,   171,   172,   211,   215,   218,   328,   290,
       4,   141,   132,   325,   137,   112,   145,   298,    77,   146,
     299,   297,   215,   123,   130,   138,   215,   217,   215,   217,
     125,   215,   217,   215,   217,     4,   211,   255,   138,   211,
     259,   125,   259,   126,   125,   137,   126,   122,   217,   122,
     231,   211,   226,   225,   215,   241,   218,   122,   242,   300,
      54,   218,   284,   314,   124,   315,   316,   317,   172,   137,
     148,   127,   218,   211,   215,   226,   326,   127,   122,   293,
     295,    79,   130,   218,   307,   309,    23,   129,   147,   125,
     262,   235,     4,   211,   325,   127,   127,   137,   137,    40,
     122,   318,   319,   328,   148,   125,   121,   137,   309,   127,
     127,   127,   137,   241,   218,   137,   125,   137,   284,   320,
     321,   125,   218,   289,   290,   230,   318,   318,    30,    89,
      93,   322,   137,   125
  };

  const unsigned short int
  asn1_parser::yyr1_[] =
  {
       0,   155,   156,   156,   157,   158,   158,   158,   159,   160,
     160,   161,   161,   161,   161,   161,   162,   163,   163,   164,
     164,   165,   166,   166,   167,   167,   168,   169,   170,   171,
     171,   172,   172,   172,   173,   173,   174,   175,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   183,   183,   184,
     185,   186,   186,   186,   187,   188,   189,   189,   190,   190,
     190,   191,   192,   193,   193,   194,   194,   194,   194,   195,
     195,   196,   196,   197,   197,   197,   198,   198,   199,   199,
     200,   200,   201,   201,   202,   203,   204,   204,   204,   205,
     205,   206,   207,   207,   207,   207,   207,   208,   208,   209,
     209,   210,   210,   211,   212,   213,   214,   215,   215,   215,
     215,   215,   216,   216,   216,   216,   216,   216,   216,   216,
     216,   216,   216,   216,   216,   216,   216,   216,   216,   216,
     216,   216,   216,   216,   216,   216,   216,   216,   216,   216,
     216,   216,   217,   218,   218,   218,   219,   219,   219,   219,
     219,   219,   219,   219,   219,   220,   221,   222,   222,   223,
     223,   224,   224,   225,   225,   226,   226,   227,   228,   229,
     229,   229,   230,   230,   231,   231,   232,   233,   233,   234,
     234,   235,   235,   236,   237,   238,   238,   239,   240,   240,
     240,   240,   241,   241,   242,   242,   242,   242,   243,   243,
     244,   244,   245,   245,   246,   247,   248,   248,   249,   249,
     250,   251,   252,   252,   252,   253,   254,   254,   255,   255,
     256,   256,   256,   256,   257,   258,   258,   259,   259,   260,
     260,   260,   261,   262,   262,   263,   264,   265,   266,   267,
     268,   268,   269,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   279,   280,   280,   280,   280,   280,
     280,   280,   280,   280,   280,   280,   280,   280,   281,   282,
     282,   283,   283,   283,   283,   283,   283,   283,   283,   284,
     285,   285,   286,   287,   287,   287,   288,   289,   290,   290,
     291,   291,   292,   293,   293,   294,   295,   295,   296,   297,
     298,   298,   299,   299,   300,   300,   300,   301,   301,   301,
     301,   301,   301,   301,   301,   301,   302,   303,   304,   305,
     306,   306,   307,   307,   308,   308,   309,   309,   310,   311,
     312,   313,   313,   314,   315,   315,   316,   317,   318,   318,
     319,   320,   321,   321,   322,   322,   322,   322,   323,   324,
     325,   325,   326,   326,   326,   327,   328,   329,   330
  };

  const unsigned char
  asn1_parser::yyr2_[] =
  {
       0,     2,     1,     2,    10,     1,     1,     1,     3,     1,
       1,     1,     1,     1,     1,     1,     3,     1,     1,     1,
       1,     3,     1,     1,     1,     1,     5,     2,     4,     1,
       1,     1,     1,     1,     1,     1,     3,     1,     1,     3,
       1,     3,     1,     3,     3,     1,     2,     3,     5,     0,
       2,     1,     1,     0,     3,     2,     1,     2,     1,     1,
       1,     1,     4,     2,     0,     2,     2,     2,     0,     2,
       0,     3,     0,     3,     3,     0,     1,     0,     3,     0,
       1,     0,     1,     2,     3,     2,     1,     1,     0,     1,
       3,     1,     1,     1,     1,     1,     1,     1,     2,     1,
       1,     1,     1,     1,     3,     3,     4,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     1,     1,     1,     1,     1,
       4,     1,     3,     4,     4,     1,     2,     1,     4,     1,
       4,     6,     1,     3,     1,     1,     1,     2,     5,     1,
       3,     4,     4,     2,     1,     3,     4,     1,     1,     3,
       5,     3,     1,     3,     1,     2,     3,     3,     3,     3,
       3,     4,     3,     3,     4,     1,     1,     3,     1,     3,
       3,     1,     2,     3,     3,     5,     2,     0,     1,     1,
       1,     1,     1,     0,     2,     3,     4,     1,     2,     1,
       1,     1,     1,     1,     1,     4,     1,     1,     4,     2,
       3,     0,     1,     1,     1,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       1,     4,     4,     4,     4,     4,     4,     4,     4,     4,
       1,     1,     1,     1,     3,     5,     1,     1,     1,     2,
       1,     3,     1,     1,     3,     1,     1,     2,     1,     2,
       1,     1,     1,     1,     1,     1,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     1,     3,
       1,     2,     1,     2,     1,     1,     1,     1,     2,     1,
       2,     3,     3,     1,     1,     1,     3,     5,     1,     3,
       2,     2,     1,     0,     1,     1,     1,     0,     2,     2,
       2,     0,     1,     1,     3,     1,     1,     1,     1
  };



  // YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
  // First, the terminals, then, starting at \a yyntokens_, nonterminals.
  const char*
  const asn1_parser::yytname_[] =
  {
  "END_OF_FILE", "error", "$undefined", "comment", "number", "realnumber",
  "bstring", "xmlbstring", "hstring", "xmlhstring", "cstring",
  "xmlcstring", "simplestring", "xmltstring", "psname",
  "encodingreference", "integerUnicodeLabel", "non-integerUnicodeLabel",
  "extended-true", "tstring", "extended-false", "objectclassreference",
  "objectreference", "objectsetreference", "typefieldreference",
  "valuefieldreference", "valuesetfieldreference", "objectfieldreference",
  "objectsetfieldreference", "word", "ABSENT", "ABSTRACT_SYNTAX", "ALL",
  "APPLICATION", "ASN_NULL", "AUTOMATIC", "BEGIN", "BIT", "BMPString",
  "BOOLEAN", "BY", "CHARACTER", "CHOICE", "CLASS", "COMPONENT",
  "COMPONENTS", "CONSTRAINED", "CONTAINING", "DATE", "DATE_TIME",
  "DEFAULT", "DEFINITIONS", "DURATION", "EMBEDDED", "ENCODED",
  "ENCODING_CONTROL", "END", "ENUMERATED", "EXCEPT", "EXPLICIT", "EXPORTS",
  "EXTENSIBILITY", "EXTERNAL", "FALSE", "FROM", "GeneralizedTime",
  "GeneralString", "GraphicString", "IA5String", "IDENTIFIER", "IMPLICIT",
  "IMPLIED", "IMPORTS", "\"INCLUDES\"", "INSTANCE", "INSTRUCTIONS",
  "INTEGER", "INTERSECTION", "ISO646String", "MAX", "MIN",
  "MINUS_INFINITY", "NOT_A_NUMBER", "NumericString", "OBJECT",
  "ObjectDescriptor", "OCTET", "OF", "OID_IRI", "OPTIONAL", "PATTERN",
  "PDV", "PLUS_INFINITY", "PRESENT", "PrintableString", "PRIVATE", "REAL",
  "RELATIVE_OID", "RELATIVE_OID_IRI", "SEQUENCE", "SET", "SETTINGS",
  "SIZE", "STRING", "SYNTAX", "T61String", "TAGS", "TeletexString", "TIME",
  "TIME_OF_DAY", "TRUE", "TYPE_IDENTIFIER", "UNION", "UNIQUE", "UNIVERSAL",
  "UniversalString", "UTCTime", "UTF8String", "VideotexString",
  "VisibleString", "WITH", "\"::=\"", "\"...\"", "\"..\"", "\"{\"",
  "\"}\"", "\"(\"", "\")\"", "\"[\"", "\"]\"", "\"<\"", "\">\"", "\"!\"",
  "\"\\\"\"", "\"&\"", "\"'\"", "\"*\"", "\",\"", "\".\"", "\"-\"",
  "\"/\"", "\":\"", "\";\"", "\"=\"", "\"@\"", "\"|\"", "\"^\"", "PLUS",
  "STAR", "QUESTION_MARK", "GENERIC_IDENTIFIER_UPPERCASE",
  "GENERIC_IDENTIFIER_LOWERCASE", "GENERIC_INTEGER", "xmlasn1typename",
  "\"@.\"", "$accept", "ModuleDefinitionList", "ModuleDefinition",
  "DefinedObjectClass", "ExternalObjectClassReference",
  "UsefulObjectClassReference", "PrimitiveFieldName", "FieldName",
  "Literal", "DefinedObject", "ExternalObjectReference", "Object",
  "ObjectDefn", "DefaultSyntax", "FieldSetting", "DefinedSyntax",
  "DefinedSyntaxToken", "Setting", "DefinedObjectSet",
  "ExternalObjectSetReference", "ObjectSetElements",
  "ObjectClassFieldType", "ObjectClassFieldValue", "OpenTypeFieldVal",
  "ReferencedObjects", "TypeFromObject", "InstanceOfType",
  "GeneralConstraint", "ContentsConstraint", "EncodingControlSections",
  "ModuleIdentifier", "DefinitiveIdentification", "DefinitiveOID",
  "DefinitiveOIDandIRI", "DefinitiveObjIdComponentList",
  "DefinitiveObjIdComponent", "DefinitiveNumberForm",
  "DefinitiveNameAndNumberForm", "EncodingReferenceDefault", "TagDefault",
  "ExtensionDefault", "ModuleBody", "Exports", "SymbolsExported",
  "Imports", "SymbolsImported", "SymbolsFromModuleList",
  "SymbolsFromModule", "GlobalModuleReference", "AssignedIdentifier",
  "SymbolList", "Symbol", "Reference", "AssignmentList", "Assignment",
  "DefinedType", "DefinedValue", "ExternalTypeReference", "TypeAssignment",
  "ValueAssignment", "Type", "BuiltinType", "NamedType", "Value",
  "BuiltinValue", "ReferencedValue", "BooleanType", "BooleanValue",
  "IntegerType", "NamedNumberList", "NamedNumber", "SignedNumber",
  "IntegerValue", "EnumeratedType", "Enumerations", "Enumeration",
  "EnumerationItem", "RealType", "BitStringType", "NamedBitList",
  "NamedBit", "OctetStringType", "NullType", "SequenceType",
  "ComponentTypeLists", "RootComponentTypeList", "ComponentTypeList",
  "ComponentType", "SequenceOfType", "SetType", "SetOfType", "ChoiceType",
  "AlternativeTypeLists", "RootAlternativeTypeList", "AlternativeTypeList",
  "SelectionType", "PrefixedType", "TaggedType", "Tag",
  "EncodingReference", "ClassNumber", "Class", "ObjectIdentifierType",
  "ObjectIdentifierValue", "ObjIdComponentsList", "ObjIdComponents",
  "NameForm", "NumberForm", "NameAndNumberForm", "RelativeOIDType",
  "IRIType", "IRIValue", "FirstArcIdentifier", "SubsequentArcIdentifier",
  "ArcIdentifier", "RelativeIRIType", "EmbeddedPDVType", "ExternalType",
  "TimeType", "TimeValue", "DateType", "TimeOfDayType", "DateTimeType",
  "DurationType", "CharacterStringType", "RestrictedCharacterStringType",
  "UnrestrictedCharacterStringType", "ConstrainedType",
  "TypeWithConstraint", "Constraint", "ConstraintSpec",
  "SubtypeConstraint", "ElementSetSpecs", "RootElementSetSpec",
  "AdditionalElementSetSpec", "ElementSetSpec", "Unions", "UElems",
  "Intersections", "IElems", "IntersectionElements", "Elems", "Exclusions",
  "UnionMark", "IntersectionMark", "Elements", "SubtypeElements",
  "SingleValue", "ContainedSubtype", "Includes", "ValueRange",
  "LowerEndpoint", "UpperEndpoint", "LowerEndValue", "UpperEndValue",
  "SizeConstraint", "TypeConstraint", "PermittedAlphabet",
  "InnerTypeConstraints", "SingleTypeConstraint",
  "MultipleTypeConstraints", "FullSpecification", "PartialSpecification",
  "TypeConstraints", "NamedConstraint", "ComponentConstraint",
  "ValueConstraint", "PresenceConstraint", "PatternConstraint",
  "PropertySettings", "ExceptionSpec", "ExceptionIdentification",
  "typereference", "identifier", "valuereference", "modulereference", YY_NULLPTR
  };

#if YYDEBUG
  const unsigned short int
  asn1_parser::yyrline_[] =
  {
       0,   268,   268,   269,   272,   299,   300,   301,   304,   307,
     308,   329,   330,   331,   332,   333,   336,   387,   388,   391,
     392,   395,   401,   402,   407,   408,   411,   414,   417,   420,
     421,   424,   425,   426,   429,   430,   433,   449,   450,   455,
     458,   461,   472,   484,   493,   510,   534,   535,   536,   547,
     555,   562,   563,   564,   567,   570,   574,   575,   579,   580,
     581,   584,   587,   591,   592,   595,   597,   599,   601,   605,
     606,   609,   611,   615,   616,   617,   620,   621,   624,   626,
     629,   631,   634,   636,   640,   644,   648,   649,   650,   653,
     655,   659,   663,   665,   667,   668,   669,   672,   674,   678,
     680,   689,   690,   697,   707,   737,   743,   750,   752,   754,
     756,   758,   763,   764,   765,   766,   767,   768,   769,   770,
     771,   772,   773,   774,   775,   776,   777,   778,   779,   780,
     781,   782,   783,   784,   785,   786,   787,   788,   789,   790,
     791,   792,   795,   799,   801,   803,   808,   813,   815,   817,
     820,   821,   822,   823,   825,   828,   837,   840,   841,   844,
     845,   848,   849,   852,   854,   858,   860,   864,   868,   872,
     875,   878,   884,   886,   890,   892,   900,   903,   904,   907,
     908,   911,   912,   926,   929,   932,   934,   942,   946,   948,
     950,   952,   956,   958,   962,   964,   966,   968,   979,   981,
     985,   987,   991,   993,   997,  1001,  1005,  1007,  1011,  1013,
    1020,  1023,  1027,  1029,  1031,  1035,  1039,  1040,  1043,  1045,
    1048,  1050,  1052,  1054,  1064,  1067,  1069,  1073,  1075,  1079,
    1081,  1083,  1087,  1091,  1093,  1096,  1100,  1112,  1115,  1121,
    1124,  1125,  1128,  1129,  1132,  1138,  1145,  1151,  1154,  1157,
    1160,  1163,  1166,  1169,  1170,  1173,  1174,  1175,  1176,  1177,
    1178,  1179,  1180,  1181,  1182,  1183,  1184,  1185,  1189,  1192,
    1193,  1196,  1197,  1198,  1199,  1200,  1201,  1202,  1203,  1206,
    1209,  1210,  1213,  1216,  1217,  1218,  1221,  1224,  1227,  1228,
    1231,  1232,  1235,  1238,  1239,  1242,  1245,  1246,  1249,  1252,
    1255,  1256,  1259,  1260,  1263,  1264,  1265,  1268,  1269,  1270,
    1271,  1272,  1273,  1274,  1275,  1276,  1282,  1285,  1288,  1291,
    1294,  1295,  1298,  1299,  1302,  1303,  1306,  1307,  1310,  1313,
    1316,  1319,  1320,  1323,  1326,  1327,  1330,  1333,  1336,  1337,
    1340,  1343,  1346,  1347,  1350,  1351,  1352,  1353,  1356,  1359,
    1362,  1363,  1366,  1367,  1368,  1371,  1375,  1379,  1383
  };

  // Print the state stack on the debug stream.
  void
  asn1_parser::yystack_print_ ()
  {
    *yycdebug_ << "Stack now";
    for (stack_type::const_iterator
           i = yystack_.begin (),
           i_end = yystack_.end ();
         i != i_end; ++i)
      *yycdebug_ << ' ' << i->state;
    *yycdebug_ << std::endl;
  }

  // Report on the debug stream that the rule \a yyrule is going to be reduced.
  void
  asn1_parser::yy_reduce_print_ (int yyrule)
  {
    unsigned int yylno = yyrline_[yyrule];
    int yynrhs = yyr2_[yyrule];
    // Print the symbols being reduced, and their result.
    *yycdebug_ << "Reducing stack by rule " << yyrule - 1
               << " (line " << yylno << "):" << std::endl;
    // The symbols being reduced.
    for (int yyi = 0; yyi < yynrhs; yyi++)
      YY_SYMBOL_PRINT ("   $" << yyi + 1 << " =",
                       yystack_[(yynrhs) - (yyi + 1)]);
  }
#endif // YYDEBUG



} // yy
#line 6967 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:1167
#line 1386 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:1168



namespace yy {

    asn1_parser::symbol_type yylex(Context& context)
    {
        const char* start = context.cursor;
        const char* YYMARKER = nullptr;
        context.location.step();
        // Lexer

#line 6983 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
{
	char yych;
	unsigned int yyaccept = 0;
	yych = *context.cursor;
	switch (yych) {
	case 0x00:	goto yy2;
	case 0x08:
	case '\t':
	case '\v':
	case '\f':
	case ' ':	goto yy6;
	case '\n':	goto yy8;
	case '\r':	goto yy10;
	case '"':	goto yy11;
	case '(':	goto yy13;
	case ')':	goto yy15;
	case ',':	goto yy17;
	case '-':	goto yy19;
	case '.':	goto yy21;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy23;
	case ':':	goto yy26;
	case ';':	goto yy28;
	case 'A':	goto yy30;
	case 'B':	goto yy31;
	case 'C':	goto yy32;
	case 'D':	goto yy33;
	case 'E':	goto yy34;
	case 'F':	goto yy35;
	case 'G':	goto yy36;
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'Q':
	case 'X':
	case 'Y':
	case 'Z':	goto yy37;
	case 'I':	goto yy38;
	case 'M':	goto yy39;
	case 'N':	goto yy40;
	case 'O':	goto yy41;
	case 'P':	goto yy42;
	case 'R':	goto yy43;
	case 'S':	goto yy44;
	case 'T':	goto yy45;
	case 'U':	goto yy46;
	case 'V':	goto yy47;
	case 'W':	goto yy48;
	case '[':	goto yy49;
	case ']':	goto yy51;
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy53;
	case '{':	goto yy54;
	case '}':	goto yy56;
	default:	goto yy4;
	}
yy2:
	++context.cursor;
#line 7091 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_END_OF_FILE(context.location); }
#line 7077 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy4:
	++context.cursor;
yy5:
#line 7112 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ throw(std::runtime_error(std::string("Unknown symbol!") + *start)); context.location.columns(context.cursor - start); return asn1_parser::symbol_type(asn1_parser::token_type(*start), context.location); }
#line 7083 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy6:
	++context.cursor;
#line 7095 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); context.location.columns(); return yylex(context); }
#line 7088 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy8:
	++context.cursor;
#line 7094 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); context.location.lines();   return yylex(context); }
#line 7093 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy10:
	yych = *++context.cursor;
	switch (yych) {
	case '\n':	goto yy8;
	default:	goto yy5;
	}
yy11:
	yych = *++context.cursor;
	switch (yych) {
	case '"':	goto yy58;
	case '\\':	goto yy60;
	default:	goto yy11;
	}
yy13:
	++context.cursor;
#line 7103 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPEN_PARENTHESIS (context.location); }
#line 7111 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy15:
	++context.cursor;
#line 7104 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLOSE_PARENTHESIS (context.location); }
#line 7116 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy17:
	++context.cursor;
#line 7109 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COMMA (context.location); }
#line 7121 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy19:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy62;
	default:	goto yy20;
	}
yy20:
#line 7110 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_HYPHEN_MINUS (context.location); }
#line 7131 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy21:
	yych = *++context.cursor;
	switch (yych) {
	case '.':	goto yy65;
	default:	goto yy22;
	}
yy22:
#line 7111 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_FULL_STOP (context.location); }
#line 7141 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy23:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy23;
	default:	goto yy25;
	}
yy25:
#line 7084 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_number(std::stoll(std::string(start, context.cursor)), context.location); }
#line 7160 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy26:
	yyaccept = 0;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case ':':	goto yy67;
	default:	goto yy27;
	}
yy27:
#line 7107 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COLON (context.location); }
#line 7171 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy28:
	++context.cursor;
#line 7108 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SEMICOLON (context.location); }
#line 7176 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy30:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'M':
	case 'N':
	case 'O':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	case 'B':	goto yy72;
	case 'L':	goto yy73;
	case 'P':	goto yy74;
	case 'U':	goto yy75;
	default:	goto yy5;
	}
yy31:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'F':
	case 'G':
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'N':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	case 'E':	goto yy76;
	case 'I':	goto yy77;
	case 'M':	goto yy78;
	case 'O':	goto yy79;
	case 'Y':	goto yy80;
	default:	goto yy5;
	}
yy32:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'I':
	case 'J':
	case 'K':
	case 'M':
	case 'N':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	case 'H':	goto yy82;
	case 'L':	goto yy83;
	case 'O':	goto yy84;
	default:	goto yy5;
	}
yy33:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'B':
	case 'C':
	case 'D':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	case 'A':	goto yy85;
	case 'E':	goto yy86;
	case 'U':	goto yy87;
	default:	goto yy5;
	}
yy34:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	case 'M':	goto yy88;
	case 'N':	goto yy89;
	case 'X':	goto yy90;
	default:	goto yy5;
	}
yy35:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	case 'A':	goto yy91;
	case 'R':	goto yy92;
	default:	goto yy5;
	}
yy36:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	case 'e':	goto yy93;
	case 'r':	goto yy94;
	default:	goto yy5;
	}
yy37:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy5;
	}
yy38:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'B':
	case 'C':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	case 'A':	goto yy95;
	case 'D':	goto yy96;
	case 'M':	goto yy97;
	case 'N':	goto yy98;
	case 'S':	goto yy99;
	default:	goto yy5;
	}
yy39:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	case 'A':	goto yy100;
	case 'I':	goto yy101;
	default:	goto yy5;
	}
yy40:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	case 'O':	goto yy102;
	case 'U':	goto yy103;
	case 'u':	goto yy104;
	default:	goto yy5;
	}
yy41:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'D':
	case 'E':
	case 'G':
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	case 'B':	goto yy105;
	case 'C':	goto yy106;
	case 'F':	goto yy107;
	case 'I':	goto yy109;
	case 'P':	goto yy110;
	case 'b':	goto yy111;
	default:	goto yy5;
	}
yy42:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'B':
	case 'C':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	case 'A':	goto yy112;
	case 'D':	goto yy113;
	case 'L':	goto yy114;
	case 'R':	goto yy115;
	case 'r':	goto yy116;
	default:	goto yy5;
	}
yy43:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	case 'E':	goto yy117;
	default:	goto yy5;
	}
yy44:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'F':
	case 'G':
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	case 'E':	goto yy118;
	case 'I':	goto yy119;
	case 'T':	goto yy120;
	case 'Y':	goto yy121;
	default:	goto yy5;
	}
yy45:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '7':
	case '8':
	case '9':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	case '6':	goto yy122;
	case 'A':	goto yy123;
	case 'I':	goto yy124;
	case 'R':	goto yy125;
	case 'Y':	goto yy126;
	case 'e':	goto yy127;
	default:	goto yy5;
	}
yy46:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	case 'N':	goto yy128;
	case 'T':	goto yy129;
	case 'n':	goto yy130;
	default:	goto yy5;
	}
yy47:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	case 'i':	goto yy131;
	default:	goto yy5;
	}
yy48:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	case 'I':	goto yy132;
	default:	goto yy5;
	}
yy49:
	++context.cursor;
#line 7105 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPEN_SQUARE_BRACKET (context.location); }
#line 8492 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy51:
	++context.cursor;
#line 7106 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLOSE_SQUARE_BRACKET (context.location); }
#line 8497 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy53:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy133;
	default:	goto yy5;
	}
yy54:
	++context.cursor;
#line 7101 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPEN_BRACE (context.location); }
#line 8571 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy56:
	++context.cursor;
#line 7102 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLOSE_BRACE (context.location); }
#line 8576 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy58:
	++context.cursor;
#line 7086 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_cstring(std::string(start, context.cursor), context.location); }
#line 8581 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy60:
	yych = *++context.cursor;
	switch (yych) {
	case '\\':	goto yy60;
	default:	goto yy11;
	}
yy62:
	yyaccept = 1;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '\n':
	case '\r':	goto yy64;
	case '-':	goto yy136;
	default:	goto yy62;
	}
yy64:
#line 7080 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return yylex(context); }
#line 8600 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy65:
	yych = *++context.cursor;
	switch (yych) {
	case '.':	goto yy137;
	default:	goto yy66;
	}
yy66:
#line 7100 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_RANGE (context.location); }
#line 8610 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy67:
	yych = *++context.cursor;
	switch (yych) {
	case '=':	goto yy139;
	default:	goto yy68;
	}
yy68:
	context.cursor = YYMARKER;
	if (yyaccept == 0) {
		goto yy27;
	} else {
		goto yy64;
	}
yy69:
	yych = *++context.cursor;
yy70:
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy71;
	}
yy71:
#line 7087 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GENERIC_IDENTIFIER_UPPERCASE(santize_name(std::string(start, context.cursor)), context.location); }
#line 8697 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy72:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy141;
	default:	goto yy70;
	}
yy73:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy142;
	default:	goto yy70;
	}
yy74:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy144;
	default:	goto yy70;
	}
yy75:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy145;
	default:	goto yy70;
	}
yy76:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy146;
	default:	goto yy70;
	}
yy77:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy147;
	default:	goto yy70;
	}
yy78:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy149;
	default:	goto yy70;
	}
yy79:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy150;
	default:	goto yy70;
	}
yy80:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy81;
	}
yy81:
#line 6994 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BY (context.location); }
#line 8818 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy82:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy151;
	case 'O':	goto yy152;
	default:	goto yy70;
	}
yy83:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy153;
	default:	goto yy70;
	}
yy84:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy154;
	case 'N':	goto yy155;
	default:	goto yy70;
	}
yy85:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy156;
	default:	goto yy70;
	}
yy86:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy157;
	default:	goto yy70;
	}
yy87:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy158;
	default:	goto yy70;
	}
yy88:
	yych = *++context.cursor;
	switch (yych) {
	case 'B':	goto yy159;
	default:	goto yy70;
	}
yy89:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy160;
	case 'D':	goto yy161;
	case 'U':	goto yy163;
	default:	goto yy70;
	}
yy90:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy164;
	case 'P':	goto yy165;
	case 'T':	goto yy166;
	default:	goto yy70;
	}
yy91:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy167;
	default:	goto yy70;
	}
yy92:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy168;
	default:	goto yy70;
	}
yy93:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy169;
	default:	goto yy70;
	}
yy94:
	yych = *++context.cursor;
	switch (yych) {
	case 'a':	goto yy170;
	default:	goto yy70;
	}
yy95:
	yych = *++context.cursor;
	switch (yych) {
	case '5':	goto yy171;
	default:	goto yy70;
	}
yy96:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy172;
	default:	goto yy70;
	}
yy97:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy173;
	default:	goto yy70;
	}
yy98:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy174;
	case 'S':	goto yy175;
	case 'T':	goto yy176;
	default:	goto yy70;
	}
yy99:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy177;
	default:	goto yy70;
	}
yy100:
	yych = *++context.cursor;
	switch (yych) {
	case 'X':	goto yy178;
	default:	goto yy70;
	}
yy101:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy180;
	default:	goto yy70;
	}
yy102:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy182;
	default:	goto yy70;
	}
yy103:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy183;
	default:	goto yy70;
	}
yy104:
	yych = *++context.cursor;
	switch (yych) {
	case 'm':	goto yy184;
	default:	goto yy70;
	}
yy105:
	yych = *++context.cursor;
	switch (yych) {
	case 'J':	goto yy185;
	default:	goto yy70;
	}
yy106:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy186;
	default:	goto yy70;
	}
yy107:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy108;
	}
yy108:
#line 7042 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OF (context.location); }
#line 9049 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy109:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy187;
	default:	goto yy70;
	}
yy110:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy188;
	default:	goto yy70;
	}
yy111:
	yych = *++context.cursor;
	switch (yych) {
	case 'j':	goto yy189;
	default:	goto yy70;
	}
yy112:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy190;
	default:	goto yy70;
	}
yy113:
	yych = *++context.cursor;
	switch (yych) {
	case 'V':	goto yy191;
	default:	goto yy70;
	}
yy114:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy193;
	default:	goto yy70;
	}
yy115:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy194;
	case 'I':	goto yy195;
	default:	goto yy70;
	}
yy116:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy196;
	default:	goto yy70;
	}
yy117:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy197;
	case 'L':	goto yy198;
	default:	goto yy70;
	}
yy118:
	yych = *++context.cursor;
	switch (yych) {
	case 'Q':	goto yy199;
	case 'T':	goto yy200;
	default:	goto yy70;
	}
yy119:
	yych = *++context.cursor;
	switch (yych) {
	case 'Z':	goto yy202;
	default:	goto yy70;
	}
yy120:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy203;
	default:	goto yy70;
	}
yy121:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy204;
	default:	goto yy70;
	}
yy122:
	yych = *++context.cursor;
	switch (yych) {
	case '1':	goto yy205;
	default:	goto yy70;
	}
yy123:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy206;
	default:	goto yy70;
	}
yy124:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy207;
	default:	goto yy70;
	}
yy125:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy208;
	default:	goto yy70;
	}
yy126:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy209;
	default:	goto yy70;
	}
yy127:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy210;
	default:	goto yy70;
	}
yy128:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy211;
	default:	goto yy70;
	}
yy129:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy212;
	case 'F':	goto yy213;
	default:	goto yy70;
	}
yy130:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy214;
	default:	goto yy70;
	}
yy131:
	yych = *++context.cursor;
	switch (yych) {
	case 'd':	goto yy215;
	case 's':	goto yy216;
	default:	goto yy70;
	}
yy132:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy217;
	default:	goto yy70;
	}
yy133:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy133;
	default:	goto yy135;
	}
yy135:
#line 7088 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GENERIC_IDENTIFIER_LOWERCASE(santize_name(std::string(start, context.cursor)), context.location); }
#line 9271 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy136:
	yych = *++context.cursor;
	switch (yych) {
	case '\n':
	case '\r':	goto yy68;
	case '-':	goto yy218;
	default:	goto yy62;
	}
yy137:
	++context.cursor;
#line 7099 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ELIPSIS (context.location); }
#line 9284 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy139:
	++context.cursor;
#line 7098 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DEFINED_AS (context.location); }
#line 9289 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy141:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy220;
	case 'T':	goto yy221;
	default:	goto yy70;
	}
yy142:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy143;
	}
yy143:
#line 6987 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ALL (context.location); }
#line 9369 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy144:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy222;
	default:	goto yy70;
	}
yy145:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy223;
	default:	goto yy70;
	}
yy146:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy224;
	default:	goto yy70;
	}
yy147:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy148;
	}
yy148:
#line 6991 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BIT (context.location); }
#line 9460 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy149:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy225;
	default:	goto yy70;
	}
yy150:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy226;
	default:	goto yy70;
	}
yy151:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy227;
	default:	goto yy70;
	}
yy152:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy228;
	default:	goto yy70;
	}
yy153:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy229;
	default:	goto yy70;
	}
yy154:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy230;
	default:	goto yy70;
	}
yy155:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy231;
	case 'T':	goto yy232;
	default:	goto yy70;
	}
yy156:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy233;
	default:	goto yy70;
	}
yy157:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy235;
	case 'I':	goto yy236;
	default:	goto yy70;
	}
yy158:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy237;
	default:	goto yy70;
	}
yy159:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy238;
	default:	goto yy70;
	}
yy160:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy239;
	default:	goto yy70;
	}
yy161:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy162;
	}
yy162:
#line 7010 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_END (context.location); }
#line 9607 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy163:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy240;
	default:	goto yy70;
	}
yy164:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy241;
	default:	goto yy70;
	}
yy165:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy242;
	case 'O':	goto yy243;
	default:	goto yy70;
	}
yy166:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy244;
	default:	goto yy70;
	}
yy167:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy245;
	default:	goto yy70;
	}
yy168:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy246;
	default:	goto yy70;
	}
yy169:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy248;
	default:	goto yy70;
	}
yy170:
	yych = *++context.cursor;
	switch (yych) {
	case 'p':	goto yy249;
	default:	goto yy70;
	}
yy171:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy250;
	default:	goto yy70;
	}
yy172:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy251;
	default:	goto yy70;
	}
yy173:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy252;
	case 'O':	goto yy253;
	default:	goto yy70;
	}
yy174:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy254;
	default:	goto yy70;
	}
yy175:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy255;
	default:	goto yy70;
	}
yy176:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy256;
	default:	goto yy70;
	}
yy177:
	yych = *++context.cursor;
	switch (yych) {
	case '6':	goto yy257;
	default:	goto yy70;
	}
yy178:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy179;
	}
yy179:
#line 7033 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_MAX (context.location); }
#line 9772 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy180:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	case 'U':	goto yy258;
	default:	goto yy181;
	}
yy181:
#line 7034 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_MIN (context.location); }
#line 9845 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy182:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy259;
	default:	goto yy70;
	}
yy183:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy260;
	default:	goto yy70;
	}
yy184:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy262;
	default:	goto yy70;
	}
yy185:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy263;
	default:	goto yy70;
	}
yy186:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy264;
	default:	goto yy70;
	}
yy187:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy265;
	default:	goto yy70;
	}
yy188:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy266;
	default:	goto yy70;
	}
yy189:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy267;
	default:	goto yy70;
	}
yy190:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy268;
	default:	goto yy70;
	}
yy191:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy192;
	}
yy192:
#line 7046 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PDV (context.location); }
#line 9972 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy193:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy269;
	default:	goto yy70;
	}
yy194:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy270;
	default:	goto yy70;
	}
yy195:
	yych = *++context.cursor;
	switch (yych) {
	case 'V':	goto yy271;
	default:	goto yy70;
	}
yy196:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy272;
	default:	goto yy70;
	}
yy197:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy273;
	default:	goto yy70;
	}
yy198:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy275;
	default:	goto yy70;
	}
yy199:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy276;
	default:	goto yy70;
	}
yy200:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	case 'T':	goto yy277;
	default:	goto yy201;
	}
yy201:
#line 7055 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SET (context.location); }
#line 10087 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy202:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy278;
	default:	goto yy70;
	}
yy203:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy280;
	default:	goto yy70;
	}
yy204:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy281;
	default:	goto yy70;
	}
yy205:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy282;
	default:	goto yy70;
	}
yy206:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy283;
	default:	goto yy70;
	}
yy207:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy285;
	default:	goto yy70;
	}
yy208:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy287;
	default:	goto yy70;
	}
yy209:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy289;
	default:	goto yy70;
	}
yy210:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy290;
	default:	goto yy70;
	}
yy211:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy291;
	case 'Q':	goto yy292;
	case 'V':	goto yy293;
	default:	goto yy70;
	}
yy212:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy294;
	default:	goto yy70;
	}
yy213:
	yych = *++context.cursor;
	switch (yych) {
	case '8':	goto yy295;
	default:	goto yy70;
	}
yy214:
	yych = *++context.cursor;
	switch (yych) {
	case 'v':	goto yy296;
	default:	goto yy70;
	}
yy215:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy297;
	default:	goto yy70;
	}
yy216:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy298;
	default:	goto yy70;
	}
yy217:
	yych = *++context.cursor;
	switch (yych) {
	case 'H':	goto yy299;
	default:	goto yy70;
	}
yy218:
	++context.cursor;
#line 7079 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return yylex(context); }
#line 10190 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy220:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy301;
	default:	goto yy70;
	}
yy221:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy302;
	default:	goto yy70;
	}
yy222:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy303;
	default:	goto yy70;
	}
yy223:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy304;
	default:	goto yy70;
	}
yy224:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy305;
	default:	goto yy70;
	}
yy225:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy307;
	default:	goto yy70;
	}
yy226:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy308;
	default:	goto yy70;
	}
yy227:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy309;
	default:	goto yy70;
	}
yy228:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy310;
	default:	goto yy70;
	}
yy229:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy311;
	default:	goto yy70;
	}
yy230:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy313;
	default:	goto yy70;
	}
yy231:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy314;
	default:	goto yy70;
	}
yy232:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy315;
	default:	goto yy70;
	}
yy233:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	case '_':	goto yy316;
	default:	goto yy234;
	}
yy234:
#line 7002 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DATE (context.location); }
#line 10341 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy235:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy317;
	default:	goto yy70;
	}
yy236:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy318;
	default:	goto yy70;
	}
yy237:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy319;
	default:	goto yy70;
	}
yy238:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy320;
	default:	goto yy70;
	}
yy239:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy321;
	default:	goto yy70;
	}
yy240:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy322;
	default:	goto yy70;
	}
yy241:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy323;
	default:	goto yy70;
	}
yy242:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy324;
	default:	goto yy70;
	}
yy243:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy325;
	default:	goto yy70;
	}
yy244:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy326;
	case 'R':	goto yy327;
	default:	goto yy70;
	}
yy245:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy328;
	default:	goto yy70;
	}
yy246:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy247;
	}
yy247:
#line 7018 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_FROM (context.location); }
#line 10481 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy248:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy330;
	default:	goto yy70;
	}
yy249:
	yych = *++context.cursor;
	switch (yych) {
	case 'h':	goto yy331;
	default:	goto yy70;
	}
yy250:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy332;
	default:	goto yy70;
	}
yy251:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy333;
	default:	goto yy70;
	}
yy252:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy334;
	default:	goto yy70;
	}
yy253:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy335;
	default:	goto yy70;
	}
yy254:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy336;
	default:	goto yy70;
	}
yy255:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy337;
	case 'R':	goto yy338;
	default:	goto yy70;
	}
yy256:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy339;
	case 'R':	goto yy340;
	default:	goto yy70;
	}
yy257:
	yych = *++context.cursor;
	switch (yych) {
	case '4':	goto yy341;
	default:	goto yy70;
	}
yy258:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy342;
	default:	goto yy70;
	}
yy259:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy343;
	default:	goto yy70;
	}
yy260:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy261;
	}
yy261:
#line 7037 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ASN_NULL (context.location); }
#line 10628 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy262:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy344;
	default:	goto yy70;
	}
yy263:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy345;
	default:	goto yy70;
	}
yy264:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy346;
	default:	goto yy70;
	}
yy265:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy348;
	default:	goto yy70;
	}
yy266:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy349;
	default:	goto yy70;
	}
yy267:
	yych = *++context.cursor;
	switch (yych) {
	case 'c':	goto yy350;
	default:	goto yy70;
	}
yy268:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy351;
	default:	goto yy70;
	}
yy269:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy352;
	default:	goto yy70;
	}
yy270:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy353;
	default:	goto yy70;
	}
yy271:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy354;
	default:	goto yy70;
	}
yy272:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy355;
	default:	goto yy70;
	}
yy273:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy274;
	}
yy274:
#line 7051 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_REAL (context.location); }
#line 10767 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy275:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy356;
	default:	goto yy70;
	}
yy276:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy357;
	default:	goto yy70;
	}
yy277:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy358;
	default:	goto yy70;
	}
yy278:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy279;
	}
yy279:
#line 7057 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SIZE (context.location); }
#line 10858 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy280:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy359;
	default:	goto yy70;
	}
yy281:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy360;
	default:	goto yy70;
	}
yy282:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy361;
	default:	goto yy70;
	}
yy283:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy284;
	}
yy284:
#line 7061 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TAGS (context.location); }
#line 10949 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy285:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	case '_':	goto yy362;
	default:	goto yy286;
	}
yy286:
#line 7063 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TIME (context.location); }
#line 11022 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy287:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy288;
	}
yy288:
#line 7065 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TRUE (context.location); }
#line 11095 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy289:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy363;
	default:	goto yy70;
	}
yy290:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy364;
	default:	goto yy70;
	}
yy291:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy365;
	default:	goto yy70;
	}
yy292:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy367;
	default:	goto yy70;
	}
yy293:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy368;
	default:	goto yy70;
	}
yy294:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy369;
	default:	goto yy70;
	}
yy295:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy370;
	default:	goto yy70;
	}
yy296:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy371;
	default:	goto yy70;
	}
yy297:
	yych = *++context.cursor;
	switch (yych) {
	case 'o':	goto yy372;
	default:	goto yy70;
	}
yy298:
	yych = *++context.cursor;
	switch (yych) {
	case 'b':	goto yy373;
	default:	goto yy70;
	}
yy299:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy300;
	}
yy300:
#line 7075 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_WITH (context.location); }
#line 11228 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy301:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy374;
	default:	goto yy70;
	}
yy302:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy376;
	default:	goto yy70;
	}
yy303:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy377;
	default:	goto yy70;
	}
yy304:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy378;
	default:	goto yy70;
	}
yy305:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy306;
	}
yy306:
#line 6990 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BEGIN (context.location); }
#line 11325 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy307:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy379;
	default:	goto yy70;
	}
yy308:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy380;
	default:	goto yy70;
	}
yy309:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy381;
	default:	goto yy70;
	}
yy310:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy382;
	default:	goto yy70;
	}
yy311:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy312;
	}
yy312:
#line 6997 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLASS (context.location); }
#line 11422 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy313:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy384;
	default:	goto yy70;
	}
yy314:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy385;
	default:	goto yy70;
	}
yy315:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy386;
	default:	goto yy70;
	}
yy316:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy387;
	default:	goto yy70;
	}
yy317:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy388;
	default:	goto yy70;
	}
yy318:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy389;
	default:	goto yy70;
	}
yy319:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy390;
	default:	goto yy70;
	}
yy320:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy391;
	default:	goto yy70;
	}
yy321:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy392;
	case 'I':	goto yy393;
	default:	goto yy70;
	}
yy322:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy394;
	default:	goto yy70;
	}
yy323:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy395;
	default:	goto yy70;
	}
yy324:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy397;
	default:	goto yy70;
	}
yy325:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy398;
	default:	goto yy70;
	}
yy326:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy399;
	default:	goto yy70;
	}
yy327:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy400;
	default:	goto yy70;
	}
yy328:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy329;
	}
yy329:
#line 7017 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_FALSE (context.location); }
#line 11586 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy330:
	yych = *++context.cursor;
	switch (yych) {
	case 'a':	goto yy401;
	default:	goto yy70;
	}
yy331:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy402;
	default:	goto yy70;
	}
yy332:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy403;
	default:	goto yy70;
	}
yy333:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy404;
	default:	goto yy70;
	}
yy334:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy405;
	case 'E':	goto yy406;
	default:	goto yy70;
	}
yy335:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy407;
	default:	goto yy70;
	}
yy336:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy408;
	default:	goto yy70;
	}
yy337:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy409;
	default:	goto yy70;
	}
yy338:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy410;
	default:	goto yy70;
	}
yy339:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy411;
	default:	goto yy70;
	}
yy340:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy412;
	default:	goto yy70;
	}
yy341:
	yych = *++context.cursor;
	switch (yych) {
	case '6':	goto yy413;
	default:	goto yy70;
	}
yy342:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy414;
	default:	goto yy70;
	}
yy343:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy415;
	default:	goto yy70;
	}
yy344:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy416;
	default:	goto yy70;
	}
yy345:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy417;
	default:	goto yy70;
	}
yy346:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy347;
	}
yy347:
#line 7041 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OCTET (context.location); }
#line 11756 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy348:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy419;
	default:	goto yy70;
	}
yy349:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy420;
	default:	goto yy70;
	}
yy350:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy421;
	default:	goto yy70;
	}
yy351:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy422;
	default:	goto yy70;
	}
yy352:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy423;
	default:	goto yy70;
	}
yy353:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy424;
	default:	goto yy70;
	}
yy354:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy425;
	default:	goto yy70;
	}
yy355:
	yych = *++context.cursor;
	switch (yych) {
	case 'a':	goto yy426;
	default:	goto yy70;
	}
yy356:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy427;
	default:	goto yy70;
	}
yy357:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy428;
	default:	goto yy70;
	}
yy358:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy429;
	default:	goto yy70;
	}
yy359:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy430;
	default:	goto yy70;
	}
yy360:
	yych = *++context.cursor;
	switch (yych) {
	case 'X':	goto yy432;
	default:	goto yy70;
	}
yy361:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy434;
	default:	goto yy70;
	}
yy362:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy435;
	default:	goto yy70;
	}
yy363:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy436;
	default:	goto yy70;
	}
yy364:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy437;
	default:	goto yy70;
	}
yy365:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy366;
	}
yy366:
#line 7067 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UNION (context.location); }
#line 11931 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy367:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy438;
	default:	goto yy70;
	}
yy368:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy440;
	default:	goto yy70;
	}
yy369:
	yych = *++context.cursor;
	switch (yych) {
	case 'm':	goto yy441;
	default:	goto yy70;
	}
yy370:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy442;
	default:	goto yy70;
	}
yy371:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy443;
	default:	goto yy70;
	}
yy372:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy444;
	default:	goto yy70;
	}
yy373:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy445;
	default:	goto yy70;
	}
yy374:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy375;
	}
yy375:
#line 6985 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ABSENT (context.location); }
#line 12046 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy376:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy446;
	default:	goto yy70;
	}
yy377:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy447;
	default:	goto yy70;
	}
yy378:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy448;
	default:	goto yy70;
	}
yy379:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy449;
	default:	goto yy70;
	}
yy380:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy450;
	default:	goto yy70;
	}
yy381:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy452;
	default:	goto yy70;
	}
yy382:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy383;
	}
yy383:
#line 6996 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CHOICE (context.location); }
#line 12155 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy384:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy453;
	default:	goto yy70;
	}
yy385:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy454;
	default:	goto yy70;
	}
yy386:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy455;
	default:	goto yy70;
	}
yy387:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy456;
	default:	goto yy70;
	}
yy388:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy457;
	default:	goto yy70;
	}
yy389:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy459;
	default:	goto yy70;
	}
yy390:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy460;
	default:	goto yy70;
	}
yy391:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy461;
	default:	goto yy70;
	}
yy392:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy462;
	default:	goto yy70;
	}
yy393:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy464;
	default:	goto yy70;
	}
yy394:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy465;
	default:	goto yy70;
	}
yy395:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy396;
	}
yy396:
#line 7012 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXCEPT (context.location); }
#line 12294 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy397:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy466;
	default:	goto yy70;
	}
yy398:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy467;
	default:	goto yy70;
	}
yy399:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy469;
	default:	goto yy70;
	}
yy400:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy470;
	default:	goto yy70;
	}
yy401:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy471;
	default:	goto yy70;
	}
yy402:
	yych = *++context.cursor;
	switch (yych) {
	case 'c':	goto yy472;
	default:	goto yy70;
	}
yy403:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy473;
	default:	goto yy70;
	}
yy404:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy474;
	default:	goto yy70;
	}
yy405:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy475;
	default:	goto yy70;
	}
yy406:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy476;
	default:	goto yy70;
	}
yy407:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy478;
	default:	goto yy70;
	}
yy408:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy480;
	default:	goto yy70;
	}
yy409:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy481;
	default:	goto yy70;
	}
yy410:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy482;
	default:	goto yy70;
	}
yy411:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy483;
	default:	goto yy70;
	}
yy412:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy485;
	default:	goto yy70;
	}
yy413:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy486;
	default:	goto yy70;
	}
yy414:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy487;
	default:	goto yy70;
	}
yy415:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy488;
	default:	goto yy70;
	}
yy416:
	yych = *++context.cursor;
	switch (yych) {
	case 'c':	goto yy489;
	default:	goto yy70;
	}
yy417:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy418;
	}
yy418:
#line 7039 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OBJECT (context.location); }
#line 12487 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy419:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy490;
	default:	goto yy70;
	}
yy420:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy492;
	default:	goto yy70;
	}
yy421:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy493;
	default:	goto yy70;
	}
yy422:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy494;
	default:	goto yy70;
	}
yy423:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy496;
	default:	goto yy70;
	}
yy424:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy497;
	default:	goto yy70;
	}
yy425:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy499;
	default:	goto yy70;
	}
yy426:
	yych = *++context.cursor;
	switch (yych) {
	case 'b':	goto yy501;
	default:	goto yy70;
	}
yy427:
	yych = *++context.cursor;
	switch (yych) {
	case 'V':	goto yy502;
	default:	goto yy70;
	}
yy428:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy503;
	default:	goto yy70;
	}
yy429:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy504;
	default:	goto yy70;
	}
yy430:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy431;
	}
yy431:
#line 7058 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_STRING (context.location); }
#line 12626 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy432:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy433;
	}
yy433:
#line 7059 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SYNTAX (context.location); }
#line 12699 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy434:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy505;
	default:	goto yy70;
	}
yy435:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy506;
	default:	goto yy70;
	}
yy436:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy507;
	default:	goto yy70;
	}
yy437:
	yych = *++context.cursor;
	switch (yych) {
	case 'x':	goto yy508;
	default:	goto yy70;
	}
yy438:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy439;
	}
yy439:
#line 7068 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UNIQUE (context.location); }
#line 12796 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy440:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy509;
	default:	goto yy70;
	}
yy441:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy510;
	default:	goto yy70;
	}
yy442:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy512;
	default:	goto yy70;
	}
yy443:
	yych = *++context.cursor;
	switch (yych) {
	case 's':	goto yy513;
	default:	goto yy70;
	}
yy444:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy514;
	default:	goto yy70;
	}
yy445:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy515;
	default:	goto yy70;
	}
yy446:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy516;
	default:	goto yy70;
	}
yy447:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy517;
	default:	goto yy70;
	}
yy448:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy518;
	default:	goto yy70;
	}
yy449:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy519;
	default:	goto yy70;
	}
yy450:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy451;
	}
yy451:
#line 6993 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BOOLEAN (context.location); }
#line 12929 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy452:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy520;
	default:	goto yy70;
	}
yy453:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy521;
	default:	goto yy70;
	}
yy454:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy522;
	default:	goto yy70;
	}
yy455:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy523;
	default:	goto yy70;
	}
yy456:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy524;
	default:	goto yy70;
	}
yy457:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy458;
	}
yy458:
#line 7004 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DEFAULT (context.location); }
#line 13032 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy459:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy525;
	default:	goto yy70;
	}
yy460:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy526;
	default:	goto yy70;
	}
yy461:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy528;
	default:	goto yy70;
	}
yy462:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy463;
	}
yy463:
#line 7008 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ENCODED (context.location); }
#line 13123 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy464:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy530;
	default:	goto yy70;
	}
yy465:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy531;
	default:	goto yy70;
	}
yy466:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy532;
	default:	goto yy70;
	}
yy467:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy468;
	}
yy468:
#line 7014 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXPORTS (context.location); }
#line 13214 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy469:
	yych = *++context.cursor;
	switch (yych) {
	case 'B':	goto yy534;
	default:	goto yy70;
	}
yy470:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy535;
	default:	goto yy70;
	}
yy471:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy537;
	case 'i':	goto yy538;
	default:	goto yy70;
	}
yy472:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy539;
	default:	goto yy70;
	}
yy473:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy540;
	default:	goto yy70;
	}
yy474:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy541;
	default:	goto yy70;
	}
yy475:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy542;
	default:	goto yy70;
	}
yy476:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy477;
	}
yy477:
#line 7025 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IMPLIED (context.location); }
#line 13330 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy478:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy479;
	}
yy479:
#line 7026 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IMPORTS (context.location); }
#line 13403 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy480:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy544;
	default:	goto yy70;
	}
yy481:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy546;
	default:	goto yy70;
	}
yy482:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy548;
	default:	goto yy70;
	}
yy483:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy484;
	}
yy484:
#line 7030 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INTEGER (context.location); }
#line 13494 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy485:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy549;
	default:	goto yy70;
	}
yy486:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy550;
	default:	goto yy70;
	}
yy487:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy551;
	default:	goto yy70;
	}
yy488:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy552;
	default:	goto yy70;
	}
yy489:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy553;
	default:	goto yy70;
	}
yy490:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy491;
	}
yy491:
#line 7043 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OID_IRI (context.location); }
#line 13597 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy492:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy554;
	default:	goto yy70;
	}
yy493:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy556;
	default:	goto yy70;
	}
yy494:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy495;
	}
yy495:
#line 7045 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PATTERN (context.location); }
#line 13682 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy496:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy557;
	default:	goto yy70;
	}
yy497:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy498;
	}
yy498:
#line 7048 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PRESENT (context.location); }
#line 13761 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy499:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy500;
	}
yy500:
#line 7050 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PRIVATE (context.location); }
#line 13834 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy501:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy558;
	default:	goto yy70;
	}
yy502:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy559;
	default:	goto yy70;
	}
yy503:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy560;
	default:	goto yy70;
	}
yy504:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy562;
	default:	goto yy70;
	}
yy505:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy564;
	default:	goto yy70;
	}
yy506:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy565;
	default:	goto yy70;
	}
yy507:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy566;
	default:	goto yy70;
	}
yy508:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy567;
	default:	goto yy70;
	}
yy509:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy568;
	default:	goto yy70;
	}
yy510:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy511;
	}
yy511:
#line 7071 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UTCTime (context.location); }
#line 13961 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy512:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy569;
	default:	goto yy70;
	}
yy513:
	yych = *++context.cursor;
	switch (yych) {
	case 'a':	goto yy570;
	default:	goto yy70;
	}
yy514:
	yych = *++context.cursor;
	switch (yych) {
	case 'x':	goto yy571;
	default:	goto yy70;
	}
yy515:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy572;
	default:	goto yy70;
	}
yy516:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy573;
	default:	goto yy70;
	}
yy517:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy574;
	default:	goto yy70;
	}
yy518:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy575;
	default:	goto yy70;
	}
yy519:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy577;
	default:	goto yy70;
	}
yy520:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy579;
	default:	goto yy70;
	}
yy521:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy581;
	default:	goto yy70;
	}
yy522:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy583;
	default:	goto yy70;
	}
yy523:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy584;
	default:	goto yy70;
	}
yy524:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy585;
	default:	goto yy70;
	}
yy525:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy587;
	default:	goto yy70;
	}
yy526:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy527;
	}
yy527:
#line 7006 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DURATION (context.location); }
#line 14118 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy528:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy529;
	}
yy529:
#line 7007 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EMBEDDED (context.location); }
#line 14191 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy530:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy588;
	default:	goto yy70;
	}
yy531:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy589;
	default:	goto yy70;
	}
yy532:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy533;
	}
yy533:
#line 7013 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXPLICIT (context.location); }
#line 14276 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy534:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy590;
	default:	goto yy70;
	}
yy535:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy536;
	}
yy536:
#line 7016 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXTERNAL (context.location); }
#line 14355 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy537:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy591;
	default:	goto yy70;
	}
yy538:
	yych = *++context.cursor;
	switch (yych) {
	case 'z':	goto yy592;
	default:	goto yy70;
	}
yy539:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy593;
	default:	goto yy70;
	}
yy540:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy594;
	default:	goto yy70;
	}
yy541:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy596;
	default:	goto yy70;
	}
yy542:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy543;
	}
yy543:
#line 7024 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IMPLICIT (context.location); }
#line 14458 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy544:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy545;
	}
yy545:
#line 7027 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INCLUDES (context.location); }
#line 14531 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy546:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy547;
	}
yy547:
#line 7028 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INSTANCE (context.location); }
#line 14604 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy548:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy597;
	default:	goto yy70;
	}
yy549:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy598;
	default:	goto yy70;
	}
yy550:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy599;
	default:	goto yy70;
	}
yy551:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy600;
	default:	goto yy70;
	}
yy552:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy601;
	default:	goto yy70;
	}
yy553:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy602;
	default:	goto yy70;
	}
yy554:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy555;
	}
yy555:
#line 7044 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPTIONAL (context.location); }
#line 14713 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy556:
	yych = *++context.cursor;
	switch (yych) {
	case 's':	goto yy603;
	default:	goto yy70;
	}
yy557:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy604;
	default:	goto yy70;
	}
yy558:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy605;
	default:	goto yy70;
	}
yy559:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy606;
	default:	goto yy70;
	}
yy560:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy561;
	}
yy561:
#line 7054 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SEQUENCE (context.location); }
#line 14810 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy562:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy563;
	}
yy563:
#line 7056 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SETTINGS (context.location); }
#line 14883 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy564:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy607;
	default:	goto yy70;
	}
yy565:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy609;
	default:	goto yy70;
	}
yy566:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy610;
	default:	goto yy70;
	}
yy567:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy611;
	default:	goto yy70;
	}
yy568:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy612;
	default:	goto yy70;
	}
yy569:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy614;
	default:	goto yy70;
	}
yy570:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy615;
	default:	goto yy70;
	}
yy571:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy616;
	default:	goto yy70;
	}
yy572:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy617;
	default:	goto yy70;
	}
yy573:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy618;
	default:	goto yy70;
	}
yy574:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy619;
	default:	goto yy70;
	}
yy575:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy576;
	}
yy576:
#line 6989 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_AUTOMATIC (context.location); }
#line 15022 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy577:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy578;
	}
yy578:
#line 6992 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BMPString (context.location); }
#line 15095 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy579:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy580;
	}
yy580:
#line 6995 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CHARACTER (context.location); }
#line 15168 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy581:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	case 'S':	goto yy620;
	default:	goto yy582;
	}
yy582:
#line 6998 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COMPONENT (context.location); }
#line 15241 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy583:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy622;
	default:	goto yy70;
	}
yy584:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy623;
	default:	goto yy70;
	}
yy585:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy586;
	}
yy586:
#line 7003 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DATE_TIME (context.location); }
#line 15326 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy587:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy625;
	default:	goto yy70;
	}
yy588:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy626;
	default:	goto yy70;
	}
yy589:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy627;
	default:	goto yy70;
	}
yy590:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy629;
	default:	goto yy70;
	}
yy591:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy630;
	default:	goto yy70;
	}
yy592:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy631;
	default:	goto yy70;
	}
yy593:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy632;
	default:	goto yy70;
	}
yy594:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy595;
	}
yy595:
#line 7022 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IA5String (context.location); }
#line 15441 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy596:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy633;
	default:	goto yy70;
	}
yy597:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy635;
	default:	goto yy70;
	}
yy598:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy636;
	default:	goto yy70;
	}
yy599:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy637;
	default:	goto yy70;
	}
yy600:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy638;
	default:	goto yy70;
	}
yy601:
	yych = *++context.cursor;
	switch (yych) {
	case 'B':	goto yy639;
	default:	goto yy70;
	}
yy602:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy640;
	default:	goto yy70;
	}
yy603:
	yych = *++context.cursor;
	switch (yych) {
	case 'c':	goto yy641;
	default:	goto yy70;
	}
yy604:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy642;
	default:	goto yy70;
	}
yy605:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy643;
	default:	goto yy70;
	}
yy606:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy644;
	default:	goto yy70;
	}
yy607:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy608;
	}
yy608:
#line 7060 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_T61String (context.location); }
#line 15580 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy609:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy645;
	default:	goto yy70;
	}
yy610:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy646;
	default:	goto yy70;
	}
yy611:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy647;
	default:	goto yy70;
	}
yy612:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy613;
	}
yy613:
#line 7069 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UNIVERSAL (context.location); }
#line 15671 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy614:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy648;
	default:	goto yy70;
	}
yy615:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy650;
	default:	goto yy70;
	}
yy616:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy651;
	default:	goto yy70;
	}
yy617:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy652;
	default:	goto yy70;
	}
yy618:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy653;
	default:	goto yy70;
	}
yy619:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy654;
	default:	goto yy70;
	}
yy620:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy621;
	}
yy621:
#line 6999 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COMPONENTS (context.location); }
#line 15780 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy622:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy656;
	default:	goto yy70;
	}
yy623:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy624;
	}
yy624:
#line 7001 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CONTAINING (context.location); }
#line 15859 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy625:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy658;
	default:	goto yy70;
	}
yy626:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy660;
	default:	goto yy70;
	}
yy627:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy628;
	}
yy628:
#line 7011 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ENUMERATED (context.location); }
#line 15944 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy629:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy661;
	default:	goto yy70;
	}
yy630:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy662;
	default:	goto yy70;
	}
yy631:
	yych = *++context.cursor;
	switch (yych) {
	case 'd':	goto yy663;
	default:	goto yy70;
	}
yy632:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy664;
	default:	goto yy70;
	}
yy633:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy634;
	}
yy634:
#line 7023 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IDENTIFIER (context.location); }
#line 16041 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy635:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy665;
	default:	goto yy70;
	}
yy636:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy666;
	default:	goto yy70;
	}
yy637:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy667;
	default:	goto yy70;
	}
yy638:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy668;
	default:	goto yy70;
	}
yy639:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy669;
	default:	goto yy70;
	}
yy640:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy670;
	default:	goto yy70;
	}
yy641:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy671;
	default:	goto yy70;
	}
yy642:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy672;
	default:	goto yy70;
	}
yy643:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy673;
	default:	goto yy70;
	}
yy644:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy674;
	default:	goto yy70;
	}
yy645:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy675;
	default:	goto yy70;
	}
yy646:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy677;
	default:	goto yy70;
	}
yy647:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy678;
	default:	goto yy70;
	}
yy648:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy649;
	}
yy649:
#line 7072 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UTF8String (context.location); }
#line 16192 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy650:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy679;
	default:	goto yy70;
	}
yy651:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy680;
	default:	goto yy70;
	}
yy652:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy681;
	default:	goto yy70;
	}
yy653:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy682;
	default:	goto yy70;
	}
yy654:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy655;
	}
yy655:
#line 6988 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_APPLICATION (context.location); }
#line 16289 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy656:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy657;
	}
yy657:
#line 7000 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CONSTRAINED (context.location); }
#line 16362 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy658:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy659;
	}
yy659:
#line 7005 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DEFINITIONS (context.location); }
#line 16435 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy660:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy683;
	default:	goto yy70;
	}
yy661:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy684;
	default:	goto yy70;
	}
yy662:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy685;
	default:	goto yy70;
	}
yy663:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy686;
	default:	goto yy70;
	}
yy664:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy687;
	default:	goto yy70;
	}
yy665:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy688;
	default:	goto yy70;
	}
yy666:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy690;
	default:	goto yy70;
	}
yy667:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy692;
	default:	goto yy70;
	}
yy668:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy694;
	default:	goto yy70;
	}
yy669:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy695;
	default:	goto yy70;
	}
yy670:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy697;
	default:	goto yy70;
	}
yy671:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy698;
	default:	goto yy70;
	}
yy672:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy699;
	default:	goto yy70;
	}
yy673:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy700;
	default:	goto yy70;
	}
yy674:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy701;
	default:	goto yy70;
	}
yy675:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy676;
	}
yy676:
#line 7064 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TIME_OF_DAY (context.location); }
#line 16598 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy677:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy703;
	default:	goto yy70;
	}
yy678:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy704;
	default:	goto yy70;
	}
yy679:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy705;
	default:	goto yy70;
	}
yy680:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy706;
	default:	goto yy70;
	}
yy681:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy707;
	default:	goto yy70;
	}
yy682:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy708;
	default:	goto yy70;
	}
yy683:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy709;
	default:	goto yy70;
	}
yy684:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy710;
	default:	goto yy70;
	}
yy685:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy712;
	default:	goto yy70;
	}
yy686:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy714;
	default:	goto yy70;
	}
yy687:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy715;
	default:	goto yy70;
	}
yy688:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy689;
	}
yy689:
#line 7029 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INSTRUCTIONS (context.location); }
#line 16737 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy690:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy691;
	}
yy691:
#line 7031 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INTERSECTION (context.location); }
#line 16810 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy692:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy693;
	}
yy693:
#line 7032 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ISO646String (context.location); }
#line 16883 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy694:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy717;
	default:	goto yy70;
	}
yy695:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy696;
	}
yy696:
#line 7036 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_NOT_A_NUMBER (context.location); }
#line 16962 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy697:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy718;
	default:	goto yy70;
	}
yy698:
	yych = *++context.cursor;
	switch (yych) {
	case 'p':	goto yy720;
	default:	goto yy70;
	}
yy699:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy721;
	default:	goto yy70;
	}
yy700:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy723;
	default:	goto yy70;
	}
yy701:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	case '_':	goto yy724;
	default:	goto yy702;
	}
yy702:
#line 7052 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_RELATIVE_OID (context.location); }
#line 17059 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy703:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy725;
	default:	goto yy70;
	}
yy704:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy726;
	default:	goto yy70;
	}
yy705:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy728;
	default:	goto yy70;
	}
yy706:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy729;
	default:	goto yy70;
	}
yy707:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy730;
	default:	goto yy70;
	}
yy708:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy732;
	default:	goto yy70;
	}
yy709:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy733;
	default:	goto yy70;
	}
yy710:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy711;
	}
yy711:
#line 7015 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXTENSIBILITY (context.location); }
#line 17174 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy712:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy713;
	}
yy713:
#line 7020 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GeneralString (context.location); }
#line 17247 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy714:
	yych = *++context.cursor;
	switch (yych) {
	case 'm':	goto yy734;
	default:	goto yy70;
	}
yy715:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy716;
	}
yy716:
#line 7021 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GraphicString (context.location); }
#line 17326 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy717:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy735;
	default:	goto yy70;
	}
yy718:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy719;
	}
yy719:
#line 7038 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_NumericString (context.location); }
#line 17405 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy720:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy737;
	default:	goto yy70;
	}
yy721:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy722;
	}
yy722:
#line 7047 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PLUS_INFINITY (context.location); }
#line 17484 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy723:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy738;
	default:	goto yy70;
	}
yy724:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy739;
	default:	goto yy70;
	}
yy725:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy740;
	default:	goto yy70;
	}
yy726:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy727;
	}
yy727:
#line 7062 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TeletexString (context.location); }
#line 17575 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy728:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy741;
	default:	goto yy70;
	}
yy729:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy742;
	default:	goto yy70;
	}
yy730:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy731;
	}
yy731:
#line 7074 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_VisibleString (context.location); }
#line 17660 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy732:
	yych = *++context.cursor;
	switch (yych) {
	case 'X':	goto yy744;
	default:	goto yy70;
	}
yy733:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy746;
	default:	goto yy70;
	}
yy734:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy747;
	default:	goto yy70;
	}
yy735:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy736;
	}
yy736:
#line 7035 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_MINUS_INFINITY (context.location); }
#line 17751 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy737:
	yych = *++context.cursor;
	switch (yych) {
	case 'o':	goto yy749;
	default:	goto yy70;
	}
yy738:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy750;
	default:	goto yy70;
	}
yy739:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy752;
	default:	goto yy70;
	}
yy740:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy753;
	default:	goto yy70;
	}
yy741:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy755;
	default:	goto yy70;
	}
yy742:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy743;
	}
yy743:
#line 7073 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_VideotexString (context.location); }
#line 17854 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy744:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy745;
	}
yy745:
#line 6986 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ABSTRACT_SYNTAX (context.location); }
#line 17927 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy746:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy757;
	default:	goto yy70;
	}
yy747:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy748;
	}
yy748:
#line 7019 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GeneralizedTime (context.location); }
#line 18006 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy749:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy759;
	default:	goto yy70;
	}
yy750:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy751;
	}
yy751:
#line 7049 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PrintableString (context.location); }
#line 18085 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy752:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy761;
	default:	goto yy70;
	}
yy753:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy754;
	}
yy754:
#line 7066 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TYPE_IDENTIFIER (context.location); }
#line 18164 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy755:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy756;
	}
yy756:
#line 7070 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UniversalString (context.location); }
#line 18237 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy757:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy758;
	}
yy758:
#line 7009 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ENCODING_CONTROL (context.location); }
#line 18310 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy759:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy760;
	}
yy760:
#line 7040 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ObjectDescriptor (context.location); }
#line 18383 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy761:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy69;
	default:	goto yy762;
	}
yy762:
#line 7053 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_RELATIVE_OID_IRI (context.location); }
#line 18456 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
}
#line 7113 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"

    }
}
