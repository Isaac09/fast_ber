/* Generated by re2c 1.1.1 */
#line 1 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
// A Bison parser, made by GNU Bison 3.0.4.

// Skeleton implementation for Bison LALR(1) parsers in C++

// Copyright (C) 2002-2015 Free Software Foundation, Inc.

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// As a special exception, you may create a larger work that contains
// part or all of the Bison parser skeleton and distribute that work
// under terms of your choice, so long as that work isn't itself a
// parser generator using the skeleton or a modified version thereof
// as a parser skeleton.  Alternatively, if you modify or redistribute
// the parser skeleton itself, you may (at your option) remove this
// special exception, which will cause the skeleton and the resulting
// Bison output files to be licensed under the GNU General Public
// License without this special exception.

// This special exception was added by the Free Software Foundation in
// version 2.2 of Bison.


// First part of user declarations.

#line 37 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:404

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

// //                    "%code requires" blocks.
#line 10 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:408

    #include "fast_ber/compiler/CompilerTypes.hpp"

#line 52 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:408

# include <cassert>
# include <cstdlib> // std::abort
# include <iostream>
# include <stdexcept>
# include <string>
# include <vector>
#include <typeinfo>
#ifndef YYASSERT
# include <cassert>
# define YYASSERT assert
#endif


#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif


namespace yy {
#line 127 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:408

  template <class T, class S = std::vector<T> >
  class stack
  {
  public:
    // Hide our reversed order.
    typedef typename S::reverse_iterator iterator;
    typedef typename S::const_reverse_iterator const_iterator;

    stack ()
      : seq_ ()
    {
      seq_.reserve (200);
    }

    stack (unsigned int n)
      : seq_ (n)
    {}

    inline
    T&
    operator[] (unsigned int i)
    {
      return seq_[seq_.size () - 1 - i];
    }

    inline
    const T&
    operator[] (unsigned int i) const
    {
      return seq_[seq_.size () - 1 - i];
    }

    /// Steal the contents of \a t.
    ///
    /// Close to move-semantics.
    inline
    void
    push (T& t)
    {
      seq_.push_back (T());
      operator[](0).move (t);
    }

    inline
    void
    pop (unsigned int n = 1)
    {
      for (; n; --n)
        seq_.pop_back ();
    }

    void
    clear ()
    {
      seq_.clear ();
    }

    inline
    typename S::size_type
    size () const
    {
      return seq_.size ();
    }

    inline
    const_iterator
    begin () const
    {
      return seq_.rbegin ();
    }

    inline
    const_iterator
    end () const
    {
      return seq_.rend ();
    }

  private:
    stack (const stack&);
    stack& operator= (const stack&);
    /// The wrapped container.
    S seq_;
  };

  /// Present a slice of the top of a stack.
  template <class T, class S = stack<T> >
  class slice
  {
  public:
    slice (const S& stack, unsigned int range)
      : stack_ (stack)
      , range_ (range)
    {}

    inline
    const T&
    operator [] (unsigned int i) const
    {
      return stack_[range_ - i];
    }

  private:
    const S& stack_;
    unsigned int range_;
  };

  /// Abstract a position.
  class position
  {
  public:
    /// Construct a position.
    explicit position (std::string* f = YY_NULLPTR,
                       unsigned int l = 1u,
                       unsigned int c = 1u)
      : filename (f)
      , line (l)
      , column (c)
    {
    }


    /// Initialization.
    void initialize (std::string* fn = YY_NULLPTR,
                     unsigned int l = 1u,
                     unsigned int c = 1u)
    {
      filename = fn;
      line = l;
      column = c;
    }

    /** \name Line and Column related manipulators
     ** \{ */
    /// (line related) Advance to the COUNT next lines.
    void lines (int count = 1)
    {
      if (count)
        {
          column = 1u;
          line = add_ (line, count, 1);
        }
    }

    /// (column related) Advance to the COUNT next columns.
    void columns (int count = 1)
    {
      column = add_ (column, count, 1);
    }
    /** \} */

    /// File name to which this position refers.
    std::string* filename;
    /// Current line number.
    unsigned int line;
    /// Current column number.
    unsigned int column;

  private:
    /// Compute max(min, lhs+rhs) (provided min <= lhs).
    static unsigned int add_ (unsigned int lhs, int rhs, unsigned int min)
    {
      return (0 < rhs || -static_cast<unsigned int>(rhs) < lhs
              ? rhs + lhs
              : min);
    }
  };

  /// Add \a width columns, in place.
  inline position&
  operator+= (position& res, int width)
  {
    res.columns (width);
    return res;
  }

  /// Add \a width columns.
  inline position
  operator+ (position res, int width)
  {
    return res += width;
  }

  /// Subtract \a width columns, in place.
  inline position&
  operator-= (position& res, int width)
  {
    return res += -width;
  }

  /// Subtract \a width columns.
  inline position
  operator- (position res, int width)
  {
    return res -= width;
  }

  /// Compare two position objects.
  inline bool
  operator== (const position& pos1, const position& pos2)
  {
    return (pos1.line == pos2.line
            && pos1.column == pos2.column
            && (pos1.filename == pos2.filename
                || (pos1.filename && pos2.filename
                    && *pos1.filename == *pos2.filename)));
  }

  /// Compare two position objects.
  inline bool
  operator!= (const position& pos1, const position& pos2)
  {
    return !(pos1 == pos2);
  }

  /** \brief Intercept output stream redirection.
   ** \param ostr the destination output stream
   ** \param pos a reference to the position to redirect
   */
  template <typename YYChar>
  inline std::basic_ostream<YYChar>&
  operator<< (std::basic_ostream<YYChar>& ostr, const position& pos)
  {
    if (pos.filename)
      ostr << *pos.filename << ':';
    return ostr << pos.line << '.' << pos.column;
  }

  /// Abstract a location.
  class location
  {
  public:

    /// Construct a location from \a b to \a e.
    location (const position& b, const position& e)
      : begin (b)
      , end (e)
    {
    }

    /// Construct a 0-width location in \a p.
    explicit location (const position& p = position ())
      : begin (p)
      , end (p)
    {
    }

    /// Construct a 0-width location in \a f, \a l, \a c.
    explicit location (std::string* f,
                       unsigned int l = 1u,
                       unsigned int c = 1u)
      : begin (f, l, c)
      , end (f, l, c)
    {
    }


    /// Initialization.
    void initialize (std::string* f = YY_NULLPTR,
                     unsigned int l = 1u,
                     unsigned int c = 1u)
    {
      begin.initialize (f, l, c);
      end = begin;
    }

    /** \name Line and Column related manipulators
     ** \{ */
  public:
    /// Reset initial location to final location.
    void step ()
    {
      begin = end;
    }

    /// Extend the current location to the COUNT next columns.
    void columns (int count = 1)
    {
      end += count;
    }

    /// Extend the current location to the COUNT next lines.
    void lines (int count = 1)
    {
      end.lines (count);
    }
    /** \} */


  public:
    /// Beginning of the located region.
    position begin;
    /// End of the located region.
    position end;
  };

  /// Join two locations, in place.
  inline location& operator+= (location& res, const location& end)
  {
    res.end = end.end;
    return res;
  }

  /// Join two locations.
  inline location operator+ (location res, const location& end)
  {
    return res += end;
  }

  /// Add \a width columns to the end position, in place.
  inline location& operator+= (location& res, int width)
  {
    res.columns (width);
    return res;
  }

  /// Add \a width columns to the end position.
  inline location operator+ (location res, int width)
  {
    return res += width;
  }

  /// Subtract \a width columns to the end position, in place.
  inline location& operator-= (location& res, int width)
  {
    return res += -width;
  }

  /// Subtract \a width columns to the end position.
  inline location operator- (location res, int width)
  {
    return res -= width;
  }

  /// Compare two location objects.
  inline bool
  operator== (const location& loc1, const location& loc2)
  {
    return loc1.begin == loc2.begin && loc1.end == loc2.end;
  }

  /// Compare two location objects.
  inline bool
  operator!= (const location& loc1, const location& loc2)
  {
    return !(loc1 == loc2);
  }

  /** \brief Intercept output stream redirection.
   ** \param ostr the destination output stream
   ** \param loc a reference to the location to redirect
   **
   ** Avoid duplicate information.
   */
  template <typename YYChar>
  inline std::basic_ostream<YYChar>&
  operator<< (std::basic_ostream<YYChar>& ostr, const location& loc)
  {
    unsigned int end_col = 0 < loc.end.column ? loc.end.column - 1 : 0;
    ostr << loc.begin;
    if (loc.end.filename
        && (!loc.begin.filename
            || *loc.begin.filename != *loc.end.filename))
      ostr << '-' << loc.end.filename << ':' << loc.end.line << '.' << end_col;
    else if (loc.begin.line < loc.end.line)
      ostr << '-' << loc.end.line << '.' << end_col;
    else if (loc.begin.column < end_col)
      ostr << '-' << end_col;
    return ostr;
  }


  /// A char[S] buffer to store and retrieve objects.
  ///
  /// Sort of a variant, but does not keep track of the nature
  /// of the stored data, since that knowledge is available
  /// via the current state.
  template <size_t S>
  struct variant
  {
    /// Type of *this.
    typedef variant<S> self_type;

    /// Empty construction.
    variant ()
      : yytypeid_ (YY_NULLPTR)
    {}

    /// Construct and fill.
    template <typename T>
    variant (const T& t)
      : yytypeid_ (&typeid (T))
    {
      YYASSERT (sizeof (T) <= S);
      new (yyas_<T> ()) T (t);
    }

    /// Destruction, allowed only if empty.
    ~variant ()
    {
      YYASSERT (!yytypeid_);
    }

    /// Instantiate an empty \a T in here.
    template <typename T>
    T&
    build ()
    {
      YYASSERT (!yytypeid_);
      YYASSERT (sizeof (T) <= S);
      yytypeid_ = & typeid (T);
      return *new (yyas_<T> ()) T;
    }

    /// Instantiate a \a T in here from \a t.
    template <typename T>
    T&
    build (const T& t)
    {
      YYASSERT (!yytypeid_);
      YYASSERT (sizeof (T) <= S);
      yytypeid_ = & typeid (T);
      return *new (yyas_<T> ()) T (t);
    }

    /// Accessor to a built \a T.
    template <typename T>
    T&
    as ()
    {
      YYASSERT (*yytypeid_ == typeid (T));
      YYASSERT (sizeof (T) <= S);
      return *yyas_<T> ();
    }

    /// Const accessor to a built \a T (for %printer).
    template <typename T>
    const T&
    as () const
    {
      YYASSERT (*yytypeid_ == typeid (T));
      YYASSERT (sizeof (T) <= S);
      return *yyas_<T> ();
    }

    /// Swap the content with \a other, of same type.
    ///
    /// Both variants must be built beforehand, because swapping the actual
    /// data requires reading it (with as()), and this is not possible on
    /// unconstructed variants: it would require some dynamic testing, which
    /// should not be the variant's responsability.
    /// Swapping between built and (possibly) non-built is done with
    /// variant::move ().
    template <typename T>
    void
    swap (self_type& other)
    {
      YYASSERT (yytypeid_);
      YYASSERT (*yytypeid_ == *other.yytypeid_);
      std::swap (as<T> (), other.as<T> ());
    }

    /// Move the content of \a other to this.
    ///
    /// Destroys \a other.
    template <typename T>
    void
    move (self_type& other)
    {
      build<T> ();
      swap<T> (other);
      other.destroy<T> ();
    }

    /// Copy the content of \a other to this.
    template <typename T>
    void
    copy (const self_type& other)
    {
      build<T> (other.as<T> ());
    }

    /// Destroy the stored \a T.
    template <typename T>
    void
    destroy ()
    {
      as<T> ().~T ();
      yytypeid_ = YY_NULLPTR;
    }

  private:
    /// Prohibit blind copies.
    self_type& operator=(const self_type&);
    variant (const self_type&);

    /// Accessor to raw memory as \a T.
    template <typename T>
    T*
    yyas_ ()
    {
      void *yyp = yybuffer_.yyraw;
      return static_cast<T*> (yyp);
     }

    /// Const accessor to raw memory as \a T.
    template <typename T>
    const T*
    yyas_ () const
    {
      const void *yyp = yybuffer_.yyraw;
      return static_cast<const T*> (yyp);
     }

    union
    {
      /// Strongest alignment constraints.
      long double yyalign_me;
      /// A buffer large enough to store any of the semantic values.
      char yyraw[S];
    } yybuffer_;

    /// Whether the content is built: if defined, the name of the stored type.
    const std::type_info *yytypeid_;
  };


  /// A Bison parser.
  class asn1_parser
  {
  public:
#ifndef YYSTYPE
    /// An auxiliary type to compute the largest semantic type.
    union union_type
    {
      // ObjectClassAssignment
      // ObjectSetAssignment
      // ParameterizedAssignment
      // ParameterizedTypeAssignment
      // ParameterizedValueAssignment
      // ParameterizedValueSetTypeAssignment
      // ParameterizedObjectClassAssignment
      // ParameterizedObjectAssignment
      // Assignment
      // TypeAssignment
      // ValueAssignment
      // ValueSetTypeAssignment
      char dummy1[sizeof(Assignment)];

      // BitStringType
      char dummy2[sizeof(BitStringType)];

      // BooleanType
      char dummy3[sizeof(BooleanType)];

      // BuiltinType
      char dummy4[sizeof(BuiltinType)];

      // CharacterStringType
      char dummy5[sizeof(CharacterStringType)];

      // ChoiceType
      char dummy6[sizeof(ChoiceType)];

      // Class
      char dummy7[sizeof(Class)];

      // ComponentType
      char dummy8[sizeof(ComponentType)];

      // ComponentTypeLists
      // RootComponentTypeList
      // ComponentTypeList
      char dummy9[sizeof(ComponentTypeList)];

      // DateTimeType
      char dummy10[sizeof(DateTimeType)];

      // DateType
      char dummy11[sizeof(DateType)];

      // DefinedType
      // ParameterizedType
      char dummy12[sizeof(DefinedType)];

      // DefinedValue
      char dummy13[sizeof(DefinedValue)];

      // DurationType
      char dummy14[sizeof(DurationType)];

      // EmbeddedPDVType
      char dummy15[sizeof(EmbeddedPDVType)];

      // EnumeratedType
      // Enumerations
      // Enumeration
      char dummy16[sizeof(EnumeratedType)];

      // EnumerationItem
      char dummy17[sizeof(EnumerationValue)];

      // ExternalType
      char dummy18[sizeof(ExternalType)];

      // IRIType
      char dummy19[sizeof(IRIType)];

      // SymbolsFromModule
      char dummy20[sizeof(Import)];

      // InstanceOfType
      char dummy21[sizeof(InstanceOfType)];

      // IntegerType
      char dummy22[sizeof(IntegerType)];

      // ModuleBody
      char dummy23[sizeof(Module)];

      // NamedNumber
      char dummy24[sizeof(NamedNumber)];

      // NamedType
      char dummy25[sizeof(NamedType)];

      // NullType
      char dummy26[sizeof(NullType)];

      // ObjectClassFieldType
      char dummy27[sizeof(ObjectClassFieldType)];

      // ObjIdComponents
      // NameForm
      // NumberForm
      // NameAndNumberForm
      char dummy28[sizeof(ObjectIdComponentValue)];

      // ObjectIdentifierType
      char dummy29[sizeof(ObjectIdentifierType)];

      // OctetStringType
      char dummy30[sizeof(OctetStringType)];

      // PrefixedType
      char dummy31[sizeof(PrefixedType)];

      // RealType
      char dummy32[sizeof(RealType)];

      // RelativeIRIType
      char dummy33[sizeof(RelativeIRIType)];

      // RelativeOIDType
      char dummy34[sizeof(RelativeOIDType)];

      // SequenceOfType
      char dummy35[sizeof(SequenceOfType)];

      // SequenceType
      char dummy36[sizeof(SequenceType)];

      // SetOfType
      char dummy37[sizeof(SetOfType)];

      // SetType
      char dummy38[sizeof(SetType)];

      // Tag
      char dummy39[sizeof(Tag)];

      // TaggedType
      char dummy40[sizeof(TaggedType)];

      // TagDefault
      char dummy41[sizeof(TaggingMode)];

      // TimeOfDayType
      char dummy42[sizeof(TimeOfDayType)];

      // TimeType
      char dummy43[sizeof(TimeType)];

      // ActualParameter
      // Type
      // ConstrainedType
      char dummy44[sizeof(Type)];

      // ValueWithoutTypeIdentifier
      // Value
      // SingleValue
      char dummy45[sizeof(Value)];

      // realnumber
      char dummy46[sizeof(double)];

      // ClassNumber
      char dummy47[sizeof(int)];

      // number
      // SignedNumber
      char dummy48[sizeof(long long)];

      // ParameterList
      // ParameterSeries
      char dummy49[sizeof(std::set<std::string>)];

      // bstring
      // xmlbstring
      // hstring
      // xmlhstring
      // cstring
      // xmlcstring
      // simplestring
      // xmltstring
      // objectreference
      // typefieldreference
      // valuefieldreference
      // GENERIC_IDENTIFIER_UPPERCASE
      // GENERIC_IDENTIFIER_LOWERCASE
      // Parameter
      // SimpleDefinedType
      // ModuleIdentifier
      // GlobalModuleReference
      // Symbol
      // Reference
      // typereference
      // identifier
      // valuereference
      // modulereference
      // objectclassreference
      // word
      char dummy50[sizeof(std::string)];

      // AssignmentList
      char dummy51[sizeof(std::vector<Assignment>)];

      // Exports
      char dummy52[sizeof(std::vector<Export>)];

      // Imports
      // SymbolsImported
      // SymbolsFromModuleList
      char dummy53[sizeof(std::vector<Import>)];

      // NamedNumberList
      char dummy54[sizeof(std::vector<NamedNumber>)];

      // AlternativeTypeLists
      // RootAlternativeTypeList
      // AlternativeTypeList
      char dummy55[sizeof(std::vector<NamedType>)];

      // ObjectIdentifierValue
      // ObjIdComponentsList
      char dummy56[sizeof(std::vector<ObjectIdComponentValue>)];

      // ActualParameterList
      char dummy57[sizeof(std::vector<Type>)];

      // SequenceOfValues
      char dummy58[sizeof(std::vector<Value>)];

      // SymbolList
      char dummy59[sizeof(std::vector<std::string>)];
};

    /// Symbol semantic values.
    typedef variant<sizeof(union_type)> semantic_type;
#else
    typedef YYSTYPE semantic_type;
#endif
    /// Symbol locations.
    typedef location location_type;

    /// Syntax errors thrown from user actions.
    struct syntax_error : std::runtime_error
    {
      syntax_error (const location_type& l, const std::string& m);
      location_type location;
    };

    /// Tokens.
    struct token
    {
      enum yytokentype
      {
        END_OF_FILE = 0,
        comment = 258,
        number = 259,
        realnumber = 260,
        bstring = 261,
        xmlbstring = 262,
        hstring = 263,
        xmlhstring = 264,
        cstring = 265,
        xmlcstring = 266,
        simplestring = 267,
        xmltstring = 268,
        psname = 269,
        encodingreference = 270,
        integerUnicodeLabel = 271,
        tstring = 274,
        objectreference = 276,
        objectsetreference = 277,
        typefieldreference = 278,
        valuefieldreference = 279,
        valuesetfieldreference = 280,
        objectfieldreference = 281,
        objectsetfieldreference = 282,
        ABSENT = 283,
        ABSTRACT_SYNTAX = 284,
        ALL = 285,
        APPLICATION = 286,
        ASN_NULL = 287,
        AUTOMATIC = 288,
        BEGIN = 289,
        BIT = 290,
        BMPString = 291,
        BOOLEAN = 292,
        BY = 293,
        CHARACTER = 294,
        CHOICE = 295,
        CLASS = 296,
        COMPONENT = 297,
        COMPONENTS = 298,
        CONSTRAINED = 299,
        CONTAINING = 300,
        DATE = 301,
        DATE_TIME = 302,
        DEFAULT = 303,
        DEFINITIONS = 304,
        DURATION = 305,
        EMBEDDED = 306,
        ENCODED = 307,
        ENCODING_CONTROL = 308,
        END = 309,
        ENUMERATED = 310,
        EXCEPT = 311,
        EXPLICIT = 312,
        EXPORTS = 313,
        EXTENSIBILITY = 314,
        EXTERNAL = 315,
        FALSE = 316,
        FROM = 317,
        GeneralizedTime = 318,
        GeneralString = 319,
        GraphicString = 320,
        IA5String = 321,
        IDENTIFIER = 322,
        IMPLICIT = 323,
        IMPLIED = 324,
        IMPORTS = 325,
        INCLUDES = 326,
        INSTANCE = 327,
        INSTRUCTIONS = 328,
        INTEGER = 329,
        INTERSECTION = 330,
        ISO646String = 331,
        MAX = 332,
        MIN = 333,
        MINUS_INFINITY = 334,
        NOT_A_NUMBER = 335,
        NumericString = 336,
        OBJECT = 337,
        ObjectDescriptor = 338,
        OCTET = 339,
        OF = 340,
        OID_IRI = 341,
        OPTIONAL = 342,
        PATTERN = 343,
        PDV = 344,
        PLUS_INFINITY = 345,
        PRESENT = 346,
        PrintableString = 347,
        PRIVATE = 348,
        REAL = 349,
        RELATIVE_OID = 350,
        RELATIVE_OID_IRI = 351,
        SEQUENCE = 352,
        SET = 353,
        SETTINGS = 354,
        SIZE = 355,
        STRING = 356,
        SYNTAX = 357,
        T61String = 358,
        TAGS = 359,
        TeletexString = 360,
        TIME = 361,
        TIME_OF_DAY = 362,
        TRUE = 363,
        TYPE_IDENTIFIER = 364,
        UNION = 365,
        UNIQUE = 366,
        UNIVERSAL = 367,
        UniversalString = 368,
        UTCTime = 369,
        UTF8String = 370,
        VideotexString = 371,
        VisibleString = 372,
        WITH = 373,
        DEFINED_AS = 374,
        ELIPSIS = 375,
        RANGE = 376,
        OPEN_BRACE = 377,
        CLOSE_BRACE = 378,
        OPEN_PARENTHESIS = 379,
        CLOSE_PARENTHESIS = 380,
        OPEN_SQUARE_BRACKET = 381,
        CLOSE_SQUARE_BRACKET = 382,
        LESS_THAN = 383,
        GREATER_THAN = 384,
        EXCLAMATION_MARK = 385,
        QUOTATION_MARK = 386,
        AMPERSAND = 387,
        APOSTROPHE = 388,
        ASTERISK = 389,
        COMMA = 390,
        FULL_STOP = 391,
        HYPHEN_MINUS = 392,
        SOLIDUS = 393,
        COLON = 394,
        SEMICOLON = 395,
        EQUALS_SIGN = 396,
        AT = 397,
        VERTICAL_LINE = 398,
        ACCENT = 399,
        PLUS = 400,
        STAR = 401,
        GENERIC_IDENTIFIER_UPPERCASE = 402,
        GENERIC_IDENTIFIER_LOWERCASE = 403,
        GENERIC_INTEGER = 404,
        xmlasn1typename = 405
      };
    };

    /// (External) token type, as returned by yylex.
    typedef token::yytokentype token_type;

    /// Symbol type: an internal symbol number.
    typedef int symbol_number_type;

    /// The symbol type number to denote an empty symbol.
    enum { empty_symbol = -2 };

    /// Internal symbol number for tokens (subsumed by symbol_number_type).
    typedef unsigned char token_number_type;

    /// A complete symbol.
    ///
    /// Expects its Base type to provide access to the symbol type
    /// via type_get().
    ///
    /// Provide access to semantic value and location.
    template <typename Base>
    struct basic_symbol : Base
    {
      /// Alias to Base.
      typedef Base super_type;

      /// Default constructor.
      basic_symbol ();

      /// Copy constructor.
      basic_symbol (const basic_symbol& other);

      /// Constructor for valueless symbols, and symbols from each type.

  basic_symbol (typename Base::kind_type t, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Assignment v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const BitStringType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const BooleanType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const BuiltinType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const CharacterStringType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ChoiceType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Class v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ComponentType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ComponentTypeList v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const DateTimeType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const DateType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const DefinedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const DefinedValue v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const DurationType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const EmbeddedPDVType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const EnumeratedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const EnumerationValue v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ExternalType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const IRIType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Import v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const InstanceOfType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const IntegerType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Module v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const NamedNumber v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const NamedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const NullType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ObjectClassFieldType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ObjectIdComponentValue v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ObjectIdentifierType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const OctetStringType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const PrefixedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const RealType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const RelativeIRIType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const RelativeOIDType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const SequenceOfType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const SequenceType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const SetOfType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const SetType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Tag v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const TaggedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const TaggingMode v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const TimeOfDayType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const TimeType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Type v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Value v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const double v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const int v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const long long v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::set<std::string> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::string v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<Assignment> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<Export> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<Import> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<NamedNumber> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<NamedType> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<ObjectIdComponentValue> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<Type> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<Value> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<std::string> v, const location_type& l);


      /// Constructor for symbols with semantic value.
      basic_symbol (typename Base::kind_type t,
                    const semantic_type& v,
                    const location_type& l);

      /// Destroy the symbol.
      ~basic_symbol ();

      /// Destroy contents, and record that is empty.
      void clear ();

      /// Whether empty.
      bool empty () const;

      /// Destructive move, \a s is emptied into this.
      void move (basic_symbol& s);

      /// The semantic value.
      semantic_type value;

      /// The location.
      location_type location;

    private:
      /// Assignment operator.
      basic_symbol& operator= (const basic_symbol& other);
    };

    /// Type access provider for token (enum) based symbols.
    struct by_type
    {
      /// Default constructor.
      by_type ();

      /// Copy constructor.
      by_type (const by_type& other);

      /// The symbol type as needed by the constructor.
      typedef token_type kind_type;

      /// Constructor from (external) token numbers.
      by_type (kind_type t);

      /// Record that this symbol is empty.
      void clear ();

      /// Steal the symbol type from \a that.
      void move (by_type& that);

      /// The (internal) type number (corresponding to \a type).
      /// \a empty when empty.
      symbol_number_type type_get () const;

      /// The token.
      token_type token () const;

      /// The symbol type.
      /// \a empty_symbol when empty.
      /// An int, not token_number_type, to be able to store empty_symbol.
      int type;
    };

    /// "External" symbols: returned by the scanner.
    typedef basic_symbol<by_type> symbol_type;

    // Symbol constructors declarations.
    static inline
    symbol_type
    make_END_OF_FILE (const location_type& l);

    static inline
    symbol_type
    make_comment (const location_type& l);

    static inline
    symbol_type
    make_number (const long long& v, const location_type& l);

    static inline
    symbol_type
    make_realnumber (const double& v, const location_type& l);

    static inline
    symbol_type
    make_bstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_xmlbstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_hstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_xmlhstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_cstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_xmlcstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_simplestring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_xmltstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_psname (const location_type& l);

    static inline
    symbol_type
    make_encodingreference (const location_type& l);

    static inline
    symbol_type
    make_integerUnicodeLabel (const location_type& l);

    static inline
    symbol_type
    make_tstring (const location_type& l);

    static inline
    symbol_type
    make_objectreference (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_objectsetreference (const location_type& l);

    static inline
    symbol_type
    make_typefieldreference (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_valuefieldreference (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_valuesetfieldreference (const location_type& l);

    static inline
    symbol_type
    make_objectfieldreference (const location_type& l);

    static inline
    symbol_type
    make_objectsetfieldreference (const location_type& l);

    static inline
    symbol_type
    make_ABSENT (const location_type& l);

    static inline
    symbol_type
    make_ABSTRACT_SYNTAX (const location_type& l);

    static inline
    symbol_type
    make_ALL (const location_type& l);

    static inline
    symbol_type
    make_APPLICATION (const location_type& l);

    static inline
    symbol_type
    make_ASN_NULL (const location_type& l);

    static inline
    symbol_type
    make_AUTOMATIC (const location_type& l);

    static inline
    symbol_type
    make_BEGIN (const location_type& l);

    static inline
    symbol_type
    make_BIT (const location_type& l);

    static inline
    symbol_type
    make_BMPString (const location_type& l);

    static inline
    symbol_type
    make_BOOLEAN (const location_type& l);

    static inline
    symbol_type
    make_BY (const location_type& l);

    static inline
    symbol_type
    make_CHARACTER (const location_type& l);

    static inline
    symbol_type
    make_CHOICE (const location_type& l);

    static inline
    symbol_type
    make_CLASS (const location_type& l);

    static inline
    symbol_type
    make_COMPONENT (const location_type& l);

    static inline
    symbol_type
    make_COMPONENTS (const location_type& l);

    static inline
    symbol_type
    make_CONSTRAINED (const location_type& l);

    static inline
    symbol_type
    make_CONTAINING (const location_type& l);

    static inline
    symbol_type
    make_DATE (const location_type& l);

    static inline
    symbol_type
    make_DATE_TIME (const location_type& l);

    static inline
    symbol_type
    make_DEFAULT (const location_type& l);

    static inline
    symbol_type
    make_DEFINITIONS (const location_type& l);

    static inline
    symbol_type
    make_DURATION (const location_type& l);

    static inline
    symbol_type
    make_EMBEDDED (const location_type& l);

    static inline
    symbol_type
    make_ENCODED (const location_type& l);

    static inline
    symbol_type
    make_ENCODING_CONTROL (const location_type& l);

    static inline
    symbol_type
    make_END (const location_type& l);

    static inline
    symbol_type
    make_ENUMERATED (const location_type& l);

    static inline
    symbol_type
    make_EXCEPT (const location_type& l);

    static inline
    symbol_type
    make_EXPLICIT (const location_type& l);

    static inline
    symbol_type
    make_EXPORTS (const location_type& l);

    static inline
    symbol_type
    make_EXTENSIBILITY (const location_type& l);

    static inline
    symbol_type
    make_EXTERNAL (const location_type& l);

    static inline
    symbol_type
    make_FALSE (const location_type& l);

    static inline
    symbol_type
    make_FROM (const location_type& l);

    static inline
    symbol_type
    make_GeneralizedTime (const location_type& l);

    static inline
    symbol_type
    make_GeneralString (const location_type& l);

    static inline
    symbol_type
    make_GraphicString (const location_type& l);

    static inline
    symbol_type
    make_IA5String (const location_type& l);

    static inline
    symbol_type
    make_IDENTIFIER (const location_type& l);

    static inline
    symbol_type
    make_IMPLICIT (const location_type& l);

    static inline
    symbol_type
    make_IMPLIED (const location_type& l);

    static inline
    symbol_type
    make_IMPORTS (const location_type& l);

    static inline
    symbol_type
    make_INCLUDES (const location_type& l);

    static inline
    symbol_type
    make_INSTANCE (const location_type& l);

    static inline
    symbol_type
    make_INSTRUCTIONS (const location_type& l);

    static inline
    symbol_type
    make_INTEGER (const location_type& l);

    static inline
    symbol_type
    make_INTERSECTION (const location_type& l);

    static inline
    symbol_type
    make_ISO646String (const location_type& l);

    static inline
    symbol_type
    make_MAX (const location_type& l);

    static inline
    symbol_type
    make_MIN (const location_type& l);

    static inline
    symbol_type
    make_MINUS_INFINITY (const location_type& l);

    static inline
    symbol_type
    make_NOT_A_NUMBER (const location_type& l);

    static inline
    symbol_type
    make_NumericString (const location_type& l);

    static inline
    symbol_type
    make_OBJECT (const location_type& l);

    static inline
    symbol_type
    make_ObjectDescriptor (const location_type& l);

    static inline
    symbol_type
    make_OCTET (const location_type& l);

    static inline
    symbol_type
    make_OF (const location_type& l);

    static inline
    symbol_type
    make_OID_IRI (const location_type& l);

    static inline
    symbol_type
    make_OPTIONAL (const location_type& l);

    static inline
    symbol_type
    make_PATTERN (const location_type& l);

    static inline
    symbol_type
    make_PDV (const location_type& l);

    static inline
    symbol_type
    make_PLUS_INFINITY (const location_type& l);

    static inline
    symbol_type
    make_PRESENT (const location_type& l);

    static inline
    symbol_type
    make_PrintableString (const location_type& l);

    static inline
    symbol_type
    make_PRIVATE (const location_type& l);

    static inline
    symbol_type
    make_REAL (const location_type& l);

    static inline
    symbol_type
    make_RELATIVE_OID (const location_type& l);

    static inline
    symbol_type
    make_RELATIVE_OID_IRI (const location_type& l);

    static inline
    symbol_type
    make_SEQUENCE (const location_type& l);

    static inline
    symbol_type
    make_SET (const location_type& l);

    static inline
    symbol_type
    make_SETTINGS (const location_type& l);

    static inline
    symbol_type
    make_SIZE (const location_type& l);

    static inline
    symbol_type
    make_STRING (const location_type& l);

    static inline
    symbol_type
    make_SYNTAX (const location_type& l);

    static inline
    symbol_type
    make_T61String (const location_type& l);

    static inline
    symbol_type
    make_TAGS (const location_type& l);

    static inline
    symbol_type
    make_TeletexString (const location_type& l);

    static inline
    symbol_type
    make_TIME (const location_type& l);

    static inline
    symbol_type
    make_TIME_OF_DAY (const location_type& l);

    static inline
    symbol_type
    make_TRUE (const location_type& l);

    static inline
    symbol_type
    make_TYPE_IDENTIFIER (const location_type& l);

    static inline
    symbol_type
    make_UNION (const location_type& l);

    static inline
    symbol_type
    make_UNIQUE (const location_type& l);

    static inline
    symbol_type
    make_UNIVERSAL (const location_type& l);

    static inline
    symbol_type
    make_UniversalString (const location_type& l);

    static inline
    symbol_type
    make_UTCTime (const location_type& l);

    static inline
    symbol_type
    make_UTF8String (const location_type& l);

    static inline
    symbol_type
    make_VideotexString (const location_type& l);

    static inline
    symbol_type
    make_VisibleString (const location_type& l);

    static inline
    symbol_type
    make_WITH (const location_type& l);

    static inline
    symbol_type
    make_DEFINED_AS (const location_type& l);

    static inline
    symbol_type
    make_ELIPSIS (const location_type& l);

    static inline
    symbol_type
    make_RANGE (const location_type& l);

    static inline
    symbol_type
    make_OPEN_BRACE (const location_type& l);

    static inline
    symbol_type
    make_CLOSE_BRACE (const location_type& l);

    static inline
    symbol_type
    make_OPEN_PARENTHESIS (const location_type& l);

    static inline
    symbol_type
    make_CLOSE_PARENTHESIS (const location_type& l);

    static inline
    symbol_type
    make_OPEN_SQUARE_BRACKET (const location_type& l);

    static inline
    symbol_type
    make_CLOSE_SQUARE_BRACKET (const location_type& l);

    static inline
    symbol_type
    make_LESS_THAN (const location_type& l);

    static inline
    symbol_type
    make_GREATER_THAN (const location_type& l);

    static inline
    symbol_type
    make_EXCLAMATION_MARK (const location_type& l);

    static inline
    symbol_type
    make_QUOTATION_MARK (const location_type& l);

    static inline
    symbol_type
    make_AMPERSAND (const location_type& l);

    static inline
    symbol_type
    make_APOSTROPHE (const location_type& l);

    static inline
    symbol_type
    make_ASTERISK (const location_type& l);

    static inline
    symbol_type
    make_COMMA (const location_type& l);

    static inline
    symbol_type
    make_FULL_STOP (const location_type& l);

    static inline
    symbol_type
    make_HYPHEN_MINUS (const location_type& l);

    static inline
    symbol_type
    make_SOLIDUS (const location_type& l);

    static inline
    symbol_type
    make_COLON (const location_type& l);

    static inline
    symbol_type
    make_SEMICOLON (const location_type& l);

    static inline
    symbol_type
    make_EQUALS_SIGN (const location_type& l);

    static inline
    symbol_type
    make_AT (const location_type& l);

    static inline
    symbol_type
    make_VERTICAL_LINE (const location_type& l);

    static inline
    symbol_type
    make_ACCENT (const location_type& l);

    static inline
    symbol_type
    make_PLUS (const location_type& l);

    static inline
    symbol_type
    make_STAR (const location_type& l);

    static inline
    symbol_type
    make_GENERIC_IDENTIFIER_UPPERCASE (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_GENERIC_IDENTIFIER_LOWERCASE (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_GENERIC_INTEGER (const location_type& l);

    static inline
    symbol_type
    make_xmlasn1typename (const location_type& l);


    /// Build a parser object.
    asn1_parser (Context& context_yyarg);
    virtual ~asn1_parser ();

    /// Parse.
    /// \returns  0 iff parsing succeeded.
    virtual int parse ();

#if YYDEBUG
    /// The current debugging stream.
    std::ostream& debug_stream () const YY_ATTRIBUTE_PURE;
    /// Set the current debugging stream.
    void set_debug_stream (std::ostream &);

    /// Type for debugging levels.
    typedef int debug_level_type;
    /// The current debugging level.
    debug_level_type debug_level () const YY_ATTRIBUTE_PURE;
    /// Set the current debugging level.
    void set_debug_level (debug_level_type l);
#endif

    /// Report a syntax error.
    /// \param loc    where the syntax error is found.
    /// \param msg    a description of the syntax error.
    virtual void error (const location_type& loc, const std::string& msg);

    /// Report a syntax error.
    void error (const syntax_error& err);

  private:
    /// This class is not copyable.
    asn1_parser (const asn1_parser&);
    asn1_parser& operator= (const asn1_parser&);

    /// State numbers.
    typedef int state_type;

    /// Generate an error message.
    /// \param yystate   the state where the error occurred.
    /// \param yyla      the lookahead token.
    virtual std::string yysyntax_error_ (state_type yystate,
                                         const symbol_type& yyla) const;

    /// Compute post-reduction state.
    /// \param yystate   the current state
    /// \param yysym     the nonterminal to push on the stack
    state_type yy_lr_goto_state_ (state_type yystate, int yysym);

    /// Whether the given \c yypact_ value indicates a defaulted state.
    /// \param yyvalue   the value to check
    static bool yy_pact_value_is_default_ (int yyvalue);

    /// Whether the given \c yytable_ value indicates a syntax error.
    /// \param yyvalue   the value to check
    static bool yy_table_value_is_error_ (int yyvalue);

    static const short int yypact_ninf_;
    static const short int yytable_ninf_;

    /// Convert a scanner token number \a t to a symbol number.
    static token_number_type yytranslate_ (token_type t);

    // Tables.
  // YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
  // STATE-NUM.
  static const short int yypact_[];

  // YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
  // Performed when YYTABLE does not specify something else to do.  Zero
  // means the default is an error.
  static const unsigned short int yydefact_[];

  // YYPGOTO[NTERM-NUM].
  static const short int yypgoto_[];

  // YYDEFGOTO[NTERM-NUM].
  static const short int yydefgoto_[];

  // YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
  // positive, shift that token.  If negative, reduce the rule whose
  // number is the opposite.  If YYTABLE_NINF, syntax error.
  static const short int yytable_[];

  static const short int yycheck_[];

  // YYSTOS[STATE-NUM] -- The (internal number of the) accessing
  // symbol of state STATE-NUM.
  static const unsigned short int yystos_[];

  // YYR1[YYN] -- Symbol number of symbol that rule YYN derives.
  static const unsigned short int yyr1_[];

  // YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.
  static const unsigned char yyr2_[];


    /// Convert the symbol name \a n to a form suitable for a diagnostic.
    static std::string yytnamerr_ (const char *n);


    /// For a symbol, its name in clear.
    static const char* const yytname_[];
#if YYDEBUG
  // YYRLINE[YYN] -- Source line where rule number YYN was defined.
  static const unsigned short int yyrline_[];
    /// Report on the debug stream that the rule \a r is going to be reduced.
    virtual void yy_reduce_print_ (int r);
    /// Print the state stack on the debug stream.
    virtual void yystack_print_ ();

    // Debugging.
    int yydebug_;
    std::ostream* yycdebug_;

    /// \brief Display a symbol type, value and location.
    /// \param yyo    The output stream.
    /// \param yysym  The symbol.
    template <typename Base>
    void yy_print_ (std::ostream& yyo, const basic_symbol<Base>& yysym) const;
#endif

    /// \brief Reclaim the memory associated to a symbol.
    /// \param yymsg     Why this token is reclaimed.
    ///                  If null, print nothing.
    /// \param yysym     The symbol.
    template <typename Base>
    void yy_destroy_ (const char* yymsg, basic_symbol<Base>& yysym) const;

  private:
    /// Type access provider for state based symbols.
    struct by_state
    {
      /// Default constructor.
      by_state ();

      /// The symbol type as needed by the constructor.
      typedef state_type kind_type;

      /// Constructor.
      by_state (kind_type s);

      /// Copy constructor.
      by_state (const by_state& other);

      /// Record that this symbol is empty.
      void clear ();

      /// Steal the symbol type from \a that.
      void move (by_state& that);

      /// The (internal) type number (corresponding to \a state).
      /// \a empty_symbol when empty.
      symbol_number_type type_get () const;

      /// The state number used to denote an empty symbol.
      enum { empty_state = -1 };

      /// The state.
      /// \a empty when empty.
      state_type state;
    };

    /// "Internal" symbol: element of the stack.
    struct stack_symbol_type : basic_symbol<by_state>
    {
      /// Superclass.
      typedef basic_symbol<by_state> super_type;
      /// Construct an empty symbol.
      stack_symbol_type ();
      /// Steal the contents from \a sym to build this.
      stack_symbol_type (state_type s, symbol_type& sym);
      /// Assignment, needed by push_back.
      stack_symbol_type& operator= (const stack_symbol_type& that);
    };

    /// Stack type.
    typedef stack<stack_symbol_type> stack_type;

    /// The stack.
    stack_type yystack_;

    /// Push a new state on the stack.
    /// \param m    a debug message to display
    ///             if null, no trace is output.
    /// \param s    the symbol
    /// \warning the contents of \a s.value is stolen.
    void yypush_ (const char* m, stack_symbol_type& s);

    /// Push a new look ahead token on the state on the stack.
    /// \param m    a debug message to display
    ///             if null, no trace is output.
    /// \param s    the state
    /// \param sym  the symbol (for its value and location).
    /// \warning the contents of \a s.value is stolen.
    void yypush_ (const char* m, state_type s, symbol_type& sym);

    /// Pop \a n symbols the three stacks.
    void yypop_ (unsigned int n = 1);

    /// Constants.
    enum
    {
      yyeof_ = 0,
      yylast_ = 3431,     ///< Last index in yytable_.
      yynnts_ = 229,  ///< Number of nonterminal symbols.
      yyfinal_ = 6, ///< Termination state number.
      yyterror_ = 1,
      yyerrcode_ = 256,
      yyntokens_ = 151  ///< Number of tokens.
    };


    // User arguments.
    Context& context;
  };

  // Symbol number corresponding to token number t.
  inline
  asn1_parser::token_number_type
  asn1_parser::yytranslate_ (token_type t)
  {
    static
    const token_number_type
    translate_table[] =
    {
     0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150
    };
    const unsigned int user_token_number_max_ = 405;
    const token_number_type undef_token_ = 2;

    if (static_cast<int>(t) <= yyeof_)
      return yyeof_;
    else if (static_cast<unsigned int> (t) <= user_token_number_max_)
      return translate_table[t];
    else
      return undef_token_;
  }

  inline
  asn1_parser::syntax_error::syntax_error (const location_type& l, const std::string& m)
    : std::runtime_error (m)
    , location (l)
  {}

  // basic_symbol.
  template <typename Base>
  inline
  asn1_parser::basic_symbol<Base>::basic_symbol ()
    : value ()
  {}

  template <typename Base>
  inline
  asn1_parser::basic_symbol<Base>::basic_symbol (const basic_symbol& other)
    : Base (other)
    , value ()
    , location (other.location)
  {
      switch (other.type_get ())
    {
      case 158: // ObjectClassAssignment
      case 194: // ObjectSetAssignment
      case 198: // ParameterizedAssignment
      case 199: // ParameterizedTypeAssignment
      case 200: // ParameterizedValueAssignment
      case 201: // ParameterizedValueSetTypeAssignment
      case 202: // ParameterizedObjectClassAssignment
      case 203: // ParameterizedObjectAssignment
      case 248: // Assignment
      case 257: // TypeAssignment
      case 258: // ValueAssignment
      case 259: // ValueSetTypeAssignment
        value.copy< Assignment > (other.value);
        break;

      case 280: // BitStringType
        value.copy< BitStringType > (other.value);
        break;

      case 269: // BooleanType
        value.copy< BooleanType > (other.value);
        break;

      case 261: // BuiltinType
        value.copy< BuiltinType > (other.value);
        break;

      case 326: // CharacterStringType
        value.copy< CharacterStringType > (other.value);
        break;

      case 293: // ChoiceType
        value.copy< ChoiceType > (other.value);
        break;

      case 303: // Class
        value.copy< Class > (other.value);
        break;

      case 289: // ComponentType
        value.copy< ComponentType > (other.value);
        break;

      case 286: // ComponentTypeLists
      case 287: // RootComponentTypeList
      case 288: // ComponentTypeList
        value.copy< ComponentTypeList > (other.value);
        break;

      case 324: // DateTimeType
        value.copy< DateTimeType > (other.value);
        break;

      case 322: // DateType
        value.copy< DateType > (other.value);
        break;

      case 249: // DefinedType
      case 251: // ParameterizedType
        value.copy< DefinedType > (other.value);
        break;

      case 250: // DefinedValue
        value.copy< DefinedValue > (other.value);
        break;

      case 325: // DurationType
        value.copy< DurationType > (other.value);
        break;

      case 318: // EmbeddedPDVType
        value.copy< EmbeddedPDVType > (other.value);
        break;

      case 275: // EnumeratedType
      case 276: // Enumerations
      case 277: // Enumeration
        value.copy< EnumeratedType > (other.value);
        break;

      case 278: // EnumerationItem
        value.copy< EnumerationValue > (other.value);
        break;

      case 319: // ExternalType
        value.copy< ExternalType > (other.value);
        break;

      case 312: // IRIType
        value.copy< IRIType > (other.value);
        break;

      case 241: // SymbolsFromModule
        value.copy< Import > (other.value);
        break;

      case 211: // InstanceOfType
        value.copy< InstanceOfType > (other.value);
        break;

      case 271: // IntegerType
        value.copy< IntegerType > (other.value);
        break;

      case 235: // ModuleBody
        value.copy< Module > (other.value);
        break;

      case 273: // NamedNumber
        value.copy< NamedNumber > (other.value);
        break;

      case 262: // NamedType
        value.copy< NamedType > (other.value);
        break;

      case 284: // NullType
        value.copy< NullType > (other.value);
        break;

      case 197: // ObjectClassFieldType
        value.copy< ObjectClassFieldType > (other.value);
        break;

      case 307: // ObjIdComponents
      case 308: // NameForm
      case 309: // NumberForm
      case 310: // NameAndNumberForm
        value.copy< ObjectIdComponentValue > (other.value);
        break;

      case 304: // ObjectIdentifierType
        value.copy< ObjectIdentifierType > (other.value);
        break;

      case 283: // OctetStringType
        value.copy< OctetStringType > (other.value);
        break;

      case 298: // PrefixedType
        value.copy< PrefixedType > (other.value);
        break;

      case 279: // RealType
        value.copy< RealType > (other.value);
        break;

      case 317: // RelativeIRIType
        value.copy< RelativeIRIType > (other.value);
        break;

      case 311: // RelativeOIDType
        value.copy< RelativeOIDType > (other.value);
        break;

      case 290: // SequenceOfType
        value.copy< SequenceOfType > (other.value);
        break;

      case 285: // SequenceType
        value.copy< SequenceType > (other.value);
        break;

      case 292: // SetOfType
        value.copy< SetOfType > (other.value);
        break;

      case 291: // SetType
        value.copy< SetType > (other.value);
        break;

      case 300: // Tag
        value.copy< Tag > (other.value);
        break;

      case 299: // TaggedType
        value.copy< TaggedType > (other.value);
        break;

      case 233: // TagDefault
        value.copy< TaggingMode > (other.value);
        break;

      case 323: // TimeOfDayType
        value.copy< TimeOfDayType > (other.value);
        break;

      case 320: // TimeType
        value.copy< TimeType > (other.value);
        break;

      case 254: // ActualParameter
      case 260: // Type
      case 329: // ConstrainedType
        value.copy< Type > (other.value);
        break;

      case 263: // ValueWithoutTypeIdentifier
      case 264: // Value
      case 349: // SingleValue
        value.copy< Value > (other.value);
        break;

      case 5: // realnumber
        value.copy< double > (other.value);
        break;

      case 302: // ClassNumber
        value.copy< int > (other.value);
        break;

      case 4: // number
      case 274: // SignedNumber
        value.copy< long long > (other.value);
        break;

      case 204: // ParameterList
      case 205: // ParameterSeries
        value.copy< std::set<std::string> > (other.value);
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 21: // objectreference
      case 23: // typefieldreference
      case 24: // valuefieldreference
      case 147: // GENERIC_IDENTIFIER_UPPERCASE
      case 148: // GENERIC_IDENTIFIER_LOWERCASE
      case 206: // Parameter
      case 212: // SimpleDefinedType
      case 224: // ModuleIdentifier
      case 242: // GlobalModuleReference
      case 245: // Symbol
      case 246: // Reference
      case 374: // typereference
      case 375: // identifier
      case 376: // valuereference
      case 377: // modulereference
      case 378: // objectclassreference
      case 379: // word
        value.copy< std::string > (other.value);
        break;

      case 247: // AssignmentList
        value.copy< std::vector<Assignment> > (other.value);
        break;

      case 236: // Exports
        value.copy< std::vector<Export> > (other.value);
        break;

      case 238: // Imports
      case 239: // SymbolsImported
      case 240: // SymbolsFromModuleList
        value.copy< std::vector<Import> > (other.value);
        break;

      case 272: // NamedNumberList
        value.copy< std::vector<NamedNumber> > (other.value);
        break;

      case 294: // AlternativeTypeLists
      case 295: // RootAlternativeTypeList
      case 296: // AlternativeTypeList
        value.copy< std::vector<NamedType> > (other.value);
        break;

      case 305: // ObjectIdentifierValue
      case 306: // ObjIdComponentsList
        value.copy< std::vector<ObjectIdComponentValue> > (other.value);
        break;

      case 253: // ActualParameterList
        value.copy< std::vector<Type> > (other.value);
        break;

      case 268: // SequenceOfValues
        value.copy< std::vector<Value> > (other.value);
        break;

      case 244: // SymbolList
        value.copy< std::vector<std::string> > (other.value);
        break;

      default:
        break;
    }

  }


  template <typename Base>
  inline
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const semantic_type& v, const location_type& l)
    : Base (t)
    , value ()
    , location (l)
  {
    (void) v;
      switch (this->type_get ())
    {
      case 158: // ObjectClassAssignment
      case 194: // ObjectSetAssignment
      case 198: // ParameterizedAssignment
      case 199: // ParameterizedTypeAssignment
      case 200: // ParameterizedValueAssignment
      case 201: // ParameterizedValueSetTypeAssignment
      case 202: // ParameterizedObjectClassAssignment
      case 203: // ParameterizedObjectAssignment
      case 248: // Assignment
      case 257: // TypeAssignment
      case 258: // ValueAssignment
      case 259: // ValueSetTypeAssignment
        value.copy< Assignment > (v);
        break;

      case 280: // BitStringType
        value.copy< BitStringType > (v);
        break;

      case 269: // BooleanType
        value.copy< BooleanType > (v);
        break;

      case 261: // BuiltinType
        value.copy< BuiltinType > (v);
        break;

      case 326: // CharacterStringType
        value.copy< CharacterStringType > (v);
        break;

      case 293: // ChoiceType
        value.copy< ChoiceType > (v);
        break;

      case 303: // Class
        value.copy< Class > (v);
        break;

      case 289: // ComponentType
        value.copy< ComponentType > (v);
        break;

      case 286: // ComponentTypeLists
      case 287: // RootComponentTypeList
      case 288: // ComponentTypeList
        value.copy< ComponentTypeList > (v);
        break;

      case 324: // DateTimeType
        value.copy< DateTimeType > (v);
        break;

      case 322: // DateType
        value.copy< DateType > (v);
        break;

      case 249: // DefinedType
      case 251: // ParameterizedType
        value.copy< DefinedType > (v);
        break;

      case 250: // DefinedValue
        value.copy< DefinedValue > (v);
        break;

      case 325: // DurationType
        value.copy< DurationType > (v);
        break;

      case 318: // EmbeddedPDVType
        value.copy< EmbeddedPDVType > (v);
        break;

      case 275: // EnumeratedType
      case 276: // Enumerations
      case 277: // Enumeration
        value.copy< EnumeratedType > (v);
        break;

      case 278: // EnumerationItem
        value.copy< EnumerationValue > (v);
        break;

      case 319: // ExternalType
        value.copy< ExternalType > (v);
        break;

      case 312: // IRIType
        value.copy< IRIType > (v);
        break;

      case 241: // SymbolsFromModule
        value.copy< Import > (v);
        break;

      case 211: // InstanceOfType
        value.copy< InstanceOfType > (v);
        break;

      case 271: // IntegerType
        value.copy< IntegerType > (v);
        break;

      case 235: // ModuleBody
        value.copy< Module > (v);
        break;

      case 273: // NamedNumber
        value.copy< NamedNumber > (v);
        break;

      case 262: // NamedType
        value.copy< NamedType > (v);
        break;

      case 284: // NullType
        value.copy< NullType > (v);
        break;

      case 197: // ObjectClassFieldType
        value.copy< ObjectClassFieldType > (v);
        break;

      case 307: // ObjIdComponents
      case 308: // NameForm
      case 309: // NumberForm
      case 310: // NameAndNumberForm
        value.copy< ObjectIdComponentValue > (v);
        break;

      case 304: // ObjectIdentifierType
        value.copy< ObjectIdentifierType > (v);
        break;

      case 283: // OctetStringType
        value.copy< OctetStringType > (v);
        break;

      case 298: // PrefixedType
        value.copy< PrefixedType > (v);
        break;

      case 279: // RealType
        value.copy< RealType > (v);
        break;

      case 317: // RelativeIRIType
        value.copy< RelativeIRIType > (v);
        break;

      case 311: // RelativeOIDType
        value.copy< RelativeOIDType > (v);
        break;

      case 290: // SequenceOfType
        value.copy< SequenceOfType > (v);
        break;

      case 285: // SequenceType
        value.copy< SequenceType > (v);
        break;

      case 292: // SetOfType
        value.copy< SetOfType > (v);
        break;

      case 291: // SetType
        value.copy< SetType > (v);
        break;

      case 300: // Tag
        value.copy< Tag > (v);
        break;

      case 299: // TaggedType
        value.copy< TaggedType > (v);
        break;

      case 233: // TagDefault
        value.copy< TaggingMode > (v);
        break;

      case 323: // TimeOfDayType
        value.copy< TimeOfDayType > (v);
        break;

      case 320: // TimeType
        value.copy< TimeType > (v);
        break;

      case 254: // ActualParameter
      case 260: // Type
      case 329: // ConstrainedType
        value.copy< Type > (v);
        break;

      case 263: // ValueWithoutTypeIdentifier
      case 264: // Value
      case 349: // SingleValue
        value.copy< Value > (v);
        break;

      case 5: // realnumber
        value.copy< double > (v);
        break;

      case 302: // ClassNumber
        value.copy< int > (v);
        break;

      case 4: // number
      case 274: // SignedNumber
        value.copy< long long > (v);
        break;

      case 204: // ParameterList
      case 205: // ParameterSeries
        value.copy< std::set<std::string> > (v);
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 21: // objectreference
      case 23: // typefieldreference
      case 24: // valuefieldreference
      case 147: // GENERIC_IDENTIFIER_UPPERCASE
      case 148: // GENERIC_IDENTIFIER_LOWERCASE
      case 206: // Parameter
      case 212: // SimpleDefinedType
      case 224: // ModuleIdentifier
      case 242: // GlobalModuleReference
      case 245: // Symbol
      case 246: // Reference
      case 374: // typereference
      case 375: // identifier
      case 376: // valuereference
      case 377: // modulereference
      case 378: // objectclassreference
      case 379: // word
        value.copy< std::string > (v);
        break;

      case 247: // AssignmentList
        value.copy< std::vector<Assignment> > (v);
        break;

      case 236: // Exports
        value.copy< std::vector<Export> > (v);
        break;

      case 238: // Imports
      case 239: // SymbolsImported
      case 240: // SymbolsFromModuleList
        value.copy< std::vector<Import> > (v);
        break;

      case 272: // NamedNumberList
        value.copy< std::vector<NamedNumber> > (v);
        break;

      case 294: // AlternativeTypeLists
      case 295: // RootAlternativeTypeList
      case 296: // AlternativeTypeList
        value.copy< std::vector<NamedType> > (v);
        break;

      case 305: // ObjectIdentifierValue
      case 306: // ObjIdComponentsList
        value.copy< std::vector<ObjectIdComponentValue> > (v);
        break;

      case 253: // ActualParameterList
        value.copy< std::vector<Type> > (v);
        break;

      case 268: // SequenceOfValues
        value.copy< std::vector<Value> > (v);
        break;

      case 244: // SymbolList
        value.copy< std::vector<std::string> > (v);
        break;

      default:
        break;
    }
}


  // Implementation of basic_symbol constructor for each type.

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const location_type& l)
    : Base (t)
    , value ()
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Assignment v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const BitStringType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const BooleanType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const BuiltinType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const CharacterStringType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ChoiceType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Class v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ComponentType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ComponentTypeList v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const DateTimeType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const DateType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const DefinedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const DefinedValue v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const DurationType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const EmbeddedPDVType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const EnumeratedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const EnumerationValue v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ExternalType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const IRIType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Import v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const InstanceOfType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const IntegerType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Module v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const NamedNumber v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const NamedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const NullType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ObjectClassFieldType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ObjectIdComponentValue v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ObjectIdentifierType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const OctetStringType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const PrefixedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const RealType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const RelativeIRIType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const RelativeOIDType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const SequenceOfType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const SequenceType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const SetOfType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const SetType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Tag v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const TaggedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const TaggingMode v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const TimeOfDayType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const TimeType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Type v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Value v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const double v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const int v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const long long v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::set<std::string> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::string v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<Assignment> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<Export> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<Import> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<NamedNumber> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<NamedType> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<ObjectIdComponentValue> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<Type> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<Value> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<std::string> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}


  template <typename Base>
  inline
  asn1_parser::basic_symbol<Base>::~basic_symbol ()
  {
    clear ();
  }

  template <typename Base>
  inline
  void
  asn1_parser::basic_symbol<Base>::clear ()
  {
    // User destructor.
    symbol_number_type yytype = this->type_get ();
    basic_symbol<Base>& yysym = *this;
    (void) yysym;
    switch (yytype)
    {
   default:
      break;
    }

    // Type destructor.
    switch (yytype)
    {
      case 158: // ObjectClassAssignment
      case 194: // ObjectSetAssignment
      case 198: // ParameterizedAssignment
      case 199: // ParameterizedTypeAssignment
      case 200: // ParameterizedValueAssignment
      case 201: // ParameterizedValueSetTypeAssignment
      case 202: // ParameterizedObjectClassAssignment
      case 203: // ParameterizedObjectAssignment
      case 248: // Assignment
      case 257: // TypeAssignment
      case 258: // ValueAssignment
      case 259: // ValueSetTypeAssignment
        value.template destroy< Assignment > ();
        break;

      case 280: // BitStringType
        value.template destroy< BitStringType > ();
        break;

      case 269: // BooleanType
        value.template destroy< BooleanType > ();
        break;

      case 261: // BuiltinType
        value.template destroy< BuiltinType > ();
        break;

      case 326: // CharacterStringType
        value.template destroy< CharacterStringType > ();
        break;

      case 293: // ChoiceType
        value.template destroy< ChoiceType > ();
        break;

      case 303: // Class
        value.template destroy< Class > ();
        break;

      case 289: // ComponentType
        value.template destroy< ComponentType > ();
        break;

      case 286: // ComponentTypeLists
      case 287: // RootComponentTypeList
      case 288: // ComponentTypeList
        value.template destroy< ComponentTypeList > ();
        break;

      case 324: // DateTimeType
        value.template destroy< DateTimeType > ();
        break;

      case 322: // DateType
        value.template destroy< DateType > ();
        break;

      case 249: // DefinedType
      case 251: // ParameterizedType
        value.template destroy< DefinedType > ();
        break;

      case 250: // DefinedValue
        value.template destroy< DefinedValue > ();
        break;

      case 325: // DurationType
        value.template destroy< DurationType > ();
        break;

      case 318: // EmbeddedPDVType
        value.template destroy< EmbeddedPDVType > ();
        break;

      case 275: // EnumeratedType
      case 276: // Enumerations
      case 277: // Enumeration
        value.template destroy< EnumeratedType > ();
        break;

      case 278: // EnumerationItem
        value.template destroy< EnumerationValue > ();
        break;

      case 319: // ExternalType
        value.template destroy< ExternalType > ();
        break;

      case 312: // IRIType
        value.template destroy< IRIType > ();
        break;

      case 241: // SymbolsFromModule
        value.template destroy< Import > ();
        break;

      case 211: // InstanceOfType
        value.template destroy< InstanceOfType > ();
        break;

      case 271: // IntegerType
        value.template destroy< IntegerType > ();
        break;

      case 235: // ModuleBody
        value.template destroy< Module > ();
        break;

      case 273: // NamedNumber
        value.template destroy< NamedNumber > ();
        break;

      case 262: // NamedType
        value.template destroy< NamedType > ();
        break;

      case 284: // NullType
        value.template destroy< NullType > ();
        break;

      case 197: // ObjectClassFieldType
        value.template destroy< ObjectClassFieldType > ();
        break;

      case 307: // ObjIdComponents
      case 308: // NameForm
      case 309: // NumberForm
      case 310: // NameAndNumberForm
        value.template destroy< ObjectIdComponentValue > ();
        break;

      case 304: // ObjectIdentifierType
        value.template destroy< ObjectIdentifierType > ();
        break;

      case 283: // OctetStringType
        value.template destroy< OctetStringType > ();
        break;

      case 298: // PrefixedType
        value.template destroy< PrefixedType > ();
        break;

      case 279: // RealType
        value.template destroy< RealType > ();
        break;

      case 317: // RelativeIRIType
        value.template destroy< RelativeIRIType > ();
        break;

      case 311: // RelativeOIDType
        value.template destroy< RelativeOIDType > ();
        break;

      case 290: // SequenceOfType
        value.template destroy< SequenceOfType > ();
        break;

      case 285: // SequenceType
        value.template destroy< SequenceType > ();
        break;

      case 292: // SetOfType
        value.template destroy< SetOfType > ();
        break;

      case 291: // SetType
        value.template destroy< SetType > ();
        break;

      case 300: // Tag
        value.template destroy< Tag > ();
        break;

      case 299: // TaggedType
        value.template destroy< TaggedType > ();
        break;

      case 233: // TagDefault
        value.template destroy< TaggingMode > ();
        break;

      case 323: // TimeOfDayType
        value.template destroy< TimeOfDayType > ();
        break;

      case 320: // TimeType
        value.template destroy< TimeType > ();
        break;

      case 254: // ActualParameter
      case 260: // Type
      case 329: // ConstrainedType
        value.template destroy< Type > ();
        break;

      case 263: // ValueWithoutTypeIdentifier
      case 264: // Value
      case 349: // SingleValue
        value.template destroy< Value > ();
        break;

      case 5: // realnumber
        value.template destroy< double > ();
        break;

      case 302: // ClassNumber
        value.template destroy< int > ();
        break;

      case 4: // number
      case 274: // SignedNumber
        value.template destroy< long long > ();
        break;

      case 204: // ParameterList
      case 205: // ParameterSeries
        value.template destroy< std::set<std::string> > ();
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 21: // objectreference
      case 23: // typefieldreference
      case 24: // valuefieldreference
      case 147: // GENERIC_IDENTIFIER_UPPERCASE
      case 148: // GENERIC_IDENTIFIER_LOWERCASE
      case 206: // Parameter
      case 212: // SimpleDefinedType
      case 224: // ModuleIdentifier
      case 242: // GlobalModuleReference
      case 245: // Symbol
      case 246: // Reference
      case 374: // typereference
      case 375: // identifier
      case 376: // valuereference
      case 377: // modulereference
      case 378: // objectclassreference
      case 379: // word
        value.template destroy< std::string > ();
        break;

      case 247: // AssignmentList
        value.template destroy< std::vector<Assignment> > ();
        break;

      case 236: // Exports
        value.template destroy< std::vector<Export> > ();
        break;

      case 238: // Imports
      case 239: // SymbolsImported
      case 240: // SymbolsFromModuleList
        value.template destroy< std::vector<Import> > ();
        break;

      case 272: // NamedNumberList
        value.template destroy< std::vector<NamedNumber> > ();
        break;

      case 294: // AlternativeTypeLists
      case 295: // RootAlternativeTypeList
      case 296: // AlternativeTypeList
        value.template destroy< std::vector<NamedType> > ();
        break;

      case 305: // ObjectIdentifierValue
      case 306: // ObjIdComponentsList
        value.template destroy< std::vector<ObjectIdComponentValue> > ();
        break;

      case 253: // ActualParameterList
        value.template destroy< std::vector<Type> > ();
        break;

      case 268: // SequenceOfValues
        value.template destroy< std::vector<Value> > ();
        break;

      case 244: // SymbolList
        value.template destroy< std::vector<std::string> > ();
        break;

      default:
        break;
    }

    Base::clear ();
  }

  template <typename Base>
  inline
  bool
  asn1_parser::basic_symbol<Base>::empty () const
  {
    return Base::type_get () == empty_symbol;
  }

  template <typename Base>
  inline
  void
  asn1_parser::basic_symbol<Base>::move (basic_symbol& s)
  {
    super_type::move(s);
      switch (this->type_get ())
    {
      case 158: // ObjectClassAssignment
      case 194: // ObjectSetAssignment
      case 198: // ParameterizedAssignment
      case 199: // ParameterizedTypeAssignment
      case 200: // ParameterizedValueAssignment
      case 201: // ParameterizedValueSetTypeAssignment
      case 202: // ParameterizedObjectClassAssignment
      case 203: // ParameterizedObjectAssignment
      case 248: // Assignment
      case 257: // TypeAssignment
      case 258: // ValueAssignment
      case 259: // ValueSetTypeAssignment
        value.move< Assignment > (s.value);
        break;

      case 280: // BitStringType
        value.move< BitStringType > (s.value);
        break;

      case 269: // BooleanType
        value.move< BooleanType > (s.value);
        break;

      case 261: // BuiltinType
        value.move< BuiltinType > (s.value);
        break;

      case 326: // CharacterStringType
        value.move< CharacterStringType > (s.value);
        break;

      case 293: // ChoiceType
        value.move< ChoiceType > (s.value);
        break;

      case 303: // Class
        value.move< Class > (s.value);
        break;

      case 289: // ComponentType
        value.move< ComponentType > (s.value);
        break;

      case 286: // ComponentTypeLists
      case 287: // RootComponentTypeList
      case 288: // ComponentTypeList
        value.move< ComponentTypeList > (s.value);
        break;

      case 324: // DateTimeType
        value.move< DateTimeType > (s.value);
        break;

      case 322: // DateType
        value.move< DateType > (s.value);
        break;

      case 249: // DefinedType
      case 251: // ParameterizedType
        value.move< DefinedType > (s.value);
        break;

      case 250: // DefinedValue
        value.move< DefinedValue > (s.value);
        break;

      case 325: // DurationType
        value.move< DurationType > (s.value);
        break;

      case 318: // EmbeddedPDVType
        value.move< EmbeddedPDVType > (s.value);
        break;

      case 275: // EnumeratedType
      case 276: // Enumerations
      case 277: // Enumeration
        value.move< EnumeratedType > (s.value);
        break;

      case 278: // EnumerationItem
        value.move< EnumerationValue > (s.value);
        break;

      case 319: // ExternalType
        value.move< ExternalType > (s.value);
        break;

      case 312: // IRIType
        value.move< IRIType > (s.value);
        break;

      case 241: // SymbolsFromModule
        value.move< Import > (s.value);
        break;

      case 211: // InstanceOfType
        value.move< InstanceOfType > (s.value);
        break;

      case 271: // IntegerType
        value.move< IntegerType > (s.value);
        break;

      case 235: // ModuleBody
        value.move< Module > (s.value);
        break;

      case 273: // NamedNumber
        value.move< NamedNumber > (s.value);
        break;

      case 262: // NamedType
        value.move< NamedType > (s.value);
        break;

      case 284: // NullType
        value.move< NullType > (s.value);
        break;

      case 197: // ObjectClassFieldType
        value.move< ObjectClassFieldType > (s.value);
        break;

      case 307: // ObjIdComponents
      case 308: // NameForm
      case 309: // NumberForm
      case 310: // NameAndNumberForm
        value.move< ObjectIdComponentValue > (s.value);
        break;

      case 304: // ObjectIdentifierType
        value.move< ObjectIdentifierType > (s.value);
        break;

      case 283: // OctetStringType
        value.move< OctetStringType > (s.value);
        break;

      case 298: // PrefixedType
        value.move< PrefixedType > (s.value);
        break;

      case 279: // RealType
        value.move< RealType > (s.value);
        break;

      case 317: // RelativeIRIType
        value.move< RelativeIRIType > (s.value);
        break;

      case 311: // RelativeOIDType
        value.move< RelativeOIDType > (s.value);
        break;

      case 290: // SequenceOfType
        value.move< SequenceOfType > (s.value);
        break;

      case 285: // SequenceType
        value.move< SequenceType > (s.value);
        break;

      case 292: // SetOfType
        value.move< SetOfType > (s.value);
        break;

      case 291: // SetType
        value.move< SetType > (s.value);
        break;

      case 300: // Tag
        value.move< Tag > (s.value);
        break;

      case 299: // TaggedType
        value.move< TaggedType > (s.value);
        break;

      case 233: // TagDefault
        value.move< TaggingMode > (s.value);
        break;

      case 323: // TimeOfDayType
        value.move< TimeOfDayType > (s.value);
        break;

      case 320: // TimeType
        value.move< TimeType > (s.value);
        break;

      case 254: // ActualParameter
      case 260: // Type
      case 329: // ConstrainedType
        value.move< Type > (s.value);
        break;

      case 263: // ValueWithoutTypeIdentifier
      case 264: // Value
      case 349: // SingleValue
        value.move< Value > (s.value);
        break;

      case 5: // realnumber
        value.move< double > (s.value);
        break;

      case 302: // ClassNumber
        value.move< int > (s.value);
        break;

      case 4: // number
      case 274: // SignedNumber
        value.move< long long > (s.value);
        break;

      case 204: // ParameterList
      case 205: // ParameterSeries
        value.move< std::set<std::string> > (s.value);
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 21: // objectreference
      case 23: // typefieldreference
      case 24: // valuefieldreference
      case 147: // GENERIC_IDENTIFIER_UPPERCASE
      case 148: // GENERIC_IDENTIFIER_LOWERCASE
      case 206: // Parameter
      case 212: // SimpleDefinedType
      case 224: // ModuleIdentifier
      case 242: // GlobalModuleReference
      case 245: // Symbol
      case 246: // Reference
      case 374: // typereference
      case 375: // identifier
      case 376: // valuereference
      case 377: // modulereference
      case 378: // objectclassreference
      case 379: // word
        value.move< std::string > (s.value);
        break;

      case 247: // AssignmentList
        value.move< std::vector<Assignment> > (s.value);
        break;

      case 236: // Exports
        value.move< std::vector<Export> > (s.value);
        break;

      case 238: // Imports
      case 239: // SymbolsImported
      case 240: // SymbolsFromModuleList
        value.move< std::vector<Import> > (s.value);
        break;

      case 272: // NamedNumberList
        value.move< std::vector<NamedNumber> > (s.value);
        break;

      case 294: // AlternativeTypeLists
      case 295: // RootAlternativeTypeList
      case 296: // AlternativeTypeList
        value.move< std::vector<NamedType> > (s.value);
        break;

      case 305: // ObjectIdentifierValue
      case 306: // ObjIdComponentsList
        value.move< std::vector<ObjectIdComponentValue> > (s.value);
        break;

      case 253: // ActualParameterList
        value.move< std::vector<Type> > (s.value);
        break;

      case 268: // SequenceOfValues
        value.move< std::vector<Value> > (s.value);
        break;

      case 244: // SymbolList
        value.move< std::vector<std::string> > (s.value);
        break;

      default:
        break;
    }

    location = s.location;
  }

  // by_type.
  inline
  asn1_parser::by_type::by_type ()
    : type (empty_symbol)
  {}

  inline
  asn1_parser::by_type::by_type (const by_type& other)
    : type (other.type)
  {}

  inline
  asn1_parser::by_type::by_type (token_type t)
    : type (yytranslate_ (t))
  {}

  inline
  void
  asn1_parser::by_type::clear ()
  {
    type = empty_symbol;
  }

  inline
  void
  asn1_parser::by_type::move (by_type& that)
  {
    type = that.type;
    that.clear ();
  }

  inline
  int
  asn1_parser::by_type::type_get () const
  {
    return type;
  }

  inline
  asn1_parser::token_type
  asn1_parser::by_type::token () const
  {
    // YYTOKNUM[NUM] -- (External) token number corresponding to the
    // (internal) symbol number NUM (which must be that of a token).  */
    static
    const unsigned short int
    yytoken_number_[] =
    {
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405
    };
    return static_cast<token_type> (yytoken_number_[type]);
  }
  // Implementation of make_symbol for each symbol type.
  asn1_parser::symbol_type
  asn1_parser::make_END_OF_FILE (const location_type& l)
  {
    return symbol_type (token::END_OF_FILE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_comment (const location_type& l)
  {
    return symbol_type (token::comment, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_number (const long long& v, const location_type& l)
  {
    return symbol_type (token::number, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_realnumber (const double& v, const location_type& l)
  {
    return symbol_type (token::realnumber, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_bstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::bstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmlbstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::xmlbstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_hstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::hstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmlhstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::xmlhstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_cstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::cstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmlcstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::xmlcstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_simplestring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::simplestring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmltstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::xmltstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_psname (const location_type& l)
  {
    return symbol_type (token::psname, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_encodingreference (const location_type& l)
  {
    return symbol_type (token::encodingreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_integerUnicodeLabel (const location_type& l)
  {
    return symbol_type (token::integerUnicodeLabel, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_tstring (const location_type& l)
  {
    return symbol_type (token::tstring, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_objectreference (const std::string& v, const location_type& l)
  {
    return symbol_type (token::objectreference, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_objectsetreference (const location_type& l)
  {
    return symbol_type (token::objectsetreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_typefieldreference (const std::string& v, const location_type& l)
  {
    return symbol_type (token::typefieldreference, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_valuefieldreference (const std::string& v, const location_type& l)
  {
    return symbol_type (token::valuefieldreference, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_valuesetfieldreference (const location_type& l)
  {
    return symbol_type (token::valuesetfieldreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_objectfieldreference (const location_type& l)
  {
    return symbol_type (token::objectfieldreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_objectsetfieldreference (const location_type& l)
  {
    return symbol_type (token::objectsetfieldreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ABSENT (const location_type& l)
  {
    return symbol_type (token::ABSENT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ABSTRACT_SYNTAX (const location_type& l)
  {
    return symbol_type (token::ABSTRACT_SYNTAX, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ALL (const location_type& l)
  {
    return symbol_type (token::ALL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_APPLICATION (const location_type& l)
  {
    return symbol_type (token::APPLICATION, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ASN_NULL (const location_type& l)
  {
    return symbol_type (token::ASN_NULL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_AUTOMATIC (const location_type& l)
  {
    return symbol_type (token::AUTOMATIC, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BEGIN (const location_type& l)
  {
    return symbol_type (token::BEGIN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BIT (const location_type& l)
  {
    return symbol_type (token::BIT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BMPString (const location_type& l)
  {
    return symbol_type (token::BMPString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BOOLEAN (const location_type& l)
  {
    return symbol_type (token::BOOLEAN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BY (const location_type& l)
  {
    return symbol_type (token::BY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CHARACTER (const location_type& l)
  {
    return symbol_type (token::CHARACTER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CHOICE (const location_type& l)
  {
    return symbol_type (token::CHOICE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CLASS (const location_type& l)
  {
    return symbol_type (token::CLASS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_COMPONENT (const location_type& l)
  {
    return symbol_type (token::COMPONENT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_COMPONENTS (const location_type& l)
  {
    return symbol_type (token::COMPONENTS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CONSTRAINED (const location_type& l)
  {
    return symbol_type (token::CONSTRAINED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CONTAINING (const location_type& l)
  {
    return symbol_type (token::CONTAINING, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DATE (const location_type& l)
  {
    return symbol_type (token::DATE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DATE_TIME (const location_type& l)
  {
    return symbol_type (token::DATE_TIME, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DEFAULT (const location_type& l)
  {
    return symbol_type (token::DEFAULT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DEFINITIONS (const location_type& l)
  {
    return symbol_type (token::DEFINITIONS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DURATION (const location_type& l)
  {
    return symbol_type (token::DURATION, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EMBEDDED (const location_type& l)
  {
    return symbol_type (token::EMBEDDED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ENCODED (const location_type& l)
  {
    return symbol_type (token::ENCODED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ENCODING_CONTROL (const location_type& l)
  {
    return symbol_type (token::ENCODING_CONTROL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_END (const location_type& l)
  {
    return symbol_type (token::END, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ENUMERATED (const location_type& l)
  {
    return symbol_type (token::ENUMERATED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXCEPT (const location_type& l)
  {
    return symbol_type (token::EXCEPT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXPLICIT (const location_type& l)
  {
    return symbol_type (token::EXPLICIT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXPORTS (const location_type& l)
  {
    return symbol_type (token::EXPORTS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXTENSIBILITY (const location_type& l)
  {
    return symbol_type (token::EXTENSIBILITY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXTERNAL (const location_type& l)
  {
    return symbol_type (token::EXTERNAL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_FALSE (const location_type& l)
  {
    return symbol_type (token::FALSE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_FROM (const location_type& l)
  {
    return symbol_type (token::FROM, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GeneralizedTime (const location_type& l)
  {
    return symbol_type (token::GeneralizedTime, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GeneralString (const location_type& l)
  {
    return symbol_type (token::GeneralString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GraphicString (const location_type& l)
  {
    return symbol_type (token::GraphicString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IA5String (const location_type& l)
  {
    return symbol_type (token::IA5String, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IDENTIFIER (const location_type& l)
  {
    return symbol_type (token::IDENTIFIER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IMPLICIT (const location_type& l)
  {
    return symbol_type (token::IMPLICIT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IMPLIED (const location_type& l)
  {
    return symbol_type (token::IMPLIED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IMPORTS (const location_type& l)
  {
    return symbol_type (token::IMPORTS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INCLUDES (const location_type& l)
  {
    return symbol_type (token::INCLUDES, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INSTANCE (const location_type& l)
  {
    return symbol_type (token::INSTANCE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INSTRUCTIONS (const location_type& l)
  {
    return symbol_type (token::INSTRUCTIONS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INTEGER (const location_type& l)
  {
    return symbol_type (token::INTEGER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INTERSECTION (const location_type& l)
  {
    return symbol_type (token::INTERSECTION, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ISO646String (const location_type& l)
  {
    return symbol_type (token::ISO646String, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_MAX (const location_type& l)
  {
    return symbol_type (token::MAX, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_MIN (const location_type& l)
  {
    return symbol_type (token::MIN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_MINUS_INFINITY (const location_type& l)
  {
    return symbol_type (token::MINUS_INFINITY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_NOT_A_NUMBER (const location_type& l)
  {
    return symbol_type (token::NOT_A_NUMBER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_NumericString (const location_type& l)
  {
    return symbol_type (token::NumericString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OBJECT (const location_type& l)
  {
    return symbol_type (token::OBJECT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ObjectDescriptor (const location_type& l)
  {
    return symbol_type (token::ObjectDescriptor, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OCTET (const location_type& l)
  {
    return symbol_type (token::OCTET, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OF (const location_type& l)
  {
    return symbol_type (token::OF, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OID_IRI (const location_type& l)
  {
    return symbol_type (token::OID_IRI, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OPTIONAL (const location_type& l)
  {
    return symbol_type (token::OPTIONAL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PATTERN (const location_type& l)
  {
    return symbol_type (token::PATTERN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PDV (const location_type& l)
  {
    return symbol_type (token::PDV, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PLUS_INFINITY (const location_type& l)
  {
    return symbol_type (token::PLUS_INFINITY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PRESENT (const location_type& l)
  {
    return symbol_type (token::PRESENT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PrintableString (const location_type& l)
  {
    return symbol_type (token::PrintableString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PRIVATE (const location_type& l)
  {
    return symbol_type (token::PRIVATE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_REAL (const location_type& l)
  {
    return symbol_type (token::REAL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_RELATIVE_OID (const location_type& l)
  {
    return symbol_type (token::RELATIVE_OID, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_RELATIVE_OID_IRI (const location_type& l)
  {
    return symbol_type (token::RELATIVE_OID_IRI, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SEQUENCE (const location_type& l)
  {
    return symbol_type (token::SEQUENCE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SET (const location_type& l)
  {
    return symbol_type (token::SET, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SETTINGS (const location_type& l)
  {
    return symbol_type (token::SETTINGS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SIZE (const location_type& l)
  {
    return symbol_type (token::SIZE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_STRING (const location_type& l)
  {
    return symbol_type (token::STRING, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SYNTAX (const location_type& l)
  {
    return symbol_type (token::SYNTAX, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_T61String (const location_type& l)
  {
    return symbol_type (token::T61String, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TAGS (const location_type& l)
  {
    return symbol_type (token::TAGS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TeletexString (const location_type& l)
  {
    return symbol_type (token::TeletexString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TIME (const location_type& l)
  {
    return symbol_type (token::TIME, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TIME_OF_DAY (const location_type& l)
  {
    return symbol_type (token::TIME_OF_DAY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TRUE (const location_type& l)
  {
    return symbol_type (token::TRUE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TYPE_IDENTIFIER (const location_type& l)
  {
    return symbol_type (token::TYPE_IDENTIFIER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UNION (const location_type& l)
  {
    return symbol_type (token::UNION, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UNIQUE (const location_type& l)
  {
    return symbol_type (token::UNIQUE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UNIVERSAL (const location_type& l)
  {
    return symbol_type (token::UNIVERSAL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UniversalString (const location_type& l)
  {
    return symbol_type (token::UniversalString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UTCTime (const location_type& l)
  {
    return symbol_type (token::UTCTime, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UTF8String (const location_type& l)
  {
    return symbol_type (token::UTF8String, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_VideotexString (const location_type& l)
  {
    return symbol_type (token::VideotexString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_VisibleString (const location_type& l)
  {
    return symbol_type (token::VisibleString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_WITH (const location_type& l)
  {
    return symbol_type (token::WITH, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DEFINED_AS (const location_type& l)
  {
    return symbol_type (token::DEFINED_AS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ELIPSIS (const location_type& l)
  {
    return symbol_type (token::ELIPSIS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_RANGE (const location_type& l)
  {
    return symbol_type (token::RANGE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OPEN_BRACE (const location_type& l)
  {
    return symbol_type (token::OPEN_BRACE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CLOSE_BRACE (const location_type& l)
  {
    return symbol_type (token::CLOSE_BRACE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OPEN_PARENTHESIS (const location_type& l)
  {
    return symbol_type (token::OPEN_PARENTHESIS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CLOSE_PARENTHESIS (const location_type& l)
  {
    return symbol_type (token::CLOSE_PARENTHESIS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OPEN_SQUARE_BRACKET (const location_type& l)
  {
    return symbol_type (token::OPEN_SQUARE_BRACKET, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CLOSE_SQUARE_BRACKET (const location_type& l)
  {
    return symbol_type (token::CLOSE_SQUARE_BRACKET, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_LESS_THAN (const location_type& l)
  {
    return symbol_type (token::LESS_THAN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GREATER_THAN (const location_type& l)
  {
    return symbol_type (token::GREATER_THAN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXCLAMATION_MARK (const location_type& l)
  {
    return symbol_type (token::EXCLAMATION_MARK, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_QUOTATION_MARK (const location_type& l)
  {
    return symbol_type (token::QUOTATION_MARK, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_AMPERSAND (const location_type& l)
  {
    return symbol_type (token::AMPERSAND, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_APOSTROPHE (const location_type& l)
  {
    return symbol_type (token::APOSTROPHE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ASTERISK (const location_type& l)
  {
    return symbol_type (token::ASTERISK, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_COMMA (const location_type& l)
  {
    return symbol_type (token::COMMA, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_FULL_STOP (const location_type& l)
  {
    return symbol_type (token::FULL_STOP, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_HYPHEN_MINUS (const location_type& l)
  {
    return symbol_type (token::HYPHEN_MINUS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SOLIDUS (const location_type& l)
  {
    return symbol_type (token::SOLIDUS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_COLON (const location_type& l)
  {
    return symbol_type (token::COLON, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SEMICOLON (const location_type& l)
  {
    return symbol_type (token::SEMICOLON, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EQUALS_SIGN (const location_type& l)
  {
    return symbol_type (token::EQUALS_SIGN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_AT (const location_type& l)
  {
    return symbol_type (token::AT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_VERTICAL_LINE (const location_type& l)
  {
    return symbol_type (token::VERTICAL_LINE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ACCENT (const location_type& l)
  {
    return symbol_type (token::ACCENT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PLUS (const location_type& l)
  {
    return symbol_type (token::PLUS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_STAR (const location_type& l)
  {
    return symbol_type (token::STAR, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GENERIC_IDENTIFIER_UPPERCASE (const std::string& v, const location_type& l)
  {
    return symbol_type (token::GENERIC_IDENTIFIER_UPPERCASE, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GENERIC_IDENTIFIER_LOWERCASE (const std::string& v, const location_type& l)
  {
    return symbol_type (token::GENERIC_IDENTIFIER_LOWERCASE, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GENERIC_INTEGER (const location_type& l)
  {
    return symbol_type (token::GENERIC_INTEGER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmlasn1typename (const location_type& l)
  {
    return symbol_type (token::xmlasn1typename, l);
  }



} // yy
#line 4778 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:408





// User implementation prologue.

#line 4786 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:412
// Unqualified %code blocks.
#line 15 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:413

    struct Context
    {
        const char* cursor;
        yy::location location;

        Asn1Tree asn1_tree;
    };
    void yy::asn1_parser::error(const location_type& l, const std::string& m)
    {
        std::cerr << (l.begin.filename ? l.begin.filename->c_str() : "(undefined)");
        std::cerr << ':' << l.begin.line << ':' << l.begin.column << '-' << l.end.column << ": " << m << '\n';
    }

    namespace yy { asn1_parser::symbol_type yylex(Context& c); }

#line 4805 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:413


#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> // FIXME: INFRINGES ON USER NAME SPACE.
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K].location)
/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

# ifndef YYLLOC_DEFAULT
#  define YYLLOC_DEFAULT(Current, Rhs, N)                               \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).begin  = YYRHSLOC (Rhs, 1).begin;                   \
          (Current).end    = YYRHSLOC (Rhs, N).end;                     \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).begin = (Current).end = YYRHSLOC (Rhs, 0).end;      \
        }                                                               \
    while (/*CONSTCOND*/ false)
# endif


// Suppress unused-variable warnings by "using" E.
#define YYUSE(E) ((void) (E))

// Enable debugging if requested.
#if YYDEBUG

// A pseudo ostream that takes yydebug_ into account.
# define YYCDEBUG if (yydebug_) (*yycdebug_)

# define YY_SYMBOL_PRINT(Title, Symbol)         \
  do {                                          \
    if (yydebug_)                               \
    {                                           \
      *yycdebug_ << Title << ' ';               \
      yy_print_ (*yycdebug_, Symbol);           \
      *yycdebug_ << std::endl;                  \
    }                                           \
  } while (false)

# define YY_REDUCE_PRINT(Rule)          \
  do {                                  \
    if (yydebug_)                       \
      yy_reduce_print_ (Rule);          \
  } while (false)

# define YY_STACK_PRINT()               \
  do {                                  \
    if (yydebug_)                       \
      yystack_print_ ();                \
  } while (false)

#else // !YYDEBUG

# define YYCDEBUG if (false) std::cerr
# define YY_SYMBOL_PRINT(Title, Symbol)  YYUSE(Symbol)
# define YY_REDUCE_PRINT(Rule)           static_cast<void>(0)
# define YY_STACK_PRINT()                static_cast<void>(0)

#endif // !YYDEBUG

#define yyerrok         (yyerrstatus_ = 0)
#define yyclearin       (yyla.clear ())

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYRECOVERING()  (!!yyerrstatus_)


namespace yy {
#line 4891 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:479

  /* Return YYSTR after stripping away unnecessary quotes and
     backslashes, so that it's suitable for yyerror.  The heuristic is
     that double-quoting is unnecessary unless the string contains an
     apostrophe, a comma, or backslash (other than backslash-backslash).
     YYSTR is taken from yytname.  */
  std::string
  asn1_parser::yytnamerr_ (const char *yystr)
  {
    if (*yystr == '"')
      {
        std::string yyr = "";
        char const *yyp = yystr;

        for (;;)
          switch (*++yyp)
            {
            case '\'':
            case ',':
              goto do_not_strip_quotes;

            case '\\':
              if (*++yyp != '\\')
                goto do_not_strip_quotes;
              // Fall through.
            default:
              yyr += *yyp;
              break;

            case '"':
              return yyr;
            }
      do_not_strip_quotes: ;
      }

    return yystr;
  }


  /// Build a parser object.
  asn1_parser::asn1_parser (Context& context_yyarg)
    :
#if YYDEBUG
      yydebug_ (false),
      yycdebug_ (&std::cerr),
#endif
      context (context_yyarg)
  {}

  asn1_parser::~asn1_parser ()
  {}


  /*---------------.
  | Symbol types.  |
  `---------------*/



  // by_state.
  inline
  asn1_parser::by_state::by_state ()
    : state (empty_state)
  {}

  inline
  asn1_parser::by_state::by_state (const by_state& other)
    : state (other.state)
  {}

  inline
  void
  asn1_parser::by_state::clear ()
  {
    state = empty_state;
  }

  inline
  void
  asn1_parser::by_state::move (by_state& that)
  {
    state = that.state;
    that.clear ();
  }

  inline
  asn1_parser::by_state::by_state (state_type s)
    : state (s)
  {}

  inline
  asn1_parser::symbol_number_type
  asn1_parser::by_state::type_get () const
  {
    if (state == empty_state)
      return empty_symbol;
    else
      return yystos_[state];
  }

  inline
  asn1_parser::stack_symbol_type::stack_symbol_type ()
  {}


  inline
  asn1_parser::stack_symbol_type::stack_symbol_type (state_type s, symbol_type& that)
    : super_type (s, that.location)
  {
      switch (that.type_get ())
    {
      case 158: // ObjectClassAssignment
      case 194: // ObjectSetAssignment
      case 198: // ParameterizedAssignment
      case 199: // ParameterizedTypeAssignment
      case 200: // ParameterizedValueAssignment
      case 201: // ParameterizedValueSetTypeAssignment
      case 202: // ParameterizedObjectClassAssignment
      case 203: // ParameterizedObjectAssignment
      case 248: // Assignment
      case 257: // TypeAssignment
      case 258: // ValueAssignment
      case 259: // ValueSetTypeAssignment
        value.move< Assignment > (that.value);
        break;

      case 280: // BitStringType
        value.move< BitStringType > (that.value);
        break;

      case 269: // BooleanType
        value.move< BooleanType > (that.value);
        break;

      case 261: // BuiltinType
        value.move< BuiltinType > (that.value);
        break;

      case 326: // CharacterStringType
        value.move< CharacterStringType > (that.value);
        break;

      case 293: // ChoiceType
        value.move< ChoiceType > (that.value);
        break;

      case 303: // Class
        value.move< Class > (that.value);
        break;

      case 289: // ComponentType
        value.move< ComponentType > (that.value);
        break;

      case 286: // ComponentTypeLists
      case 287: // RootComponentTypeList
      case 288: // ComponentTypeList
        value.move< ComponentTypeList > (that.value);
        break;

      case 324: // DateTimeType
        value.move< DateTimeType > (that.value);
        break;

      case 322: // DateType
        value.move< DateType > (that.value);
        break;

      case 249: // DefinedType
      case 251: // ParameterizedType
        value.move< DefinedType > (that.value);
        break;

      case 250: // DefinedValue
        value.move< DefinedValue > (that.value);
        break;

      case 325: // DurationType
        value.move< DurationType > (that.value);
        break;

      case 318: // EmbeddedPDVType
        value.move< EmbeddedPDVType > (that.value);
        break;

      case 275: // EnumeratedType
      case 276: // Enumerations
      case 277: // Enumeration
        value.move< EnumeratedType > (that.value);
        break;

      case 278: // EnumerationItem
        value.move< EnumerationValue > (that.value);
        break;

      case 319: // ExternalType
        value.move< ExternalType > (that.value);
        break;

      case 312: // IRIType
        value.move< IRIType > (that.value);
        break;

      case 241: // SymbolsFromModule
        value.move< Import > (that.value);
        break;

      case 211: // InstanceOfType
        value.move< InstanceOfType > (that.value);
        break;

      case 271: // IntegerType
        value.move< IntegerType > (that.value);
        break;

      case 235: // ModuleBody
        value.move< Module > (that.value);
        break;

      case 273: // NamedNumber
        value.move< NamedNumber > (that.value);
        break;

      case 262: // NamedType
        value.move< NamedType > (that.value);
        break;

      case 284: // NullType
        value.move< NullType > (that.value);
        break;

      case 197: // ObjectClassFieldType
        value.move< ObjectClassFieldType > (that.value);
        break;

      case 307: // ObjIdComponents
      case 308: // NameForm
      case 309: // NumberForm
      case 310: // NameAndNumberForm
        value.move< ObjectIdComponentValue > (that.value);
        break;

      case 304: // ObjectIdentifierType
        value.move< ObjectIdentifierType > (that.value);
        break;

      case 283: // OctetStringType
        value.move< OctetStringType > (that.value);
        break;

      case 298: // PrefixedType
        value.move< PrefixedType > (that.value);
        break;

      case 279: // RealType
        value.move< RealType > (that.value);
        break;

      case 317: // RelativeIRIType
        value.move< RelativeIRIType > (that.value);
        break;

      case 311: // RelativeOIDType
        value.move< RelativeOIDType > (that.value);
        break;

      case 290: // SequenceOfType
        value.move< SequenceOfType > (that.value);
        break;

      case 285: // SequenceType
        value.move< SequenceType > (that.value);
        break;

      case 292: // SetOfType
        value.move< SetOfType > (that.value);
        break;

      case 291: // SetType
        value.move< SetType > (that.value);
        break;

      case 300: // Tag
        value.move< Tag > (that.value);
        break;

      case 299: // TaggedType
        value.move< TaggedType > (that.value);
        break;

      case 233: // TagDefault
        value.move< TaggingMode > (that.value);
        break;

      case 323: // TimeOfDayType
        value.move< TimeOfDayType > (that.value);
        break;

      case 320: // TimeType
        value.move< TimeType > (that.value);
        break;

      case 254: // ActualParameter
      case 260: // Type
      case 329: // ConstrainedType
        value.move< Type > (that.value);
        break;

      case 263: // ValueWithoutTypeIdentifier
      case 264: // Value
      case 349: // SingleValue
        value.move< Value > (that.value);
        break;

      case 5: // realnumber
        value.move< double > (that.value);
        break;

      case 302: // ClassNumber
        value.move< int > (that.value);
        break;

      case 4: // number
      case 274: // SignedNumber
        value.move< long long > (that.value);
        break;

      case 204: // ParameterList
      case 205: // ParameterSeries
        value.move< std::set<std::string> > (that.value);
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 21: // objectreference
      case 23: // typefieldreference
      case 24: // valuefieldreference
      case 147: // GENERIC_IDENTIFIER_UPPERCASE
      case 148: // GENERIC_IDENTIFIER_LOWERCASE
      case 206: // Parameter
      case 212: // SimpleDefinedType
      case 224: // ModuleIdentifier
      case 242: // GlobalModuleReference
      case 245: // Symbol
      case 246: // Reference
      case 374: // typereference
      case 375: // identifier
      case 376: // valuereference
      case 377: // modulereference
      case 378: // objectclassreference
      case 379: // word
        value.move< std::string > (that.value);
        break;

      case 247: // AssignmentList
        value.move< std::vector<Assignment> > (that.value);
        break;

      case 236: // Exports
        value.move< std::vector<Export> > (that.value);
        break;

      case 238: // Imports
      case 239: // SymbolsImported
      case 240: // SymbolsFromModuleList
        value.move< std::vector<Import> > (that.value);
        break;

      case 272: // NamedNumberList
        value.move< std::vector<NamedNumber> > (that.value);
        break;

      case 294: // AlternativeTypeLists
      case 295: // RootAlternativeTypeList
      case 296: // AlternativeTypeList
        value.move< std::vector<NamedType> > (that.value);
        break;

      case 305: // ObjectIdentifierValue
      case 306: // ObjIdComponentsList
        value.move< std::vector<ObjectIdComponentValue> > (that.value);
        break;

      case 253: // ActualParameterList
        value.move< std::vector<Type> > (that.value);
        break;

      case 268: // SequenceOfValues
        value.move< std::vector<Value> > (that.value);
        break;

      case 244: // SymbolList
        value.move< std::vector<std::string> > (that.value);
        break;

      default:
        break;
    }

    // that is emptied.
    that.type = empty_symbol;
  }

  inline
  asn1_parser::stack_symbol_type&
  asn1_parser::stack_symbol_type::operator= (const stack_symbol_type& that)
  {
    state = that.state;
      switch (that.type_get ())
    {
      case 158: // ObjectClassAssignment
      case 194: // ObjectSetAssignment
      case 198: // ParameterizedAssignment
      case 199: // ParameterizedTypeAssignment
      case 200: // ParameterizedValueAssignment
      case 201: // ParameterizedValueSetTypeAssignment
      case 202: // ParameterizedObjectClassAssignment
      case 203: // ParameterizedObjectAssignment
      case 248: // Assignment
      case 257: // TypeAssignment
      case 258: // ValueAssignment
      case 259: // ValueSetTypeAssignment
        value.copy< Assignment > (that.value);
        break;

      case 280: // BitStringType
        value.copy< BitStringType > (that.value);
        break;

      case 269: // BooleanType
        value.copy< BooleanType > (that.value);
        break;

      case 261: // BuiltinType
        value.copy< BuiltinType > (that.value);
        break;

      case 326: // CharacterStringType
        value.copy< CharacterStringType > (that.value);
        break;

      case 293: // ChoiceType
        value.copy< ChoiceType > (that.value);
        break;

      case 303: // Class
        value.copy< Class > (that.value);
        break;

      case 289: // ComponentType
        value.copy< ComponentType > (that.value);
        break;

      case 286: // ComponentTypeLists
      case 287: // RootComponentTypeList
      case 288: // ComponentTypeList
        value.copy< ComponentTypeList > (that.value);
        break;

      case 324: // DateTimeType
        value.copy< DateTimeType > (that.value);
        break;

      case 322: // DateType
        value.copy< DateType > (that.value);
        break;

      case 249: // DefinedType
      case 251: // ParameterizedType
        value.copy< DefinedType > (that.value);
        break;

      case 250: // DefinedValue
        value.copy< DefinedValue > (that.value);
        break;

      case 325: // DurationType
        value.copy< DurationType > (that.value);
        break;

      case 318: // EmbeddedPDVType
        value.copy< EmbeddedPDVType > (that.value);
        break;

      case 275: // EnumeratedType
      case 276: // Enumerations
      case 277: // Enumeration
        value.copy< EnumeratedType > (that.value);
        break;

      case 278: // EnumerationItem
        value.copy< EnumerationValue > (that.value);
        break;

      case 319: // ExternalType
        value.copy< ExternalType > (that.value);
        break;

      case 312: // IRIType
        value.copy< IRIType > (that.value);
        break;

      case 241: // SymbolsFromModule
        value.copy< Import > (that.value);
        break;

      case 211: // InstanceOfType
        value.copy< InstanceOfType > (that.value);
        break;

      case 271: // IntegerType
        value.copy< IntegerType > (that.value);
        break;

      case 235: // ModuleBody
        value.copy< Module > (that.value);
        break;

      case 273: // NamedNumber
        value.copy< NamedNumber > (that.value);
        break;

      case 262: // NamedType
        value.copy< NamedType > (that.value);
        break;

      case 284: // NullType
        value.copy< NullType > (that.value);
        break;

      case 197: // ObjectClassFieldType
        value.copy< ObjectClassFieldType > (that.value);
        break;

      case 307: // ObjIdComponents
      case 308: // NameForm
      case 309: // NumberForm
      case 310: // NameAndNumberForm
        value.copy< ObjectIdComponentValue > (that.value);
        break;

      case 304: // ObjectIdentifierType
        value.copy< ObjectIdentifierType > (that.value);
        break;

      case 283: // OctetStringType
        value.copy< OctetStringType > (that.value);
        break;

      case 298: // PrefixedType
        value.copy< PrefixedType > (that.value);
        break;

      case 279: // RealType
        value.copy< RealType > (that.value);
        break;

      case 317: // RelativeIRIType
        value.copy< RelativeIRIType > (that.value);
        break;

      case 311: // RelativeOIDType
        value.copy< RelativeOIDType > (that.value);
        break;

      case 290: // SequenceOfType
        value.copy< SequenceOfType > (that.value);
        break;

      case 285: // SequenceType
        value.copy< SequenceType > (that.value);
        break;

      case 292: // SetOfType
        value.copy< SetOfType > (that.value);
        break;

      case 291: // SetType
        value.copy< SetType > (that.value);
        break;

      case 300: // Tag
        value.copy< Tag > (that.value);
        break;

      case 299: // TaggedType
        value.copy< TaggedType > (that.value);
        break;

      case 233: // TagDefault
        value.copy< TaggingMode > (that.value);
        break;

      case 323: // TimeOfDayType
        value.copy< TimeOfDayType > (that.value);
        break;

      case 320: // TimeType
        value.copy< TimeType > (that.value);
        break;

      case 254: // ActualParameter
      case 260: // Type
      case 329: // ConstrainedType
        value.copy< Type > (that.value);
        break;

      case 263: // ValueWithoutTypeIdentifier
      case 264: // Value
      case 349: // SingleValue
        value.copy< Value > (that.value);
        break;

      case 5: // realnumber
        value.copy< double > (that.value);
        break;

      case 302: // ClassNumber
        value.copy< int > (that.value);
        break;

      case 4: // number
      case 274: // SignedNumber
        value.copy< long long > (that.value);
        break;

      case 204: // ParameterList
      case 205: // ParameterSeries
        value.copy< std::set<std::string> > (that.value);
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 21: // objectreference
      case 23: // typefieldreference
      case 24: // valuefieldreference
      case 147: // GENERIC_IDENTIFIER_UPPERCASE
      case 148: // GENERIC_IDENTIFIER_LOWERCASE
      case 206: // Parameter
      case 212: // SimpleDefinedType
      case 224: // ModuleIdentifier
      case 242: // GlobalModuleReference
      case 245: // Symbol
      case 246: // Reference
      case 374: // typereference
      case 375: // identifier
      case 376: // valuereference
      case 377: // modulereference
      case 378: // objectclassreference
      case 379: // word
        value.copy< std::string > (that.value);
        break;

      case 247: // AssignmentList
        value.copy< std::vector<Assignment> > (that.value);
        break;

      case 236: // Exports
        value.copy< std::vector<Export> > (that.value);
        break;

      case 238: // Imports
      case 239: // SymbolsImported
      case 240: // SymbolsFromModuleList
        value.copy< std::vector<Import> > (that.value);
        break;

      case 272: // NamedNumberList
        value.copy< std::vector<NamedNumber> > (that.value);
        break;

      case 294: // AlternativeTypeLists
      case 295: // RootAlternativeTypeList
      case 296: // AlternativeTypeList
        value.copy< std::vector<NamedType> > (that.value);
        break;

      case 305: // ObjectIdentifierValue
      case 306: // ObjIdComponentsList
        value.copy< std::vector<ObjectIdComponentValue> > (that.value);
        break;

      case 253: // ActualParameterList
        value.copy< std::vector<Type> > (that.value);
        break;

      case 268: // SequenceOfValues
        value.copy< std::vector<Value> > (that.value);
        break;

      case 244: // SymbolList
        value.copy< std::vector<std::string> > (that.value);
        break;

      default:
        break;
    }

    location = that.location;
    return *this;
  }


  template <typename Base>
  inline
  void
  asn1_parser::yy_destroy_ (const char* yymsg, basic_symbol<Base>& yysym) const
  {
    if (yymsg)
      YY_SYMBOL_PRINT (yymsg, yysym);
  }

#if YYDEBUG
  template <typename Base>
  void
  asn1_parser::yy_print_ (std::ostream& yyo,
                                     const basic_symbol<Base>& yysym) const
  {
    std::ostream& yyoutput = yyo;
    YYUSE (yyoutput);
    symbol_number_type yytype = yysym.type_get ();
    // Avoid a (spurious) G++ 4.8 warning about "array subscript is
    // below array bounds".
    if (yysym.empty ())
      std::abort ();
    yyo << (yytype < yyntokens_ ? "token" : "nterm")
        << ' ' << yytname_[yytype] << " ("
        << yysym.location << ": ";
    YYUSE (yytype);
    yyo << ')';
  }
#endif

  inline
  void
  asn1_parser::yypush_ (const char* m, state_type s, symbol_type& sym)
  {
    stack_symbol_type t (s, sym);
    yypush_ (m, t);
  }

  inline
  void
  asn1_parser::yypush_ (const char* m, stack_symbol_type& s)
  {
    if (m)
      YY_SYMBOL_PRINT (m, s);
    yystack_.push (s);
  }

  inline
  void
  asn1_parser::yypop_ (unsigned int n)
  {
    yystack_.pop (n);
  }

#if YYDEBUG
  std::ostream&
  asn1_parser::debug_stream () const
  {
    return *yycdebug_;
  }

  void
  asn1_parser::set_debug_stream (std::ostream& o)
  {
    yycdebug_ = &o;
  }


  asn1_parser::debug_level_type
  asn1_parser::debug_level () const
  {
    return yydebug_;
  }

  void
  asn1_parser::set_debug_level (debug_level_type l)
  {
    yydebug_ = l;
  }
#endif // YYDEBUG

  inline asn1_parser::state_type
  asn1_parser::yy_lr_goto_state_ (state_type yystate, int yysym)
  {
    int yyr = yypgoto_[yysym - yyntokens_] + yystate;
    if (0 <= yyr && yyr <= yylast_ && yycheck_[yyr] == yystate)
      return yytable_[yyr];
    else
      return yydefgoto_[yysym - yyntokens_];
  }

  inline bool
  asn1_parser::yy_pact_value_is_default_ (int yyvalue)
  {
    return yyvalue == yypact_ninf_;
  }

  inline bool
  asn1_parser::yy_table_value_is_error_ (int yyvalue)
  {
    return yyvalue == yytable_ninf_;
  }

  int
  asn1_parser::parse ()
  {
    // State.
    int yyn;
    /// Length of the RHS of the rule being reduced.
    int yylen = 0;

    // Error handling.
    int yynerrs_ = 0;
    int yyerrstatus_ = 0;

    /// The lookahead symbol.
    symbol_type yyla;

    /// The locations where the error started and ended.
    stack_symbol_type yyerror_range[3];

    /// The return value of parse ().
    int yyresult;

    // FIXME: This shoud be completely indented.  It is not yet to
    // avoid gratuitous conflicts when merging into the master branch.
    try
      {
    YYCDEBUG << "Starting parse" << std::endl;


    /* Initialize the stack.  The initial state will be set in
       yynewstate, since the latter expects the semantical and the
       location values to have been already stored, initialize these
       stacks with a primary value.  */
    yystack_.clear ();
    yypush_ (YY_NULLPTR, 0, yyla);

    // A new symbol was pushed on the stack.
  yynewstate:
    YYCDEBUG << "Entering state " << yystack_[0].state << std::endl;

    // Accept?
    if (yystack_[0].state == yyfinal_)
      goto yyacceptlab;

    goto yybackup;

    // Backup.
  yybackup:

    // Try to take a decision without lookahead.
    yyn = yypact_[yystack_[0].state];
    if (yy_pact_value_is_default_ (yyn))
      goto yydefault;

    // Read a lookahead token.
    if (yyla.empty ())
      {
        YYCDEBUG << "Reading a token: ";
        try
          {
            symbol_type yylookahead (yylex (context));
            yyla.move (yylookahead);
          }
        catch (const syntax_error& yyexc)
          {
            error (yyexc);
            goto yyerrlab1;
          }
      }
    YY_SYMBOL_PRINT ("Next token is", yyla);

    /* If the proper action on seeing token YYLA.TYPE is to reduce or
       to detect an error, take that action.  */
    yyn += yyla.type_get ();
    if (yyn < 0 || yylast_ < yyn || yycheck_[yyn] != yyla.type_get ())
      goto yydefault;

    // Reduce or error.
    yyn = yytable_[yyn];
    if (yyn <= 0)
      {
        if (yy_table_value_is_error_ (yyn))
          goto yyerrlab;
        yyn = -yyn;
        goto yyreduce;
      }

    // Count tokens shifted since error; after three, turn off error status.
    if (yyerrstatus_)
      --yyerrstatus_;

    // Shift the lookahead token.
    yypush_ ("Shifting", yyn, yyla);
    goto yynewstate;

  /*-----------------------------------------------------------.
  | yydefault -- do the default action for the current state.  |
  `-----------------------------------------------------------*/
  yydefault:
    yyn = yydefact_[yystack_[0].state];
    if (yyn == 0)
      goto yyerrlab;
    goto yyreduce;

  /*-----------------------------.
  | yyreduce -- Do a reduction.  |
  `-----------------------------*/
  yyreduce:
    yylen = yyr2_[yyn];
    {
      stack_symbol_type yylhs;
      yylhs.state = yy_lr_goto_state_(yystack_[yylen].state, yyr1_[yyn]);
      /* Variants are always initialized to an empty instance of the
         correct type. The default '$$ = $1' action is NOT applied
         when using variants.  */
        switch (yyr1_[yyn])
    {
      case 158: // ObjectClassAssignment
      case 194: // ObjectSetAssignment
      case 198: // ParameterizedAssignment
      case 199: // ParameterizedTypeAssignment
      case 200: // ParameterizedValueAssignment
      case 201: // ParameterizedValueSetTypeAssignment
      case 202: // ParameterizedObjectClassAssignment
      case 203: // ParameterizedObjectAssignment
      case 248: // Assignment
      case 257: // TypeAssignment
      case 258: // ValueAssignment
      case 259: // ValueSetTypeAssignment
        yylhs.value.build< Assignment > ();
        break;

      case 280: // BitStringType
        yylhs.value.build< BitStringType > ();
        break;

      case 269: // BooleanType
        yylhs.value.build< BooleanType > ();
        break;

      case 261: // BuiltinType
        yylhs.value.build< BuiltinType > ();
        break;

      case 326: // CharacterStringType
        yylhs.value.build< CharacterStringType > ();
        break;

      case 293: // ChoiceType
        yylhs.value.build< ChoiceType > ();
        break;

      case 303: // Class
        yylhs.value.build< Class > ();
        break;

      case 289: // ComponentType
        yylhs.value.build< ComponentType > ();
        break;

      case 286: // ComponentTypeLists
      case 287: // RootComponentTypeList
      case 288: // ComponentTypeList
        yylhs.value.build< ComponentTypeList > ();
        break;

      case 324: // DateTimeType
        yylhs.value.build< DateTimeType > ();
        break;

      case 322: // DateType
        yylhs.value.build< DateType > ();
        break;

      case 249: // DefinedType
      case 251: // ParameterizedType
        yylhs.value.build< DefinedType > ();
        break;

      case 250: // DefinedValue
        yylhs.value.build< DefinedValue > ();
        break;

      case 325: // DurationType
        yylhs.value.build< DurationType > ();
        break;

      case 318: // EmbeddedPDVType
        yylhs.value.build< EmbeddedPDVType > ();
        break;

      case 275: // EnumeratedType
      case 276: // Enumerations
      case 277: // Enumeration
        yylhs.value.build< EnumeratedType > ();
        break;

      case 278: // EnumerationItem
        yylhs.value.build< EnumerationValue > ();
        break;

      case 319: // ExternalType
        yylhs.value.build< ExternalType > ();
        break;

      case 312: // IRIType
        yylhs.value.build< IRIType > ();
        break;

      case 241: // SymbolsFromModule
        yylhs.value.build< Import > ();
        break;

      case 211: // InstanceOfType
        yylhs.value.build< InstanceOfType > ();
        break;

      case 271: // IntegerType
        yylhs.value.build< IntegerType > ();
        break;

      case 235: // ModuleBody
        yylhs.value.build< Module > ();
        break;

      case 273: // NamedNumber
        yylhs.value.build< NamedNumber > ();
        break;

      case 262: // NamedType
        yylhs.value.build< NamedType > ();
        break;

      case 284: // NullType
        yylhs.value.build< NullType > ();
        break;

      case 197: // ObjectClassFieldType
        yylhs.value.build< ObjectClassFieldType > ();
        break;

      case 307: // ObjIdComponents
      case 308: // NameForm
      case 309: // NumberForm
      case 310: // NameAndNumberForm
        yylhs.value.build< ObjectIdComponentValue > ();
        break;

      case 304: // ObjectIdentifierType
        yylhs.value.build< ObjectIdentifierType > ();
        break;

      case 283: // OctetStringType
        yylhs.value.build< OctetStringType > ();
        break;

      case 298: // PrefixedType
        yylhs.value.build< PrefixedType > ();
        break;

      case 279: // RealType
        yylhs.value.build< RealType > ();
        break;

      case 317: // RelativeIRIType
        yylhs.value.build< RelativeIRIType > ();
        break;

      case 311: // RelativeOIDType
        yylhs.value.build< RelativeOIDType > ();
        break;

      case 290: // SequenceOfType
        yylhs.value.build< SequenceOfType > ();
        break;

      case 285: // SequenceType
        yylhs.value.build< SequenceType > ();
        break;

      case 292: // SetOfType
        yylhs.value.build< SetOfType > ();
        break;

      case 291: // SetType
        yylhs.value.build< SetType > ();
        break;

      case 300: // Tag
        yylhs.value.build< Tag > ();
        break;

      case 299: // TaggedType
        yylhs.value.build< TaggedType > ();
        break;

      case 233: // TagDefault
        yylhs.value.build< TaggingMode > ();
        break;

      case 323: // TimeOfDayType
        yylhs.value.build< TimeOfDayType > ();
        break;

      case 320: // TimeType
        yylhs.value.build< TimeType > ();
        break;

      case 254: // ActualParameter
      case 260: // Type
      case 329: // ConstrainedType
        yylhs.value.build< Type > ();
        break;

      case 263: // ValueWithoutTypeIdentifier
      case 264: // Value
      case 349: // SingleValue
        yylhs.value.build< Value > ();
        break;

      case 5: // realnumber
        yylhs.value.build< double > ();
        break;

      case 302: // ClassNumber
        yylhs.value.build< int > ();
        break;

      case 4: // number
      case 274: // SignedNumber
        yylhs.value.build< long long > ();
        break;

      case 204: // ParameterList
      case 205: // ParameterSeries
        yylhs.value.build< std::set<std::string> > ();
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 21: // objectreference
      case 23: // typefieldreference
      case 24: // valuefieldreference
      case 147: // GENERIC_IDENTIFIER_UPPERCASE
      case 148: // GENERIC_IDENTIFIER_LOWERCASE
      case 206: // Parameter
      case 212: // SimpleDefinedType
      case 224: // ModuleIdentifier
      case 242: // GlobalModuleReference
      case 245: // Symbol
      case 246: // Reference
      case 374: // typereference
      case 375: // identifier
      case 376: // valuereference
      case 377: // modulereference
      case 378: // objectclassreference
      case 379: // word
        yylhs.value.build< std::string > ();
        break;

      case 247: // AssignmentList
        yylhs.value.build< std::vector<Assignment> > ();
        break;

      case 236: // Exports
        yylhs.value.build< std::vector<Export> > ();
        break;

      case 238: // Imports
      case 239: // SymbolsImported
      case 240: // SymbolsFromModuleList
        yylhs.value.build< std::vector<Import> > ();
        break;

      case 272: // NamedNumberList
        yylhs.value.build< std::vector<NamedNumber> > ();
        break;

      case 294: // AlternativeTypeLists
      case 295: // RootAlternativeTypeList
      case 296: // AlternativeTypeList
        yylhs.value.build< std::vector<NamedType> > ();
        break;

      case 305: // ObjectIdentifierValue
      case 306: // ObjIdComponentsList
        yylhs.value.build< std::vector<ObjectIdComponentValue> > ();
        break;

      case 253: // ActualParameterList
        yylhs.value.build< std::vector<Type> > ();
        break;

      case 268: // SequenceOfValues
        yylhs.value.build< std::vector<Value> > ();
        break;

      case 244: // SymbolList
        yylhs.value.build< std::vector<std::string> > ();
        break;

      default:
        break;
    }


      // Compute the default @$.
      {
        slice<stack_symbol_type, stack_type> slice (yystack_, yylen);
        YYLLOC_DEFAULT (yylhs.location, slice, yylen);
      }

      // Perform the reduction.
      YY_REDUCE_PRINT (yyn);
      try
        {
          switch (yyn)
            {
  case 4:
#line 321 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yystack_[2].value.as< Module > ().module_reference = yystack_[9].value.as< std::string > ();
      yystack_[2].value.as< Module > ().tagging_default = yystack_[6].value.as< TaggingMode > ();
      context.asn1_tree.modules.push_back(yystack_[2].value.as< Module > ()); }
#line 6138 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 12:
#line 342 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{yystack_[2].value.as< std::string > (), ObjectClassAssignment{}}; }
#line 6144 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 80:
#line 493 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{yystack_[3].value.as< std::string > (), ObjectSetAssignment{}}; }
#line 6150 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 89:
#line 520 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 6156 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 90:
#line 522 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 6162 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 91:
#line 524 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 6168 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 92:
#line 526 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 6174 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 93:
#line 528 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 6180 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 94:
#line 533 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[3].value.as< std::string > (), TypeAssignment{yystack_[0].value.as< Type > ()}, {}, yystack_[2].value.as< std::set<std::string> > () }; }
#line 6186 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 95:
#line 537 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[4].value.as< std::string > (), ValueAssignment{} }; }
#line 6192 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 96:
#line 541 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[4].value.as< std::string > (), ValueAssignment{} }; }
#line 6198 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 97:
#line 545 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[3].value.as< std::string > (), ObjectClassAssignment{} }; }
#line 6204 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 98:
#line 549 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[4].value.as< std::string > (), ObjectClassAssignment{} }; }
#line 6210 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 99:
#line 557 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::set<std::string> > () = yystack_[1].value.as< std::set<std::string> > (); }
#line 6216 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 100:
#line 561 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::set<std::string> > ().insert(yystack_[0].value.as< std::string > ()); }
#line 6222 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 101:
#line 563 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::set<std::string> > () = yystack_[2].value.as< std::set<std::string> > (); yystack_[2].value.as< std::set<std::string> > ().insert(yystack_[0].value.as< std::string > ()); }
#line 6228 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 102:
#line 567 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 6234 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 103:
#line 569 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 6240 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 112:
#line 622 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 6246 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 124:
#line 646 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << "Simple constraint\n"; }
#line 6252 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 125:
#line 648 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << "Relation constraint\n"; }
#line 6258 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 138:
#line 690 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    {
    yylhs.value.as< std::string > () = yystack_[1].value.as< std::string > ();
}
#line 6266 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 153:
#line 729 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggingMode > () = TaggingMode::explicit_; }
#line 6272 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 154:
#line 731 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggingMode > () = TaggingMode::implicit; }
#line 6278 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 155:
#line 733 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggingMode > () = TaggingMode::automatic; }
#line 6284 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 156:
#line 735 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggingMode > () = TaggingMode::explicit_; }
#line 6290 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 159:
#line 743 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Module > () = Module{ {}, TaggingMode(), yystack_[2].value.as< std::vector<Export> > (), yystack_[1].value.as< std::vector<Import> > (), yystack_[0].value.as< std::vector<Assignment> > ()}; }
#line 6296 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 160:
#line 745 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { }
#line 6302 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 166:
#line 758 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Import> > () = yystack_[1].value.as< std::vector<Import> > (); }
#line 6308 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 168:
#line 763 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Import> > () = yystack_[0].value.as< std::vector<Import> > (); }
#line 6314 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 170:
#line 768 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Import> > ().push_back(yystack_[0].value.as< Import > ()); }
#line 6320 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 171:
#line 770 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Import> > () = yystack_[1].value.as< std::vector<Import> > (); yylhs.value.as< std::vector<Import> > ().push_back(yystack_[0].value.as< Import > ()); }
#line 6326 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 172:
#line 774 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Import > () = Import{ yystack_[0].value.as< std::string > (), yystack_[2].value.as< std::vector<std::string> > () }; }
#line 6332 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 173:
#line 778 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[1].value.as< std::string > (); }
#line 6338 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 177:
#line 787 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<std::string> > ().push_back(yystack_[0].value.as< std::string > ()); }
#line 6344 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 178:
#line 789 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<std::string> > () = yystack_[2].value.as< std::vector<std::string> > (); yylhs.value.as< std::vector<std::string> > ().push_back(yystack_[0].value.as< std::string > ()); }
#line 6350 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 179:
#line 793 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 6356 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 180:
#line 797 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 6362 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 181:
#line 799 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[2].value.as< std::string > (); }
#line 6368 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 182:
#line 801 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 6374 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 183:
#line 810 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Assignment> > ().push_back(yystack_[0].value.as< Assignment > ()); }
#line 6380 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 184:
#line 812 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Assignment> > () = yystack_[1].value.as< std::vector<Assignment> > (); yylhs.value.as< std::vector<Assignment> > ().push_back(yystack_[0].value.as< Assignment > ()); }
#line 6386 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 185:
#line 816 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 6392 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 186:
#line 818 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 6398 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 187:
#line 820 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 6404 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 188:
#line 822 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 6410 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 189:
#line 825 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 6416 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 190:
#line 827 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 6422 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 192:
#line 832 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< DefinedType > () = DefinedType{yystack_[0].value.as< std::string > (), {}}; }
#line 6428 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 193:
#line 834 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< DefinedType > () = yystack_[0].value.as< DefinedType > (); }
#line 6434 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 194:
#line 840 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< DefinedValue > () = DefinedValue{yystack_[0].value.as< std::string > ()}; }
#line 6440 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 196:
#line 845 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< DefinedType > () = DefinedType{yystack_[1].value.as< std::string > (), yystack_[0].value.as< std::vector<Type> > ()}; }
#line 6446 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 198:
#line 852 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Type> > ().push_back(yystack_[1].value.as< Type > ()); }
#line 6452 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 199:
#line 856 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = yystack_[0].value.as< Type > (); }
#line 6458 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 200:
#line 858 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << "Warning: Not yet dealing with value paramaters"; }
#line 6464 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 204:
#line 901 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[2].value.as< std::string > (), TypeAssignment{yystack_[0].value.as< Type > ()}, {} }; }
#line 6470 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 205:
#line 905 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[3].value.as< std::string > (), ValueAssignment{yystack_[2].value.as< Type > (), yystack_[0].value.as< Value > ()}, {} }; }
#line 6476 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 206:
#line 909 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[3].value.as< std::string > (), TypeAssignment{yystack_[2].value.as< Type > ()}, {} }; }
#line 6482 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 207:
#line 913 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = yystack_[0].value.as< BuiltinType > (); }
#line 6488 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 208:
#line 915 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = yystack_[0].value.as< Type > (); }
#line 6494 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 209:
#line 917 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = yystack_[0].value.as< DefinedType > (); }
#line 6500 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 210:
#line 919 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << "Warning: Not handled - SelectionType\n"; }
#line 6506 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 211:
#line 921 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Not handled - TypeFromObject\n"); }
#line 6512 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 212:
#line 925 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< BitStringType > (); }
#line 6518 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 213:
#line 926 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< BooleanType > (); }
#line 6524 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 214:
#line 927 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< CharacterStringType > (); }
#line 6530 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 215:
#line 928 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< ChoiceType > (); }
#line 6536 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 216:
#line 929 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< DateType > (); }
#line 6542 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 217:
#line 930 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< DateTimeType > (); }
#line 6548 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 218:
#line 931 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< DurationType > (); }
#line 6554 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 219:
#line 932 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< EmbeddedPDVType > (); }
#line 6560 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 220:
#line 933 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< EnumeratedType > (); }
#line 6566 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 221:
#line 934 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< ExternalType > (); }
#line 6572 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 222:
#line 935 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = GeneralizedTimeType(); }
#line 6578 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 223:
#line 936 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< InstanceOfType > (); }
#line 6584 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 224:
#line 937 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< IntegerType > (); }
#line 6590 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 225:
#line 938 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< IRIType > (); }
#line 6596 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 226:
#line 939 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< NullType > (); }
#line 6602 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 227:
#line 940 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< ObjectClassFieldType > (); }
#line 6608 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 228:
#line 941 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = ObjectDescriptorType(); }
#line 6614 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 229:
#line 942 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< ObjectIdentifierType > (); }
#line 6620 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 230:
#line 943 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< OctetStringType > (); }
#line 6626 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 231:
#line 944 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< RealType > (); }
#line 6632 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 232:
#line 945 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< RelativeIRIType > (); }
#line 6638 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 233:
#line 946 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< RelativeOIDType > (); }
#line 6644 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 234:
#line 947 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< SequenceType > (); }
#line 6650 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 235:
#line 948 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< SequenceOfType > (); }
#line 6656 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 236:
#line 949 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< SetType > (); }
#line 6662 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 237:
#line 950 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< SetOfType > (); }
#line 6668 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 238:
#line 951 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< PrefixedType > (); }
#line 6674 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 239:
#line 952 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< TimeType > (); }
#line 6680 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 240:
#line 953 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< TimeOfDayType > (); }
#line 6686 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 241:
#line 954 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = UTCTimeType(); }
#line 6692 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 242:
#line 958 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< NamedType > () = NamedType{ yystack_[1].value.as< std::string > (), yystack_[0].value.as< Type > () }; }
#line 6698 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 243:
#line 962 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Unhandled field: BooleanValue\n"); }
#line 6704 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 244:
#line 964 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Unhandled field: IRIValue\n"); }
#line 6710 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 245:
#line 966 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Unhandled field: ASN_NULL\n"); }
#line 6716 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 246:
#line 968 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Unhandled field: TimeValue\n"); }
#line 6722 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 247:
#line 970 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Unhandled field: bstring\n"); }
#line 6728 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 248:
#line 972 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Unhandled field: hstring\n"); }
#line 6734 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 249:
#line 974 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = yystack_[0].value.as< std::string > (); }
#line 6740 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 250:
#line 976 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Unhandled field: CONTAINING\n"); }
#line 6746 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 251:
#line 978 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().defined_value = yystack_[0].value.as< DefinedValue > (); }
#line 6752 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 252:
#line 980 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = NamedNumber{yystack_[3].value.as< std::string > (), yystack_[1].value.as< long long > ()}; }
#line 6758 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 254:
#line 983 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = yystack_[0].value.as< long long > (); }
#line 6764 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 255:
#line 985 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = yystack_[0].value.as< double > (); }
#line 6770 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 256:
#line 987 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Unhandled field: ValueCommaListChoice\n"); }
#line 6776 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 257:
#line 989 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Unhandled field: ValueCommaListChoice\n"); }
#line 6782 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 258:
#line 993 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = yystack_[1].value.as< std::vector<Value> > (); }
#line 6788 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 259:
#line 995 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Unhandled field: ValueChoice\n"); }
#line 6794 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 260:
#line 997 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Unhandled field: OPTIONAL\n"); }
#line 6800 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 261:
#line 999 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Unhandled field: ValueCommaListChoice\n"); }
#line 6806 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 262:
#line 1003 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > () = yystack_[0].value.as< Value > (); }
#line 6812 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 263:
#line 1005 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = yystack_[0].value.as< std::string > (); }
#line 6818 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 269:
#line 1020 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Value> > ().push_back(yystack_[0].value.as< Value > ()); }
#line 6824 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 270:
#line 1022 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Value> > () = yystack_[1].value.as< std::vector<Value> > (); yylhs.value.as< std::vector<Value> > ().push_back(yystack_[0].value.as< Value > ()); }
#line 6830 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 274:
#line 1037 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< IntegerType > () = IntegerType{{}}; }
#line 6836 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 275:
#line 1039 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< IntegerType > () = IntegerType{yystack_[1].value.as< std::vector<NamedNumber> > ()}; }
#line 6842 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 276:
#line 1043 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedNumber> > () = {yystack_[0].value.as< NamedNumber > ()}; }
#line 6848 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 277:
#line 1045 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedNumber> > () = yystack_[2].value.as< std::vector<NamedNumber> > (); yylhs.value.as< std::vector<NamedNumber> > ().push_back(yystack_[0].value.as< NamedNumber > ()); }
#line 6854 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 278:
#line 1049 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< NamedNumber > () = NamedNumber{ yystack_[3].value.as< std::string > (), yystack_[1].value.as< long long > () }; }
#line 6860 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 279:
#line 1051 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< NamedNumber > () = NamedNumber{ yystack_[3].value.as< std::string > (), 0 }; }
#line 6866 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 280:
#line 1055 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< long long > () = yystack_[0].value.as< long long > (); }
#line 6872 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 281:
#line 1057 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< long long > () = -yystack_[0].value.as< long long > (); }
#line 6878 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 282:
#line 1061 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[1].value.as< EnumeratedType > (); }
#line 6884 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 283:
#line 1065 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[0].value.as< EnumeratedType > ();
      yylhs.value.as< EnumeratedType > ().accept_anything = false; }
#line 6891 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 284:
#line 1068 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[3].value.as< EnumeratedType > ();
      yylhs.value.as< EnumeratedType > ().accept_anything = true; }
#line 6898 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 285:
#line 1071 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[5].value.as< EnumeratedType > ();
      yylhs.value.as< EnumeratedType > ().accept_anything = true;
      yylhs.value.as< EnumeratedType > ().enum_values.insert(yylhs.value.as< EnumeratedType > ().enum_values.end(), yystack_[0].value.as< EnumeratedType > ().enum_values.begin(), yystack_[0].value.as< EnumeratedType > ().enum_values.end()); }
#line 6906 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 287:
#line 1078 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > ().enum_values.push_back(yystack_[0].value.as< EnumerationValue > ()); }
#line 6912 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 288:
#line 1080 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[2].value.as< EnumeratedType > (); yylhs.value.as< EnumeratedType > ().enum_values.push_back(yystack_[0].value.as< EnumerationValue > ()); }
#line 6918 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 289:
#line 1084 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumerationValue > ().name  = yystack_[0].value.as< std::string > (); }
#line 6924 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 290:
#line 1086 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumerationValue > ().name  = yystack_[0].value.as< NamedNumber > ().name;
      yylhs.value.as< EnumerationValue > ().value = yystack_[0].value.as< NamedNumber > ().number; }
#line 6931 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 300:
#line 1126 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SequenceType > () = SequenceType(); }
#line 6937 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 301:
#line 1128 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SequenceType > () = SequenceType{yystack_[1].value.as< ComponentTypeList > ()}; }
#line 6943 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 302:
#line 1136 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[0].value.as< ComponentTypeList > (); }
#line 6949 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 303:
#line 1140 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[0].value.as< ComponentTypeList > (); }
#line 6955 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 304:
#line 1142 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[2].value.as< ComponentTypeList > (); }
#line 6961 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 305:
#line 1144 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[4].value.as< ComponentTypeList > (); yylhs.value.as< ComponentTypeList > ().insert(yylhs.value.as< ComponentTypeList > ().end(), yystack_[0].value.as< ComponentTypeList > ().begin(), yystack_[0].value.as< ComponentTypeList > ().end()); }
#line 6967 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 306:
#line 1146 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[6].value.as< ComponentTypeList > (); yylhs.value.as< ComponentTypeList > ().insert(yylhs.value.as< ComponentTypeList > ().end(), yystack_[2].value.as< ComponentTypeList > ().begin(), yystack_[2].value.as< ComponentTypeList > ().end()); }
#line 6973 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 307:
#line 1148 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[0].value.as< ComponentTypeList > (); }
#line 6979 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 308:
#line 1150 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[2].value.as< ComponentTypeList > (); }
#line 6985 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 309:
#line 1152 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = {}; }
#line 6991 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 310:
#line 1154 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = {}; }
#line 6997 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 311:
#line 1158 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = ComponentTypeList{yystack_[0].value.as< ComponentType > ()}; }
#line 7003 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 312:
#line 1160 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yystack_[2].value.as< ComponentTypeList > ().push_back(yystack_[0].value.as< ComponentType > ()); yylhs.value.as< ComponentTypeList > () = yystack_[2].value.as< ComponentTypeList > (); }
#line 7009 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 313:
#line 1164 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentType > () = ComponentType{yystack_[0].value.as< NamedType > (), false, absl::nullopt}; }
#line 7015 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 314:
#line 1166 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentType > () = ComponentType{yystack_[1].value.as< NamedType > (), true, absl::nullopt}; }
#line 7021 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 315:
#line 1168 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentType > () = ComponentType{yystack_[2].value.as< NamedType > (), false, yystack_[0].value.as< Value > ()}; }
#line 7027 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 317:
#line 1181 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SequenceOfType > () = SequenceOfType{ false, nullptr, std::make_shared<Type>(yystack_[0].value.as< Type > ()) }; }
#line 7033 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 318:
#line 1183 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SequenceOfType > () = SequenceOfType{ true, std::make_shared<NamedType>(yystack_[0].value.as< NamedType > ()), nullptr }; }
#line 7039 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 319:
#line 1187 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SetType > () = SetType{}; }
#line 7045 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 320:
#line 1189 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SetType > () = SetType{yystack_[1].value.as< ComponentTypeList > ()}; }
#line 7051 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 321:
#line 1193 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SetOfType > () = SetOfType{ false, nullptr, std::make_shared<Type>(yystack_[0].value.as< Type > ()) }; }
#line 7057 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 322:
#line 1195 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SetOfType > () = SetOfType{ true, std::make_shared<NamedType>(yystack_[0].value.as< NamedType > ()), nullptr }; }
#line 7063 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 323:
#line 1199 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ChoiceType > () = ChoiceType{ yystack_[1].value.as< std::vector<NamedType> > () }; }
#line 7069 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 324:
#line 1203 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedType> > () = yystack_[0].value.as< std::vector<NamedType> > (); }
#line 7075 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 325:
#line 1207 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedType> > () = yystack_[0].value.as< std::vector<NamedType> > (); }
#line 7081 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 326:
#line 1209 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedType> > () = yystack_[2].value.as< std::vector<NamedType> > (); }
#line 7087 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 327:
#line 1213 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedType> > () = std::vector<NamedType> { yystack_[0].value.as< NamedType > () }; }
#line 7093 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 328:
#line 1215 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yystack_[2].value.as< std::vector<NamedType> > ().push_back( yystack_[0].value.as< NamedType > () ); yylhs.value.as< std::vector<NamedType> > () = yystack_[2].value.as< std::vector<NamedType> > (); }
#line 7099 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 330:
#line 1225 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< PrefixedType > () = PrefixedType(yystack_[0].value.as< TaggedType > ()); }
#line 7105 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 331:
#line 1229 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggedType > () = TaggedType{ yystack_[1].value.as< Tag > (), TaggingMode::automatic, yystack_[0].value.as< Type > () }; }
#line 7111 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 332:
#line 1231 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggedType > () = TaggedType{ yystack_[2].value.as< Tag > (), TaggingMode::implicit, yystack_[0].value.as< Type > () }; }
#line 7117 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 333:
#line 1233 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggedType > () = TaggedType{ yystack_[2].value.as< Tag > (), TaggingMode::explicit_, yystack_[0].value.as< Type > () }; }
#line 7123 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 334:
#line 1237 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Tag > () = Tag{ yystack_[2].value.as< Class > (), yystack_[1].value.as< int > () }; }
#line 7129 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 337:
#line 1245 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< int > () = yystack_[0].value.as< long long > (); }
#line 7135 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 339:
#line 1250 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Class > () = Class::universal; }
#line 7141 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 340:
#line 1252 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Class > () = Class::application; }
#line 7147 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 341:
#line 1254 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Class > () = Class::private_; }
#line 7153 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 342:
#line 1256 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Class > () = Class::context_specific; }
#line 7159 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 344:
#line 1269 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<ObjectIdComponentValue> > () = yystack_[1].value.as< std::vector<ObjectIdComponentValue> > (); std::reverse(yylhs.value.as< std::vector<ObjectIdComponentValue> > ().begin(), yylhs.value.as< std::vector<ObjectIdComponentValue> > ().end()); }
#line 7165 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 345:
#line 1271 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<ObjectIdComponentValue> > () = yystack_[1].value.as< std::vector<ObjectIdComponentValue> > (); std::reverse(yylhs.value.as< std::vector<ObjectIdComponentValue> > ().begin(), yylhs.value.as< std::vector<ObjectIdComponentValue> > ().end()); }
#line 7171 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 346:
#line 1275 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<ObjectIdComponentValue> > ().push_back(yystack_[0].value.as< ObjectIdComponentValue > ()); }
#line 7177 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 347:
#line 1277 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<ObjectIdComponentValue> > () = yystack_[0].value.as< std::vector<ObjectIdComponentValue> > (); yylhs.value.as< std::vector<ObjectIdComponentValue> > ().push_back(yystack_[1].value.as< ObjectIdComponentValue > ()); }
#line 7183 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 348:
#line 1281 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > () = yystack_[0].value.as< ObjectIdComponentValue > (); }
#line 7189 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 349:
#line 1283 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > () = yystack_[0].value.as< ObjectIdComponentValue > (); }
#line 7195 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 350:
#line 1285 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > () = yystack_[0].value.as< ObjectIdComponentValue > (); }
#line 7201 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 351:
#line 1289 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > ().name = yystack_[0].value.as< std::string > (); }
#line 7207 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 352:
#line 1293 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > ().value = yystack_[0].value.as< long long > (); }
#line 7213 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 354:
#line 1298 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > () = yystack_[1].value.as< ObjectIdComponentValue > (); yylhs.value.as< ObjectIdComponentValue > ().name = yystack_[3].value.as< std::string > (); }
#line 7219 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 388:
#line 1394 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = yystack_[1].value.as< Type > (); }
#line 7225 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 482:
#line 1584 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 7231 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 483:
#line 1588 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 7237 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 484:
#line 1592 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 7243 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 485:
#line 1596 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 7249 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 486:
#line 1600 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 7255 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;


#line 7259 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
            default:
              break;
            }
        }
      catch (const syntax_error& yyexc)
        {
          error (yyexc);
          YYERROR;
        }
      YY_SYMBOL_PRINT ("-> $$ =", yylhs);
      yypop_ (yylen);
      yylen = 0;
      YY_STACK_PRINT ();

      // Shift the result of the reduction.
      yypush_ (YY_NULLPTR, yylhs);
    }
    goto yynewstate;

  /*--------------------------------------.
  | yyerrlab -- here on detecting error.  |
  `--------------------------------------*/
  yyerrlab:
    // If not already recovering from an error, report this error.
    if (!yyerrstatus_)
      {
        ++yynerrs_;
        error (yyla.location, yysyntax_error_ (yystack_[0].state, yyla));
      }


    yyerror_range[1].location = yyla.location;
    if (yyerrstatus_ == 3)
      {
        /* If just tried and failed to reuse lookahead token after an
           error, discard it.  */

        // Return failure if at end of input.
        if (yyla.type_get () == yyeof_)
          YYABORT;
        else if (!yyla.empty ())
          {
            yy_destroy_ ("Error: discarding", yyla);
            yyla.clear ();
          }
      }

    // Else will try to reuse lookahead token after shifting the error token.
    goto yyerrlab1;


  /*---------------------------------------------------.
  | yyerrorlab -- error raised explicitly by YYERROR.  |
  `---------------------------------------------------*/
  yyerrorlab:

    /* Pacify compilers like GCC when the user code never invokes
       YYERROR and the label yyerrorlab therefore never appears in user
       code.  */
    if (false)
      goto yyerrorlab;
    yyerror_range[1].location = yystack_[yylen - 1].location;
    /* Do not reclaim the symbols of the rule whose action triggered
       this YYERROR.  */
    yypop_ (yylen);
    yylen = 0;
    goto yyerrlab1;

  /*-------------------------------------------------------------.
  | yyerrlab1 -- common code for both syntax error and YYERROR.  |
  `-------------------------------------------------------------*/
  yyerrlab1:
    yyerrstatus_ = 3;   // Each real token shifted decrements this.
    {
      stack_symbol_type error_token;
      for (;;)
        {
          yyn = yypact_[yystack_[0].state];
          if (!yy_pact_value_is_default_ (yyn))
            {
              yyn += yyterror_;
              if (0 <= yyn && yyn <= yylast_ && yycheck_[yyn] == yyterror_)
                {
                  yyn = yytable_[yyn];
                  if (0 < yyn)
                    break;
                }
            }

          // Pop the current state because it cannot handle the error token.
          if (yystack_.size () == 1)
            YYABORT;

          yyerror_range[1].location = yystack_[0].location;
          yy_destroy_ ("Error: popping", yystack_[0]);
          yypop_ ();
          YY_STACK_PRINT ();
        }

      yyerror_range[2].location = yyla.location;
      YYLLOC_DEFAULT (error_token.location, yyerror_range, 2);

      // Shift the error token.
      error_token.state = yyn;
      yypush_ ("Shifting", error_token);
    }
    goto yynewstate;

    // Accept.
  yyacceptlab:
    yyresult = 0;
    goto yyreturn;

    // Abort.
  yyabortlab:
    yyresult = 1;
    goto yyreturn;

  yyreturn:
    if (!yyla.empty ())
      yy_destroy_ ("Cleanup: discarding lookahead", yyla);

    /* Do not reclaim the symbols of the rule whose action triggered
       this YYABORT or YYACCEPT.  */
    yypop_ (yylen);
    while (1 < yystack_.size ())
      {
        yy_destroy_ ("Cleanup: popping", yystack_[0]);
        yypop_ ();
      }

    return yyresult;
  }
    catch (...)
      {
        YYCDEBUG << "Exception caught: cleaning lookahead and stack"
                 << std::endl;
        // Do not try to display the values of the reclaimed symbols,
        // as their printer might throw an exception.
        if (!yyla.empty ())
          yy_destroy_ (YY_NULLPTR, yyla);

        while (1 < yystack_.size ())
          {
            yy_destroy_ (YY_NULLPTR, yystack_[0]);
            yypop_ ();
          }
        throw;
      }
  }

  void
  asn1_parser::error (const syntax_error& yyexc)
  {
    error (yyexc.location, yyexc.what());
  }

  // Generate an error message.
  std::string
  asn1_parser::yysyntax_error_ (state_type yystate, const symbol_type& yyla) const
  {
    // Number of reported tokens (one for the "unexpected", one per
    // "expected").
    size_t yycount = 0;
    // Its maximum.
    enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
    // Arguments of yyformat.
    char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];

    /* There are many possibilities here to consider:
       - If this state is a consistent state with a default action, then
         the only way this function was invoked is if the default action
         is an error action.  In that case, don't check for expected
         tokens because there are none.
       - The only way there can be no lookahead present (in yyla) is
         if this state is a consistent state with a default action.
         Thus, detecting the absence of a lookahead is sufficient to
         determine that there is no unexpected or expected token to
         report.  In that case, just report a simple "syntax error".
       - Don't assume there isn't a lookahead just because this state is
         a consistent state with a default action.  There might have
         been a previous inconsistent state, consistent state with a
         non-default action, or user semantic action that manipulated
         yyla.  (However, yyla is currently not documented for users.)
       - Of course, the expected token list depends on states to have
         correct lookahead information, and it depends on the parser not
         to perform extra reductions after fetching a lookahead from the
         scanner and before detecting a syntax error.  Thus, state
         merging (from LALR or IELR) and default reductions corrupt the
         expected token list.  However, the list is correct for
         canonical LR with one exception: it will still contain any
         token that will not be accepted due to an error action in a
         later state.
    */
    if (!yyla.empty ())
      {
        int yytoken = yyla.type_get ();
        yyarg[yycount++] = yytname_[yytoken];
        int yyn = yypact_[yystate];
        if (!yy_pact_value_is_default_ (yyn))
          {
            /* Start YYX at -YYN if negative to avoid negative indexes in
               YYCHECK.  In other words, skip the first -YYN actions for
               this state because they are default actions.  */
            int yyxbegin = yyn < 0 ? -yyn : 0;
            // Stay within bounds of both yycheck and yytname.
            int yychecklim = yylast_ - yyn + 1;
            int yyxend = yychecklim < yyntokens_ ? yychecklim : yyntokens_;
            for (int yyx = yyxbegin; yyx < yyxend; ++yyx)
              if (yycheck_[yyx + yyn] == yyx && yyx != yyterror_
                  && !yy_table_value_is_error_ (yytable_[yyx + yyn]))
                {
                  if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                    {
                      yycount = 1;
                      break;
                    }
                  else
                    yyarg[yycount++] = yytname_[yyx];
                }
          }
      }

    char const* yyformat = YY_NULLPTR;
    switch (yycount)
      {
#define YYCASE_(N, S)                         \
        case N:                               \
          yyformat = S;                       \
        break
        YYCASE_(0, YY_("syntax error"));
        YYCASE_(1, YY_("syntax error, unexpected %s"));
        YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
        YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
        YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
        YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
#undef YYCASE_
      }

    std::string yyres;
    // Argument number.
    size_t yyi = 0;
    for (char const* yyp = yyformat; *yyp; ++yyp)
      if (yyp[0] == '%' && yyp[1] == 's' && yyi < yycount)
        {
          yyres += yytnamerr_ (yyarg[yyi++]);
          ++yyp;
        }
      else
        yyres += *yyp;
    return yyres;
  }


  const short int asn1_parser::yypact_ninf_ = -662;

  const short int asn1_parser::yytable_ninf_ = -486;

  const short int
  asn1_parser::yypact_[] =
  {
     -15,  -662,   157,   -15,   141,    86,  -662,  -662,   217,    16,
    -662,   135,  -662,   234,    47,  -662,  -662,   173,    16,  -662,
    -662,  -662,   196,   187,  -662,  -662,   224,   250,   264,   336,
    -662,  -662,   392,    74,   259,  -662,  -662,  -662,   330,   282,
     283,  -662,  -662,  -662,    74,   276,  -662,   376,  -662,   259,
    -662,   287,  -662,    -6,  -662,   341,   272,  -662,  -662,   273,
     280,  -662,  -662,   295,  -662,   364,   108,     2,  -662,  -662,
     108,   296,  -662,   281,   108,  -662,   -21,   298,  -662,  -662,
    -662,  -662,  -662,  -662,  -662,  -662,  -662,     2,  -662,  -662,
    -662,  -662,  2204,  2501,   298,  -662,  -662,  -662,  -662,   -15,
    2303,    13,  -662,  -662,  -662,   321,  -662,  -662,   323,   303,
    -662,  -662,  -662,   337,   306,  -662,  -662,  -662,  -662,  -662,
     344,   311,  -662,  -662,   367,  -662,   334,  -662,  -662,  -662,
    -662,  -662,   -29,   -23,  -662,  -662,  -662,  -662,  -662,  -662,
    -662,  -662,  -662,  2105,   421,  -662,   170,  -662,  -662,   319,
    -662,  -662,  2600,   305,  -662,  -662,   317,  -662,  -662,   320,
     -32,  -662,  -662,  -662,  -662,  -662,  -662,  -662,  -662,  -662,
    -662,  -662,  -662,  -662,  -662,  -662,  -662,  2402,  -662,  -662,
    -662,  -662,  -662,  -662,  -662,  -662,  -662,  -662,  -662,  -662,
    -662,  -662,  -662,  -662,   193,   315,   308,   309,  2798,    87,
      93,   310,   328,  -662,   -48,  -662,  -662,  -662,  -662,  -662,
    -662,   150,  -662,   313,  -662,   316,   324,   197,   308,   314,
    -662,   318,   343,   332,   342,  -662,   325,  -662,     4,    13,
     325,  -662,  -662,  2798,   324,     7,  1302,   371,   386,  2798,
      25,   390,   391,   350,  -662,  -662,  -662,   324,   346,    24,
     366,  2798,   153,   353,   825,  -662,   379,  -662,  2798,  2798,
     324,   353,  2798,   353,    28,   169,   837,    28,    22,    30,
    -662,  -662,  -662,  -662,  2303,   108,    32,    62,   339,   325,
    -662,   380,  -662,   354,  2798,   375,  -662,   383,   373,  -662,
     388,  -662,   195,  -662,   388,   324,  -662,  2699,  -662,   426,
     384,  -662,    21,   397,  -662,   394,  -662,  -662,  -662,  -662,
    -662,  -662,  -662,   465,   -39,   485,  2798,   489,  -662,   324,
    -662,  -662,   837,   519,  -662,   198,  1425,  1548,   528,   202,
     399,   411,  -662,  -662,  -662,  -662,   324,  -662,  -662,  -662,
     375,  -662,  -662,   402,  -662,   -37,   -24,   -11,    63,  -662,
     465,   482,  -662,   223,  -662,  2798,  -662,   422,   423,  -662,
    -662,  -662,  -662,  -662,  -662,  2798,  2798,   324,  -662,  -662,
     427,  2798,  2798,   358,  -662,  -662,  -662,  -662,    33,  -662,
     324,   837,  -662,  -662,  -662,  -662,  -662,  -662,   417,  -662,
    -662,  -662,  -662,   430,   837,  -662,   837,  -662,   230,   242,
    -662,   412,   317,  -662,  -662,   433,  -662,   324,   434,   232,
     424,   418,  -662,  -662,  -662,  -662,   113,   429,  1548,  -662,
     324,   324,   417,   324,   417,  -662,   447,   837,  -662,   199,
     443,  -662,  -662,   232,   432,   436,  -662,  -662,  -662,    30,
     446,    30,  -662,  -662,  -662,   449,   448,  -662,  -662,  -662,
    1054,  -662,  -662,  -662,  -662,  -662,   438,  -662,   208,  -662,
     451,  -662,   102,   324,  1888,  -662,  -662,   117,    14,  -662,
     325,  2798,   100,   788,  -662,  -662,   103,  1665,  -662,   455,
      73,   837,  -662,   232,  -662,   324,   456,   444,   457,   453,
     458,  -662,   440,   459,   473,  -662,  -662,  1665,  -662,  -662,
    1665,  -662,   324,  2002,  -662,   324,  -662,   324,  -662,  -662,
     324,  -662,   324,  -662,     9,  2006,    13,   211,  -662,  -662,
    -662,  -662,  -662,  -662,  -662,  -662,   468,   232,   353,   232,
     232,   586,   593,  -662,  -662,   837,   837,   837,   837,   837,
      11,   475,   232,   452,  -662,   478,  -662,  -662,    35,  -662,
    -662,  -662,  -662,   430,  -662,  -662,   321,  -662,  -662,  -662,
     323,   303,  -662,  -662,  -662,  -662,   837,  -662,  -662,  -662,
    -662,  -662,   337,  -662,  -662,  -662,   306,  -662,  -662,  -662,
    -662,  -662,  -662,  -662,  -662,  -662,  -662,  -662,   531,   344,
    -662,   311,  -662,  -662,  -662,  -662,  -662,   367,   334,  -662,
    -662,  -662,  -662,  -662,  -662,  -662,  -662,  -662,  -662,  -662,
     -29,   -23,  -662,  -662,  -662,  -662,  -662,  -662,  -662,  -662,
    -662,  -662,  -662,  -662,  -662,  -662,   199,  1782,  -662,   469,
    1178,  -662,  -662,   324,   232,   467,  -662,   588,  -662,   325,
      54,  -662,  -662,  -662,   -45,  -662,  -662,   375,  -662,   486,
     487,  -662,   324,  -662,   472,  -662,  -662,  -662,  -662,   479,
    -662,  -662,  2303,   572,   232,  -662,  -662,   127,  -662,  -662,
    -662,  1548,  -662,   493,  -662,   213,   229,  -662,  -662,   480,
     -11,  -662,  -662,   166,  -662,  -662,  -662,  2798,  -662,    36,
    -662,    50,    23,    57,   499,   358,  -662,  -662,  -662,   232,
     496,   232,   232,   232,   232,   232,  -662,  -662,  -662,   497,
    -662,  -662,   477,  -662,  -662,    39,  -662,   500,   502,   837,
     494,  -662,  -662,   160,    -8,   501,   503,   505,   260,   837,
     498,   512,   504,   324,  -662,  -662,   508,   515,   516,  -662,
    -662,   440,  1548,  -662,   324,    62,  -662,  -662,   788,  -662,
    -662,  -662,    50,  -662,  -662,  -662,   534,  -662,  -662,  -662,
    -662,   521,  -662,  -662,   232,   325,  -662,   513,  1936,  -662,
     232,   325,  -662,   325,  -662,  -662,    48,  1548,   515,   325,
     325,  -662,  -662,  -662,  -662,  -662,   532,  -662,   518,   162,
    1054,  -662,   232,   520,   536,  -662,  -662,  -662,  -662,  -662,
    -662,  -662,   516,  -662,  3284,  -662,   325,  -662,   232,    19,
    -662,  -662,  -662,  -662,  -662,  -662,  -662,  -662,  -662,  -662,
    -662,  -662,  -662,  -662,  -662,  -662,  -662,  -662,  -662,  -662,
    -662,  -662,  -662,  -662,  -662,  -662,  -662,  -662,  -662,  3284,
    -662,  3044,  -662,  -662,  -662,  2924,  -662,  3164,  -662,  -662,
    -662,  -662,  -662
  };

  const unsigned short int
  asn1_parser::yydefact_[] =
  {
       0,   485,     0,     2,     0,   141,     1,     3,   152,     0,
     138,   139,   140,     0,   156,   149,   483,     0,   144,   147,
     148,   146,   351,     0,   143,   151,     0,     0,     0,   158,
     142,   145,     0,     0,   360,   155,   153,   154,     0,     0,
       0,   361,   362,   358,     0,     0,   157,     0,   150,   360,
     357,   163,   359,   165,   137,   167,     0,   482,   484,     0,
     164,   177,   179,   180,   182,     0,   169,     0,   162,   161,
       0,     0,     4,     0,   168,   170,     0,     0,   482,   187,
     189,   190,    89,    90,    91,    92,    93,   159,   183,   185,
     186,   188,     0,     0,     0,   178,   181,   166,   171,     0,
       0,     0,   184,    62,   299,     0,   374,   271,     0,     0,
     368,   370,   371,     0,     0,   365,   222,   375,   376,   377,
       0,   274,   378,   379,     0,   228,     0,   356,   380,   291,
     355,   363,     0,     0,   382,   381,   366,   369,   383,   241,
     384,   385,   386,     0,   336,   482,   483,   108,    61,     0,
      77,   227,     0,     0,   211,   223,     0,   209,   193,   191,
       0,   207,   213,   224,   220,   231,   212,   230,   226,   234,
     235,   236,   237,   215,   210,   238,   330,     0,   229,   233,
     225,   232,   219,   221,   239,   216,   240,   217,   218,   214,
     372,   373,   208,   389,    78,     0,     0,     0,     0,     0,
     192,     0,     0,   172,   176,    11,    10,   482,   107,     6,
       8,     0,   100,     0,   104,   103,   106,   180,   182,     0,
       7,   486,     0,     0,   292,   387,     0,   364,     0,     0,
       0,   343,   298,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    13,    12,    14,   204,     0,   342,
       0,     0,     0,     0,     0,   196,     0,   388,     0,     0,
     331,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     173,   174,   175,    99,     0,     0,     0,     0,     0,     0,
     327,     0,   324,   325,     0,   478,   290,     0,   283,   287,
     289,   110,     0,   276,     0,   317,   318,     0,   455,     0,
     309,   300,   313,     0,   302,   303,   311,   280,   443,   437,
     438,   439,   367,     0,   299,     0,     0,     0,   273,     0,
     445,   452,     0,     0,   272,     0,     0,     0,     0,   440,
     441,   124,   400,   115,   116,   117,   456,   434,   442,   436,
     478,   399,   401,   402,   405,   407,     0,   409,     0,   412,
       0,   415,   423,   425,   426,     0,   427,     0,   447,   429,
     430,   428,   431,   432,   433,     0,     0,   321,   322,   319,
       0,     0,     0,     0,   335,   340,   341,   339,     0,    80,
      94,     0,    23,    24,    25,    26,    27,    28,   109,   255,
     247,   248,   249,   245,     0,   260,     0,   253,   482,   484,
     201,   227,     0,   251,   195,     0,   113,   199,   262,     0,
     261,   259,   243,   254,   244,   246,   194,     0,     0,   206,
     333,   332,    87,   329,    88,    63,   202,     0,   245,   263,
     484,   256,   262,   205,     0,     0,   202,    97,   352,   353,
       0,   346,   348,   349,   350,   351,   194,   101,   102,     9,
       0,    64,    98,    65,    66,    67,     0,   486,     0,   294,
       0,   323,     0,   242,     0,   286,   282,     0,     0,   275,
       0,     0,     0,     0,   314,   301,     0,     0,   408,     0,
     134,     0,   457,   475,   476,     0,     0,    84,     0,    82,
       0,   281,     0,     0,     0,   420,   419,     0,   422,   421,
       0,   416,   444,     0,   448,   392,   396,   393,   397,   320,
     390,   394,   391,   395,    33,     0,     0,     0,    16,    18,
      19,    20,    21,    22,   337,   338,     0,    96,     0,   250,
     269,     0,     0,   197,   198,     0,     0,     0,     0,     0,
       0,     0,    95,     0,   353,     0,   344,   347,     0,   488,
     489,   490,   491,   245,   493,   494,   495,   374,   271,   498,
     499,   500,   501,   502,   503,   504,   505,   368,   370,   508,
     509,   371,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   365,   273,   522,   523,   524,   525,   526,     0,   528,
     529,   274,   531,   532,   533,   534,   535,   536,   537,   538,
     356,   260,   541,   542,   543,   544,   545,   291,   355,   363,
     549,   550,   551,   552,   553,   554,   555,   366,   369,   272,
     559,   560,   561,   562,   563,    60,   263,     0,    73,     0,
       0,    71,    74,    75,    76,     0,    59,     0,   293,     0,
       0,   326,   328,   480,     0,   479,   477,   478,   288,     0,
       0,   277,   316,   310,   307,   435,   440,   441,   315,   304,
     312,   418,   123,     0,   135,   460,   458,     0,   459,   461,
     462,     0,    81,     0,   424,     0,     0,   126,   398,   403,
     410,   413,   454,     0,   453,   446,   449,     0,    31,    44,
      30,    39,    35,    48,    50,     0,   334,    29,   258,   270,
       0,   264,   257,   266,   265,   267,   203,   268,   345,     0,
     527,    69,     0,    70,    72,     0,   295,     0,     0,     0,
     284,   279,   278,     0,     0,   107,     0,     0,   106,     0,
       0,     0,   465,   470,    85,   406,    83,   131,   128,   132,
     125,     0,     0,   450,    32,     0,    42,    41,     0,    37,
      40,    34,    39,    47,    46,    45,     0,    15,    17,   252,
     354,     0,   296,   297,   481,     0,   308,   305,     0,   118,
     136,     0,   463,     0,   469,   467,   474,     0,   131,     0,
       0,   127,   404,    43,    38,    36,     0,    68,   285,     0,
       0,   120,   119,     0,     0,   466,   472,   473,   471,   468,
      86,   130,   129,   133,     0,    49,     0,   306,    76,     0,
     464,   492,   495,   496,   497,   499,   500,   505,   506,   507,
     510,   511,   515,   520,   521,   528,   530,   536,   537,   539,
     540,   546,   547,   548,   549,   550,   556,   557,   558,     0,
     487,     0,    51,    54,    53,     0,    57,     0,     5,    52,
      56,    58,    55
  };

  const short int
  asn1_parser::yypgoto_[] =
  {
    -662,   652,  -662,  -662,  -100,  -662,  -662,  -662,   389,  -662,
    -662,   -35,  -443,    38,  -662,  -662,  -662,  -662,   -90,  -662,
    -662,  -662,  -662,  -662,  -662,  -176,  -631,  -662,  -662,  -662,
    -442,  -275,  -662,  -642,  -662,  -662,  -662,  -662,  -662,    34,
      41,  -662,  -662,  -662,   419,  -662,   286,  -662,  -662,  -662,
    -662,  -662,  -662,   300,  -662,   396,  -662,    15,  -662,  -662,
    -662,  -662,  -662,  -662,  -662,  -662,  -662,  -662,   -66,  -102,
     -98,  -662,  -662,  -662,  -662,  -662,  -662,   661,  -662,   651,
    -662,  -662,  -662,  -662,  -662,  -662,  -662,  -662,  -662,  -662,
     611,  -662,  -662,   633,   617,   -79,  -662,   602,  -662,  -250,
    -662,  -662,   288,  -662,  -662,  -662,  -662,  -662,  -662,   387,
    -662,  -172,   437,   238,  -662,  -662,  -662,  -662,  -662,  -214,
    -662,  -662,  -202,  -206,  -662,  -662,   -73,  -456,  -662,  -662,
    -662,    56,  -662,  -662,  -662,   460,  -662,  -455,  -462,  -662,
    -662,  -662,  -662,  -662,  -662,  -662,  -662,  -662,  -662,  -662,
    -662,  -662,  -662,  -662,  -662,  -137,  -662,    79,   148,  -662,
    -662,  -662,   687,  -662,   650,   657,  -662,  -662,  -662,  -662,
    -161,  -662,  -662,  -662,  -662,  -662,  -662,  -662,  -662,  -662,
    -127,  -662,  -662,   284,   378,  -661,  -311,  -662,  -662,   209,
    -662,   205,  -662,   360,  -662,  -662,   235,  -662,  -437,  -662,
    -662,  -662,  -662,  -662,  -662,    37,  -129,  -662,  -662,  -662,
    -662,  -662,  -662,  -662,  -384,  -662,  -662,  -662,  -662,  -662,
    -662,  -325,  -662,   -22,    -9,   -41,    10,   -40,  -662
  };

  const short int
  asn1_parser::yydefgoto_[] =
  {
      -1,     2,     3,   805,   208,   209,   210,    79,   245,   246,
     517,   518,   387,   388,   519,   690,   752,   520,   750,   521,
     522,   747,   523,   755,   757,   841,   842,   843,   844,   845,
     846,   147,   148,   452,   453,   454,   629,   455,   630,   631,
     632,   149,   150,    80,   331,   488,   151,    81,    82,    83,
      84,    85,    86,   101,   211,   212,   213,   214,   153,   154,
     155,   156,   402,   332,   333,   727,   334,   676,   677,   779,
     738,   335,    65,     4,    10,    11,    12,    17,    18,    19,
      20,    14,    29,    39,    54,    55,    59,    67,    73,    74,
      75,   203,   270,    76,    61,    62,    87,    88,   157,   403,
     158,   404,   255,   405,   159,   406,    89,    90,    91,   336,
     161,   302,   432,   634,   410,   411,   419,   531,   162,   412,
     163,   292,   286,   413,   164,   287,   288,   289,   165,   166,
     458,   459,   167,   168,   169,   303,   304,   305,   306,   170,
     171,   172,   173,   281,   282,   283,   174,   175,   176,   177,
     249,   526,   378,   178,   271,   440,   441,   442,   443,   444,
     179,   180,   414,    34,    45,    43,   181,   182,   183,   184,
     415,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     257,   340,   341,   342,   343,   734,   344,   345,   346,   347,
     348,   349,   350,   478,   497,   500,   351,   352,   353,   354,
     355,   356,   357,   685,   358,   686,   359,   360,   361,   362,
     666,   668,   669,   670,   731,   732,   775,   776,   799,   363,
     364,   465,   646,   200,   195,   196,   201,   220,   636
  };

  const short int
  asn1_parser::yytable_[] =
  {
      22,   222,   451,   238,   242,   237,   241,   627,   628,    22,
       5,   648,    64,     5,   660,   493,   490,   654,   307,   439,
      15,   215,   337,    77,    56,    64,    93,    94,   293,    64,
     338,    63,   425,    64,   438,   299,   658,   524,   205,   438,
     425,    99,   205,   244,    63,    92,    93,    94,    63,   425,
     299,   205,    63,   425,   280,   375,   233,   687,   717,   218,
     425,   296,   239,   243,  -414,    92,   684,   368,   299,   473,
     194,   234,   691,  -411,   269,   339,   796,   234,   217,   236,
      26,   782,  -435,   103,   745,   697,   495,   256,    21,  -435,
      41,    42,   236,   235,   719,   236,   688,    21,   748,   240,
      58,   236,   197,   783,    27,   753,  -411,   298,   474,   204,
     219,   223,   337,   337,    70,    28,   800,   376,   206,   496,
     338,   338,   206,   746,   285,   663,   791,   300,   525,   291,
     301,   206,     1,  -414,   751,   797,   377,   749,   498,   798,
      16,    57,    58,   299,   754,   300,   299,   236,   369,    78,
      58,   328,    16,   219,   400,    16,   221,     6,    78,    58,
     221,     1,    58,   272,    16,   339,   339,    58,   244,   221,
     307,   308,   309,    16,   310,    57,   311,     1,   146,    78,
       1,    58,     1,    58,   450,   312,    57,    58,   628,   544,
       8,   544,   482,   506,   508,   215,   448,   236,   655,   511,
     513,     1,    58,   299,   337,   299,   266,   499,     9,     1,
     849,   236,   338,   416,   643,  -112,   849,   284,   649,   290,
     653,   294,   641,   659,   297,   416,   284,   318,   446,   261,
     297,   284,    13,   218,    64,  -114,   449,   647,   449,   223,
     485,   486,   426,   682,   434,   436,   684,   730,    16,   263,
      16,    16,   217,    63,   436,    57,    58,   339,   645,   337,
     445,   660,   650,   337,   417,    16,    23,   338,   651,   767,
     460,   338,   381,   273,   324,    16,   435,   236,   223,   435,
     766,   416,   807,   337,   219,   274,   337,   456,   427,   337,
     642,   338,  -484,   236,   338,  -484,    30,   338,   544,   422,
     434,   424,   545,   328,   547,  -484,  -484,    25,    16,  -484,
      16,   784,   339,   656,   657,  -112,   339,  -192,   469,    71,
      32,  -192,   720,  -482,  -482,    33,  -482,   660,    35,   261,
     470,   638,   435,   261,   694,  -482,   339,   446,  -482,   339,
     416,  -160,   339,   639,  -451,    53,   695,   627,   628,   737,
     648,  -451,   740,   416,    36,   416,   297,   297,   665,   434,
     735,    16,   297,   297,   741,  -263,   532,   535,    37,  -263,
    -483,   536,   434,  -263,   434,   537,   382,   383,   384,   385,
     386,   514,   515,  -121,   236,   516,   416,   794,   435,   795,
     718,   435,   152,   198,   202,    38,    15,    44,   446,    46,
     446,    47,   850,   851,   435,   434,   435,    50,    48,   416,
      51,    66,    68,    69,   689,    70,   693,    71,    72,    96,
     100,    97,   224,   416,   225,   226,   227,   446,   228,   229,
     445,   735,   445,   230,   231,   232,   248,   435,   250,   254,
     416,   253,  -111,   262,   263,   264,   267,   268,   236,   435,
     276,   435,   275,   284,  -485,  -105,   365,   337,   290,   434,
     635,   294,   277,   284,   279,   338,   735,   284,   278,   337,
     451,   366,   373,    16,   635,   371,   372,   338,   435,   160,
     199,   238,   242,   237,   241,   374,   457,   216,   326,   462,
     416,   435,   409,   451,   416,   416,   416,   416,   416,   706,
     449,   418,   706,   461,   433,   464,   466,   446,   467,   434,
     339,   471,   468,   434,   434,   434,   434,   434,   436,   472,
     475,   477,   339,   479,   223,   416,   223,   481,   337,   476,
     247,   484,   491,   492,   337,  -484,   338,   494,  -417,   252,
     401,   435,   338,   503,   434,   435,   435,   435,   435,   435,
     509,   504,   431,   528,  -299,  -256,   534,  -200,   435,   538,
     483,   539,   725,   337,   260,   540,   -79,   532,   261,   546,
    -114,   338,   543,   548,   637,   640,   435,   662,   667,   671,
     672,   339,   675,   674,   678,   265,   416,   339,   673,   416,
     307,   389,   390,   679,   391,   696,   392,   700,   707,   446,
      58,   708,   710,   715,   712,   312,   774,   723,   431,   425,
     729,   721,   722,   736,   724,   742,   339,   756,   428,   527,
     295,   759,   760,   761,  -122,   762,   367,   763,   769,   765,
     460,   394,   529,   771,   530,   772,   786,   635,   380,   773,
     635,   407,   768,   777,   787,   420,   421,   318,   789,   423,
     435,   778,   780,   806,   804,     7,   809,   437,   733,   810,
     758,   216,   785,   847,   714,   542,   739,   431,   711,   379,
     447,   463,   219,   395,   706,   781,   801,   726,   416,    31,
     431,   802,   431,    40,   463,    98,    60,    95,   416,   102,
     533,   408,   788,   436,   324,   716,   709,   434,    24,    52,
     370,    49,   541,   480,   489,   681,   680,   434,   396,   698,
     501,     0,   661,   431,   284,   284,     0,    23,     0,   664,
     743,     0,     0,   328,     0,   397,     0,   416,     0,   435,
       0,     0,     0,   429,   430,     0,   401,     0,     0,   435,
       0,     0,   502,     0,     0,     0,   434,     0,     0,   416,
       0,     0,   505,   507,     0,   456,   290,     0,   510,   512,
       0,     0,   733,     0,   733,     0,     0,   431,   706,   699,
     739,   803,     0,   701,   702,   703,   704,   705,   793,     0,
     284,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   307,   308,   309,     0,   310,   290,   311,     0,
     635,     0,     0,     0,   529,     0,     0,   312,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   431,     0,     0,
     655,   431,   431,   431,   431,   431,     0,     0,     0,   307,
     389,   390,     0,   391,     0,   392,     0,   633,     0,     0,
       0,   307,   389,   390,   312,   391,   103,   392,     0,   318,
       0,   644,   431,     0,   205,     0,   312,   393,   652,     0,
     105,   106,   107,     0,   108,   109,     0,     0,     0,   428,
     394,   110,   111,     0,     0,   112,   113,     0,     0,     0,
     114,     0,   394,     0,     0,   115,   318,     0,   116,   117,
     118,   119,     0,     0,     0,     0,   324,   120,   318,   121,
       0,   122,   692,     0,     0,     0,   123,   124,   125,   126,
       0,   127,   395,   401,     0,     0,   401,   128,     0,   129,
     130,   131,   132,   133,   395,   328,     0,     0,   134,     0,
     135,   136,   137,   324,   206,   656,   657,     0,   138,   139,
     140,   141,   142,     0,     0,   324,     0,   396,     0,     0,
       0,   144,     0,     0,     0,     0,    23,   764,     0,   396,
       0,     0,   328,     0,   397,     0,     0,   770,    23,     0,
       0,     0,   398,   399,   328,     0,   397,     0,     0,     0,
       0,     0,     0,     0,   429,   430,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   431,   792,     0,     0,     0,
       0,     0,     0,     0,   633,   431,     0,   633,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   808,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   728,
       0,     0,     0,     0,   431,     0,     0,     0,   307,   389,
     390,     0,   391,     0,   392,     0,     0,     0,     0,     0,
       0,     0,     0,   312,   744,   103,   401,   382,   383,   384,
     385,   386,   549,   550,   551,   552,   553,   554,   555,   556,
     557,   558,   559,   560,   561,   562,   563,   564,   565,   566,
     567,   568,   569,   570,   571,   572,   573,   574,   575,   576,
     577,   578,   579,   580,   581,   582,   583,   116,   117,   118,
     119,   584,   585,   586,   587,   588,   589,   590,   591,   592,
     122,   593,   594,   595,   596,   123,   597,   125,   598,   599,
     600,   601,   602,   603,   604,   605,   128,   606,   607,   608,
     609,   610,   611,   612,   613,   614,   615,   134,   616,   135,
     617,   618,   619,   620,   621,   622,   623,   138,   139,   140,
     141,   142,   624,     0,     0,     0,   396,   633,     0,     0,
     144,     0,   307,   389,   390,    23,   391,     0,   392,   625,
       0,   328,     0,   397,     0,     0,     0,   312,     0,   103,
       0,   626,   399,     0,     0,     0,   549,   550,   551,   552,
     553,   554,   555,   556,   557,   558,   559,   560,   561,   562,
     563,   564,   565,   566,   567,   568,   569,   570,   571,   572,
     573,   574,   575,   576,   577,   578,   579,   580,   581,   582,
     583,   116,   117,   118,   119,   584,   585,   586,   587,   588,
     589,   590,   591,   592,   122,   593,   594,   595,   596,   123,
     597,   125,   598,   599,   600,   601,   602,   603,   604,   605,
     128,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   134,   616,   135,   617,   618,   619,   620,   621,   622,
     623,   138,   139,   140,   141,   142,   624,     0,     0,     0,
     396,   713,     0,     0,   144,     0,   307,   308,   309,    23,
     310,     0,   311,   625,     0,   328,     0,   397,     0,     0,
       0,   312,     0,   103,     0,   626,   399,     0,     0,     0,
       0,     0,   313,     0,   314,     0,     0,   105,   106,   107,
       0,   108,   109,     0,     0,     0,   315,   316,   110,   111,
       0,     0,   112,   113,   317,     0,     0,   114,     0,     0,
       0,     0,   115,   318,   319,   116,   117,   118,   119,     0,
       0,     0,     0,   320,   120,     0,   121,     0,   122,     0,
     321,     0,     0,   123,   124,   125,   126,     0,   127,     0,
     322,     0,     0,     0,   128,     0,   129,   130,   131,   132,
     133,   323,   234,     0,     0,   134,     0,   135,   136,   137,
     324,     0,     0,     0,     0,   138,   139,   140,   141,   142,
     325,     0,     0,     0,   326,     0,   327,     0,   144,   307,
     308,   309,     0,   310,     0,   311,     0,     0,     0,   328,
       0,     0,     0,     0,   312,     0,   103,     0,     0,   329,
     330,     0,     0,     0,     0,   313,     0,   314,     0,     0,
     105,   106,   107,     0,   108,   109,     0,     0,     0,     0,
       0,   110,   111,     0,     0,   112,   113,     0,     0,     0,
     114,     0,     0,     0,     0,   115,   318,   319,   116,   117,
     118,   119,     0,     0,     0,     0,   320,   120,     0,   121,
       0,   122,     0,   321,     0,     0,   123,   124,   125,   126,
       0,   127,     0,   322,     0,     0,     0,   128,     0,   129,
     130,   131,   132,   133,   323,   234,     0,     0,   134,     0,
     135,   136,   137,   324,     0,     0,     0,     0,   138,   139,
     140,   141,   142,   325,     0,   487,     0,     0,     0,   327,
       0,   144,   307,   308,   309,     0,   310,     0,   311,     0,
       0,     0,   328,     0,     0,     0,     0,   312,     0,   103,
       0,     0,   329,   330,     0,     0,     0,     0,   313,     0,
     314,     0,     0,   105,   106,   107,     0,   108,   109,     0,
       0,     0,     0,     0,   110,   111,     0,     0,   112,   113,
       0,     0,     0,   114,     0,     0,     0,     0,   115,   318,
     319,   116,   117,   118,   119,     0,     0,     0,     0,   320,
     120,     0,   121,     0,   122,     0,   321,     0,     0,   123,
     124,   125,   126,     0,   127,     0,   322,     0,     0,     0,
     128,     0,   129,   130,   131,   132,   133,   323,   234,     0,
       0,   134,     0,   135,   136,   137,   324,     0,     0,     0,
       0,   138,   139,   140,   141,   142,   325,     0,     0,   307,
     308,   309,   327,   310,   144,   311,     0,     0,     0,     0,
       0,     0,     0,     0,   312,   328,   103,     0,     0,     0,
       0,     0,     0,     0,     0,   329,   330,   314,     0,     0,
     105,   106,   107,     0,   108,   109,     0,     0,     0,     0,
       0,   110,   111,     0,     0,   112,   113,     0,     0,     0,
     114,     0,     0,     0,     0,   115,   318,   319,   116,   117,
     118,   119,     0,     0,     0,     0,   320,   120,     0,   121,
       0,   122,     0,   321,     0,     0,   123,   124,   125,   126,
       0,   127,     0,   322,     0,     0,     0,   128,     0,   129,
     130,   131,   132,   133,   323,   234,     0,     0,   134,     0,
     135,   136,   137,   324,     0,     0,     0,     0,   138,   139,
     140,   141,   142,   325,     0,     0,   307,   389,   390,   327,
     391,   144,   392,     0,     0,     0,     0,     0,     0,     0,
       0,   312,   328,   103,     0,     0,     0,     0,     0,     0,
       0,     0,   329,   330,   393,     0,     0,   105,   106,   107,
       0,   108,   109,     0,     0,     0,     0,   394,   110,   111,
       0,     0,   112,   113,     0,     0,     0,   114,     0,     0,
       0,     0,   115,   318,     0,   116,   117,   118,   119,     0,
       0,     0,     0,     0,   120,     0,   121,     0,   122,     0,
       0,     0,     0,   123,   124,   125,   126,     0,   127,   395,
       0,     0,     0,     0,   128,     0,   129,   130,   131,   132,
     133,     0,     0,     0,     0,   134,     0,   135,   136,   137,
     324,     0,   307,     0,     0,   138,   139,   140,   141,   142,
       0,     0,     0,     0,   396,     0,     0,     0,   144,   103,
       0,     0,     0,    23,     0,     0,     0,     0,     0,   328,
     104,   397,     0,   105,   106,   107,     0,   108,   109,   429,
     399,     0,     0,     0,   110,   111,     0,     0,   112,   113,
     307,   389,   390,   114,   391,     0,   392,     0,   115,     0,
       0,   116,   117,   118,   119,   312,     0,   103,     0,     0,
     120,     0,   121,     0,   122,     0,     0,     0,   428,   123,
     124,   125,   126,     0,   127,     0,     0,     0,     0,     0,
     128,   394,   129,   130,   131,   132,   133,     0,     0,     0,
       0,   134,     0,   135,   136,   137,     0,   318,     0,     0,
       0,   138,   139,   140,   141,   142,   307,   308,   309,     0,
     310,     0,   311,     0,   144,     0,     0,     0,     0,     0,
       0,   312,     0,   395,     0,   328,     0,   103,     0,   382,
     383,   384,   385,   386,   655,   145,   146,     0,   104,     0,
       0,   105,   106,   107,   324,   108,   109,     0,     0,     0,
       0,     0,   110,   111,     0,     0,   112,   113,   790,     0,
       0,   114,     0,   318,     0,     0,   115,    23,     0,   116,
     117,   118,   119,   328,     0,   397,     0,     0,   120,   682,
     121,     0,   122,   429,   430,     0,     0,   123,   124,   125,
     126,     0,   127,     0,     0,     0,     0,     0,   128,     0,
     129,   130,   131,   132,   133,     0,     0,     0,     0,   134,
     324,   135,   136,   137,     0,     0,     0,     0,     0,   138,
     139,   140,   141,   142,     0,     0,   103,     0,     0,     0,
     683,     0,   144,     0,   205,     0,     0,   104,     0,   328,
     105,   106,   107,     0,   108,   109,   243,     0,     0,   656,
     657,   110,   111,   145,   146,   112,   113,     0,     0,     0,
     114,     0,     0,     0,     0,   115,     0,     0,   116,   117,
     118,   119,     0,     0,     0,     0,     0,   120,     0,   121,
       0,   122,     0,     0,     0,     0,   123,   124,   125,   126,
       0,   127,     0,     0,     0,     0,     0,   128,     0,   129,
     130,   131,   132,   133,     0,     0,     0,     0,   134,     0,
     135,   136,   137,     0,   206,     0,     0,     0,   138,   139,
     140,   141,   142,     0,     0,   103,     0,     0,     0,     0,
       0,   144,     0,     0,     0,     0,   104,     0,     0,   105,
     106,   107,     0,   108,   109,     0,     0,     0,     0,     0,
     110,   111,   207,   146,   112,   113,     0,     0,     0,   114,
       0,     0,     0,     0,   115,     0,     0,   116,   117,   118,
     119,     0,     0,     0,     0,     0,   120,     0,   121,     0,
     122,     0,     0,     0,     0,   123,   124,   125,   126,     0,
     127,     0,     0,     0,     0,     0,   128,     0,   129,   130,
     131,   132,   133,     0,     0,     0,     0,   134,     0,   135,
     136,   137,     0,     0,     0,     0,     0,   138,   139,   140,
     141,   142,     0,   143,   103,     0,   100,     0,     0,     0,
     144,     0,   205,     0,     0,   104,     0,     0,   105,   106,
     107,     0,   108,   109,     0,     0,     0,     0,     0,   110,
     111,   145,   146,   112,   113,     0,     0,     0,   114,     0,
       0,     0,     0,   115,     0,     0,   116,   117,   118,   119,
       0,     0,     0,     0,     0,   120,     0,   121,     0,   122,
       0,     0,     0,     0,   123,   124,   125,   126,     0,   127,
       0,     0,     0,     0,     0,   128,     0,   129,   130,   131,
     132,   133,     0,     0,     0,     0,   134,     0,   135,   136,
     137,     0,   206,     0,     0,     0,   138,   139,   140,   141,
     142,     0,     0,   103,     0,     0,     0,     0,     0,   144,
       0,     0,     0,     0,   104,     0,     0,   105,   106,   107,
       0,   108,   109,     0,     0,     0,     0,     0,   110,   111,
     207,   146,   112,   113,     0,     0,     0,   114,     0,   258,
       0,     0,   115,     0,     0,   116,   117,   118,   119,     0,
     259,     0,     0,     0,   120,     0,   121,     0,   122,     0,
       0,     0,     0,   123,   124,   125,   126,     0,   127,     0,
       0,     0,     0,     0,   128,     0,   129,   130,   131,   132,
     133,     0,     0,     0,     0,   134,     0,   135,   136,   137,
       0,     0,     0,     0,     0,   138,   139,   140,   141,   142,
       0,     0,   103,     0,     0,     0,     0,     0,   144,     0,
       0,     0,     0,   104,     0,     0,   105,   106,   107,     0,
     108,   109,     0,     0,     0,     0,     0,   110,   111,   145,
     146,   112,   113,     0,     0,     0,   114,     0,     0,     0,
       0,   115,     0,     0,   116,   117,   118,   119,     0,     0,
       0,     0,     0,   120,     0,   121,     0,   122,     0,     0,
       0,     0,   123,   124,   125,   126,     0,   127,     0,     0,
       0,     0,     0,   128,     0,   129,   130,   131,   132,   133,
       0,     0,     0,     0,   134,     0,   135,   136,   137,     0,
       0,     0,     0,     0,   138,   139,   140,   141,   142,     0,
       0,   103,     0,   100,     0,     0,     0,   144,     0,     0,
       0,     0,   104,     0,     0,   105,   106,   107,     0,   108,
     109,     0,     0,     0,     0,     0,   110,   111,   145,   146,
     112,   113,     0,     0,     0,   114,     0,     0,     0,     0,
     115,     0,     0,   116,   117,   118,   119,     0,     0,     0,
       0,     0,   120,     0,   121,     0,   122,     0,     0,     0,
       0,   123,   124,   125,   126,     0,   127,     0,     0,     0,
       0,     0,   128,     0,   129,   130,   131,   132,   133,     0,
       0,     0,     0,   134,     0,   135,   136,   137,     0,     0,
       0,     0,     0,   138,   139,   140,   141,   142,     0,   251,
     103,     0,     0,     0,     0,     0,   144,     0,     0,     0,
       0,   104,     0,     0,   105,   106,   107,     0,   108,   109,
       0,     0,     0,     0,     0,   110,   111,   145,   146,   112,
     113,     0,     0,     0,   114,     0,     0,     0,     0,   115,
       0,     0,   116,   117,   118,   119,     0,     0,     0,     0,
       0,   120,     0,   121,     0,   122,     0,     0,     0,     0,
     123,   124,   125,   126,     0,   127,     0,     0,     0,     0,
       0,   128,     0,   129,   130,   131,   132,   133,     0,     0,
       0,     0,   134,     0,   135,   136,   137,     0,     0,     0,
       0,     0,   138,   139,   140,   141,   142,     0,     0,   103,
       0,     0,     0,     0,     0,   144,     0,   262,     0,     0,
     104,     0,     0,   105,   106,   107,     0,   108,   109,     0,
       0,     0,     0,     0,   110,   111,   145,   146,   112,   113,
       0,     0,     0,   114,     0,     0,     0,     0,   115,     0,
       0,   116,   117,   118,   119,     0,     0,     0,     0,     0,
     120,     0,   121,     0,   122,     0,     0,     0,     0,   123,
     124,   125,   126,     0,   127,     0,     0,     0,     0,     0,
     128,     0,   129,   130,   131,   132,   133,     0,     0,     0,
       0,   134,     0,   135,   136,   137,     0,     0,     0,     0,
       0,   138,   139,   140,   141,   142,     0,     0,     0,     0,
       0,     0,     0,     0,   144,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   145,   146,   382,   383,   384,
     385,   386,   549,   550,   551,   552,   811,   554,   555,   812,
     813,   814,   559,   815,   816,   562,   563,   564,   565,   817,
     818,   819,   569,   570,   820,   821,   573,   574,   575,   822,
     577,   578,   579,   580,   823,   824,   583,     0,     0,     0,
       0,   584,   585,   586,   587,   588,   825,   590,   826,   592,
       0,   593,   594,   595,   596,     0,   827,     0,   828,   599,
     829,   830,   602,   603,   604,   605,     0,   606,   831,   832,
     833,   834,   835,   612,   613,   614,   615,     0,   616,     0,
     836,   837,   838,   620,   621,   622,   623,     0,     0,     0,
       0,     0,   624,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   625,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   840,   549,   550,   551,   552,   811,   554,   555,   812,
     813,   814,   559,   815,   816,   562,   563,   564,   565,   817,
     818,   819,   569,   570,   820,   821,   573,   574,   575,   822,
     577,   578,   579,   580,   823,   824,   583,     0,     0,     0,
       0,   584,   585,   586,   587,   588,   825,   590,   826,   592,
       0,   593,   594,   595,   596,     0,   827,     0,   828,   599,
     829,   830,   602,   603,   604,   605,     0,   606,   831,   832,
     833,   834,   835,   612,   613,   614,   615,     0,   616,     0,
     836,   837,   838,   620,   621,   622,   623,     0,     0,     0,
       0,     0,   624,     0,     0,     0,     0,   848,     0,     0,
     839,     0,     0,     0,     0,     0,     0,     0,     0,   625,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   840,   549,   550,   551,   552,   811,   554,   555,   812,
     813,   814,   559,   815,   816,   562,   563,   564,   565,   817,
     818,   819,   569,   570,   820,   821,   573,   574,   575,   822,
     577,   578,   579,   580,   823,   824,   583,     0,     0,     0,
       0,   584,   585,   586,   587,   588,   825,   590,   826,   592,
       0,   593,   594,   595,   596,     0,   827,     0,   828,   599,
     829,   830,   602,   603,   604,   605,     0,   606,   831,   832,
     833,   834,   835,   612,   613,   614,   615,     0,   616,     0,
     836,   837,   838,   620,   621,   622,   623,     0,     0,     0,
       0,     0,   624,     0,     0,     0,     0,     0,     0,     0,
     839,   852,     0,     0,     0,     0,     0,     0,     0,   625,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   840,   549,   550,   551,   552,   811,   554,   555,   812,
     813,   814,   559,   815,   816,   562,   563,   564,   565,   817,
     818,   819,   569,   570,   820,   821,   573,   574,   575,   822,
     577,   578,   579,   580,   823,   824,   583,     0,     0,     0,
       0,   584,   585,   586,   587,   588,   825,   590,   826,   592,
       0,   593,   594,   595,   596,     0,   827,     0,   828,   599,
     829,   830,   602,   603,   604,   605,     0,   606,   831,   832,
     833,   834,   835,   612,   613,   614,   615,     0,   616,     0,
     836,   837,   838,   620,   621,   622,   623,     0,     0,     0,
       0,     0,   624,     0,     0,     0,     0,     0,     0,     0,
     839,     0,     0,     0,     0,     0,     0,     0,     0,   625,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   840
  };

  const short int
  asn1_parser::yycheck_[] =
  {
       9,   101,   277,   132,   133,   132,   133,   450,   450,    18,
       0,   467,    53,     3,   476,   340,   327,   472,     4,   269,
       4,   100,   236,    21,    30,    66,    67,    67,   230,    70,
     236,    53,    21,    74,     4,    43,   473,     4,    29,     4,
      21,    62,    29,   143,    66,    67,    87,    87,    70,    21,
      43,    29,    74,    21,   226,    31,    85,    48,     4,   100,
      21,   233,    85,    41,    75,    87,   503,   239,    43,    48,
      92,   100,   515,   110,   122,   236,    28,   100,   100,   124,
      33,   742,   121,    21,    48,   528,   110,   119,     9,   128,
      16,    17,   124,   122,   139,   124,    87,    18,    48,   122,
     148,   124,    92,   745,    57,    48,   143,   234,    87,    99,
     100,   101,   326,   327,   135,    68,   777,    93,   109,   143,
     326,   327,   109,    87,   120,    52,   768,   120,   378,   229,
     123,   109,   147,   144,   111,    87,   112,    87,    75,    91,
     148,   147,   148,    43,    87,   120,    43,   124,   123,   147,
     148,   137,   148,   143,   254,   148,   147,     0,   147,   148,
     147,   147,   148,   204,   148,   326,   327,   148,   268,   147,
       4,     5,     6,   148,     8,   147,    10,   147,   148,   147,
     147,   148,   147,   148,   122,    19,   147,   148,   630,   439,
      49,   441,   319,   365,   366,   274,   275,   124,    32,   371,
     372,   147,   148,    43,   418,    43,   119,   144,   122,   147,
     841,   124,   418,   254,   464,   122,   847,   226,   468,   228,
     120,   230,   120,   120,   233,   266,   235,    61,   269,   136,
     239,   240,    15,   274,   275,   122,   276,   120,   278,   229,
      42,    43,   264,    77,   266,   267,   683,   120,   148,   136,
     148,   148,   274,   275,   276,   147,   148,   418,   464,   473,
     269,   723,   468,   477,   254,   148,   131,   473,   470,   724,
     279,   477,   119,   123,   108,   148,   266,   124,   268,   269,
     120,   322,   120,   497,   274,   135,   500,   277,   119,   503,
     462,   497,   122,   124,   500,   125,   123,   503,   548,   261,
     322,   263,   439,   137,   441,   135,   136,    73,   148,   139,
     148,   748,   473,   147,   148,   122,   477,   124,   123,   122,
     124,   124,   647,   124,   122,   138,   124,   789,   104,   136,
     135,   123,   322,   136,   123,   136,   497,   378,   136,   500,
     381,    54,   503,   135,   121,    58,   135,   790,   790,   136,
     806,   128,   123,   394,   104,   396,   365,   366,   485,   381,
     671,   148,   371,   372,   135,   135,   124,   135,   104,   139,
     128,   139,   394,   143,   396,   143,    23,    24,    25,    26,
      27,    23,    24,   123,   124,    27,   427,   771,   378,   773,
     640,   381,    92,    93,    94,    59,     4,   138,   439,    69,
     441,   119,   845,   845,   394,   427,   396,   131,   125,   450,
      34,    70,   140,   140,   514,   135,   516,   122,    54,   123,
     122,   140,   101,   464,   101,   122,    89,   468,   122,    85,
     439,   742,   441,   122,    67,   101,    15,   427,   119,   122,
     481,   136,   122,   128,   136,   136,   136,   119,   124,   439,
     136,   441,   139,   462,   136,   139,    85,   671,   467,   481,
     450,   470,   119,   472,   122,   671,   777,   476,   136,   683,
     745,    85,   122,   148,   464,    85,    85,   683,   468,    92,
      93,   610,   611,   610,   611,   139,   147,   100,   122,   135,
     531,   481,   254,   768,   535,   536,   537,   538,   539,   540,
     540,   122,   543,   123,   266,   130,   123,   548,   135,   531,
     671,    85,   124,   535,   536,   537,   538,   539,   540,   135,
     123,    56,   683,    38,   514,   566,   516,    38,   742,   135,
     143,    12,     4,   122,   748,   136,   742,   135,    56,   152,
     254,   531,   748,   121,   566,   535,   536,   537,   538,   539,
     123,   128,   266,   136,   124,   143,   123,   123,   548,   135,
     322,   143,   662,   777,   177,   136,   119,   124,   136,   123,
     122,   777,   136,   124,   136,   124,   566,   122,   122,   135,
     123,   742,   142,   125,   125,   198,   627,   748,   135,   630,
       4,     5,     6,   120,     8,   127,    10,     4,   123,   640,
     148,   123,    71,   136,   135,    19,   733,   135,   322,    21,
      38,   125,   125,   120,   135,   135,   777,   118,    32,   381,
     233,   125,   125,   146,   123,   125,   239,   125,   123,   135,
     639,    45,   394,   135,   396,   123,   102,   627,   251,   135,
     630,   254,   139,   135,   123,   258,   259,    61,   135,   262,
     640,   136,   136,   135,   122,     3,   136,   268,   667,   123,
     695,   274,   752,   839,   630,   427,   675,   381,   627,   250,
     274,   284,   662,    87,   715,   741,   778,   662,   719,    18,
     394,   779,   396,    32,   297,    74,    53,    70,   729,    87,
     402,   254,   765,   715,   108,   639,   548,   719,    11,    49,
     240,    44,   418,   316,   326,   500,   497,   729,   122,   123,
     350,    -1,   477,   427,   723,   724,    -1,   131,    -1,   481,
     683,    -1,    -1,   137,    -1,   139,    -1,   768,    -1,   719,
      -1,    -1,    -1,   147,   148,    -1,   450,    -1,    -1,   729,
      -1,    -1,   355,    -1,    -1,    -1,   768,    -1,    -1,   790,
      -1,    -1,   365,   366,    -1,   745,   765,    -1,   371,   372,
      -1,    -1,   771,    -1,   773,    -1,    -1,   481,   809,   531,
     779,   780,    -1,   535,   536,   537,   538,   539,   768,    -1,
     789,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     4,     5,     6,    -1,     8,   806,    10,    -1,
     790,    -1,    -1,    -1,   566,    -1,    -1,    19,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   531,    -1,    -1,
      32,   535,   536,   537,   538,   539,    -1,    -1,    -1,     4,
       5,     6,    -1,     8,    -1,    10,    -1,   450,    -1,    -1,
      -1,     4,     5,     6,    19,     8,    21,    10,    -1,    61,
      -1,   464,   566,    -1,    29,    -1,    19,    32,   471,    -1,
      35,    36,    37,    -1,    39,    40,    -1,    -1,    -1,    32,
      45,    46,    47,    -1,    -1,    50,    51,    -1,    -1,    -1,
      55,    -1,    45,    -1,    -1,    60,    61,    -1,    63,    64,
      65,    66,    -1,    -1,    -1,    -1,   108,    72,    61,    74,
      -1,    76,   515,    -1,    -1,    -1,    81,    82,    83,    84,
      -1,    86,    87,   627,    -1,    -1,   630,    92,    -1,    94,
      95,    96,    97,    98,    87,   137,    -1,    -1,   103,    -1,
     105,   106,   107,   108,   109,   147,   148,    -1,   113,   114,
     115,   116,   117,    -1,    -1,   108,    -1,   122,    -1,    -1,
      -1,   126,    -1,    -1,    -1,    -1,   131,   719,    -1,   122,
      -1,    -1,   137,    -1,   139,    -1,    -1,   729,   131,    -1,
      -1,    -1,   147,   148,   137,    -1,   139,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   147,   148,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   719,   768,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   627,   729,    -1,   630,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   790,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   662,
      -1,    -1,    -1,    -1,   768,    -1,    -1,    -1,     4,     5,
       6,    -1,     8,    -1,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,   687,    21,   790,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,    -1,   122,   790,    -1,    -1,
     126,    -1,     4,     5,     6,   131,     8,    -1,    10,   135,
      -1,   137,    -1,   139,    -1,    -1,    -1,    19,    -1,    21,
      -1,   147,   148,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,    -1,
     122,   123,    -1,    -1,   126,    -1,     4,     5,     6,   131,
       8,    -1,    10,   135,    -1,   137,    -1,   139,    -1,    -1,
      -1,    19,    -1,    21,    -1,   147,   148,    -1,    -1,    -1,
      -1,    -1,    30,    -1,    32,    -1,    -1,    35,    36,    37,
      -1,    39,    40,    -1,    -1,    -1,    44,    45,    46,    47,
      -1,    -1,    50,    51,    52,    -1,    -1,    55,    -1,    -1,
      -1,    -1,    60,    61,    62,    63,    64,    65,    66,    -1,
      -1,    -1,    -1,    71,    72,    -1,    74,    -1,    76,    -1,
      78,    -1,    -1,    81,    82,    83,    84,    -1,    86,    -1,
      88,    -1,    -1,    -1,    92,    -1,    94,    95,    96,    97,
      98,    99,   100,    -1,    -1,   103,    -1,   105,   106,   107,
     108,    -1,    -1,    -1,    -1,   113,   114,   115,   116,   117,
     118,    -1,    -1,    -1,   122,    -1,   124,    -1,   126,     4,
       5,     6,    -1,     8,    -1,    10,    -1,    -1,    -1,   137,
      -1,    -1,    -1,    -1,    19,    -1,    21,    -1,    -1,   147,
     148,    -1,    -1,    -1,    -1,    30,    -1,    32,    -1,    -1,
      35,    36,    37,    -1,    39,    40,    -1,    -1,    -1,    -1,
      -1,    46,    47,    -1,    -1,    50,    51,    -1,    -1,    -1,
      55,    -1,    -1,    -1,    -1,    60,    61,    62,    63,    64,
      65,    66,    -1,    -1,    -1,    -1,    71,    72,    -1,    74,
      -1,    76,    -1,    78,    -1,    -1,    81,    82,    83,    84,
      -1,    86,    -1,    88,    -1,    -1,    -1,    92,    -1,    94,
      95,    96,    97,    98,    99,   100,    -1,    -1,   103,    -1,
     105,   106,   107,   108,    -1,    -1,    -1,    -1,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,    -1,    -1,   124,
      -1,   126,     4,     5,     6,    -1,     8,    -1,    10,    -1,
      -1,    -1,   137,    -1,    -1,    -1,    -1,    19,    -1,    21,
      -1,    -1,   147,   148,    -1,    -1,    -1,    -1,    30,    -1,
      32,    -1,    -1,    35,    36,    37,    -1,    39,    40,    -1,
      -1,    -1,    -1,    -1,    46,    47,    -1,    -1,    50,    51,
      -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,    60,    61,
      62,    63,    64,    65,    66,    -1,    -1,    -1,    -1,    71,
      72,    -1,    74,    -1,    76,    -1,    78,    -1,    -1,    81,
      82,    83,    84,    -1,    86,    -1,    88,    -1,    -1,    -1,
      92,    -1,    94,    95,    96,    97,    98,    99,   100,    -1,
      -1,   103,    -1,   105,   106,   107,   108,    -1,    -1,    -1,
      -1,   113,   114,   115,   116,   117,   118,    -1,    -1,     4,
       5,     6,   124,     8,   126,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,   137,    21,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   147,   148,    32,    -1,    -1,
      35,    36,    37,    -1,    39,    40,    -1,    -1,    -1,    -1,
      -1,    46,    47,    -1,    -1,    50,    51,    -1,    -1,    -1,
      55,    -1,    -1,    -1,    -1,    60,    61,    62,    63,    64,
      65,    66,    -1,    -1,    -1,    -1,    71,    72,    -1,    74,
      -1,    76,    -1,    78,    -1,    -1,    81,    82,    83,    84,
      -1,    86,    -1,    88,    -1,    -1,    -1,    92,    -1,    94,
      95,    96,    97,    98,    99,   100,    -1,    -1,   103,    -1,
     105,   106,   107,   108,    -1,    -1,    -1,    -1,   113,   114,
     115,   116,   117,   118,    -1,    -1,     4,     5,     6,   124,
       8,   126,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    19,   137,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   147,   148,    32,    -1,    -1,    35,    36,    37,
      -1,    39,    40,    -1,    -1,    -1,    -1,    45,    46,    47,
      -1,    -1,    50,    51,    -1,    -1,    -1,    55,    -1,    -1,
      -1,    -1,    60,    61,    -1,    63,    64,    65,    66,    -1,
      -1,    -1,    -1,    -1,    72,    -1,    74,    -1,    76,    -1,
      -1,    -1,    -1,    81,    82,    83,    84,    -1,    86,    87,
      -1,    -1,    -1,    -1,    92,    -1,    94,    95,    96,    97,
      98,    -1,    -1,    -1,    -1,   103,    -1,   105,   106,   107,
     108,    -1,     4,    -1,    -1,   113,   114,   115,   116,   117,
      -1,    -1,    -1,    -1,   122,    -1,    -1,    -1,   126,    21,
      -1,    -1,    -1,   131,    -1,    -1,    -1,    -1,    -1,   137,
      32,   139,    -1,    35,    36,    37,    -1,    39,    40,   147,
     148,    -1,    -1,    -1,    46,    47,    -1,    -1,    50,    51,
       4,     5,     6,    55,     8,    -1,    10,    -1,    60,    -1,
      -1,    63,    64,    65,    66,    19,    -1,    21,    -1,    -1,
      72,    -1,    74,    -1,    76,    -1,    -1,    -1,    32,    81,
      82,    83,    84,    -1,    86,    -1,    -1,    -1,    -1,    -1,
      92,    45,    94,    95,    96,    97,    98,    -1,    -1,    -1,
      -1,   103,    -1,   105,   106,   107,    -1,    61,    -1,    -1,
      -1,   113,   114,   115,   116,   117,     4,     5,     6,    -1,
       8,    -1,    10,    -1,   126,    -1,    -1,    -1,    -1,    -1,
      -1,    19,    -1,    87,    -1,   137,    -1,    21,    -1,    23,
      24,    25,    26,    27,    32,   147,   148,    -1,    32,    -1,
      -1,    35,    36,    37,   108,    39,    40,    -1,    -1,    -1,
      -1,    -1,    46,    47,    -1,    -1,    50,    51,   122,    -1,
      -1,    55,    -1,    61,    -1,    -1,    60,   131,    -1,    63,
      64,    65,    66,   137,    -1,   139,    -1,    -1,    72,    77,
      74,    -1,    76,   147,   148,    -1,    -1,    81,    82,    83,
      84,    -1,    86,    -1,    -1,    -1,    -1,    -1,    92,    -1,
      94,    95,    96,    97,    98,    -1,    -1,    -1,    -1,   103,
     108,   105,   106,   107,    -1,    -1,    -1,    -1,    -1,   113,
     114,   115,   116,   117,    -1,    -1,    21,    -1,    -1,    -1,
     128,    -1,   126,    -1,    29,    -1,    -1,    32,    -1,   137,
      35,    36,    37,    -1,    39,    40,    41,    -1,    -1,   147,
     148,    46,    47,   147,   148,    50,    51,    -1,    -1,    -1,
      55,    -1,    -1,    -1,    -1,    60,    -1,    -1,    63,    64,
      65,    66,    -1,    -1,    -1,    -1,    -1,    72,    -1,    74,
      -1,    76,    -1,    -1,    -1,    -1,    81,    82,    83,    84,
      -1,    86,    -1,    -1,    -1,    -1,    -1,    92,    -1,    94,
      95,    96,    97,    98,    -1,    -1,    -1,    -1,   103,    -1,
     105,   106,   107,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,   116,   117,    -1,    -1,    21,    -1,    -1,    -1,    -1,
      -1,   126,    -1,    -1,    -1,    -1,    32,    -1,    -1,    35,
      36,    37,    -1,    39,    40,    -1,    -1,    -1,    -1,    -1,
      46,    47,   147,   148,    50,    51,    -1,    -1,    -1,    55,
      -1,    -1,    -1,    -1,    60,    -1,    -1,    63,    64,    65,
      66,    -1,    -1,    -1,    -1,    -1,    72,    -1,    74,    -1,
      76,    -1,    -1,    -1,    -1,    81,    82,    83,    84,    -1,
      86,    -1,    -1,    -1,    -1,    -1,    92,    -1,    94,    95,
      96,    97,    98,    -1,    -1,    -1,    -1,   103,    -1,   105,
     106,   107,    -1,    -1,    -1,    -1,    -1,   113,   114,   115,
     116,   117,    -1,   119,    21,    -1,   122,    -1,    -1,    -1,
     126,    -1,    29,    -1,    -1,    32,    -1,    -1,    35,    36,
      37,    -1,    39,    40,    -1,    -1,    -1,    -1,    -1,    46,
      47,   147,   148,    50,    51,    -1,    -1,    -1,    55,    -1,
      -1,    -1,    -1,    60,    -1,    -1,    63,    64,    65,    66,
      -1,    -1,    -1,    -1,    -1,    72,    -1,    74,    -1,    76,
      -1,    -1,    -1,    -1,    81,    82,    83,    84,    -1,    86,
      -1,    -1,    -1,    -1,    -1,    92,    -1,    94,    95,    96,
      97,    98,    -1,    -1,    -1,    -1,   103,    -1,   105,   106,
     107,    -1,   109,    -1,    -1,    -1,   113,   114,   115,   116,
     117,    -1,    -1,    21,    -1,    -1,    -1,    -1,    -1,   126,
      -1,    -1,    -1,    -1,    32,    -1,    -1,    35,    36,    37,
      -1,    39,    40,    -1,    -1,    -1,    -1,    -1,    46,    47,
     147,   148,    50,    51,    -1,    -1,    -1,    55,    -1,    57,
      -1,    -1,    60,    -1,    -1,    63,    64,    65,    66,    -1,
      68,    -1,    -1,    -1,    72,    -1,    74,    -1,    76,    -1,
      -1,    -1,    -1,    81,    82,    83,    84,    -1,    86,    -1,
      -1,    -1,    -1,    -1,    92,    -1,    94,    95,    96,    97,
      98,    -1,    -1,    -1,    -1,   103,    -1,   105,   106,   107,
      -1,    -1,    -1,    -1,    -1,   113,   114,   115,   116,   117,
      -1,    -1,    21,    -1,    -1,    -1,    -1,    -1,   126,    -1,
      -1,    -1,    -1,    32,    -1,    -1,    35,    36,    37,    -1,
      39,    40,    -1,    -1,    -1,    -1,    -1,    46,    47,   147,
     148,    50,    51,    -1,    -1,    -1,    55,    -1,    -1,    -1,
      -1,    60,    -1,    -1,    63,    64,    65,    66,    -1,    -1,
      -1,    -1,    -1,    72,    -1,    74,    -1,    76,    -1,    -1,
      -1,    -1,    81,    82,    83,    84,    -1,    86,    -1,    -1,
      -1,    -1,    -1,    92,    -1,    94,    95,    96,    97,    98,
      -1,    -1,    -1,    -1,   103,    -1,   105,   106,   107,    -1,
      -1,    -1,    -1,    -1,   113,   114,   115,   116,   117,    -1,
      -1,    21,    -1,   122,    -1,    -1,    -1,   126,    -1,    -1,
      -1,    -1,    32,    -1,    -1,    35,    36,    37,    -1,    39,
      40,    -1,    -1,    -1,    -1,    -1,    46,    47,   147,   148,
      50,    51,    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,
      60,    -1,    -1,    63,    64,    65,    66,    -1,    -1,    -1,
      -1,    -1,    72,    -1,    74,    -1,    76,    -1,    -1,    -1,
      -1,    81,    82,    83,    84,    -1,    86,    -1,    -1,    -1,
      -1,    -1,    92,    -1,    94,    95,    96,    97,    98,    -1,
      -1,    -1,    -1,   103,    -1,   105,   106,   107,    -1,    -1,
      -1,    -1,    -1,   113,   114,   115,   116,   117,    -1,   119,
      21,    -1,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
      -1,    32,    -1,    -1,    35,    36,    37,    -1,    39,    40,
      -1,    -1,    -1,    -1,    -1,    46,    47,   147,   148,    50,
      51,    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,    60,
      -1,    -1,    63,    64,    65,    66,    -1,    -1,    -1,    -1,
      -1,    72,    -1,    74,    -1,    76,    -1,    -1,    -1,    -1,
      81,    82,    83,    84,    -1,    86,    -1,    -1,    -1,    -1,
      -1,    92,    -1,    94,    95,    96,    97,    98,    -1,    -1,
      -1,    -1,   103,    -1,   105,   106,   107,    -1,    -1,    -1,
      -1,    -1,   113,   114,   115,   116,   117,    -1,    -1,    21,
      -1,    -1,    -1,    -1,    -1,   126,    -1,   128,    -1,    -1,
      32,    -1,    -1,    35,    36,    37,    -1,    39,    40,    -1,
      -1,    -1,    -1,    -1,    46,    47,   147,   148,    50,    51,
      -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,    60,    -1,
      -1,    63,    64,    65,    66,    -1,    -1,    -1,    -1,    -1,
      72,    -1,    74,    -1,    76,    -1,    -1,    -1,    -1,    81,
      82,    83,    84,    -1,    86,    -1,    -1,    -1,    -1,    -1,
      92,    -1,    94,    95,    96,    97,    98,    -1,    -1,    -1,
      -1,   103,    -1,   105,   106,   107,    -1,    -1,    -1,    -1,
      -1,   113,   114,   115,   116,   117,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   147,   148,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    -1,    82,    -1,    84,    85,
      86,    87,    88,    89,    90,    91,    -1,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,    -1,   104,    -1,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,    -1,
      -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   147,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    -1,    82,    -1,    84,    85,
      86,    87,    88,    89,    90,    91,    -1,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,    -1,   104,    -1,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,    -1,
      -1,    -1,   118,    -1,    -1,    -1,    -1,   123,    -1,    -1,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   147,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    -1,    82,    -1,    84,    85,
      86,    87,    88,    89,    90,    91,    -1,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,    -1,   104,    -1,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,    -1,
      -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     126,   127,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   147,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      -1,    77,    78,    79,    80,    -1,    82,    -1,    84,    85,
      86,    87,    88,    89,    90,    91,    -1,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,    -1,   104,    -1,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,    -1,
      -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   147
  };

  const unsigned short int
  asn1_parser::yystos_[] =
  {
       0,   147,   152,   153,   224,   377,     0,   152,    49,   122,
     225,   226,   227,    15,   232,     4,   148,   228,   229,   230,
     231,   308,   375,   131,   313,    73,    33,    57,    68,   233,
     123,   228,   124,   138,   314,   104,   104,   104,    59,   234,
     230,    16,    17,   316,   138,   315,    69,   119,   125,   316,
     131,    34,   315,    58,   235,   236,    30,   147,   148,   237,
     244,   245,   246,   374,   376,   223,    70,   238,   140,   140,
     135,   122,    54,   239,   240,   241,   244,    21,   147,   158,
     194,   198,   199,   200,   201,   202,   203,   247,   248,   257,
     258,   259,   374,   376,   378,   245,   123,   140,   241,    62,
     122,   204,   248,    21,    32,    35,    36,    37,    39,    40,
      46,    47,    50,    51,    55,    60,    63,    64,    65,    66,
      72,    74,    76,    81,    82,    83,    84,    86,    92,    94,
      95,    96,    97,    98,   103,   105,   106,   107,   113,   114,
     115,   116,   117,   119,   126,   147,   148,   182,   183,   192,
     193,   197,   204,   209,   210,   211,   212,   249,   251,   255,
     260,   261,   269,   271,   275,   279,   280,   283,   284,   285,
     290,   291,   292,   293,   297,   298,   299,   300,   304,   311,
     312,   317,   318,   319,   320,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   374,   375,   376,   377,   204,   260,
     374,   377,   204,   242,   377,    29,   109,   147,   155,   156,
     157,   205,   206,   207,   208,   246,   260,   374,   376,   377,
     378,   147,   155,   377,   101,   101,   122,    89,   122,    85,
     122,    67,   101,    85,   100,   122,   124,   331,   357,    85,
     122,   331,   357,    41,   155,   159,   160,   260,    15,   301,
     119,   119,   260,   136,   122,   253,   119,   331,    57,    68,
     260,   136,   128,   136,   136,   260,   119,   136,   119,   122,
     243,   305,   376,   123,   135,   139,   136,   119,   136,   122,
     262,   294,   295,   296,   375,   120,   273,   276,   277,   278,
     375,   155,   272,   273,   375,   260,   262,   375,   331,    43,
     120,   123,   262,   286,   287,   288,   289,     4,     5,     6,
       8,    10,    19,    30,    32,    44,    45,    52,    61,    62,
      71,    78,    88,    99,   108,   118,   122,   124,   137,   147,
     148,   195,   214,   215,   217,   222,   260,   270,   274,   321,
     332,   333,   334,   335,   337,   338,   339,   340,   341,   342,
     343,   347,   348,   349,   350,   351,   352,   353,   355,   357,
     358,   359,   360,   370,   371,    85,    85,   260,   262,   123,
     286,    85,    85,   122,   139,    31,    93,   112,   303,   195,
     260,   119,    23,    24,    25,    26,    27,   163,   164,     5,
       6,     8,    10,    32,    45,    87,   122,   139,   147,   148,
     155,   197,   213,   250,   252,   254,   256,   260,   263,   264,
     265,   266,   270,   274,   313,   321,   376,   377,   122,   267,
     260,   260,   164,   260,   164,    21,   374,   119,    32,   147,
     148,   197,   263,   264,   374,   377,   374,   159,     4,   250,
     306,   307,   308,   309,   310,   375,   376,   206,   246,   378,
     122,   182,   184,   185,   186,   188,   377,   147,   281,   282,
     375,   123,   135,   260,   130,   372,   123,   135,   124,   123,
     135,    85,   135,    48,    87,   123,   135,    56,   344,    38,
     260,    38,   331,   264,    12,    42,    43,   120,   196,   335,
     337,     4,   122,   372,   135,   110,   143,   345,    75,   144,
     346,   344,   260,   121,   128,   260,   262,   260,   262,   123,
     260,   262,   260,   262,    23,    24,    27,   161,   162,   165,
     168,   170,   171,   173,     4,   250,   302,   264,   136,   264,
     264,   268,   124,   253,   123,   135,   139,   143,   135,   143,
     136,   334,   264,   136,   250,   306,   123,   306,   124,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    77,    78,    79,    80,    82,    84,    85,
      86,    87,    88,    89,    90,    91,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   104,   106,   107,   108,
     109,   110,   111,   112,   118,   135,   147,   163,   181,   187,
     189,   190,   191,   260,   264,   377,   379,   136,   123,   135,
     124,   120,   262,   250,   260,   274,   373,   120,   278,   250,
     274,   273,   260,   120,   288,    32,   147,   148,   349,   120,
     289,   347,   122,    52,   264,   331,   361,   122,   362,   363,
     364,   135,   123,   135,   125,   142,   218,   219,   125,   120,
     340,   342,    77,   128,   349,   354,   356,    48,    87,   155,
     166,   163,   260,   155,   123,   135,   127,   163,   123,   264,
       4,   264,   264,   264,   264,   264,   376,   123,   123,   309,
      71,   191,   135,   123,   190,   136,   282,     4,   250,   139,
     372,   125,   125,   135,   135,   155,   208,   216,   260,    38,
     120,   365,   366,   375,   336,   337,   120,   136,   221,   375,
     123,   135,   135,   356,   260,    48,    87,   172,    48,    87,
     169,   111,   167,    48,    87,   174,   118,   175,   162,   125,
     125,   146,   125,   125,   264,   135,   120,   288,   139,   123,
     264,   135,   123,   135,   331,   367,   368,   135,   136,   220,
     136,   219,   336,   184,   349,   169,   102,   123,   277,   135,
     122,   184,   264,   377,   365,   365,    28,    87,    91,   369,
     336,   220,   221,   375,   122,   154,   135,   120,   264,   136,
     123,    32,    35,    36,    37,    39,    40,    45,    46,    47,
      50,    51,    55,    60,    61,    72,    74,    82,    84,    86,
      87,    94,    95,    96,    97,    98,   106,   107,   108,   126,
     147,   176,   177,   178,   179,   180,   181,   176,   123,   177,
     163,   181,   127
  };

  const unsigned short int
  asn1_parser::yyr1_[] =
  {
       0,   151,   152,   152,   153,   154,   155,   155,   155,   156,
     157,   157,   158,   159,   159,   160,   161,   161,   162,   162,
     162,   162,   162,   163,   163,   163,   163,   163,   164,   164,
     165,   166,   166,   166,   167,   167,   168,   169,   169,   169,
     170,   171,   172,   172,   172,   173,   174,   174,   174,   175,
     175,   176,   176,   177,   177,   178,   179,   180,   180,   181,
     181,   182,   182,   183,   184,   184,   185,   185,   186,   187,
     188,   189,   189,   190,   190,   191,   191,   192,   192,   193,
     194,   195,   196,   196,   196,   196,   196,   197,   197,   198,
     198,   198,   198,   198,   199,   200,   201,   202,   203,   204,
     205,   205,   206,   206,   207,   207,   208,   208,   209,   210,
     211,   212,   212,   213,   213,   214,   214,   214,   215,   216,
     216,   216,   216,   216,   217,   217,   218,   218,   219,   219,
     220,   220,   221,   221,   222,   222,   222,   223,   224,   225,
     225,   225,   226,   227,   228,   228,   229,   229,   229,   230,
     231,   232,   232,   233,   233,   233,   233,   234,   234,   235,
     235,   236,   236,   236,   237,   237,   238,   238,   239,   239,
     240,   240,   241,   242,   243,   243,   243,   244,   244,   245,
     246,   246,   246,   247,   247,   248,   248,   248,   248,   248,
     248,   249,   249,   249,   250,   250,   251,   252,   253,   254,
     254,   254,   255,   256,   257,   258,   259,   260,   260,   260,
     260,   260,   261,   261,   261,   261,   261,   261,   261,   261,
     261,   261,   261,   261,   261,   261,   261,   261,   261,   261,
     261,   261,   261,   261,   261,   261,   261,   261,   261,   261,
     261,   261,   262,   263,   263,   263,   263,   263,   263,   263,
     263,   263,   263,   263,   263,   263,   263,   263,   263,   263,
     263,   263,   264,   264,   265,   265,   266,   266,   267,   268,
     268,   269,   270,   270,   271,   271,   272,   272,   273,   273,
     274,   274,   275,   276,   276,   276,   276,   277,   277,   278,
     278,   279,   280,   280,   281,   281,   282,   282,   283,   284,
     285,   285,   286,   287,   287,   287,   287,   287,   287,   287,
     287,   288,   288,   289,   289,   289,   289,   290,   290,   291,
     291,   292,   292,   293,   294,   295,   295,   296,   296,   297,
     298,   299,   299,   299,   300,   301,   301,   302,   302,   303,
     303,   303,   303,   304,   305,   305,   306,   306,   307,   307,
     307,   308,   309,   309,   310,   311,   312,   313,   314,   315,
     315,   316,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   326,   327,   327,   327,   327,   327,   327,
     327,   327,   327,   327,   327,   327,   327,   328,   329,   329,
     330,   330,   330,   330,   330,   330,   330,   330,   331,   332,
     332,   333,   334,   334,   334,   335,   336,   337,   337,   338,
     338,   339,   340,   340,   341,   342,   342,   343,   344,   345,
     345,   346,   346,   347,   347,   348,   348,   348,   348,   348,
     348,   348,   348,   348,   349,   349,   349,   349,   349,   349,
     349,   349,   349,   349,   350,   351,   352,   353,   353,   354,
     354,   355,   355,   356,   356,   357,   358,   359,   360,   360,
     361,   362,   362,   363,   364,   365,   365,   366,   367,   368,
     368,   369,   369,   369,   369,   370,   371,   372,   372,   373,
     373,   373,   374,   375,   376,   377,   378,   379,   379,   379,
     379,   379,   379,   379,   379,   379,   379,   379,   379,   379,
     379,   379,   379,   379,   379,   379,   379,   379,   379,   379,
     379,   379,   379,   379,   379,   379,   379,   379,   379,   379,
     379,   379,   379,   379,   379,   379,   379,   379,   379,   379,
     379,   379,   379,   379,   379,   379,   379,   379,   379,   379,
     379,   379,   379,   379,   379,   379,   379,   379,   379,   379,
     379,   379,   379,   379,   379,   379,   379,   379,   379,   379,
     379,   379,   379,   379
  };

  const unsigned char
  asn1_parser::yyr2_[] =
  {
       0,     2,     1,     2,    10,     3,     1,     1,     1,     3,
       1,     1,     3,     1,     1,     5,     1,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       2,     1,     2,     0,     1,     0,     4,     1,     2,     0,
       3,     3,     1,     2,     0,     3,     1,     1,     0,     3,
       0,     1,     2,     1,     1,     3,     2,     1,     2,     1,
       1,     1,     1,     3,     1,     1,     1,     1,     5,     2,
       3,     1,     2,     1,     1,     1,     1,     1,     1,     3,
       4,     3,     1,     3,     1,     3,     5,     3,     3,     1,
       1,     1,     1,     1,     4,     5,     5,     4,     5,     3,
       1,     3,     3,     1,     1,     1,     1,     1,     1,     3,
       3,     1,     1,     1,     1,     1,     1,     1,     5,     3,
       3,     1,     1,     0,     1,     4,     1,     3,     2,     4,
       2,     0,     1,     3,     2,     3,     5,     0,     2,     1,
       1,     0,     3,     2,     1,     2,     1,     1,     1,     1,
       4,     2,     0,     2,     2,     2,     0,     2,     0,     3,
       0,     3,     3,     0,     1,     0,     3,     0,     1,     0,
       1,     2,     3,     2,     1,     1,     0,     1,     3,     1,
       1,     3,     1,     1,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     3,     1,
       1,     1,     3,     3,     3,     4,     4,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     1,     1,     1,     1,     1,     1,     1,
       2,     1,     4,     1,     1,     1,     1,     3,     3,     1,
       1,     1,     1,     1,     3,     3,     3,     3,     3,     1,
       2,     1,     1,     1,     1,     4,     1,     3,     4,     4,
       1,     2,     4,     1,     4,     6,     2,     1,     3,     1,
       1,     1,     2,     5,     1,     3,     4,     4,     2,     1,
       3,     4,     1,     1,     3,     5,     7,     3,     5,     1,
       3,     1,     3,     1,     2,     3,     3,     3,     3,     3,
       4,     3,     3,     4,     1,     1,     3,     1,     3,     3,
       1,     2,     3,     3,     5,     2,     0,     1,     1,     1,
       1,     1,     0,     2,     3,     4,     1,     2,     1,     1,
       1,     1,     1,     1,     4,     1,     1,     4,     2,     3,
       0,     1,     1,     1,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     1,
       4,     4,     4,     4,     4,     4,     4,     4,     4,     1,
       1,     1,     1,     3,     5,     1,     1,     1,     2,     1,
       3,     1,     1,     3,     1,     1,     2,     1,     2,     1,
       1,     1,     1,     1,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     1,     3,     1,     2,     1,
       2,     1,     1,     1,     1,     2,     1,     2,     3,     3,
       1,     1,     1,     3,     5,     1,     3,     2,     2,     1,
       0,     1,     1,     1,     0,     2,     2,     2,     0,     1,
       1,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1
  };



  // YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
  // First, the terminals, then, starting at \a yyntokens_, nonterminals.
  const char*
  const asn1_parser::yytname_[] =
  {
  "END_OF_FILE", "error", "$undefined", "comment", "number", "realnumber",
  "bstring", "xmlbstring", "hstring", "xmlhstring", "cstring",
  "xmlcstring", "simplestring", "xmltstring", "psname",
  "encodingreference", "integerUnicodeLabel", "non-integerUnicodeLabel",
  "extended-true", "tstring", "extended-false", "objectreference",
  "objectsetreference", "typefieldreference", "valuefieldreference",
  "valuesetfieldreference", "objectfieldreference",
  "objectsetfieldreference", "ABSENT", "ABSTRACT_SYNTAX", "ALL",
  "APPLICATION", "ASN_NULL", "AUTOMATIC", "BEGIN", "BIT", "BMPString",
  "BOOLEAN", "BY", "CHARACTER", "CHOICE", "CLASS", "COMPONENT",
  "COMPONENTS", "CONSTRAINED", "CONTAINING", "DATE", "DATE_TIME",
  "DEFAULT", "DEFINITIONS", "DURATION", "EMBEDDED", "ENCODED",
  "ENCODING_CONTROL", "END", "ENUMERATED", "EXCEPT", "EXPLICIT", "EXPORTS",
  "EXTENSIBILITY", "EXTERNAL", "FALSE", "FROM", "GeneralizedTime",
  "GeneralString", "GraphicString", "IA5String", "IDENTIFIER", "IMPLICIT",
  "IMPLIED", "IMPORTS", "\"INCLUDES\"", "INSTANCE", "INSTRUCTIONS",
  "INTEGER", "INTERSECTION", "ISO646String", "MAX", "MIN",
  "MINUS_INFINITY", "NOT_A_NUMBER", "NumericString", "OBJECT",
  "ObjectDescriptor", "OCTET", "OF", "OID_IRI", "OPTIONAL", "PATTERN",
  "PDV", "PLUS_INFINITY", "PRESENT", "PrintableString", "PRIVATE", "REAL",
  "RELATIVE_OID", "RELATIVE_OID_IRI", "SEQUENCE", "SET", "SETTINGS",
  "SIZE", "STRING", "SYNTAX", "T61String", "TAGS", "TeletexString", "TIME",
  "TIME_OF_DAY", "TRUE", "TYPE_IDENTIFIER", "UNION", "UNIQUE", "UNIVERSAL",
  "UniversalString", "UTCTime", "UTF8String", "VideotexString",
  "VisibleString", "WITH", "\"::=\"", "\"...\"", "\"..\"", "\"{\"",
  "\"}\"", "\"(\"", "\")\"", "\"[\"", "\"]\"", "\"<\"", "\">\"", "\"!\"",
  "\"\\\"\"", "\"&\"", "\"'\"", "\"*\"", "\",\"", "\".\"", "\"-\"",
  "\"/\"", "\":\"", "\";\"", "\"=\"", "\"@\"", "\"|\"", "\"^\"", "PLUS",
  "STAR", "GENERIC_IDENTIFIER_UPPERCASE", "GENERIC_IDENTIFIER_LOWERCASE",
  "GENERIC_INTEGER", "xmlasn1typename", "$accept", "ModuleDefinitionList",
  "ModuleDefinition", "SyntaxList", "DefinedObjectClass",
  "ExternalObjectClassReference", "UsefulObjectClassReference",
  "ObjectClassAssignment", "ObjectClass", "ObjectClassDefn",
  "FieldSpecList", "FieldSpec", "FieldName", "FieldNameList",
  "TypeFieldSpec", "TypeOptionalitySpec", "OptionalUnique",
  "FixedTypeValueFieldSpec", "ValueOptionalitySpec",
  "VariableTypeValueFieldSpec", "ObjectFieldSpec", "ObjectOptionalitySpec",
  "ObjectSetFieldSpec", "ObjectSetOptionalitySpec", "WithSyntaxSpec",
  "TokenOrGroupSpecList", "TokenOrGroupSpec", "OptionalGroup",
  "RequiredToken", "LiteralList", "Literal", "DefinedObject",
  "ExternalObjectReference", "Object", "ObjectDefn", "DefaultSyntax",
  "FieldSetting", "DefinedSyntax", "DefinedSyntaxList",
  "DefinedSyntaxToken", "Setting", "DefinedObjectSet",
  "ExternalObjectSetReference", "ObjectSetAssignment", "ObjectSet",
  "ObjectSetSpec", "ObjectClassFieldType", "ParameterizedAssignment",
  "ParameterizedTypeAssignment", "ParameterizedValueAssignment",
  "ParameterizedValueSetTypeAssignment",
  "ParameterizedObjectClassAssignment", "ParameterizedObjectAssignment",
  "ParameterList", "ParameterSeries", "Parameter", "ParamGovernor",
  "Governor", "ReferencedObjects", "TypeFromObject", "InstanceOfType",
  "SimpleDefinedType", "SimpleDefinedValue", "GeneralConstraint",
  "UserDefinedConstraint", "UserDefinedConstraintParameter",
  "TableConstraint", "AtNotationList", "AtNotation", "Level",
  "ComponentIdList", "ContentsConstraint", "EncodingControlSections",
  "ModuleIdentifier", "DefinitiveIdentification", "DefinitiveOID",
  "DefinitiveOIDandIRI", "DefinitiveObjIdComponentList",
  "DefinitiveObjIdComponent", "DefinitiveNumberForm",
  "DefinitiveNameAndNumberForm", "EncodingReferenceDefault", "TagDefault",
  "ExtensionDefault", "ModuleBody", "Exports", "SymbolsExported",
  "Imports", "SymbolsImported", "SymbolsFromModuleList",
  "SymbolsFromModule", "GlobalModuleReference", "AssignedIdentifier",
  "SymbolList", "Symbol", "Reference", "AssignmentList", "Assignment",
  "DefinedType", "DefinedValue", "ParameterizedType", "ParameterizedValue",
  "ActualParameterList", "ActualParameter", "ExternalTypeReference",
  "ExternalValueReference", "TypeAssignment", "ValueAssignment",
  "ValueSetTypeAssignment", "Type", "BuiltinType", "NamedType",
  "ValueWithoutTypeIdentifier", "Value", "ValueCommaListChoice",
  "ValueChoice", "ValueSet", "SequenceOfValues", "BooleanType",
  "BooleanValue", "IntegerType", "NamedNumberList", "NamedNumber",
  "SignedNumber", "EnumeratedType", "Enumerations", "Enumeration",
  "EnumerationItem", "RealType", "BitStringType", "NamedBitList",
  "NamedBit", "OctetStringType", "NullType", "SequenceType",
  "ComponentTypeLists", "RootComponentTypeList", "ComponentTypeList",
  "ComponentType", "SequenceOfType", "SetType", "SetOfType", "ChoiceType",
  "AlternativeTypeLists", "RootAlternativeTypeList", "AlternativeTypeList",
  "SelectionType", "PrefixedType", "TaggedType", "Tag",
  "EncodingReference", "ClassNumber", "Class", "ObjectIdentifierType",
  "ObjectIdentifierValue", "ObjIdComponentsList", "ObjIdComponents",
  "NameForm", "NumberForm", "NameAndNumberForm", "RelativeOIDType",
  "IRIType", "IRIValue", "FirstArcIdentifier", "SubsequentArcIdentifier",
  "ArcIdentifier", "RelativeIRIType", "EmbeddedPDVType", "ExternalType",
  "TimeType", "TimeValue", "DateType", "TimeOfDayType", "DateTimeType",
  "DurationType", "CharacterStringType", "RestrictedCharacterStringType",
  "UnrestrictedCharacterStringType", "ConstrainedType",
  "TypeWithConstraint", "Constraint", "ConstraintSpec",
  "SubtypeConstraint", "ElementSetSpecs", "RootElementSetSpec",
  "AdditionalElementSetSpec", "ElementSetSpec", "Unions", "UElems",
  "Intersections", "IElems", "IntersectionElements", "Elems", "Exclusions",
  "UnionMark", "IntersectionMark", "Elements", "SubtypeElements",
  "SingleValue", "ContainedSubtype", "Includes", "ValueRange",
  "LowerEndpoint", "UpperEndpoint", "LowerEndValue", "UpperEndValue",
  "SizeConstraint", "TypeConstraint", "PermittedAlphabet",
  "InnerTypeConstraints", "SingleTypeConstraint",
  "MultipleTypeConstraints", "FullSpecification", "PartialSpecification",
  "TypeConstraints", "NamedConstraint", "ComponentConstraint",
  "ValueConstraint", "PresenceConstraint", "PatternConstraint",
  "PropertySettings", "ExceptionSpec", "ExceptionIdentification",
  "typereference", "identifier", "valuereference", "modulereference",
  "objectclassreference", "word", YY_NULLPTR
  };

#if YYDEBUG
  const unsigned short int
  asn1_parser::yyrline_[] =
  {
       0,   307,   307,   308,   311,   326,   329,   330,   331,   334,
     337,   338,   341,   345,   346,   350,   353,   354,   357,   358,
     359,   360,   361,   364,   365,   366,   367,   368,   371,   372,
     375,   378,   379,   380,   383,   384,   387,   390,   391,   392,
     395,   398,   401,   402,   403,   406,   409,   410,   411,   417,
     418,   421,   422,   425,   426,   429,   432,   435,   436,   439,
     440,   443,   444,   447,   453,   454,   459,   460,   463,   466,
     469,   472,   473,   476,   477,   480,   481,   485,   486,   489,
     492,   496,   499,   500,   501,   502,   503,   512,   513,   519,
     521,   523,   525,   527,   532,   536,   540,   544,   548,   556,
     560,   562,   566,   568,   572,   573,   576,   577,   592,   604,
     613,   620,   621,   625,   626,   629,   630,   631,   634,   637,
     638,   640,   641,   642,   645,   647,   651,   652,   655,   656,
     659,   660,   663,   664,   667,   668,   669,   680,   688,   695,
     696,   697,   700,   703,   707,   708,   712,   713,   714,   717,
     720,   724,   725,   728,   730,   732,   734,   738,   739,   742,
     744,   748,   749,   750,   753,   754,   757,   759,   762,   764,
     767,   769,   773,   777,   781,   782,   783,   786,   788,   792,
     796,   798,   800,   809,   811,   815,   817,   819,   821,   824,
     826,   830,   831,   833,   839,   841,   844,   848,   851,   855,
     857,   860,   870,   875,   900,   904,   908,   912,   914,   916,
     918,   920,   925,   926,   927,   928,   929,   930,   931,   932,
     933,   934,   935,   936,   937,   938,   939,   940,   941,   942,
     943,   944,   945,   946,   947,   948,   949,   950,   951,   952,
     953,   954,   957,   961,   963,   965,   967,   969,   971,   973,
     975,   977,   979,   981,   982,   984,   986,   988,   992,   994,
     996,   998,  1002,  1004,  1008,  1009,  1012,  1013,  1016,  1019,
    1021,  1029,  1032,  1033,  1036,  1038,  1042,  1044,  1048,  1050,
    1054,  1056,  1060,  1064,  1067,  1070,  1074,  1077,  1079,  1083,
    1085,  1093,  1096,  1097,  1100,  1101,  1104,  1105,  1119,  1122,
    1125,  1127,  1135,  1139,  1141,  1143,  1145,  1147,  1149,  1151,
    1153,  1157,  1159,  1163,  1165,  1167,  1169,  1180,  1182,  1186,
    1188,  1192,  1194,  1198,  1202,  1206,  1208,  1212,  1214,  1221,
    1224,  1228,  1230,  1232,  1236,  1240,  1241,  1244,  1246,  1249,
    1251,  1253,  1255,  1265,  1268,  1270,  1274,  1276,  1280,  1282,
    1284,  1288,  1292,  1294,  1297,  1301,  1313,  1316,  1322,  1325,
    1326,  1329,  1330,  1333,  1339,  1346,  1352,  1355,  1358,  1361,
    1364,  1367,  1370,  1371,  1374,  1375,  1376,  1377,  1378,  1379,
    1380,  1381,  1382,  1383,  1384,  1385,  1386,  1390,  1393,  1395,
    1398,  1399,  1400,  1401,  1402,  1403,  1404,  1405,  1408,  1411,
    1412,  1415,  1418,  1419,  1420,  1423,  1426,  1429,  1430,  1433,
    1434,  1437,  1440,  1441,  1444,  1447,  1448,  1451,  1454,  1457,
    1458,  1461,  1462,  1465,  1467,  1470,  1471,  1472,  1473,  1474,
    1475,  1476,  1477,  1478,  1484,  1486,  1487,  1488,  1489,  1490,
    1491,  1492,  1493,  1494,  1497,  1500,  1503,  1506,  1507,  1510,
    1511,  1514,  1515,  1518,  1519,  1522,  1525,  1528,  1531,  1532,
    1535,  1538,  1539,  1542,  1545,  1548,  1549,  1552,  1555,  1558,
    1559,  1562,  1563,  1564,  1565,  1568,  1571,  1574,  1575,  1578,
    1579,  1580,  1583,  1587,  1591,  1595,  1599,  1603,  1604,  1605,
    1606,  1607,  1608,  1609,  1610,  1611,  1612,  1613,  1614,  1615,
    1616,  1617,  1618,  1619,  1620,  1621,  1622,  1623,  1624,  1625,
    1626,  1627,  1628,  1629,  1630,  1631,  1632,  1633,  1634,  1635,
    1636,  1637,  1638,  1639,  1640,  1641,  1642,  1643,  1644,  1645,
    1646,  1647,  1648,  1649,  1650,  1651,  1652,  1653,  1654,  1655,
    1656,  1657,  1658,  1659,  1660,  1661,  1662,  1663,  1664,  1665,
    1666,  1667,  1668,  1669,  1670,  1671,  1672,  1673,  1674,  1675,
    1676,  1677,  1678,  1679
  };

  // Print the state stack on the debug stream.
  void
  asn1_parser::yystack_print_ ()
  {
    *yycdebug_ << "Stack now";
    for (stack_type::const_iterator
           i = yystack_.begin (),
           i_end = yystack_.end ();
         i != i_end; ++i)
      *yycdebug_ << ' ' << i->state;
    *yycdebug_ << std::endl;
  }

  // Report on the debug stream that the rule \a yyrule is going to be reduced.
  void
  asn1_parser::yy_reduce_print_ (int yyrule)
  {
    unsigned int yylno = yyrline_[yyrule];
    int yynrhs = yyr2_[yyrule];
    // Print the symbols being reduced, and their result.
    *yycdebug_ << "Reducing stack by rule " << yyrule - 1
               << " (line " << yylno << "):" << std::endl;
    // The symbols being reduced.
    for (int yyi = 0; yyi < yynrhs; yyi++)
      YY_SYMBOL_PRINT ("   $" << yyi + 1 << " =",
                       yystack_[(yynrhs) - (yyi + 1)]);
  }
#endif // YYDEBUG



} // yy
#line 8872 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:1167
#line 1681 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:1168



namespace yy {

    asn1_parser::symbol_type yylex(Context& context)
    {
        const char* start = context.cursor;
        const char* YYMARKER = nullptr;
        context.location.step();
        // Lexer

#line 8888 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
{
	char yych;
	unsigned int yyaccept = 0;
	yych = *context.cursor;
	switch (yych) {
	case 0x00:	goto yy2;
	case 0x08:
	case '\t':
	case '\v':
	case '\f':
	case ' ':	goto yy6;
	case '\n':	goto yy8;
	case '\r':	goto yy10;
	case '!':	goto yy11;
	case '"':	goto yy13;
	case '&':	goto yy15;
	case '(':	goto yy16;
	case ')':	goto yy18;
	case ',':	goto yy20;
	case '-':	goto yy22;
	case '.':	goto yy24;
	case '/':	goto yy26;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy27;
	case ':':	goto yy30;
	case ';':	goto yy32;
	case '<':	goto yy34;
	case '@':	goto yy36;
	case 'A':	goto yy38;
	case 'B':	goto yy40;
	case 'C':	goto yy41;
	case 'D':	goto yy42;
	case 'E':	goto yy43;
	case 'F':	goto yy44;
	case 'G':	goto yy45;
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'Q':
	case 'X':
	case 'Y':
	case 'Z':	goto yy46;
	case 'I':	goto yy48;
	case 'M':	goto yy49;
	case 'N':	goto yy50;
	case 'O':	goto yy51;
	case 'P':	goto yy52;
	case 'R':	goto yy53;
	case 'S':	goto yy54;
	case 'T':	goto yy55;
	case 'U':	goto yy56;
	case 'V':	goto yy57;
	case 'W':	goto yy58;
	case '[':	goto yy59;
	case ']':	goto yy61;
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case '{':	goto yy66;
	case '|':	goto yy68;
	case '}':	goto yy70;
	default:	goto yy4;
	}
yy2:
	++context.cursor;
#line 8999 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_END_OF_FILE(context.location); }
#line 8988 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy4:
	++context.cursor;
yy5:
#line 9024 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ throw(std::runtime_error(std::string("Unknown symbol!") + *start)); context.location.columns(context.cursor - start); return asn1_parser::symbol_type(asn1_parser::token_type(*start), context.location); }
#line 8994 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy6:
	++context.cursor;
#line 9003 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); context.location.columns(); return yylex(context); }
#line 8999 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy8:
	++context.cursor;
#line 9002 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); context.location.lines();   return yylex(context); }
#line 9004 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy10:
	yych = *++context.cursor;
	switch (yych) {
	case '\n':	goto yy8;
	default:	goto yy5;
	}
yy11:
	++context.cursor;
#line 9021 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXCLAMATION_MARK (context.location); }
#line 9015 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy13:
	yych = *++context.cursor;
	switch (yych) {
	case '"':	goto yy72;
	case '\\':	goto yy74;
	default:	goto yy13;
	}
yy15:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':	goto yy76;
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy79;
	default:	goto yy5;
	}
yy16:
	++context.cursor;
#line 9011 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPEN_PARENTHESIS (context.location); }
#line 9084 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy18:
	++context.cursor;
#line 9012 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLOSE_PARENTHESIS (context.location); }
#line 9089 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy20:
	++context.cursor;
#line 9017 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COMMA (context.location); }
#line 9094 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy22:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy82;
	default:	goto yy23;
	}
yy23:
#line 9018 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_HYPHEN_MINUS (context.location); }
#line 9104 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy24:
	yych = *++context.cursor;
	switch (yych) {
	case '.':	goto yy85;
	default:	goto yy25;
	}
yy25:
#line 9019 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_FULL_STOP (context.location); }
#line 9114 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy26:
	yyaccept = 0;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '*':	goto yy87;
	default:	goto yy5;
	}
yy27:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy27;
	default:	goto yy29;
	}
yy29:
#line 8990 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_number(std::stoll(std::string(start, context.cursor)), context.location); }
#line 9140 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy30:
	yyaccept = 1;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case ':':	goto yy90;
	default:	goto yy31;
	}
yy31:
#line 9015 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COLON (context.location); }
#line 9151 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy32:
	++context.cursor;
#line 9016 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SEMICOLON (context.location); }
#line 9156 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy34:
	++context.cursor;
#line 9022 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_LESS_THAN (context.location); }
#line 9161 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy36:
	++context.cursor;
#line 9023 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_AT (context.location); }
#line 9166 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy38:
	yych = *++context.cursor;
	switch (yych) {
	case 'B':	goto yy91;
	case 'L':	goto yy92;
	case 'P':	goto yy93;
	case 'U':	goto yy94;
	default:	goto yy47;
	}
yy39:
#line 8993 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GENERIC_IDENTIFIER_UPPERCASE(santize_name(std::string(start, context.cursor)), context.location); }
#line 9179 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy40:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy95;
	case 'I':	goto yy96;
	case 'M':	goto yy97;
	case 'O':	goto yy98;
	case 'Y':	goto yy99;
	default:	goto yy47;
	}
yy41:
	yych = *++context.cursor;
	switch (yych) {
	case 'H':	goto yy101;
	case 'L':	goto yy102;
	case 'O':	goto yy103;
	default:	goto yy47;
	}
yy42:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy104;
	case 'E':	goto yy105;
	case 'U':	goto yy106;
	default:	goto yy47;
	}
yy43:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy107;
	case 'N':	goto yy108;
	case 'X':	goto yy109;
	default:	goto yy47;
	}
yy44:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy110;
	case 'R':	goto yy111;
	default:	goto yy47;
	}
yy45:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy112;
	case 'r':	goto yy113;
	default:	goto yy47;
	}
yy46:
	yych = *++context.cursor;
yy47:
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy39;
	}
yy48:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy114;
	case 'D':	goto yy115;
	case 'M':	goto yy116;
	case 'N':	goto yy117;
	case 'S':	goto yy118;
	default:	goto yy47;
	}
yy49:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy119;
	case 'I':	goto yy120;
	default:	goto yy47;
	}
yy50:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy121;
	case 'U':	goto yy122;
	case 'u':	goto yy123;
	default:	goto yy47;
	}
yy51:
	yych = *++context.cursor;
	switch (yych) {
	case 'B':	goto yy124;
	case 'C':	goto yy125;
	case 'F':	goto yy126;
	case 'I':	goto yy128;
	case 'P':	goto yy129;
	case 'b':	goto yy130;
	default:	goto yy47;
	}
yy52:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy131;
	case 'D':	goto yy132;
	case 'L':	goto yy133;
	case 'R':	goto yy134;
	case 'r':	goto yy135;
	default:	goto yy47;
	}
yy53:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy136;
	default:	goto yy47;
	}
yy54:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy137;
	case 'I':	goto yy138;
	case 'T':	goto yy139;
	case 'Y':	goto yy140;
	default:	goto yy47;
	}
yy55:
	yych = *++context.cursor;
	switch (yych) {
	case '6':	goto yy141;
	case 'A':	goto yy142;
	case 'I':	goto yy143;
	case 'R':	goto yy144;
	case 'Y':	goto yy145;
	case 'e':	goto yy146;
	default:	goto yy47;
	}
yy56:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy147;
	case 'T':	goto yy148;
	case 'n':	goto yy149;
	default:	goto yy47;
	}
yy57:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy150;
	default:	goto yy47;
	}
yy58:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy151;
	default:	goto yy47;
	}
yy59:
	++context.cursor;
#line 9013 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPEN_SQUARE_BRACKET (context.location); }
#line 9394 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy61:
	++context.cursor;
#line 9014 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLOSE_SQUARE_BRACKET (context.location); }
#line 9399 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy63:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy65;
	}
yy65:
#line 8994 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GENERIC_IDENTIFIER_LOWERCASE(santize_name(std::string(start, context.cursor)), context.location); }
#line 9472 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy66:
	++context.cursor;
#line 9009 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPEN_BRACE (context.location); }
#line 9477 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy68:
	++context.cursor;
#line 9020 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_VERTICAL_LINE (context.location); }
#line 9482 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy70:
	++context.cursor;
#line 9010 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLOSE_BRACE (context.location); }
#line 9487 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy72:
	++context.cursor;
#line 8992 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_cstring(std::string(start, context.cursor), context.location); }
#line 9492 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy74:
	yych = *++context.cursor;
	switch (yych) {
	case '\\':	goto yy74;
	default:	goto yy13;
	}
yy76:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy76;
	default:	goto yy78;
	}
yy78:
#line 8995 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_typefieldreference(santize_name(std::string(start, context.cursor)), context.location); }
#line 9571 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy79:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy79;
	default:	goto yy81;
	}
yy81:
#line 8996 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_valuefieldreference(santize_name(std::string(start, context.cursor)), context.location); }
#line 9644 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy82:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '\n':
	case '\r':	goto yy84;
	case '-':	goto yy152;
	default:	goto yy82;
	}
yy84:
#line 8985 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return yylex(context); }
#line 9657 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy85:
	yych = *++context.cursor;
	switch (yych) {
	case '.':	goto yy153;
	default:	goto yy86;
	}
yy86:
#line 9008 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_RANGE (context.location); }
#line 9667 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy87:
	yych = *++context.cursor;
	switch (yych) {
	case '"':
	case '/':	goto yy89;
	case '*':	goto yy155;
	default:	goto yy87;
	}
yy89:
	context.cursor = YYMARKER;
	switch (yyaccept) {
	case 0: 	goto yy5;
	case 1: 	goto yy31;
	default:	goto yy84;
	}
yy90:
	yych = *++context.cursor;
	switch (yych) {
	case '=':	goto yy157;
	default:	goto yy89;
	}
yy91:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy159;
	default:	goto yy47;
	}
yy92:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy160;
	default:	goto yy47;
	}
yy93:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy162;
	default:	goto yy47;
	}
yy94:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy163;
	default:	goto yy47;
	}
yy95:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy164;
	default:	goto yy47;
	}
yy96:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy165;
	default:	goto yy47;
	}
yy97:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy167;
	default:	goto yy47;
	}
yy98:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy168;
	default:	goto yy47;
	}
yy99:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy100;
	}
yy100:
#line 8899 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BY (context.location); }
#line 9809 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy101:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy169;
	case 'O':	goto yy170;
	default:	goto yy47;
	}
yy102:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy171;
	default:	goto yy47;
	}
yy103:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy172;
	case 'N':	goto yy173;
	default:	goto yy47;
	}
yy104:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy174;
	default:	goto yy47;
	}
yy105:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy175;
	default:	goto yy47;
	}
yy106:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy176;
	default:	goto yy47;
	}
yy107:
	yych = *++context.cursor;
	switch (yych) {
	case 'B':	goto yy177;
	default:	goto yy47;
	}
yy108:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy178;
	case 'D':	goto yy179;
	case 'U':	goto yy181;
	default:	goto yy47;
	}
yy109:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy182;
	case 'P':	goto yy183;
	case 'T':	goto yy184;
	default:	goto yy47;
	}
yy110:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy185;
	default:	goto yy47;
	}
yy111:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy186;
	default:	goto yy47;
	}
yy112:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy187;
	default:	goto yy47;
	}
yy113:
	yych = *++context.cursor;
	switch (yych) {
	case 'a':	goto yy188;
	default:	goto yy47;
	}
yy114:
	yych = *++context.cursor;
	switch (yych) {
	case '5':	goto yy189;
	default:	goto yy47;
	}
yy115:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy190;
	default:	goto yy47;
	}
yy116:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy191;
	default:	goto yy47;
	}
yy117:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy192;
	case 'S':	goto yy193;
	case 'T':	goto yy194;
	default:	goto yy47;
	}
yy118:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy195;
	default:	goto yy47;
	}
yy119:
	yych = *++context.cursor;
	switch (yych) {
	case 'X':	goto yy196;
	default:	goto yy47;
	}
yy120:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy198;
	default:	goto yy47;
	}
yy121:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy200;
	default:	goto yy47;
	}
yy122:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy201;
	default:	goto yy47;
	}
yy123:
	yych = *++context.cursor;
	switch (yych) {
	case 'm':	goto yy202;
	default:	goto yy47;
	}
yy124:
	yych = *++context.cursor;
	switch (yych) {
	case 'J':	goto yy203;
	default:	goto yy47;
	}
yy125:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy204;
	default:	goto yy47;
	}
yy126:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy127;
	}
yy127:
#line 8947 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OF (context.location); }
#line 10040 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy128:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy205;
	default:	goto yy47;
	}
yy129:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy206;
	default:	goto yy47;
	}
yy130:
	yych = *++context.cursor;
	switch (yych) {
	case 'j':	goto yy207;
	default:	goto yy47;
	}
yy131:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy208;
	default:	goto yy47;
	}
yy132:
	yych = *++context.cursor;
	switch (yych) {
	case 'V':	goto yy209;
	default:	goto yy47;
	}
yy133:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy211;
	default:	goto yy47;
	}
yy134:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy212;
	case 'I':	goto yy213;
	default:	goto yy47;
	}
yy135:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy214;
	default:	goto yy47;
	}
yy136:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy215;
	case 'L':	goto yy216;
	default:	goto yy47;
	}
yy137:
	yych = *++context.cursor;
	switch (yych) {
	case 'Q':	goto yy217;
	case 'T':	goto yy218;
	default:	goto yy47;
	}
yy138:
	yych = *++context.cursor;
	switch (yych) {
	case 'Z':	goto yy220;
	default:	goto yy47;
	}
yy139:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy221;
	default:	goto yy47;
	}
yy140:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy222;
	default:	goto yy47;
	}
yy141:
	yych = *++context.cursor;
	switch (yych) {
	case '1':	goto yy223;
	default:	goto yy47;
	}
yy142:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy224;
	default:	goto yy47;
	}
yy143:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy225;
	default:	goto yy47;
	}
yy144:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy226;
	default:	goto yy47;
	}
yy145:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy227;
	default:	goto yy47;
	}
yy146:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy228;
	default:	goto yy47;
	}
yy147:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy229;
	default:	goto yy47;
	}
yy148:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy230;
	case 'F':	goto yy231;
	default:	goto yy47;
	}
yy149:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy232;
	default:	goto yy47;
	}
yy150:
	yych = *++context.cursor;
	switch (yych) {
	case 'd':	goto yy233;
	case 's':	goto yy234;
	default:	goto yy47;
	}
yy151:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy235;
	default:	goto yy47;
	}
yy152:
	yych = *++context.cursor;
	switch (yych) {
	case '\n':
	case '\r':	goto yy89;
	case '-':	goto yy236;
	default:	goto yy82;
	}
yy153:
	++context.cursor;
#line 9007 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ELIPSIS (context.location); }
#line 10202 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy155:
	yych = *++context.cursor;
	switch (yych) {
	case '"':	goto yy89;
	case '*':	goto yy155;
	case '/':	goto yy238;
	default:	goto yy87;
	}
yy157:
	++context.cursor;
#line 9006 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DEFINED_AS (context.location); }
#line 10215 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy159:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy240;
	case 'T':	goto yy241;
	default:	goto yy47;
	}
yy160:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy161;
	}
yy161:
#line 8892 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ALL (context.location); }
#line 10295 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy162:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy242;
	default:	goto yy47;
	}
yy163:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy243;
	default:	goto yy47;
	}
yy164:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy244;
	default:	goto yy47;
	}
yy165:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy166;
	}
yy166:
#line 8896 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BIT (context.location); }
#line 10386 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy167:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy245;
	default:	goto yy47;
	}
yy168:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy246;
	default:	goto yy47;
	}
yy169:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy247;
	default:	goto yy47;
	}
yy170:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy248;
	default:	goto yy47;
	}
yy171:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy249;
	default:	goto yy47;
	}
yy172:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy250;
	default:	goto yy47;
	}
yy173:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy251;
	case 'T':	goto yy252;
	default:	goto yy47;
	}
yy174:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy253;
	default:	goto yy47;
	}
yy175:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy255;
	case 'I':	goto yy256;
	default:	goto yy47;
	}
yy176:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy257;
	default:	goto yy47;
	}
yy177:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy258;
	default:	goto yy47;
	}
yy178:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy259;
	default:	goto yy47;
	}
yy179:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy180;
	}
yy180:
#line 8915 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_END (context.location); }
#line 10533 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy181:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy260;
	default:	goto yy47;
	}
yy182:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy261;
	default:	goto yy47;
	}
yy183:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy262;
	case 'O':	goto yy263;
	default:	goto yy47;
	}
yy184:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy264;
	default:	goto yy47;
	}
yy185:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy265;
	default:	goto yy47;
	}
yy186:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy266;
	default:	goto yy47;
	}
yy187:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy268;
	default:	goto yy47;
	}
yy188:
	yych = *++context.cursor;
	switch (yych) {
	case 'p':	goto yy269;
	default:	goto yy47;
	}
yy189:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy270;
	default:	goto yy47;
	}
yy190:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy271;
	default:	goto yy47;
	}
yy191:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy272;
	case 'O':	goto yy273;
	default:	goto yy47;
	}
yy192:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy274;
	default:	goto yy47;
	}
yy193:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy275;
	default:	goto yy47;
	}
yy194:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy276;
	default:	goto yy47;
	}
yy195:
	yych = *++context.cursor;
	switch (yych) {
	case '6':	goto yy277;
	default:	goto yy47;
	}
yy196:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy197;
	}
yy197:
#line 8938 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_MAX (context.location); }
#line 10698 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy198:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	case 'U':	goto yy278;
	default:	goto yy199;
	}
yy199:
#line 8939 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_MIN (context.location); }
#line 10771 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy200:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy279;
	default:	goto yy47;
	}
yy201:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy280;
	default:	goto yy47;
	}
yy202:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy282;
	default:	goto yy47;
	}
yy203:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy283;
	default:	goto yy47;
	}
yy204:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy284;
	default:	goto yy47;
	}
yy205:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy285;
	default:	goto yy47;
	}
yy206:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy286;
	default:	goto yy47;
	}
yy207:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy287;
	default:	goto yy47;
	}
yy208:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy288;
	default:	goto yy47;
	}
yy209:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy210;
	}
yy210:
#line 8951 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PDV (context.location); }
#line 10898 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy211:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy289;
	default:	goto yy47;
	}
yy212:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy290;
	default:	goto yy47;
	}
yy213:
	yych = *++context.cursor;
	switch (yych) {
	case 'V':	goto yy291;
	default:	goto yy47;
	}
yy214:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy292;
	default:	goto yy47;
	}
yy215:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy293;
	default:	goto yy47;
	}
yy216:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy295;
	default:	goto yy47;
	}
yy217:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy296;
	default:	goto yy47;
	}
yy218:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	case 'T':	goto yy297;
	default:	goto yy219;
	}
yy219:
#line 8960 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SET (context.location); }
#line 11013 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy220:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy298;
	default:	goto yy47;
	}
yy221:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy300;
	default:	goto yy47;
	}
yy222:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy301;
	default:	goto yy47;
	}
yy223:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy302;
	default:	goto yy47;
	}
yy224:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy303;
	default:	goto yy47;
	}
yy225:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy305;
	default:	goto yy47;
	}
yy226:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy307;
	default:	goto yy47;
	}
yy227:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy309;
	default:	goto yy47;
	}
yy228:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy310;
	default:	goto yy47;
	}
yy229:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy311;
	case 'Q':	goto yy312;
	case 'V':	goto yy313;
	default:	goto yy47;
	}
yy230:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy314;
	default:	goto yy47;
	}
yy231:
	yych = *++context.cursor;
	switch (yych) {
	case '8':	goto yy315;
	default:	goto yy47;
	}
yy232:
	yych = *++context.cursor;
	switch (yych) {
	case 'v':	goto yy316;
	default:	goto yy47;
	}
yy233:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy317;
	default:	goto yy47;
	}
yy234:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy318;
	default:	goto yy47;
	}
yy235:
	yych = *++context.cursor;
	switch (yych) {
	case 'H':	goto yy319;
	default:	goto yy47;
	}
yy236:
	++context.cursor;
#line 8984 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return yylex(context); }
#line 11116 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy238:
	++context.cursor;
#line 8986 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return yylex(context); }
#line 11121 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy240:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy321;
	default:	goto yy47;
	}
yy241:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy322;
	default:	goto yy47;
	}
yy242:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy323;
	default:	goto yy47;
	}
yy243:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy324;
	default:	goto yy47;
	}
yy244:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy325;
	default:	goto yy47;
	}
yy245:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy327;
	default:	goto yy47;
	}
yy246:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy328;
	default:	goto yy47;
	}
yy247:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy329;
	default:	goto yy47;
	}
yy248:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy330;
	default:	goto yy47;
	}
yy249:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy331;
	default:	goto yy47;
	}
yy250:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy333;
	default:	goto yy47;
	}
yy251:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy334;
	default:	goto yy47;
	}
yy252:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy335;
	default:	goto yy47;
	}
yy253:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy336;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy254;
	}
yy254:
#line 8907 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DATE (context.location); }
#line 11272 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy255:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy337;
	default:	goto yy47;
	}
yy256:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy338;
	default:	goto yy47;
	}
yy257:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy339;
	default:	goto yy47;
	}
yy258:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy340;
	default:	goto yy47;
	}
yy259:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy341;
	default:	goto yy47;
	}
yy260:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy342;
	default:	goto yy47;
	}
yy261:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy343;
	default:	goto yy47;
	}
yy262:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy344;
	default:	goto yy47;
	}
yy263:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy345;
	default:	goto yy47;
	}
yy264:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy346;
	case 'R':	goto yy347;
	default:	goto yy47;
	}
yy265:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy348;
	default:	goto yy47;
	}
yy266:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy267;
	}
yy267:
#line 8923 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_FROM (context.location); }
#line 11412 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy268:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy350;
	default:	goto yy47;
	}
yy269:
	yych = *++context.cursor;
	switch (yych) {
	case 'h':	goto yy351;
	default:	goto yy47;
	}
yy270:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy352;
	default:	goto yy47;
	}
yy271:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy353;
	default:	goto yy47;
	}
yy272:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy354;
	default:	goto yy47;
	}
yy273:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy355;
	default:	goto yy47;
	}
yy274:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy356;
	default:	goto yy47;
	}
yy275:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy357;
	case 'R':	goto yy358;
	default:	goto yy47;
	}
yy276:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy359;
	case 'R':	goto yy360;
	default:	goto yy47;
	}
yy277:
	yych = *++context.cursor;
	switch (yych) {
	case '4':	goto yy361;
	default:	goto yy47;
	}
yy278:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy362;
	default:	goto yy47;
	}
yy279:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy363;
	default:	goto yy47;
	}
yy280:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy281;
	}
yy281:
#line 8942 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ASN_NULL (context.location); }
#line 11559 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy282:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy364;
	default:	goto yy47;
	}
yy283:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy365;
	default:	goto yy47;
	}
yy284:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy366;
	default:	goto yy47;
	}
yy285:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy368;
	default:	goto yy47;
	}
yy286:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy369;
	default:	goto yy47;
	}
yy287:
	yych = *++context.cursor;
	switch (yych) {
	case 'c':	goto yy370;
	default:	goto yy47;
	}
yy288:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy371;
	default:	goto yy47;
	}
yy289:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy372;
	default:	goto yy47;
	}
yy290:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy373;
	default:	goto yy47;
	}
yy291:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy374;
	default:	goto yy47;
	}
yy292:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy375;
	default:	goto yy47;
	}
yy293:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy294;
	}
yy294:
#line 8956 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_REAL (context.location); }
#line 11698 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy295:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy376;
	default:	goto yy47;
	}
yy296:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy377;
	default:	goto yy47;
	}
yy297:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy378;
	default:	goto yy47;
	}
yy298:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy299;
	}
yy299:
#line 8962 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SIZE (context.location); }
#line 11789 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy300:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy379;
	default:	goto yy47;
	}
yy301:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy380;
	default:	goto yy47;
	}
yy302:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy381;
	default:	goto yy47;
	}
yy303:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy304;
	}
yy304:
#line 8966 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TAGS (context.location); }
#line 11880 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy305:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy382;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy306;
	}
yy306:
#line 8968 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TIME (context.location); }
#line 11953 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy307:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy308;
	}
yy308:
#line 8970 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TRUE (context.location); }
#line 12026 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy309:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy383;
	default:	goto yy47;
	}
yy310:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy384;
	default:	goto yy47;
	}
yy311:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy385;
	default:	goto yy47;
	}
yy312:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy387;
	default:	goto yy47;
	}
yy313:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy388;
	default:	goto yy47;
	}
yy314:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy389;
	default:	goto yy47;
	}
yy315:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy390;
	default:	goto yy47;
	}
yy316:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy391;
	default:	goto yy47;
	}
yy317:
	yych = *++context.cursor;
	switch (yych) {
	case 'o':	goto yy392;
	default:	goto yy47;
	}
yy318:
	yych = *++context.cursor;
	switch (yych) {
	case 'b':	goto yy393;
	default:	goto yy47;
	}
yy319:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy320;
	}
yy320:
#line 8980 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_WITH (context.location); }
#line 12159 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy321:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy394;
	default:	goto yy47;
	}
yy322:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy396;
	default:	goto yy47;
	}
yy323:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy397;
	default:	goto yy47;
	}
yy324:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy398;
	default:	goto yy47;
	}
yy325:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy326;
	}
yy326:
#line 8895 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BEGIN (context.location); }
#line 12256 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy327:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy399;
	default:	goto yy47;
	}
yy328:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy400;
	default:	goto yy47;
	}
yy329:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy401;
	default:	goto yy47;
	}
yy330:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy402;
	default:	goto yy47;
	}
yy331:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy332;
	}
yy332:
#line 8902 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLASS (context.location); }
#line 12353 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy333:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy404;
	default:	goto yy47;
	}
yy334:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy405;
	default:	goto yy47;
	}
yy335:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy406;
	default:	goto yy47;
	}
yy336:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy407;
	default:	goto yy47;
	}
yy337:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy408;
	default:	goto yy47;
	}
yy338:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy409;
	default:	goto yy47;
	}
yy339:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy410;
	default:	goto yy47;
	}
yy340:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy411;
	default:	goto yy47;
	}
yy341:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy412;
	case 'I':	goto yy413;
	default:	goto yy47;
	}
yy342:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy414;
	default:	goto yy47;
	}
yy343:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy415;
	default:	goto yy47;
	}
yy344:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy417;
	default:	goto yy47;
	}
yy345:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy418;
	default:	goto yy47;
	}
yy346:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy419;
	default:	goto yy47;
	}
yy347:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy420;
	default:	goto yy47;
	}
yy348:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy349;
	}
yy349:
#line 8922 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_FALSE (context.location); }
#line 12517 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy350:
	yych = *++context.cursor;
	switch (yych) {
	case 'a':	goto yy421;
	default:	goto yy47;
	}
yy351:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy422;
	default:	goto yy47;
	}
yy352:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy423;
	default:	goto yy47;
	}
yy353:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy424;
	default:	goto yy47;
	}
yy354:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy425;
	case 'E':	goto yy426;
	default:	goto yy47;
	}
yy355:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy427;
	default:	goto yy47;
	}
yy356:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy428;
	default:	goto yy47;
	}
yy357:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy429;
	default:	goto yy47;
	}
yy358:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy430;
	default:	goto yy47;
	}
yy359:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy431;
	default:	goto yy47;
	}
yy360:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy432;
	default:	goto yy47;
	}
yy361:
	yych = *++context.cursor;
	switch (yych) {
	case '6':	goto yy433;
	default:	goto yy47;
	}
yy362:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy434;
	default:	goto yy47;
	}
yy363:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy435;
	default:	goto yy47;
	}
yy364:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy436;
	default:	goto yy47;
	}
yy365:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy437;
	default:	goto yy47;
	}
yy366:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy367;
	}
yy367:
#line 8946 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OCTET (context.location); }
#line 12687 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy368:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy439;
	default:	goto yy47;
	}
yy369:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy440;
	default:	goto yy47;
	}
yy370:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy441;
	default:	goto yy47;
	}
yy371:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy442;
	default:	goto yy47;
	}
yy372:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy443;
	default:	goto yy47;
	}
yy373:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy444;
	default:	goto yy47;
	}
yy374:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy445;
	default:	goto yy47;
	}
yy375:
	yych = *++context.cursor;
	switch (yych) {
	case 'a':	goto yy446;
	default:	goto yy47;
	}
yy376:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy447;
	default:	goto yy47;
	}
yy377:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy448;
	default:	goto yy47;
	}
yy378:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy449;
	default:	goto yy47;
	}
yy379:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy450;
	default:	goto yy47;
	}
yy380:
	yych = *++context.cursor;
	switch (yych) {
	case 'X':	goto yy452;
	default:	goto yy47;
	}
yy381:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy454;
	default:	goto yy47;
	}
yy382:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy455;
	default:	goto yy47;
	}
yy383:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy456;
	default:	goto yy47;
	}
yy384:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy457;
	default:	goto yy47;
	}
yy385:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy386;
	}
yy386:
#line 8972 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UNION (context.location); }
#line 12862 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy387:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy458;
	default:	goto yy47;
	}
yy388:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy460;
	default:	goto yy47;
	}
yy389:
	yych = *++context.cursor;
	switch (yych) {
	case 'm':	goto yy461;
	default:	goto yy47;
	}
yy390:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy462;
	default:	goto yy47;
	}
yy391:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy463;
	default:	goto yy47;
	}
yy392:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy464;
	default:	goto yy47;
	}
yy393:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy465;
	default:	goto yy47;
	}
yy394:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy395;
	}
yy395:
#line 8890 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ABSENT (context.location); }
#line 12977 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy396:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy466;
	default:	goto yy47;
	}
yy397:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy467;
	default:	goto yy47;
	}
yy398:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy468;
	default:	goto yy47;
	}
yy399:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy469;
	default:	goto yy47;
	}
yy400:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy470;
	default:	goto yy47;
	}
yy401:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy472;
	default:	goto yy47;
	}
yy402:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy403;
	}
yy403:
#line 8901 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CHOICE (context.location); }
#line 13086 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy404:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy473;
	default:	goto yy47;
	}
yy405:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy474;
	default:	goto yy47;
	}
yy406:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy475;
	default:	goto yy47;
	}
yy407:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy476;
	default:	goto yy47;
	}
yy408:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy477;
	default:	goto yy47;
	}
yy409:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy479;
	default:	goto yy47;
	}
yy410:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy480;
	default:	goto yy47;
	}
yy411:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy481;
	default:	goto yy47;
	}
yy412:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy482;
	default:	goto yy47;
	}
yy413:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy484;
	default:	goto yy47;
	}
yy414:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy485;
	default:	goto yy47;
	}
yy415:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy416;
	}
yy416:
#line 8917 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXCEPT (context.location); }
#line 13225 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy417:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy486;
	default:	goto yy47;
	}
yy418:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy487;
	default:	goto yy47;
	}
yy419:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy489;
	default:	goto yy47;
	}
yy420:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy490;
	default:	goto yy47;
	}
yy421:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy491;
	default:	goto yy47;
	}
yy422:
	yych = *++context.cursor;
	switch (yych) {
	case 'c':	goto yy492;
	default:	goto yy47;
	}
yy423:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy493;
	default:	goto yy47;
	}
yy424:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy494;
	default:	goto yy47;
	}
yy425:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy495;
	default:	goto yy47;
	}
yy426:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy496;
	default:	goto yy47;
	}
yy427:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy498;
	default:	goto yy47;
	}
yy428:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy500;
	default:	goto yy47;
	}
yy429:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy501;
	default:	goto yy47;
	}
yy430:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy502;
	default:	goto yy47;
	}
yy431:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy503;
	default:	goto yy47;
	}
yy432:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy505;
	default:	goto yy47;
	}
yy433:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy506;
	default:	goto yy47;
	}
yy434:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy507;
	default:	goto yy47;
	}
yy435:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy508;
	default:	goto yy47;
	}
yy436:
	yych = *++context.cursor;
	switch (yych) {
	case 'c':	goto yy509;
	default:	goto yy47;
	}
yy437:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy438;
	}
yy438:
#line 8944 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OBJECT (context.location); }
#line 13418 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy439:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy510;
	default:	goto yy47;
	}
yy440:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy512;
	default:	goto yy47;
	}
yy441:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy513;
	default:	goto yy47;
	}
yy442:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy514;
	default:	goto yy47;
	}
yy443:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy516;
	default:	goto yy47;
	}
yy444:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy517;
	default:	goto yy47;
	}
yy445:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy519;
	default:	goto yy47;
	}
yy446:
	yych = *++context.cursor;
	switch (yych) {
	case 'b':	goto yy521;
	default:	goto yy47;
	}
yy447:
	yych = *++context.cursor;
	switch (yych) {
	case 'V':	goto yy522;
	default:	goto yy47;
	}
yy448:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy523;
	default:	goto yy47;
	}
yy449:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy524;
	default:	goto yy47;
	}
yy450:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy451;
	}
yy451:
#line 8963 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_STRING (context.location); }
#line 13557 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy452:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy453;
	}
yy453:
#line 8964 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SYNTAX (context.location); }
#line 13630 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy454:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy525;
	default:	goto yy47;
	}
yy455:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy526;
	default:	goto yy47;
	}
yy456:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy527;
	default:	goto yy47;
	}
yy457:
	yych = *++context.cursor;
	switch (yych) {
	case 'x':	goto yy528;
	default:	goto yy47;
	}
yy458:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy459;
	}
yy459:
#line 8973 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UNIQUE (context.location); }
#line 13727 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy460:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy529;
	default:	goto yy47;
	}
yy461:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy530;
	default:	goto yy47;
	}
yy462:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy532;
	default:	goto yy47;
	}
yy463:
	yych = *++context.cursor;
	switch (yych) {
	case 's':	goto yy533;
	default:	goto yy47;
	}
yy464:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy534;
	default:	goto yy47;
	}
yy465:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy535;
	default:	goto yy47;
	}
yy466:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy536;
	default:	goto yy47;
	}
yy467:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy537;
	default:	goto yy47;
	}
yy468:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy538;
	default:	goto yy47;
	}
yy469:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy539;
	default:	goto yy47;
	}
yy470:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy471;
	}
yy471:
#line 8898 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BOOLEAN (context.location); }
#line 13860 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy472:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy540;
	default:	goto yy47;
	}
yy473:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy541;
	default:	goto yy47;
	}
yy474:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy542;
	default:	goto yy47;
	}
yy475:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy543;
	default:	goto yy47;
	}
yy476:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy544;
	default:	goto yy47;
	}
yy477:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy478;
	}
yy478:
#line 8909 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DEFAULT (context.location); }
#line 13963 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy479:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy545;
	default:	goto yy47;
	}
yy480:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy546;
	default:	goto yy47;
	}
yy481:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy548;
	default:	goto yy47;
	}
yy482:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy483;
	}
yy483:
#line 8913 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ENCODED (context.location); }
#line 14054 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy484:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy550;
	default:	goto yy47;
	}
yy485:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy551;
	default:	goto yy47;
	}
yy486:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy552;
	default:	goto yy47;
	}
yy487:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy488;
	}
yy488:
#line 8919 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXPORTS (context.location); }
#line 14145 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy489:
	yych = *++context.cursor;
	switch (yych) {
	case 'B':	goto yy554;
	default:	goto yy47;
	}
yy490:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy555;
	default:	goto yy47;
	}
yy491:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy557;
	case 'i':	goto yy558;
	default:	goto yy47;
	}
yy492:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy559;
	default:	goto yy47;
	}
yy493:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy560;
	default:	goto yy47;
	}
yy494:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy561;
	default:	goto yy47;
	}
yy495:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy562;
	default:	goto yy47;
	}
yy496:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy497;
	}
yy497:
#line 8930 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IMPLIED (context.location); }
#line 14261 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy498:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy499;
	}
yy499:
#line 8931 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IMPORTS (context.location); }
#line 14334 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy500:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy564;
	default:	goto yy47;
	}
yy501:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy566;
	default:	goto yy47;
	}
yy502:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy568;
	default:	goto yy47;
	}
yy503:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy504;
	}
yy504:
#line 8935 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INTEGER (context.location); }
#line 14425 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy505:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy569;
	default:	goto yy47;
	}
yy506:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy570;
	default:	goto yy47;
	}
yy507:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy571;
	default:	goto yy47;
	}
yy508:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy572;
	default:	goto yy47;
	}
yy509:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy573;
	default:	goto yy47;
	}
yy510:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy511;
	}
yy511:
#line 8948 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OID_IRI (context.location); }
#line 14528 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy512:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy574;
	default:	goto yy47;
	}
yy513:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy576;
	default:	goto yy47;
	}
yy514:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy515;
	}
yy515:
#line 8950 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PATTERN (context.location); }
#line 14613 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy516:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy577;
	default:	goto yy47;
	}
yy517:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy518;
	}
yy518:
#line 8953 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PRESENT (context.location); }
#line 14692 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy519:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy520;
	}
yy520:
#line 8955 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PRIVATE (context.location); }
#line 14765 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy521:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy578;
	default:	goto yy47;
	}
yy522:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy579;
	default:	goto yy47;
	}
yy523:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy580;
	default:	goto yy47;
	}
yy524:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy582;
	default:	goto yy47;
	}
yy525:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy584;
	default:	goto yy47;
	}
yy526:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy585;
	default:	goto yy47;
	}
yy527:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy586;
	default:	goto yy47;
	}
yy528:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy587;
	default:	goto yy47;
	}
yy529:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy588;
	default:	goto yy47;
	}
yy530:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy531;
	}
yy531:
#line 8976 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UTCTime (context.location); }
#line 14892 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy532:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy589;
	default:	goto yy47;
	}
yy533:
	yych = *++context.cursor;
	switch (yych) {
	case 'a':	goto yy590;
	default:	goto yy47;
	}
yy534:
	yych = *++context.cursor;
	switch (yych) {
	case 'x':	goto yy591;
	default:	goto yy47;
	}
yy535:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy592;
	default:	goto yy47;
	}
yy536:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy593;
	default:	goto yy47;
	}
yy537:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy594;
	default:	goto yy47;
	}
yy538:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy595;
	default:	goto yy47;
	}
yy539:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy597;
	default:	goto yy47;
	}
yy540:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy599;
	default:	goto yy47;
	}
yy541:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy601;
	default:	goto yy47;
	}
yy542:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy603;
	default:	goto yy47;
	}
yy543:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy604;
	default:	goto yy47;
	}
yy544:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy605;
	default:	goto yy47;
	}
yy545:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy607;
	default:	goto yy47;
	}
yy546:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy547;
	}
yy547:
#line 8911 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DURATION (context.location); }
#line 15049 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy548:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy549;
	}
yy549:
#line 8912 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EMBEDDED (context.location); }
#line 15122 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy550:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy608;
	default:	goto yy47;
	}
yy551:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy609;
	default:	goto yy47;
	}
yy552:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy553;
	}
yy553:
#line 8918 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXPLICIT (context.location); }
#line 15207 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy554:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy610;
	default:	goto yy47;
	}
yy555:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy556;
	}
yy556:
#line 8921 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXTERNAL (context.location); }
#line 15286 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy557:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy611;
	default:	goto yy47;
	}
yy558:
	yych = *++context.cursor;
	switch (yych) {
	case 'z':	goto yy612;
	default:	goto yy47;
	}
yy559:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy613;
	default:	goto yy47;
	}
yy560:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy614;
	default:	goto yy47;
	}
yy561:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy616;
	default:	goto yy47;
	}
yy562:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy563;
	}
yy563:
#line 8929 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IMPLICIT (context.location); }
#line 15389 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy564:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy565;
	}
yy565:
#line 8932 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INCLUDES (context.location); }
#line 15462 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy566:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy567;
	}
yy567:
#line 8933 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INSTANCE (context.location); }
#line 15535 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy568:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy617;
	default:	goto yy47;
	}
yy569:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy618;
	default:	goto yy47;
	}
yy570:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy619;
	default:	goto yy47;
	}
yy571:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy620;
	default:	goto yy47;
	}
yy572:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy621;
	default:	goto yy47;
	}
yy573:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy622;
	default:	goto yy47;
	}
yy574:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy575;
	}
yy575:
#line 8949 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPTIONAL (context.location); }
#line 15644 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy576:
	yych = *++context.cursor;
	switch (yych) {
	case 's':	goto yy623;
	default:	goto yy47;
	}
yy577:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy624;
	default:	goto yy47;
	}
yy578:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy625;
	default:	goto yy47;
	}
yy579:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy626;
	default:	goto yy47;
	}
yy580:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy581;
	}
yy581:
#line 8959 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SEQUENCE (context.location); }
#line 15741 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy582:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy583;
	}
yy583:
#line 8961 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SETTINGS (context.location); }
#line 15814 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy584:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy627;
	default:	goto yy47;
	}
yy585:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy629;
	default:	goto yy47;
	}
yy586:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy630;
	default:	goto yy47;
	}
yy587:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy631;
	default:	goto yy47;
	}
yy588:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy632;
	default:	goto yy47;
	}
yy589:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy634;
	default:	goto yy47;
	}
yy590:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy635;
	default:	goto yy47;
	}
yy591:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy636;
	default:	goto yy47;
	}
yy592:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy637;
	default:	goto yy47;
	}
yy593:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy638;
	default:	goto yy47;
	}
yy594:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy639;
	default:	goto yy47;
	}
yy595:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy596;
	}
yy596:
#line 8894 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_AUTOMATIC (context.location); }
#line 15953 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy597:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy598;
	}
yy598:
#line 8897 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BMPString (context.location); }
#line 16026 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy599:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy600;
	}
yy600:
#line 8900 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CHARACTER (context.location); }
#line 16099 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy601:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	case 'S':	goto yy640;
	default:	goto yy602;
	}
yy602:
#line 8903 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COMPONENT (context.location); }
#line 16172 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy603:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy642;
	default:	goto yy47;
	}
yy604:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy643;
	default:	goto yy47;
	}
yy605:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy606;
	}
yy606:
#line 8908 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DATE_TIME (context.location); }
#line 16257 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy607:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy645;
	default:	goto yy47;
	}
yy608:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy646;
	default:	goto yy47;
	}
yy609:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy647;
	default:	goto yy47;
	}
yy610:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy649;
	default:	goto yy47;
	}
yy611:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy650;
	default:	goto yy47;
	}
yy612:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy651;
	default:	goto yy47;
	}
yy613:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy652;
	default:	goto yy47;
	}
yy614:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy615;
	}
yy615:
#line 8927 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IA5String (context.location); }
#line 16372 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy616:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy653;
	default:	goto yy47;
	}
yy617:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy655;
	default:	goto yy47;
	}
yy618:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy656;
	default:	goto yy47;
	}
yy619:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy657;
	default:	goto yy47;
	}
yy620:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy658;
	default:	goto yy47;
	}
yy621:
	yych = *++context.cursor;
	switch (yych) {
	case 'B':	goto yy659;
	default:	goto yy47;
	}
yy622:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy660;
	default:	goto yy47;
	}
yy623:
	yych = *++context.cursor;
	switch (yych) {
	case 'c':	goto yy661;
	default:	goto yy47;
	}
yy624:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy662;
	default:	goto yy47;
	}
yy625:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy663;
	default:	goto yy47;
	}
yy626:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy664;
	default:	goto yy47;
	}
yy627:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy628;
	}
yy628:
#line 8965 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_T61String (context.location); }
#line 16511 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy629:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy665;
	default:	goto yy47;
	}
yy630:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy666;
	default:	goto yy47;
	}
yy631:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy667;
	default:	goto yy47;
	}
yy632:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy633;
	}
yy633:
#line 8974 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UNIVERSAL (context.location); }
#line 16602 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy634:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy668;
	default:	goto yy47;
	}
yy635:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy670;
	default:	goto yy47;
	}
yy636:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy671;
	default:	goto yy47;
	}
yy637:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy672;
	default:	goto yy47;
	}
yy638:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy673;
	default:	goto yy47;
	}
yy639:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy674;
	default:	goto yy47;
	}
yy640:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy641;
	}
yy641:
#line 8904 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COMPONENTS (context.location); }
#line 16711 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy642:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy676;
	default:	goto yy47;
	}
yy643:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy644;
	}
yy644:
#line 8906 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CONTAINING (context.location); }
#line 16790 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy645:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy678;
	default:	goto yy47;
	}
yy646:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy680;
	default:	goto yy47;
	}
yy647:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy648;
	}
yy648:
#line 8916 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ENUMERATED (context.location); }
#line 16875 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy649:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy681;
	default:	goto yy47;
	}
yy650:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy682;
	default:	goto yy47;
	}
yy651:
	yych = *++context.cursor;
	switch (yych) {
	case 'd':	goto yy683;
	default:	goto yy47;
	}
yy652:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy684;
	default:	goto yy47;
	}
yy653:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy654;
	}
yy654:
#line 8928 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IDENTIFIER (context.location); }
#line 16972 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy655:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy685;
	default:	goto yy47;
	}
yy656:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy686;
	default:	goto yy47;
	}
yy657:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy687;
	default:	goto yy47;
	}
yy658:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy688;
	default:	goto yy47;
	}
yy659:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy689;
	default:	goto yy47;
	}
yy660:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy690;
	default:	goto yy47;
	}
yy661:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy691;
	default:	goto yy47;
	}
yy662:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy692;
	default:	goto yy47;
	}
yy663:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy693;
	default:	goto yy47;
	}
yy664:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy694;
	default:	goto yy47;
	}
yy665:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy695;
	default:	goto yy47;
	}
yy666:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy697;
	default:	goto yy47;
	}
yy667:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy698;
	default:	goto yy47;
	}
yy668:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy669;
	}
yy669:
#line 8977 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UTF8String (context.location); }
#line 17123 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy670:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy699;
	default:	goto yy47;
	}
yy671:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy700;
	default:	goto yy47;
	}
yy672:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy701;
	default:	goto yy47;
	}
yy673:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy702;
	default:	goto yy47;
	}
yy674:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy675;
	}
yy675:
#line 8893 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_APPLICATION (context.location); }
#line 17220 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy676:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy677;
	}
yy677:
#line 8905 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CONSTRAINED (context.location); }
#line 17293 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy678:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy679;
	}
yy679:
#line 8910 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DEFINITIONS (context.location); }
#line 17366 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy680:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy703;
	default:	goto yy47;
	}
yy681:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy704;
	default:	goto yy47;
	}
yy682:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy705;
	default:	goto yy47;
	}
yy683:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy706;
	default:	goto yy47;
	}
yy684:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy707;
	default:	goto yy47;
	}
yy685:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy708;
	default:	goto yy47;
	}
yy686:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy710;
	default:	goto yy47;
	}
yy687:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy712;
	default:	goto yy47;
	}
yy688:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy714;
	default:	goto yy47;
	}
yy689:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy715;
	default:	goto yy47;
	}
yy690:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy717;
	default:	goto yy47;
	}
yy691:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy718;
	default:	goto yy47;
	}
yy692:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy719;
	default:	goto yy47;
	}
yy693:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy720;
	default:	goto yy47;
	}
yy694:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy721;
	default:	goto yy47;
	}
yy695:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy696;
	}
yy696:
#line 8969 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TIME_OF_DAY (context.location); }
#line 17529 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy697:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy723;
	default:	goto yy47;
	}
yy698:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy724;
	default:	goto yy47;
	}
yy699:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy725;
	default:	goto yy47;
	}
yy700:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy726;
	default:	goto yy47;
	}
yy701:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy727;
	default:	goto yy47;
	}
yy702:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy728;
	default:	goto yy47;
	}
yy703:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy729;
	default:	goto yy47;
	}
yy704:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy730;
	default:	goto yy47;
	}
yy705:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy732;
	default:	goto yy47;
	}
yy706:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy734;
	default:	goto yy47;
	}
yy707:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy735;
	default:	goto yy47;
	}
yy708:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy709;
	}
yy709:
#line 8934 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INSTRUCTIONS (context.location); }
#line 17668 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy710:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy711;
	}
yy711:
#line 8936 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INTERSECTION (context.location); }
#line 17741 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy712:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy713;
	}
yy713:
#line 8937 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ISO646String (context.location); }
#line 17814 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy714:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy737;
	default:	goto yy47;
	}
yy715:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy716;
	}
yy716:
#line 8941 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_NOT_A_NUMBER (context.location); }
#line 17893 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy717:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy738;
	default:	goto yy47;
	}
yy718:
	yych = *++context.cursor;
	switch (yych) {
	case 'p':	goto yy740;
	default:	goto yy47;
	}
yy719:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy741;
	default:	goto yy47;
	}
yy720:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy743;
	default:	goto yy47;
	}
yy721:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy744;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy722;
	}
yy722:
#line 8957 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_RELATIVE_OID (context.location); }
#line 17990 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy723:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy745;
	default:	goto yy47;
	}
yy724:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy746;
	default:	goto yy47;
	}
yy725:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy748;
	default:	goto yy47;
	}
yy726:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy749;
	default:	goto yy47;
	}
yy727:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy750;
	default:	goto yy47;
	}
yy728:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy752;
	default:	goto yy47;
	}
yy729:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy753;
	default:	goto yy47;
	}
yy730:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy731;
	}
yy731:
#line 8920 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXTENSIBILITY (context.location); }
#line 18105 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy732:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy733;
	}
yy733:
#line 8925 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GeneralString (context.location); }
#line 18178 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy734:
	yych = *++context.cursor;
	switch (yych) {
	case 'm':	goto yy754;
	default:	goto yy47;
	}
yy735:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy736;
	}
yy736:
#line 8926 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GraphicString (context.location); }
#line 18257 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy737:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy755;
	default:	goto yy47;
	}
yy738:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy739;
	}
yy739:
#line 8943 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_NumericString (context.location); }
#line 18336 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy740:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy757;
	default:	goto yy47;
	}
yy741:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy742;
	}
yy742:
#line 8952 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PLUS_INFINITY (context.location); }
#line 18415 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy743:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy758;
	default:	goto yy47;
	}
yy744:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy759;
	default:	goto yy47;
	}
yy745:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy760;
	default:	goto yy47;
	}
yy746:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy747;
	}
yy747:
#line 8967 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TeletexString (context.location); }
#line 18506 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy748:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy761;
	default:	goto yy47;
	}
yy749:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy762;
	default:	goto yy47;
	}
yy750:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy751;
	}
yy751:
#line 8979 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_VisibleString (context.location); }
#line 18591 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy752:
	yych = *++context.cursor;
	switch (yych) {
	case 'X':	goto yy764;
	default:	goto yy47;
	}
yy753:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy766;
	default:	goto yy47;
	}
yy754:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy767;
	default:	goto yy47;
	}
yy755:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy756;
	}
yy756:
#line 8940 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_MINUS_INFINITY (context.location); }
#line 18682 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy757:
	yych = *++context.cursor;
	switch (yych) {
	case 'o':	goto yy769;
	default:	goto yy47;
	}
yy758:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy770;
	default:	goto yy47;
	}
yy759:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy772;
	default:	goto yy47;
	}
yy760:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy773;
	default:	goto yy47;
	}
yy761:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy775;
	default:	goto yy47;
	}
yy762:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy763;
	}
yy763:
#line 8978 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_VideotexString (context.location); }
#line 18785 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy764:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy765;
	}
yy765:
#line 8891 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ABSTRACT_SYNTAX (context.location); }
#line 18858 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy766:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy777;
	default:	goto yy47;
	}
yy767:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy768;
	}
yy768:
#line 8924 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GeneralizedTime (context.location); }
#line 18937 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy769:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy779;
	default:	goto yy47;
	}
yy770:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy771;
	}
yy771:
#line 8954 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PrintableString (context.location); }
#line 19016 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy772:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy781;
	default:	goto yy47;
	}
yy773:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy774;
	}
yy774:
#line 8971 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TYPE_IDENTIFIER (context.location); }
#line 19095 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy775:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy776;
	}
yy776:
#line 8975 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UniversalString (context.location); }
#line 19168 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy777:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy778;
	}
yy778:
#line 8914 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ENCODING_CONTROL (context.location); }
#line 19241 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy779:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy780;
	}
yy780:
#line 8945 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ObjectDescriptor (context.location); }
#line 19314 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy781:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy46;
	default:	goto yy782;
	}
yy782:
#line 8958 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_RELATIVE_OID_IRI (context.location); }
#line 19387 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
}
#line 9025 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"

    }
}
