/* Generated by re2c 1.1.1 */
#line 1 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
// A Bison parser, made by GNU Bison 3.0.4.

// Skeleton implementation for Bison LALR(1) parsers in C++

// Copyright (C) 2002-2015 Free Software Foundation, Inc.

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// As a special exception, you may create a larger work that contains
// part or all of the Bison parser skeleton and distribute that work
// under terms of your choice, so long as that work isn't itself a
// parser generator using the skeleton or a modified version thereof
// as a parser skeleton.  Alternatively, if you modify or redistribute
// the parser skeleton itself, you may (at your option) remove this
// special exception, which will cause the skeleton and the resulting
// Bison output files to be licensed under the GNU General Public
// License without this special exception.

// This special exception was added by the Free Software Foundation in
// version 2.2 of Bison.


// First part of user declarations.

#line 37 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:404

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

// //                    "%code requires" blocks.
#line 10 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:408

    #include "fast_ber/compiler/CompilerTypes.hpp"

#line 52 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:408

# include <cassert>
# include <cstdlib> // std::abort
# include <iostream>
# include <stdexcept>
# include <string>
# include <vector>
#include <typeinfo>
#ifndef YYASSERT
# include <cassert>
# define YYASSERT assert
#endif


#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif


namespace yy {
#line 127 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:408

  template <class T, class S = std::vector<T> >
  class stack
  {
  public:
    // Hide our reversed order.
    typedef typename S::reverse_iterator iterator;
    typedef typename S::const_reverse_iterator const_iterator;

    stack ()
      : seq_ ()
    {
      seq_.reserve (200);
    }

    stack (unsigned int n)
      : seq_ (n)
    {}

    inline
    T&
    operator[] (unsigned int i)
    {
      return seq_[seq_.size () - 1 - i];
    }

    inline
    const T&
    operator[] (unsigned int i) const
    {
      return seq_[seq_.size () - 1 - i];
    }

    /// Steal the contents of \a t.
    ///
    /// Close to move-semantics.
    inline
    void
    push (T& t)
    {
      seq_.push_back (T());
      operator[](0).move (t);
    }

    inline
    void
    pop (unsigned int n = 1)
    {
      for (; n; --n)
        seq_.pop_back ();
    }

    void
    clear ()
    {
      seq_.clear ();
    }

    inline
    typename S::size_type
    size () const
    {
      return seq_.size ();
    }

    inline
    const_iterator
    begin () const
    {
      return seq_.rbegin ();
    }

    inline
    const_iterator
    end () const
    {
      return seq_.rend ();
    }

  private:
    stack (const stack&);
    stack& operator= (const stack&);
    /// The wrapped container.
    S seq_;
  };

  /// Present a slice of the top of a stack.
  template <class T, class S = stack<T> >
  class slice
  {
  public:
    slice (const S& stack, unsigned int range)
      : stack_ (stack)
      , range_ (range)
    {}

    inline
    const T&
    operator [] (unsigned int i) const
    {
      return stack_[range_ - i];
    }

  private:
    const S& stack_;
    unsigned int range_;
  };

  /// Abstract a position.
  class position
  {
  public:
    /// Construct a position.
    explicit position (std::string* f = YY_NULLPTR,
                       unsigned int l = 1u,
                       unsigned int c = 1u)
      : filename (f)
      , line (l)
      , column (c)
    {
    }


    /// Initialization.
    void initialize (std::string* fn = YY_NULLPTR,
                     unsigned int l = 1u,
                     unsigned int c = 1u)
    {
      filename = fn;
      line = l;
      column = c;
    }

    /** \name Line and Column related manipulators
     ** \{ */
    /// (line related) Advance to the COUNT next lines.
    void lines (int count = 1)
    {
      if (count)
        {
          column = 1u;
          line = add_ (line, count, 1);
        }
    }

    /// (column related) Advance to the COUNT next columns.
    void columns (int count = 1)
    {
      column = add_ (column, count, 1);
    }
    /** \} */

    /// File name to which this position refers.
    std::string* filename;
    /// Current line number.
    unsigned int line;
    /// Current column number.
    unsigned int column;

  private:
    /// Compute max(min, lhs+rhs) (provided min <= lhs).
    static unsigned int add_ (unsigned int lhs, int rhs, unsigned int min)
    {
      return (0 < rhs || -static_cast<unsigned int>(rhs) < lhs
              ? rhs + lhs
              : min);
    }
  };

  /// Add \a width columns, in place.
  inline position&
  operator+= (position& res, int width)
  {
    res.columns (width);
    return res;
  }

  /// Add \a width columns.
  inline position
  operator+ (position res, int width)
  {
    return res += width;
  }

  /// Subtract \a width columns, in place.
  inline position&
  operator-= (position& res, int width)
  {
    return res += -width;
  }

  /// Subtract \a width columns.
  inline position
  operator- (position res, int width)
  {
    return res -= width;
  }

  /// Compare two position objects.
  inline bool
  operator== (const position& pos1, const position& pos2)
  {
    return (pos1.line == pos2.line
            && pos1.column == pos2.column
            && (pos1.filename == pos2.filename
                || (pos1.filename && pos2.filename
                    && *pos1.filename == *pos2.filename)));
  }

  /// Compare two position objects.
  inline bool
  operator!= (const position& pos1, const position& pos2)
  {
    return !(pos1 == pos2);
  }

  /** \brief Intercept output stream redirection.
   ** \param ostr the destination output stream
   ** \param pos a reference to the position to redirect
   */
  template <typename YYChar>
  inline std::basic_ostream<YYChar>&
  operator<< (std::basic_ostream<YYChar>& ostr, const position& pos)
  {
    if (pos.filename)
      ostr << *pos.filename << ':';
    return ostr << pos.line << '.' << pos.column;
  }

  /// Abstract a location.
  class location
  {
  public:

    /// Construct a location from \a b to \a e.
    location (const position& b, const position& e)
      : begin (b)
      , end (e)
    {
    }

    /// Construct a 0-width location in \a p.
    explicit location (const position& p = position ())
      : begin (p)
      , end (p)
    {
    }

    /// Construct a 0-width location in \a f, \a l, \a c.
    explicit location (std::string* f,
                       unsigned int l = 1u,
                       unsigned int c = 1u)
      : begin (f, l, c)
      , end (f, l, c)
    {
    }


    /// Initialization.
    void initialize (std::string* f = YY_NULLPTR,
                     unsigned int l = 1u,
                     unsigned int c = 1u)
    {
      begin.initialize (f, l, c);
      end = begin;
    }

    /** \name Line and Column related manipulators
     ** \{ */
  public:
    /// Reset initial location to final location.
    void step ()
    {
      begin = end;
    }

    /// Extend the current location to the COUNT next columns.
    void columns (int count = 1)
    {
      end += count;
    }

    /// Extend the current location to the COUNT next lines.
    void lines (int count = 1)
    {
      end.lines (count);
    }
    /** \} */


  public:
    /// Beginning of the located region.
    position begin;
    /// End of the located region.
    position end;
  };

  /// Join two locations, in place.
  inline location& operator+= (location& res, const location& end)
  {
    res.end = end.end;
    return res;
  }

  /// Join two locations.
  inline location operator+ (location res, const location& end)
  {
    return res += end;
  }

  /// Add \a width columns to the end position, in place.
  inline location& operator+= (location& res, int width)
  {
    res.columns (width);
    return res;
  }

  /// Add \a width columns to the end position.
  inline location operator+ (location res, int width)
  {
    return res += width;
  }

  /// Subtract \a width columns to the end position, in place.
  inline location& operator-= (location& res, int width)
  {
    return res += -width;
  }

  /// Subtract \a width columns to the end position.
  inline location operator- (location res, int width)
  {
    return res -= width;
  }

  /// Compare two location objects.
  inline bool
  operator== (const location& loc1, const location& loc2)
  {
    return loc1.begin == loc2.begin && loc1.end == loc2.end;
  }

  /// Compare two location objects.
  inline bool
  operator!= (const location& loc1, const location& loc2)
  {
    return !(loc1 == loc2);
  }

  /** \brief Intercept output stream redirection.
   ** \param ostr the destination output stream
   ** \param loc a reference to the location to redirect
   **
   ** Avoid duplicate information.
   */
  template <typename YYChar>
  inline std::basic_ostream<YYChar>&
  operator<< (std::basic_ostream<YYChar>& ostr, const location& loc)
  {
    unsigned int end_col = 0 < loc.end.column ? loc.end.column - 1 : 0;
    ostr << loc.begin;
    if (loc.end.filename
        && (!loc.begin.filename
            || *loc.begin.filename != *loc.end.filename))
      ostr << '-' << loc.end.filename << ':' << loc.end.line << '.' << end_col;
    else if (loc.begin.line < loc.end.line)
      ostr << '-' << loc.end.line << '.' << end_col;
    else if (loc.begin.column < end_col)
      ostr << '-' << end_col;
    return ostr;
  }


  /// A char[S] buffer to store and retrieve objects.
  ///
  /// Sort of a variant, but does not keep track of the nature
  /// of the stored data, since that knowledge is available
  /// via the current state.
  template <size_t S>
  struct variant
  {
    /// Type of *this.
    typedef variant<S> self_type;

    /// Empty construction.
    variant ()
      : yytypeid_ (YY_NULLPTR)
    {}

    /// Construct and fill.
    template <typename T>
    variant (const T& t)
      : yytypeid_ (&typeid (T))
    {
      YYASSERT (sizeof (T) <= S);
      new (yyas_<T> ()) T (t);
    }

    /// Destruction, allowed only if empty.
    ~variant ()
    {
      YYASSERT (!yytypeid_);
    }

    /// Instantiate an empty \a T in here.
    template <typename T>
    T&
    build ()
    {
      YYASSERT (!yytypeid_);
      YYASSERT (sizeof (T) <= S);
      yytypeid_ = & typeid (T);
      return *new (yyas_<T> ()) T;
    }

    /// Instantiate a \a T in here from \a t.
    template <typename T>
    T&
    build (const T& t)
    {
      YYASSERT (!yytypeid_);
      YYASSERT (sizeof (T) <= S);
      yytypeid_ = & typeid (T);
      return *new (yyas_<T> ()) T (t);
    }

    /// Accessor to a built \a T.
    template <typename T>
    T&
    as ()
    {
      YYASSERT (*yytypeid_ == typeid (T));
      YYASSERT (sizeof (T) <= S);
      return *yyas_<T> ();
    }

    /// Const accessor to a built \a T (for %printer).
    template <typename T>
    const T&
    as () const
    {
      YYASSERT (*yytypeid_ == typeid (T));
      YYASSERT (sizeof (T) <= S);
      return *yyas_<T> ();
    }

    /// Swap the content with \a other, of same type.
    ///
    /// Both variants must be built beforehand, because swapping the actual
    /// data requires reading it (with as()), and this is not possible on
    /// unconstructed variants: it would require some dynamic testing, which
    /// should not be the variant's responsability.
    /// Swapping between built and (possibly) non-built is done with
    /// variant::move ().
    template <typename T>
    void
    swap (self_type& other)
    {
      YYASSERT (yytypeid_);
      YYASSERT (*yytypeid_ == *other.yytypeid_);
      std::swap (as<T> (), other.as<T> ());
    }

    /// Move the content of \a other to this.
    ///
    /// Destroys \a other.
    template <typename T>
    void
    move (self_type& other)
    {
      build<T> ();
      swap<T> (other);
      other.destroy<T> ();
    }

    /// Copy the content of \a other to this.
    template <typename T>
    void
    copy (const self_type& other)
    {
      build<T> (other.as<T> ());
    }

    /// Destroy the stored \a T.
    template <typename T>
    void
    destroy ()
    {
      as<T> ().~T ();
      yytypeid_ = YY_NULLPTR;
    }

  private:
    /// Prohibit blind copies.
    self_type& operator=(const self_type&);
    variant (const self_type&);

    /// Accessor to raw memory as \a T.
    template <typename T>
    T*
    yyas_ ()
    {
      void *yyp = yybuffer_.yyraw;
      return static_cast<T*> (yyp);
     }

    /// Const accessor to raw memory as \a T.
    template <typename T>
    const T*
    yyas_ () const
    {
      const void *yyp = yybuffer_.yyraw;
      return static_cast<const T*> (yyp);
     }

    union
    {
      /// Strongest alignment constraints.
      long double yyalign_me;
      /// A buffer large enough to store any of the semantic values.
      char yyraw[S];
    } yybuffer_;

    /// Whether the content is built: if defined, the name of the stored type.
    const std::type_info *yytypeid_;
  };


  /// A Bison parser.
  class asn1_parser
  {
  public:
#ifndef YYSTYPE
    /// An auxiliary type to compute the largest semantic type.
    union union_type
    {
      // ObjectClassAssignment
      // ObjectSetAssignment
      // ParameterizedAssignment
      // ParameterizedTypeAssignment
      // ParameterizedValueAssignment
      // ParameterizedValueSetTypeAssignment
      // ParameterizedObjectClassAssignment
      // ParameterizedObjectAssignment
      // Assignment
      // TypeAssignment
      // ValueAssignment
      // ValueSetTypeAssignment
      char dummy1[sizeof(Assignment)];

      // BitStringType
      char dummy2[sizeof(BitStringType)];

      // BooleanType
      char dummy3[sizeof(BooleanType)];

      // BuiltinType
      char dummy4[sizeof(BuiltinType)];

      // CharacterStringType
      char dummy5[sizeof(CharacterStringType)];

      // ChoiceType
      char dummy6[sizeof(ChoiceType)];

      // Class
      char dummy7[sizeof(Class)];

      // ComponentType
      char dummy8[sizeof(ComponentType)];

      // ComponentTypeLists
      // ComponentTypeList
      char dummy9[sizeof(ComponentTypeList)];

      // DateTimeType
      char dummy10[sizeof(DateTimeType)];

      // DateType
      char dummy11[sizeof(DateType)];

      // DefinedType
      // ParameterizedType
      // ExternalTypeReference
      char dummy12[sizeof(DefinedType)];

      // DefinedValue
      char dummy13[sizeof(DefinedValue)];

      // DurationType
      char dummy14[sizeof(DurationType)];

      // EmbeddedPDVType
      char dummy15[sizeof(EmbeddedPDVType)];

      // EnumeratedType
      // Enumerations
      // Enumeration
      char dummy16[sizeof(EnumeratedType)];

      // EnumerationItem
      char dummy17[sizeof(EnumerationValue)];

      // ExternalType
      char dummy18[sizeof(ExternalType)];

      // IRIType
      char dummy19[sizeof(IRIType)];

      // SymbolsFromModule
      char dummy20[sizeof(Import)];

      // InstanceOfType
      char dummy21[sizeof(InstanceOfType)];

      // IntegerType
      char dummy22[sizeof(IntegerType)];

      // ModuleBody
      char dummy23[sizeof(Module)];

      // NamedNumber
      char dummy24[sizeof(NamedNumber)];

      // NamedType
      char dummy25[sizeof(NamedType)];

      // NullType
      char dummy26[sizeof(NullType)];

      // ObjectClass
      // ObjectClassDefn
      char dummy27[sizeof(ObjectClassAssignment)];

      // ObjectClassFieldType
      char dummy28[sizeof(ObjectClassFieldType)];

      // ObjIdComponents
      // NameForm
      // NumberForm
      // NameAndNumberForm
      char dummy29[sizeof(ObjectIdComponentValue)];

      // ObjectIdentifierType
      char dummy30[sizeof(ObjectIdentifierType)];

      // OctetStringType
      char dummy31[sizeof(OctetStringType)];

      // PrefixedType
      char dummy32[sizeof(PrefixedType)];

      // RealType
      char dummy33[sizeof(RealType)];

      // RelativeIRIType
      char dummy34[sizeof(RelativeIRIType)];

      // RelativeOIDType
      char dummy35[sizeof(RelativeOIDType)];

      // SequenceOfType
      char dummy36[sizeof(SequenceOfType)];

      // SequenceType
      char dummy37[sizeof(SequenceType)];

      // SetOfType
      char dummy38[sizeof(SetOfType)];

      // SetType
      char dummy39[sizeof(SetType)];

      // Tag
      char dummy40[sizeof(Tag)];

      // TaggedType
      char dummy41[sizeof(TaggedType)];

      // TagDefault
      char dummy42[sizeof(TaggingMode)];

      // TimeOfDayType
      char dummy43[sizeof(TimeOfDayType)];

      // TimeType
      char dummy44[sizeof(TimeType)];

      // ActualParameter
      // Type
      // ConstrainedType
      // TypeWithConstraint
      char dummy45[sizeof(Type)];

      // ValueWithoutTypeIdentifier
      // Value
      // SingleValue
      char dummy46[sizeof(Value)];

      // realnumber
      char dummy47[sizeof(double)];

      // ClassNumber
      char dummy48[sizeof(int)];

      // number
      // SignedNumber
      char dummy49[sizeof(long long)];

      // ParameterList
      // ParameterSeries
      char dummy50[sizeof(std::set<std::string>)];

      // bstring
      // xmlbstring
      // hstring
      // xmlhstring
      // cstring
      // xmlcstring
      // simplestring
      // xmltstring
      // objectreference
      // typefieldreference
      // valuefieldreference
      // GENERIC_IDENTIFIER_UPPERCASE
      // GENERIC_IDENTIFIER_LOWERCASE
      // UsefulObjectClassReference
      // FieldName
      // Parameter
      // SimpleDefinedType
      // ModuleIdentifier
      // GlobalModuleReference
      // Symbol
      // Reference
      // typereference
      // identifier
      // valuereference
      // modulereference
      // objectclassreference
      // word
      char dummy51[sizeof(std::string)];

      // AssignmentList
      char dummy52[sizeof(std::vector<Assignment>)];

      // FieldSpecList
      // FieldSpec
      // TypeFieldSpec
      // FixedTypeValueFieldSpec
      char dummy53[sizeof(std::vector<ClassField>)];

      // Exports
      char dummy54[sizeof(std::vector<Export>)];

      // Imports
      // SymbolsImported
      // SymbolsFromModuleList
      char dummy55[sizeof(std::vector<Import>)];

      // NamedNumberList
      char dummy56[sizeof(std::vector<NamedNumber>)];

      // AlternativeTypeLists
      // RootAlternativeTypeList
      // AlternativeTypeList
      char dummy57[sizeof(std::vector<NamedType>)];

      // ObjectIdentifierValue
      // ObjIdComponentsList
      char dummy58[sizeof(std::vector<ObjectIdComponentValue>)];

      // ActualParameterList
      char dummy59[sizeof(std::vector<Type>)];

      // SequenceOfValues
      char dummy60[sizeof(std::vector<Value>)];

      // FieldNameList
      // OneOrManyTypeFieldReference
      // SymbolList
      char dummy61[sizeof(std::vector<std::string>)];
};

    /// Symbol semantic values.
    typedef variant<sizeof(union_type)> semantic_type;
#else
    typedef YYSTYPE semantic_type;
#endif
    /// Symbol locations.
    typedef location location_type;

    /// Syntax errors thrown from user actions.
    struct syntax_error : std::runtime_error
    {
      syntax_error (const location_type& l, const std::string& m);
      location_type location;
    };

    /// Tokens.
    struct token
    {
      enum yytokentype
      {
        END_OF_FILE = 0,
        comment = 258,
        number = 259,
        realnumber = 260,
        bstring = 261,
        xmlbstring = 262,
        hstring = 263,
        xmlhstring = 264,
        cstring = 265,
        xmlcstring = 266,
        simplestring = 267,
        xmltstring = 268,
        psname = 269,
        encodingreference = 270,
        integerUnicodeLabel = 271,
        tstring = 274,
        objectreference = 276,
        objectsetreference = 277,
        typefieldreference = 278,
        valuefieldreference = 279,
        valuesetfieldreference = 280,
        objectfieldreference = 281,
        objectsetfieldreference = 282,
        ABSENT = 283,
        ABSTRACT_SYNTAX = 284,
        ALL = 285,
        ANY = 286,
        APPLICATION = 287,
        ASN_NULL = 288,
        AUTOMATIC = 289,
        BEGIN = 290,
        BIT = 291,
        BMPString = 292,
        BOOLEAN = 293,
        BY = 294,
        CHARACTER = 295,
        CHOICE = 296,
        CLASS = 297,
        COMPONENT = 298,
        COMPONENTS = 299,
        CONSTRAINED = 300,
        CONTAINING = 301,
        DATE = 302,
        DATE_TIME = 303,
        DEFAULT = 304,
        DEFINITIONS = 305,
        DURATION = 306,
        EMBEDDED = 307,
        ENCODED = 308,
        ENCODING_CONTROL = 309,
        END = 310,
        ENUMERATED = 311,
        EXCEPT = 312,
        EXPLICIT = 313,
        EXPORTS = 314,
        EXTENSIBILITY = 315,
        EXTERNAL = 316,
        FALSE = 317,
        FROM = 318,
        GeneralizedTime = 319,
        GeneralString = 320,
        GraphicString = 321,
        IA5String = 322,
        IDENTIFIER = 323,
        IMPLICIT = 324,
        IMPLIED = 325,
        IMPORTS = 326,
        INCLUDES = 327,
        INSTANCE = 328,
        INSTRUCTIONS = 329,
        INTEGER = 330,
        INTERSECTION = 331,
        ISO646String = 332,
        MAX = 333,
        MIN = 334,
        MINUS_INFINITY = 335,
        NOT_A_NUMBER = 336,
        NumericString = 337,
        OBJECT = 338,
        ObjectDescriptor = 339,
        OCTET = 340,
        OF = 341,
        OID_IRI = 342,
        OPTIONAL = 343,
        PATTERN = 344,
        PDV = 345,
        PLUS_INFINITY = 346,
        PRESENT = 347,
        PrintableString = 348,
        PRIVATE = 349,
        REAL = 350,
        RELATIVE_OID = 351,
        RELATIVE_OID_IRI = 352,
        SEQUENCE = 353,
        SET = 354,
        SETTINGS = 355,
        SIZE = 356,
        STRING = 357,
        SYNTAX = 358,
        T61String = 359,
        TAGS = 360,
        TeletexString = 361,
        TIME = 362,
        TIME_OF_DAY = 363,
        TRUE = 364,
        TYPE_IDENTIFIER = 365,
        UNION = 366,
        UNIQUE = 367,
        UNIVERSAL = 368,
        UniversalString = 369,
        UTCTime = 370,
        UTF8String = 371,
        VideotexString = 372,
        VisibleString = 373,
        WITH = 374,
        DEFINED_AS = 375,
        ELIPSIS = 376,
        RANGE = 377,
        OPEN_BRACE = 378,
        CLOSE_BRACE = 379,
        OPEN_PARENTHESIS = 380,
        CLOSE_PARENTHESIS = 381,
        OPEN_SQUARE_BRACKET = 382,
        CLOSE_SQUARE_BRACKET = 383,
        LESS_THAN = 384,
        GREATER_THAN = 385,
        EXCLAMATION_MARK = 386,
        QUOTATION_MARK = 387,
        AMPERSAND = 388,
        APOSTROPHE = 389,
        ASTERISK = 390,
        COMMA = 391,
        FULL_STOP = 392,
        HYPHEN_MINUS = 393,
        SOLIDUS = 394,
        COLON = 395,
        SEMICOLON = 396,
        EQUALS_SIGN = 397,
        AT = 398,
        VERTICAL_LINE = 399,
        ACCENT = 400,
        PLUS = 401,
        STAR = 402,
        GENERIC_IDENTIFIER_UPPERCASE = 403,
        GENERIC_IDENTIFIER_LOWERCASE = 404,
        GENERIC_INTEGER = 405,
        xmlasn1typename = 406
      };
    };

    /// (External) token type, as returned by yylex.
    typedef token::yytokentype token_type;

    /// Symbol type: an internal symbol number.
    typedef int symbol_number_type;

    /// The symbol type number to denote an empty symbol.
    enum { empty_symbol = -2 };

    /// Internal symbol number for tokens (subsumed by symbol_number_type).
    typedef unsigned char token_number_type;

    /// A complete symbol.
    ///
    /// Expects its Base type to provide access to the symbol type
    /// via type_get().
    ///
    /// Provide access to semantic value and location.
    template <typename Base>
    struct basic_symbol : Base
    {
      /// Alias to Base.
      typedef Base super_type;

      /// Default constructor.
      basic_symbol ();

      /// Copy constructor.
      basic_symbol (const basic_symbol& other);

      /// Constructor for valueless symbols, and symbols from each type.

  basic_symbol (typename Base::kind_type t, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Assignment v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const BitStringType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const BooleanType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const BuiltinType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const CharacterStringType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ChoiceType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Class v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ComponentType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ComponentTypeList v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const DateTimeType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const DateType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const DefinedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const DefinedValue v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const DurationType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const EmbeddedPDVType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const EnumeratedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const EnumerationValue v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ExternalType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const IRIType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Import v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const InstanceOfType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const IntegerType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Module v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const NamedNumber v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const NamedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const NullType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ObjectClassAssignment v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ObjectClassFieldType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ObjectIdComponentValue v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ObjectIdentifierType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const OctetStringType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const PrefixedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const RealType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const RelativeIRIType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const RelativeOIDType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const SequenceOfType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const SequenceType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const SetOfType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const SetType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Tag v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const TaggedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const TaggingMode v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const TimeOfDayType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const TimeType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Type v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Value v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const double v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const int v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const long long v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::set<std::string> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::string v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<Assignment> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<ClassField> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<Export> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<Import> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<NamedNumber> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<NamedType> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<ObjectIdComponentValue> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<Type> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<Value> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<std::string> v, const location_type& l);


      /// Constructor for symbols with semantic value.
      basic_symbol (typename Base::kind_type t,
                    const semantic_type& v,
                    const location_type& l);

      /// Destroy the symbol.
      ~basic_symbol ();

      /// Destroy contents, and record that is empty.
      void clear ();

      /// Whether empty.
      bool empty () const;

      /// Destructive move, \a s is emptied into this.
      void move (basic_symbol& s);

      /// The semantic value.
      semantic_type value;

      /// The location.
      location_type location;

    private:
      /// Assignment operator.
      basic_symbol& operator= (const basic_symbol& other);
    };

    /// Type access provider for token (enum) based symbols.
    struct by_type
    {
      /// Default constructor.
      by_type ();

      /// Copy constructor.
      by_type (const by_type& other);

      /// The symbol type as needed by the constructor.
      typedef token_type kind_type;

      /// Constructor from (external) token numbers.
      by_type (kind_type t);

      /// Record that this symbol is empty.
      void clear ();

      /// Steal the symbol type from \a that.
      void move (by_type& that);

      /// The (internal) type number (corresponding to \a type).
      /// \a empty when empty.
      symbol_number_type type_get () const;

      /// The token.
      token_type token () const;

      /// The symbol type.
      /// \a empty_symbol when empty.
      /// An int, not token_number_type, to be able to store empty_symbol.
      int type;
    };

    /// "External" symbols: returned by the scanner.
    typedef basic_symbol<by_type> symbol_type;

    // Symbol constructors declarations.
    static inline
    symbol_type
    make_END_OF_FILE (const location_type& l);

    static inline
    symbol_type
    make_comment (const location_type& l);

    static inline
    symbol_type
    make_number (const long long& v, const location_type& l);

    static inline
    symbol_type
    make_realnumber (const double& v, const location_type& l);

    static inline
    symbol_type
    make_bstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_xmlbstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_hstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_xmlhstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_cstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_xmlcstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_simplestring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_xmltstring (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_psname (const location_type& l);

    static inline
    symbol_type
    make_encodingreference (const location_type& l);

    static inline
    symbol_type
    make_integerUnicodeLabel (const location_type& l);

    static inline
    symbol_type
    make_tstring (const location_type& l);

    static inline
    symbol_type
    make_objectreference (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_objectsetreference (const location_type& l);

    static inline
    symbol_type
    make_typefieldreference (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_valuefieldreference (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_valuesetfieldreference (const location_type& l);

    static inline
    symbol_type
    make_objectfieldreference (const location_type& l);

    static inline
    symbol_type
    make_objectsetfieldreference (const location_type& l);

    static inline
    symbol_type
    make_ABSENT (const location_type& l);

    static inline
    symbol_type
    make_ABSTRACT_SYNTAX (const location_type& l);

    static inline
    symbol_type
    make_ALL (const location_type& l);

    static inline
    symbol_type
    make_ANY (const location_type& l);

    static inline
    symbol_type
    make_APPLICATION (const location_type& l);

    static inline
    symbol_type
    make_ASN_NULL (const location_type& l);

    static inline
    symbol_type
    make_AUTOMATIC (const location_type& l);

    static inline
    symbol_type
    make_BEGIN (const location_type& l);

    static inline
    symbol_type
    make_BIT (const location_type& l);

    static inline
    symbol_type
    make_BMPString (const location_type& l);

    static inline
    symbol_type
    make_BOOLEAN (const location_type& l);

    static inline
    symbol_type
    make_BY (const location_type& l);

    static inline
    symbol_type
    make_CHARACTER (const location_type& l);

    static inline
    symbol_type
    make_CHOICE (const location_type& l);

    static inline
    symbol_type
    make_CLASS (const location_type& l);

    static inline
    symbol_type
    make_COMPONENT (const location_type& l);

    static inline
    symbol_type
    make_COMPONENTS (const location_type& l);

    static inline
    symbol_type
    make_CONSTRAINED (const location_type& l);

    static inline
    symbol_type
    make_CONTAINING (const location_type& l);

    static inline
    symbol_type
    make_DATE (const location_type& l);

    static inline
    symbol_type
    make_DATE_TIME (const location_type& l);

    static inline
    symbol_type
    make_DEFAULT (const location_type& l);

    static inline
    symbol_type
    make_DEFINITIONS (const location_type& l);

    static inline
    symbol_type
    make_DURATION (const location_type& l);

    static inline
    symbol_type
    make_EMBEDDED (const location_type& l);

    static inline
    symbol_type
    make_ENCODED (const location_type& l);

    static inline
    symbol_type
    make_ENCODING_CONTROL (const location_type& l);

    static inline
    symbol_type
    make_END (const location_type& l);

    static inline
    symbol_type
    make_ENUMERATED (const location_type& l);

    static inline
    symbol_type
    make_EXCEPT (const location_type& l);

    static inline
    symbol_type
    make_EXPLICIT (const location_type& l);

    static inline
    symbol_type
    make_EXPORTS (const location_type& l);

    static inline
    symbol_type
    make_EXTENSIBILITY (const location_type& l);

    static inline
    symbol_type
    make_EXTERNAL (const location_type& l);

    static inline
    symbol_type
    make_FALSE (const location_type& l);

    static inline
    symbol_type
    make_FROM (const location_type& l);

    static inline
    symbol_type
    make_GeneralizedTime (const location_type& l);

    static inline
    symbol_type
    make_GeneralString (const location_type& l);

    static inline
    symbol_type
    make_GraphicString (const location_type& l);

    static inline
    symbol_type
    make_IA5String (const location_type& l);

    static inline
    symbol_type
    make_IDENTIFIER (const location_type& l);

    static inline
    symbol_type
    make_IMPLICIT (const location_type& l);

    static inline
    symbol_type
    make_IMPLIED (const location_type& l);

    static inline
    symbol_type
    make_IMPORTS (const location_type& l);

    static inline
    symbol_type
    make_INCLUDES (const location_type& l);

    static inline
    symbol_type
    make_INSTANCE (const location_type& l);

    static inline
    symbol_type
    make_INSTRUCTIONS (const location_type& l);

    static inline
    symbol_type
    make_INTEGER (const location_type& l);

    static inline
    symbol_type
    make_INTERSECTION (const location_type& l);

    static inline
    symbol_type
    make_ISO646String (const location_type& l);

    static inline
    symbol_type
    make_MAX (const location_type& l);

    static inline
    symbol_type
    make_MIN (const location_type& l);

    static inline
    symbol_type
    make_MINUS_INFINITY (const location_type& l);

    static inline
    symbol_type
    make_NOT_A_NUMBER (const location_type& l);

    static inline
    symbol_type
    make_NumericString (const location_type& l);

    static inline
    symbol_type
    make_OBJECT (const location_type& l);

    static inline
    symbol_type
    make_ObjectDescriptor (const location_type& l);

    static inline
    symbol_type
    make_OCTET (const location_type& l);

    static inline
    symbol_type
    make_OF (const location_type& l);

    static inline
    symbol_type
    make_OID_IRI (const location_type& l);

    static inline
    symbol_type
    make_OPTIONAL (const location_type& l);

    static inline
    symbol_type
    make_PATTERN (const location_type& l);

    static inline
    symbol_type
    make_PDV (const location_type& l);

    static inline
    symbol_type
    make_PLUS_INFINITY (const location_type& l);

    static inline
    symbol_type
    make_PRESENT (const location_type& l);

    static inline
    symbol_type
    make_PrintableString (const location_type& l);

    static inline
    symbol_type
    make_PRIVATE (const location_type& l);

    static inline
    symbol_type
    make_REAL (const location_type& l);

    static inline
    symbol_type
    make_RELATIVE_OID (const location_type& l);

    static inline
    symbol_type
    make_RELATIVE_OID_IRI (const location_type& l);

    static inline
    symbol_type
    make_SEQUENCE (const location_type& l);

    static inline
    symbol_type
    make_SET (const location_type& l);

    static inline
    symbol_type
    make_SETTINGS (const location_type& l);

    static inline
    symbol_type
    make_SIZE (const location_type& l);

    static inline
    symbol_type
    make_STRING (const location_type& l);

    static inline
    symbol_type
    make_SYNTAX (const location_type& l);

    static inline
    symbol_type
    make_T61String (const location_type& l);

    static inline
    symbol_type
    make_TAGS (const location_type& l);

    static inline
    symbol_type
    make_TeletexString (const location_type& l);

    static inline
    symbol_type
    make_TIME (const location_type& l);

    static inline
    symbol_type
    make_TIME_OF_DAY (const location_type& l);

    static inline
    symbol_type
    make_TRUE (const location_type& l);

    static inline
    symbol_type
    make_TYPE_IDENTIFIER (const location_type& l);

    static inline
    symbol_type
    make_UNION (const location_type& l);

    static inline
    symbol_type
    make_UNIQUE (const location_type& l);

    static inline
    symbol_type
    make_UNIVERSAL (const location_type& l);

    static inline
    symbol_type
    make_UniversalString (const location_type& l);

    static inline
    symbol_type
    make_UTCTime (const location_type& l);

    static inline
    symbol_type
    make_UTF8String (const location_type& l);

    static inline
    symbol_type
    make_VideotexString (const location_type& l);

    static inline
    symbol_type
    make_VisibleString (const location_type& l);

    static inline
    symbol_type
    make_WITH (const location_type& l);

    static inline
    symbol_type
    make_DEFINED_AS (const location_type& l);

    static inline
    symbol_type
    make_ELIPSIS (const location_type& l);

    static inline
    symbol_type
    make_RANGE (const location_type& l);

    static inline
    symbol_type
    make_OPEN_BRACE (const location_type& l);

    static inline
    symbol_type
    make_CLOSE_BRACE (const location_type& l);

    static inline
    symbol_type
    make_OPEN_PARENTHESIS (const location_type& l);

    static inline
    symbol_type
    make_CLOSE_PARENTHESIS (const location_type& l);

    static inline
    symbol_type
    make_OPEN_SQUARE_BRACKET (const location_type& l);

    static inline
    symbol_type
    make_CLOSE_SQUARE_BRACKET (const location_type& l);

    static inline
    symbol_type
    make_LESS_THAN (const location_type& l);

    static inline
    symbol_type
    make_GREATER_THAN (const location_type& l);

    static inline
    symbol_type
    make_EXCLAMATION_MARK (const location_type& l);

    static inline
    symbol_type
    make_QUOTATION_MARK (const location_type& l);

    static inline
    symbol_type
    make_AMPERSAND (const location_type& l);

    static inline
    symbol_type
    make_APOSTROPHE (const location_type& l);

    static inline
    symbol_type
    make_ASTERISK (const location_type& l);

    static inline
    symbol_type
    make_COMMA (const location_type& l);

    static inline
    symbol_type
    make_FULL_STOP (const location_type& l);

    static inline
    symbol_type
    make_HYPHEN_MINUS (const location_type& l);

    static inline
    symbol_type
    make_SOLIDUS (const location_type& l);

    static inline
    symbol_type
    make_COLON (const location_type& l);

    static inline
    symbol_type
    make_SEMICOLON (const location_type& l);

    static inline
    symbol_type
    make_EQUALS_SIGN (const location_type& l);

    static inline
    symbol_type
    make_AT (const location_type& l);

    static inline
    symbol_type
    make_VERTICAL_LINE (const location_type& l);

    static inline
    symbol_type
    make_ACCENT (const location_type& l);

    static inline
    symbol_type
    make_PLUS (const location_type& l);

    static inline
    symbol_type
    make_STAR (const location_type& l);

    static inline
    symbol_type
    make_GENERIC_IDENTIFIER_UPPERCASE (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_GENERIC_IDENTIFIER_LOWERCASE (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_GENERIC_INTEGER (const location_type& l);

    static inline
    symbol_type
    make_xmlasn1typename (const location_type& l);


    /// Build a parser object.
    asn1_parser (Context& context_yyarg);
    virtual ~asn1_parser ();

    /// Parse.
    /// \returns  0 iff parsing succeeded.
    virtual int parse ();

#if YYDEBUG
    /// The current debugging stream.
    std::ostream& debug_stream () const YY_ATTRIBUTE_PURE;
    /// Set the current debugging stream.
    void set_debug_stream (std::ostream &);

    /// Type for debugging levels.
    typedef int debug_level_type;
    /// The current debugging level.
    debug_level_type debug_level () const YY_ATTRIBUTE_PURE;
    /// Set the current debugging level.
    void set_debug_level (debug_level_type l);
#endif

    /// Report a syntax error.
    /// \param loc    where the syntax error is found.
    /// \param msg    a description of the syntax error.
    virtual void error (const location_type& loc, const std::string& msg);

    /// Report a syntax error.
    void error (const syntax_error& err);

  private:
    /// This class is not copyable.
    asn1_parser (const asn1_parser&);
    asn1_parser& operator= (const asn1_parser&);

    /// State numbers.
    typedef int state_type;

    /// Generate an error message.
    /// \param yystate   the state where the error occurred.
    /// \param yyla      the lookahead token.
    virtual std::string yysyntax_error_ (state_type yystate,
                                         const symbol_type& yyla) const;

    /// Compute post-reduction state.
    /// \param yystate   the current state
    /// \param yysym     the nonterminal to push on the stack
    state_type yy_lr_goto_state_ (state_type yystate, int yysym);

    /// Whether the given \c yypact_ value indicates a defaulted state.
    /// \param yyvalue   the value to check
    static bool yy_pact_value_is_default_ (int yyvalue);

    /// Whether the given \c yytable_ value indicates a syntax error.
    /// \param yyvalue   the value to check
    static bool yy_table_value_is_error_ (int yyvalue);

    static const short int yypact_ninf_;
    static const short int yytable_ninf_;

    /// Convert a scanner token number \a t to a symbol number.
    static token_number_type yytranslate_ (token_type t);

    // Tables.
  // YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
  // STATE-NUM.
  static const short int yypact_[];

  // YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
  // Performed when YYTABLE does not specify something else to do.  Zero
  // means the default is an error.
  static const unsigned short int yydefact_[];

  // YYPGOTO[NTERM-NUM].
  static const short int yypgoto_[];

  // YYDEFGOTO[NTERM-NUM].
  static const short int yydefgoto_[];

  // YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
  // positive, shift that token.  If negative, reduce the rule whose
  // number is the opposite.  If YYTABLE_NINF, syntax error.
  static const short int yytable_[];

  static const short int yycheck_[];

  // YYSTOS[STATE-NUM] -- The (internal number of the) accessing
  // symbol of state STATE-NUM.
  static const unsigned short int yystos_[];

  // YYR1[YYN] -- Symbol number of symbol that rule YYN derives.
  static const unsigned short int yyr1_[];

  // YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.
  static const unsigned char yyr2_[];


    /// Convert the symbol name \a n to a form suitable for a diagnostic.
    static std::string yytnamerr_ (const char *n);


    /// For a symbol, its name in clear.
    static const char* const yytname_[];
#if YYDEBUG
  // YYRLINE[YYN] -- Source line where rule number YYN was defined.
  static const unsigned short int yyrline_[];
    /// Report on the debug stream that the rule \a r is going to be reduced.
    virtual void yy_reduce_print_ (int r);
    /// Print the state stack on the debug stream.
    virtual void yystack_print_ ();

    // Debugging.
    int yydebug_;
    std::ostream* yycdebug_;

    /// \brief Display a symbol type, value and location.
    /// \param yyo    The output stream.
    /// \param yysym  The symbol.
    template <typename Base>
    void yy_print_ (std::ostream& yyo, const basic_symbol<Base>& yysym) const;
#endif

    /// \brief Reclaim the memory associated to a symbol.
    /// \param yymsg     Why this token is reclaimed.
    ///                  If null, print nothing.
    /// \param yysym     The symbol.
    template <typename Base>
    void yy_destroy_ (const char* yymsg, basic_symbol<Base>& yysym) const;

  private:
    /// Type access provider for state based symbols.
    struct by_state
    {
      /// Default constructor.
      by_state ();

      /// The symbol type as needed by the constructor.
      typedef state_type kind_type;

      /// Constructor.
      by_state (kind_type s);

      /// Copy constructor.
      by_state (const by_state& other);

      /// Record that this symbol is empty.
      void clear ();

      /// Steal the symbol type from \a that.
      void move (by_state& that);

      /// The (internal) type number (corresponding to \a state).
      /// \a empty_symbol when empty.
      symbol_number_type type_get () const;

      /// The state number used to denote an empty symbol.
      enum { empty_state = -1 };

      /// The state.
      /// \a empty when empty.
      state_type state;
    };

    /// "Internal" symbol: element of the stack.
    struct stack_symbol_type : basic_symbol<by_state>
    {
      /// Superclass.
      typedef basic_symbol<by_state> super_type;
      /// Construct an empty symbol.
      stack_symbol_type ();
      /// Steal the contents from \a sym to build this.
      stack_symbol_type (state_type s, symbol_type& sym);
      /// Assignment, needed by push_back.
      stack_symbol_type& operator= (const stack_symbol_type& that);
    };

    /// Stack type.
    typedef stack<stack_symbol_type> stack_type;

    /// The stack.
    stack_type yystack_;

    /// Push a new state on the stack.
    /// \param m    a debug message to display
    ///             if null, no trace is output.
    /// \param s    the symbol
    /// \warning the contents of \a s.value is stolen.
    void yypush_ (const char* m, stack_symbol_type& s);

    /// Push a new look ahead token on the state on the stack.
    /// \param m    a debug message to display
    ///             if null, no trace is output.
    /// \param s    the state
    /// \param sym  the symbol (for its value and location).
    /// \warning the contents of \a s.value is stolen.
    void yypush_ (const char* m, state_type s, symbol_type& sym);

    /// Pop \a n symbols the three stacks.
    void yypop_ (unsigned int n = 1);

    /// Constants.
    enum
    {
      yyeof_ = 0,
      yylast_ = 4006,     ///< Last index in yytable_.
      yynnts_ = 227,  ///< Number of nonterminal symbols.
      yyfinal_ = 6, ///< Termination state number.
      yyterror_ = 1,
      yyerrcode_ = 256,
      yyntokens_ = 152  ///< Number of tokens.
    };


    // User arguments.
    Context& context;
  };

  // Symbol number corresponding to token number t.
  inline
  asn1_parser::token_number_type
  asn1_parser::yytranslate_ (token_type t)
  {
    static
    const token_number_type
    translate_table[] =
    {
     0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151
    };
    const unsigned int user_token_number_max_ = 406;
    const token_number_type undef_token_ = 2;

    if (static_cast<int>(t) <= yyeof_)
      return yyeof_;
    else if (static_cast<unsigned int> (t) <= user_token_number_max_)
      return translate_table[t];
    else
      return undef_token_;
  }

  inline
  asn1_parser::syntax_error::syntax_error (const location_type& l, const std::string& m)
    : std::runtime_error (m)
    , location (l)
  {}

  // basic_symbol.
  template <typename Base>
  inline
  asn1_parser::basic_symbol<Base>::basic_symbol ()
    : value ()
  {}

  template <typename Base>
  inline
  asn1_parser::basic_symbol<Base>::basic_symbol (const basic_symbol& other)
    : Base (other)
    , value ()
    , location (other.location)
  {
      switch (other.type_get ())
    {
      case 159: // ObjectClassAssignment
      case 198: // ObjectSetAssignment
      case 202: // ParameterizedAssignment
      case 203: // ParameterizedTypeAssignment
      case 204: // ParameterizedValueAssignment
      case 205: // ParameterizedValueSetTypeAssignment
      case 206: // ParameterizedObjectClassAssignment
      case 207: // ParameterizedObjectAssignment
      case 252: // Assignment
      case 261: // TypeAssignment
      case 262: // ValueAssignment
      case 263: // ValueSetTypeAssignment
        value.copy< Assignment > (other.value);
        break;

      case 284: // BitStringType
        value.copy< BitStringType > (other.value);
        break;

      case 273: // BooleanType
        value.copy< BooleanType > (other.value);
        break;

      case 265: // BuiltinType
        value.copy< BuiltinType > (other.value);
        break;

      case 329: // CharacterStringType
        value.copy< CharacterStringType > (other.value);
        break;

      case 296: // ChoiceType
        value.copy< ChoiceType > (other.value);
        break;

      case 306: // Class
        value.copy< Class > (other.value);
        break;

      case 292: // ComponentType
        value.copy< ComponentType > (other.value);
        break;

      case 290: // ComponentTypeLists
      case 291: // ComponentTypeList
        value.copy< ComponentTypeList > (other.value);
        break;

      case 327: // DateTimeType
        value.copy< DateTimeType > (other.value);
        break;

      case 325: // DateType
        value.copy< DateType > (other.value);
        break;

      case 253: // DefinedType
      case 255: // ParameterizedType
      case 259: // ExternalTypeReference
        value.copy< DefinedType > (other.value);
        break;

      case 254: // DefinedValue
        value.copy< DefinedValue > (other.value);
        break;

      case 328: // DurationType
        value.copy< DurationType > (other.value);
        break;

      case 321: // EmbeddedPDVType
        value.copy< EmbeddedPDVType > (other.value);
        break;

      case 279: // EnumeratedType
      case 280: // Enumerations
      case 281: // Enumeration
        value.copy< EnumeratedType > (other.value);
        break;

      case 282: // EnumerationItem
        value.copy< EnumerationValue > (other.value);
        break;

      case 322: // ExternalType
        value.copy< ExternalType > (other.value);
        break;

      case 315: // IRIType
        value.copy< IRIType > (other.value);
        break;

      case 245: // SymbolsFromModule
        value.copy< Import > (other.value);
        break;

      case 215: // InstanceOfType
        value.copy< InstanceOfType > (other.value);
        break;

      case 275: // IntegerType
        value.copy< IntegerType > (other.value);
        break;

      case 239: // ModuleBody
        value.copy< Module > (other.value);
        break;

      case 277: // NamedNumber
        value.copy< NamedNumber > (other.value);
        break;

      case 266: // NamedType
        value.copy< NamedType > (other.value);
        break;

      case 288: // NullType
        value.copy< NullType > (other.value);
        break;

      case 160: // ObjectClass
      case 161: // ObjectClassDefn
        value.copy< ObjectClassAssignment > (other.value);
        break;

      case 201: // ObjectClassFieldType
        value.copy< ObjectClassFieldType > (other.value);
        break;

      case 310: // ObjIdComponents
      case 311: // NameForm
      case 312: // NumberForm
      case 313: // NameAndNumberForm
        value.copy< ObjectIdComponentValue > (other.value);
        break;

      case 307: // ObjectIdentifierType
        value.copy< ObjectIdentifierType > (other.value);
        break;

      case 287: // OctetStringType
        value.copy< OctetStringType > (other.value);
        break;

      case 301: // PrefixedType
        value.copy< PrefixedType > (other.value);
        break;

      case 283: // RealType
        value.copy< RealType > (other.value);
        break;

      case 320: // RelativeIRIType
        value.copy< RelativeIRIType > (other.value);
        break;

      case 314: // RelativeOIDType
        value.copy< RelativeOIDType > (other.value);
        break;

      case 293: // SequenceOfType
        value.copy< SequenceOfType > (other.value);
        break;

      case 289: // SequenceType
        value.copy< SequenceType > (other.value);
        break;

      case 295: // SetOfType
        value.copy< SetOfType > (other.value);
        break;

      case 294: // SetType
        value.copy< SetType > (other.value);
        break;

      case 303: // Tag
        value.copy< Tag > (other.value);
        break;

      case 302: // TaggedType
        value.copy< TaggedType > (other.value);
        break;

      case 237: // TagDefault
        value.copy< TaggingMode > (other.value);
        break;

      case 326: // TimeOfDayType
        value.copy< TimeOfDayType > (other.value);
        break;

      case 323: // TimeType
        value.copy< TimeType > (other.value);
        break;

      case 258: // ActualParameter
      case 264: // Type
      case 332: // ConstrainedType
      case 333: // TypeWithConstraint
        value.copy< Type > (other.value);
        break;

      case 267: // ValueWithoutTypeIdentifier
      case 268: // Value
      case 350: // SingleValue
        value.copy< Value > (other.value);
        break;

      case 5: // realnumber
        value.copy< double > (other.value);
        break;

      case 305: // ClassNumber
        value.copy< int > (other.value);
        break;

      case 4: // number
      case 278: // SignedNumber
        value.copy< long long > (other.value);
        break;

      case 208: // ParameterList
      case 209: // ParameterSeries
        value.copy< std::set<std::string> > (other.value);
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 21: // objectreference
      case 23: // typefieldreference
      case 24: // valuefieldreference
      case 148: // GENERIC_IDENTIFIER_UPPERCASE
      case 149: // GENERIC_IDENTIFIER_LOWERCASE
      case 158: // UsefulObjectClassReference
      case 164: // FieldName
      case 210: // Parameter
      case 216: // SimpleDefinedType
      case 228: // ModuleIdentifier
      case 246: // GlobalModuleReference
      case 249: // Symbol
      case 250: // Reference
      case 373: // typereference
      case 374: // identifier
      case 375: // valuereference
      case 376: // modulereference
      case 377: // objectclassreference
      case 378: // word
        value.copy< std::string > (other.value);
        break;

      case 251: // AssignmentList
        value.copy< std::vector<Assignment> > (other.value);
        break;

      case 162: // FieldSpecList
      case 163: // FieldSpec
      case 166: // TypeFieldSpec
      case 170: // FixedTypeValueFieldSpec
        value.copy< std::vector<ClassField> > (other.value);
        break;

      case 240: // Exports
        value.copy< std::vector<Export> > (other.value);
        break;

      case 242: // Imports
      case 243: // SymbolsImported
      case 244: // SymbolsFromModuleList
        value.copy< std::vector<Import> > (other.value);
        break;

      case 276: // NamedNumberList
        value.copy< std::vector<NamedNumber> > (other.value);
        break;

      case 297: // AlternativeTypeLists
      case 298: // RootAlternativeTypeList
      case 299: // AlternativeTypeList
        value.copy< std::vector<NamedType> > (other.value);
        break;

      case 308: // ObjectIdentifierValue
      case 309: // ObjIdComponentsList
        value.copy< std::vector<ObjectIdComponentValue> > (other.value);
        break;

      case 257: // ActualParameterList
        value.copy< std::vector<Type> > (other.value);
        break;

      case 272: // SequenceOfValues
        value.copy< std::vector<Value> > (other.value);
        break;

      case 165: // FieldNameList
      case 167: // OneOrManyTypeFieldReference
      case 248: // SymbolList
        value.copy< std::vector<std::string> > (other.value);
        break;

      default:
        break;
    }

  }


  template <typename Base>
  inline
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const semantic_type& v, const location_type& l)
    : Base (t)
    , value ()
    , location (l)
  {
    (void) v;
      switch (this->type_get ())
    {
      case 159: // ObjectClassAssignment
      case 198: // ObjectSetAssignment
      case 202: // ParameterizedAssignment
      case 203: // ParameterizedTypeAssignment
      case 204: // ParameterizedValueAssignment
      case 205: // ParameterizedValueSetTypeAssignment
      case 206: // ParameterizedObjectClassAssignment
      case 207: // ParameterizedObjectAssignment
      case 252: // Assignment
      case 261: // TypeAssignment
      case 262: // ValueAssignment
      case 263: // ValueSetTypeAssignment
        value.copy< Assignment > (v);
        break;

      case 284: // BitStringType
        value.copy< BitStringType > (v);
        break;

      case 273: // BooleanType
        value.copy< BooleanType > (v);
        break;

      case 265: // BuiltinType
        value.copy< BuiltinType > (v);
        break;

      case 329: // CharacterStringType
        value.copy< CharacterStringType > (v);
        break;

      case 296: // ChoiceType
        value.copy< ChoiceType > (v);
        break;

      case 306: // Class
        value.copy< Class > (v);
        break;

      case 292: // ComponentType
        value.copy< ComponentType > (v);
        break;

      case 290: // ComponentTypeLists
      case 291: // ComponentTypeList
        value.copy< ComponentTypeList > (v);
        break;

      case 327: // DateTimeType
        value.copy< DateTimeType > (v);
        break;

      case 325: // DateType
        value.copy< DateType > (v);
        break;

      case 253: // DefinedType
      case 255: // ParameterizedType
      case 259: // ExternalTypeReference
        value.copy< DefinedType > (v);
        break;

      case 254: // DefinedValue
        value.copy< DefinedValue > (v);
        break;

      case 328: // DurationType
        value.copy< DurationType > (v);
        break;

      case 321: // EmbeddedPDVType
        value.copy< EmbeddedPDVType > (v);
        break;

      case 279: // EnumeratedType
      case 280: // Enumerations
      case 281: // Enumeration
        value.copy< EnumeratedType > (v);
        break;

      case 282: // EnumerationItem
        value.copy< EnumerationValue > (v);
        break;

      case 322: // ExternalType
        value.copy< ExternalType > (v);
        break;

      case 315: // IRIType
        value.copy< IRIType > (v);
        break;

      case 245: // SymbolsFromModule
        value.copy< Import > (v);
        break;

      case 215: // InstanceOfType
        value.copy< InstanceOfType > (v);
        break;

      case 275: // IntegerType
        value.copy< IntegerType > (v);
        break;

      case 239: // ModuleBody
        value.copy< Module > (v);
        break;

      case 277: // NamedNumber
        value.copy< NamedNumber > (v);
        break;

      case 266: // NamedType
        value.copy< NamedType > (v);
        break;

      case 288: // NullType
        value.copy< NullType > (v);
        break;

      case 160: // ObjectClass
      case 161: // ObjectClassDefn
        value.copy< ObjectClassAssignment > (v);
        break;

      case 201: // ObjectClassFieldType
        value.copy< ObjectClassFieldType > (v);
        break;

      case 310: // ObjIdComponents
      case 311: // NameForm
      case 312: // NumberForm
      case 313: // NameAndNumberForm
        value.copy< ObjectIdComponentValue > (v);
        break;

      case 307: // ObjectIdentifierType
        value.copy< ObjectIdentifierType > (v);
        break;

      case 287: // OctetStringType
        value.copy< OctetStringType > (v);
        break;

      case 301: // PrefixedType
        value.copy< PrefixedType > (v);
        break;

      case 283: // RealType
        value.copy< RealType > (v);
        break;

      case 320: // RelativeIRIType
        value.copy< RelativeIRIType > (v);
        break;

      case 314: // RelativeOIDType
        value.copy< RelativeOIDType > (v);
        break;

      case 293: // SequenceOfType
        value.copy< SequenceOfType > (v);
        break;

      case 289: // SequenceType
        value.copy< SequenceType > (v);
        break;

      case 295: // SetOfType
        value.copy< SetOfType > (v);
        break;

      case 294: // SetType
        value.copy< SetType > (v);
        break;

      case 303: // Tag
        value.copy< Tag > (v);
        break;

      case 302: // TaggedType
        value.copy< TaggedType > (v);
        break;

      case 237: // TagDefault
        value.copy< TaggingMode > (v);
        break;

      case 326: // TimeOfDayType
        value.copy< TimeOfDayType > (v);
        break;

      case 323: // TimeType
        value.copy< TimeType > (v);
        break;

      case 258: // ActualParameter
      case 264: // Type
      case 332: // ConstrainedType
      case 333: // TypeWithConstraint
        value.copy< Type > (v);
        break;

      case 267: // ValueWithoutTypeIdentifier
      case 268: // Value
      case 350: // SingleValue
        value.copy< Value > (v);
        break;

      case 5: // realnumber
        value.copy< double > (v);
        break;

      case 305: // ClassNumber
        value.copy< int > (v);
        break;

      case 4: // number
      case 278: // SignedNumber
        value.copy< long long > (v);
        break;

      case 208: // ParameterList
      case 209: // ParameterSeries
        value.copy< std::set<std::string> > (v);
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 21: // objectreference
      case 23: // typefieldreference
      case 24: // valuefieldreference
      case 148: // GENERIC_IDENTIFIER_UPPERCASE
      case 149: // GENERIC_IDENTIFIER_LOWERCASE
      case 158: // UsefulObjectClassReference
      case 164: // FieldName
      case 210: // Parameter
      case 216: // SimpleDefinedType
      case 228: // ModuleIdentifier
      case 246: // GlobalModuleReference
      case 249: // Symbol
      case 250: // Reference
      case 373: // typereference
      case 374: // identifier
      case 375: // valuereference
      case 376: // modulereference
      case 377: // objectclassreference
      case 378: // word
        value.copy< std::string > (v);
        break;

      case 251: // AssignmentList
        value.copy< std::vector<Assignment> > (v);
        break;

      case 162: // FieldSpecList
      case 163: // FieldSpec
      case 166: // TypeFieldSpec
      case 170: // FixedTypeValueFieldSpec
        value.copy< std::vector<ClassField> > (v);
        break;

      case 240: // Exports
        value.copy< std::vector<Export> > (v);
        break;

      case 242: // Imports
      case 243: // SymbolsImported
      case 244: // SymbolsFromModuleList
        value.copy< std::vector<Import> > (v);
        break;

      case 276: // NamedNumberList
        value.copy< std::vector<NamedNumber> > (v);
        break;

      case 297: // AlternativeTypeLists
      case 298: // RootAlternativeTypeList
      case 299: // AlternativeTypeList
        value.copy< std::vector<NamedType> > (v);
        break;

      case 308: // ObjectIdentifierValue
      case 309: // ObjIdComponentsList
        value.copy< std::vector<ObjectIdComponentValue> > (v);
        break;

      case 257: // ActualParameterList
        value.copy< std::vector<Type> > (v);
        break;

      case 272: // SequenceOfValues
        value.copy< std::vector<Value> > (v);
        break;

      case 165: // FieldNameList
      case 167: // OneOrManyTypeFieldReference
      case 248: // SymbolList
        value.copy< std::vector<std::string> > (v);
        break;

      default:
        break;
    }
}


  // Implementation of basic_symbol constructor for each type.

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const location_type& l)
    : Base (t)
    , value ()
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Assignment v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const BitStringType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const BooleanType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const BuiltinType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const CharacterStringType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ChoiceType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Class v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ComponentType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ComponentTypeList v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const DateTimeType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const DateType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const DefinedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const DefinedValue v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const DurationType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const EmbeddedPDVType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const EnumeratedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const EnumerationValue v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ExternalType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const IRIType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Import v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const InstanceOfType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const IntegerType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Module v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const NamedNumber v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const NamedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const NullType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ObjectClassAssignment v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ObjectClassFieldType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ObjectIdComponentValue v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ObjectIdentifierType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const OctetStringType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const PrefixedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const RealType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const RelativeIRIType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const RelativeOIDType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const SequenceOfType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const SequenceType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const SetOfType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const SetType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Tag v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const TaggedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const TaggingMode v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const TimeOfDayType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const TimeType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Type v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Value v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const double v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const int v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const long long v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::set<std::string> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::string v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<Assignment> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<ClassField> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<Export> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<Import> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<NamedNumber> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<NamedType> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<ObjectIdComponentValue> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<Type> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<Value> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<std::string> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}


  template <typename Base>
  inline
  asn1_parser::basic_symbol<Base>::~basic_symbol ()
  {
    clear ();
  }

  template <typename Base>
  inline
  void
  asn1_parser::basic_symbol<Base>::clear ()
  {
    // User destructor.
    symbol_number_type yytype = this->type_get ();
    basic_symbol<Base>& yysym = *this;
    (void) yysym;
    switch (yytype)
    {
   default:
      break;
    }

    // Type destructor.
    switch (yytype)
    {
      case 159: // ObjectClassAssignment
      case 198: // ObjectSetAssignment
      case 202: // ParameterizedAssignment
      case 203: // ParameterizedTypeAssignment
      case 204: // ParameterizedValueAssignment
      case 205: // ParameterizedValueSetTypeAssignment
      case 206: // ParameterizedObjectClassAssignment
      case 207: // ParameterizedObjectAssignment
      case 252: // Assignment
      case 261: // TypeAssignment
      case 262: // ValueAssignment
      case 263: // ValueSetTypeAssignment
        value.template destroy< Assignment > ();
        break;

      case 284: // BitStringType
        value.template destroy< BitStringType > ();
        break;

      case 273: // BooleanType
        value.template destroy< BooleanType > ();
        break;

      case 265: // BuiltinType
        value.template destroy< BuiltinType > ();
        break;

      case 329: // CharacterStringType
        value.template destroy< CharacterStringType > ();
        break;

      case 296: // ChoiceType
        value.template destroy< ChoiceType > ();
        break;

      case 306: // Class
        value.template destroy< Class > ();
        break;

      case 292: // ComponentType
        value.template destroy< ComponentType > ();
        break;

      case 290: // ComponentTypeLists
      case 291: // ComponentTypeList
        value.template destroy< ComponentTypeList > ();
        break;

      case 327: // DateTimeType
        value.template destroy< DateTimeType > ();
        break;

      case 325: // DateType
        value.template destroy< DateType > ();
        break;

      case 253: // DefinedType
      case 255: // ParameterizedType
      case 259: // ExternalTypeReference
        value.template destroy< DefinedType > ();
        break;

      case 254: // DefinedValue
        value.template destroy< DefinedValue > ();
        break;

      case 328: // DurationType
        value.template destroy< DurationType > ();
        break;

      case 321: // EmbeddedPDVType
        value.template destroy< EmbeddedPDVType > ();
        break;

      case 279: // EnumeratedType
      case 280: // Enumerations
      case 281: // Enumeration
        value.template destroy< EnumeratedType > ();
        break;

      case 282: // EnumerationItem
        value.template destroy< EnumerationValue > ();
        break;

      case 322: // ExternalType
        value.template destroy< ExternalType > ();
        break;

      case 315: // IRIType
        value.template destroy< IRIType > ();
        break;

      case 245: // SymbolsFromModule
        value.template destroy< Import > ();
        break;

      case 215: // InstanceOfType
        value.template destroy< InstanceOfType > ();
        break;

      case 275: // IntegerType
        value.template destroy< IntegerType > ();
        break;

      case 239: // ModuleBody
        value.template destroy< Module > ();
        break;

      case 277: // NamedNumber
        value.template destroy< NamedNumber > ();
        break;

      case 266: // NamedType
        value.template destroy< NamedType > ();
        break;

      case 288: // NullType
        value.template destroy< NullType > ();
        break;

      case 160: // ObjectClass
      case 161: // ObjectClassDefn
        value.template destroy< ObjectClassAssignment > ();
        break;

      case 201: // ObjectClassFieldType
        value.template destroy< ObjectClassFieldType > ();
        break;

      case 310: // ObjIdComponents
      case 311: // NameForm
      case 312: // NumberForm
      case 313: // NameAndNumberForm
        value.template destroy< ObjectIdComponentValue > ();
        break;

      case 307: // ObjectIdentifierType
        value.template destroy< ObjectIdentifierType > ();
        break;

      case 287: // OctetStringType
        value.template destroy< OctetStringType > ();
        break;

      case 301: // PrefixedType
        value.template destroy< PrefixedType > ();
        break;

      case 283: // RealType
        value.template destroy< RealType > ();
        break;

      case 320: // RelativeIRIType
        value.template destroy< RelativeIRIType > ();
        break;

      case 314: // RelativeOIDType
        value.template destroy< RelativeOIDType > ();
        break;

      case 293: // SequenceOfType
        value.template destroy< SequenceOfType > ();
        break;

      case 289: // SequenceType
        value.template destroy< SequenceType > ();
        break;

      case 295: // SetOfType
        value.template destroy< SetOfType > ();
        break;

      case 294: // SetType
        value.template destroy< SetType > ();
        break;

      case 303: // Tag
        value.template destroy< Tag > ();
        break;

      case 302: // TaggedType
        value.template destroy< TaggedType > ();
        break;

      case 237: // TagDefault
        value.template destroy< TaggingMode > ();
        break;

      case 326: // TimeOfDayType
        value.template destroy< TimeOfDayType > ();
        break;

      case 323: // TimeType
        value.template destroy< TimeType > ();
        break;

      case 258: // ActualParameter
      case 264: // Type
      case 332: // ConstrainedType
      case 333: // TypeWithConstraint
        value.template destroy< Type > ();
        break;

      case 267: // ValueWithoutTypeIdentifier
      case 268: // Value
      case 350: // SingleValue
        value.template destroy< Value > ();
        break;

      case 5: // realnumber
        value.template destroy< double > ();
        break;

      case 305: // ClassNumber
        value.template destroy< int > ();
        break;

      case 4: // number
      case 278: // SignedNumber
        value.template destroy< long long > ();
        break;

      case 208: // ParameterList
      case 209: // ParameterSeries
        value.template destroy< std::set<std::string> > ();
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 21: // objectreference
      case 23: // typefieldreference
      case 24: // valuefieldreference
      case 148: // GENERIC_IDENTIFIER_UPPERCASE
      case 149: // GENERIC_IDENTIFIER_LOWERCASE
      case 158: // UsefulObjectClassReference
      case 164: // FieldName
      case 210: // Parameter
      case 216: // SimpleDefinedType
      case 228: // ModuleIdentifier
      case 246: // GlobalModuleReference
      case 249: // Symbol
      case 250: // Reference
      case 373: // typereference
      case 374: // identifier
      case 375: // valuereference
      case 376: // modulereference
      case 377: // objectclassreference
      case 378: // word
        value.template destroy< std::string > ();
        break;

      case 251: // AssignmentList
        value.template destroy< std::vector<Assignment> > ();
        break;

      case 162: // FieldSpecList
      case 163: // FieldSpec
      case 166: // TypeFieldSpec
      case 170: // FixedTypeValueFieldSpec
        value.template destroy< std::vector<ClassField> > ();
        break;

      case 240: // Exports
        value.template destroy< std::vector<Export> > ();
        break;

      case 242: // Imports
      case 243: // SymbolsImported
      case 244: // SymbolsFromModuleList
        value.template destroy< std::vector<Import> > ();
        break;

      case 276: // NamedNumberList
        value.template destroy< std::vector<NamedNumber> > ();
        break;

      case 297: // AlternativeTypeLists
      case 298: // RootAlternativeTypeList
      case 299: // AlternativeTypeList
        value.template destroy< std::vector<NamedType> > ();
        break;

      case 308: // ObjectIdentifierValue
      case 309: // ObjIdComponentsList
        value.template destroy< std::vector<ObjectIdComponentValue> > ();
        break;

      case 257: // ActualParameterList
        value.template destroy< std::vector<Type> > ();
        break;

      case 272: // SequenceOfValues
        value.template destroy< std::vector<Value> > ();
        break;

      case 165: // FieldNameList
      case 167: // OneOrManyTypeFieldReference
      case 248: // SymbolList
        value.template destroy< std::vector<std::string> > ();
        break;

      default:
        break;
    }

    Base::clear ();
  }

  template <typename Base>
  inline
  bool
  asn1_parser::basic_symbol<Base>::empty () const
  {
    return Base::type_get () == empty_symbol;
  }

  template <typename Base>
  inline
  void
  asn1_parser::basic_symbol<Base>::move (basic_symbol& s)
  {
    super_type::move(s);
      switch (this->type_get ())
    {
      case 159: // ObjectClassAssignment
      case 198: // ObjectSetAssignment
      case 202: // ParameterizedAssignment
      case 203: // ParameterizedTypeAssignment
      case 204: // ParameterizedValueAssignment
      case 205: // ParameterizedValueSetTypeAssignment
      case 206: // ParameterizedObjectClassAssignment
      case 207: // ParameterizedObjectAssignment
      case 252: // Assignment
      case 261: // TypeAssignment
      case 262: // ValueAssignment
      case 263: // ValueSetTypeAssignment
        value.move< Assignment > (s.value);
        break;

      case 284: // BitStringType
        value.move< BitStringType > (s.value);
        break;

      case 273: // BooleanType
        value.move< BooleanType > (s.value);
        break;

      case 265: // BuiltinType
        value.move< BuiltinType > (s.value);
        break;

      case 329: // CharacterStringType
        value.move< CharacterStringType > (s.value);
        break;

      case 296: // ChoiceType
        value.move< ChoiceType > (s.value);
        break;

      case 306: // Class
        value.move< Class > (s.value);
        break;

      case 292: // ComponentType
        value.move< ComponentType > (s.value);
        break;

      case 290: // ComponentTypeLists
      case 291: // ComponentTypeList
        value.move< ComponentTypeList > (s.value);
        break;

      case 327: // DateTimeType
        value.move< DateTimeType > (s.value);
        break;

      case 325: // DateType
        value.move< DateType > (s.value);
        break;

      case 253: // DefinedType
      case 255: // ParameterizedType
      case 259: // ExternalTypeReference
        value.move< DefinedType > (s.value);
        break;

      case 254: // DefinedValue
        value.move< DefinedValue > (s.value);
        break;

      case 328: // DurationType
        value.move< DurationType > (s.value);
        break;

      case 321: // EmbeddedPDVType
        value.move< EmbeddedPDVType > (s.value);
        break;

      case 279: // EnumeratedType
      case 280: // Enumerations
      case 281: // Enumeration
        value.move< EnumeratedType > (s.value);
        break;

      case 282: // EnumerationItem
        value.move< EnumerationValue > (s.value);
        break;

      case 322: // ExternalType
        value.move< ExternalType > (s.value);
        break;

      case 315: // IRIType
        value.move< IRIType > (s.value);
        break;

      case 245: // SymbolsFromModule
        value.move< Import > (s.value);
        break;

      case 215: // InstanceOfType
        value.move< InstanceOfType > (s.value);
        break;

      case 275: // IntegerType
        value.move< IntegerType > (s.value);
        break;

      case 239: // ModuleBody
        value.move< Module > (s.value);
        break;

      case 277: // NamedNumber
        value.move< NamedNumber > (s.value);
        break;

      case 266: // NamedType
        value.move< NamedType > (s.value);
        break;

      case 288: // NullType
        value.move< NullType > (s.value);
        break;

      case 160: // ObjectClass
      case 161: // ObjectClassDefn
        value.move< ObjectClassAssignment > (s.value);
        break;

      case 201: // ObjectClassFieldType
        value.move< ObjectClassFieldType > (s.value);
        break;

      case 310: // ObjIdComponents
      case 311: // NameForm
      case 312: // NumberForm
      case 313: // NameAndNumberForm
        value.move< ObjectIdComponentValue > (s.value);
        break;

      case 307: // ObjectIdentifierType
        value.move< ObjectIdentifierType > (s.value);
        break;

      case 287: // OctetStringType
        value.move< OctetStringType > (s.value);
        break;

      case 301: // PrefixedType
        value.move< PrefixedType > (s.value);
        break;

      case 283: // RealType
        value.move< RealType > (s.value);
        break;

      case 320: // RelativeIRIType
        value.move< RelativeIRIType > (s.value);
        break;

      case 314: // RelativeOIDType
        value.move< RelativeOIDType > (s.value);
        break;

      case 293: // SequenceOfType
        value.move< SequenceOfType > (s.value);
        break;

      case 289: // SequenceType
        value.move< SequenceType > (s.value);
        break;

      case 295: // SetOfType
        value.move< SetOfType > (s.value);
        break;

      case 294: // SetType
        value.move< SetType > (s.value);
        break;

      case 303: // Tag
        value.move< Tag > (s.value);
        break;

      case 302: // TaggedType
        value.move< TaggedType > (s.value);
        break;

      case 237: // TagDefault
        value.move< TaggingMode > (s.value);
        break;

      case 326: // TimeOfDayType
        value.move< TimeOfDayType > (s.value);
        break;

      case 323: // TimeType
        value.move< TimeType > (s.value);
        break;

      case 258: // ActualParameter
      case 264: // Type
      case 332: // ConstrainedType
      case 333: // TypeWithConstraint
        value.move< Type > (s.value);
        break;

      case 267: // ValueWithoutTypeIdentifier
      case 268: // Value
      case 350: // SingleValue
        value.move< Value > (s.value);
        break;

      case 5: // realnumber
        value.move< double > (s.value);
        break;

      case 305: // ClassNumber
        value.move< int > (s.value);
        break;

      case 4: // number
      case 278: // SignedNumber
        value.move< long long > (s.value);
        break;

      case 208: // ParameterList
      case 209: // ParameterSeries
        value.move< std::set<std::string> > (s.value);
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 21: // objectreference
      case 23: // typefieldreference
      case 24: // valuefieldreference
      case 148: // GENERIC_IDENTIFIER_UPPERCASE
      case 149: // GENERIC_IDENTIFIER_LOWERCASE
      case 158: // UsefulObjectClassReference
      case 164: // FieldName
      case 210: // Parameter
      case 216: // SimpleDefinedType
      case 228: // ModuleIdentifier
      case 246: // GlobalModuleReference
      case 249: // Symbol
      case 250: // Reference
      case 373: // typereference
      case 374: // identifier
      case 375: // valuereference
      case 376: // modulereference
      case 377: // objectclassreference
      case 378: // word
        value.move< std::string > (s.value);
        break;

      case 251: // AssignmentList
        value.move< std::vector<Assignment> > (s.value);
        break;

      case 162: // FieldSpecList
      case 163: // FieldSpec
      case 166: // TypeFieldSpec
      case 170: // FixedTypeValueFieldSpec
        value.move< std::vector<ClassField> > (s.value);
        break;

      case 240: // Exports
        value.move< std::vector<Export> > (s.value);
        break;

      case 242: // Imports
      case 243: // SymbolsImported
      case 244: // SymbolsFromModuleList
        value.move< std::vector<Import> > (s.value);
        break;

      case 276: // NamedNumberList
        value.move< std::vector<NamedNumber> > (s.value);
        break;

      case 297: // AlternativeTypeLists
      case 298: // RootAlternativeTypeList
      case 299: // AlternativeTypeList
        value.move< std::vector<NamedType> > (s.value);
        break;

      case 308: // ObjectIdentifierValue
      case 309: // ObjIdComponentsList
        value.move< std::vector<ObjectIdComponentValue> > (s.value);
        break;

      case 257: // ActualParameterList
        value.move< std::vector<Type> > (s.value);
        break;

      case 272: // SequenceOfValues
        value.move< std::vector<Value> > (s.value);
        break;

      case 165: // FieldNameList
      case 167: // OneOrManyTypeFieldReference
      case 248: // SymbolList
        value.move< std::vector<std::string> > (s.value);
        break;

      default:
        break;
    }

    location = s.location;
  }

  // by_type.
  inline
  asn1_parser::by_type::by_type ()
    : type (empty_symbol)
  {}

  inline
  asn1_parser::by_type::by_type (const by_type& other)
    : type (other.type)
  {}

  inline
  asn1_parser::by_type::by_type (token_type t)
    : type (yytranslate_ (t))
  {}

  inline
  void
  asn1_parser::by_type::clear ()
  {
    type = empty_symbol;
  }

  inline
  void
  asn1_parser::by_type::move (by_type& that)
  {
    type = that.type;
    that.clear ();
  }

  inline
  int
  asn1_parser::by_type::type_get () const
  {
    return type;
  }

  inline
  asn1_parser::token_type
  asn1_parser::by_type::token () const
  {
    // YYTOKNUM[NUM] -- (External) token number corresponding to the
    // (internal) symbol number NUM (which must be that of a token).  */
    static
    const unsigned short int
    yytoken_number_[] =
    {
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406
    };
    return static_cast<token_type> (yytoken_number_[type]);
  }
  // Implementation of make_symbol for each symbol type.
  asn1_parser::symbol_type
  asn1_parser::make_END_OF_FILE (const location_type& l)
  {
    return symbol_type (token::END_OF_FILE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_comment (const location_type& l)
  {
    return symbol_type (token::comment, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_number (const long long& v, const location_type& l)
  {
    return symbol_type (token::number, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_realnumber (const double& v, const location_type& l)
  {
    return symbol_type (token::realnumber, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_bstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::bstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmlbstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::xmlbstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_hstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::hstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmlhstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::xmlhstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_cstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::cstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmlcstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::xmlcstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_simplestring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::simplestring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmltstring (const std::string& v, const location_type& l)
  {
    return symbol_type (token::xmltstring, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_psname (const location_type& l)
  {
    return symbol_type (token::psname, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_encodingreference (const location_type& l)
  {
    return symbol_type (token::encodingreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_integerUnicodeLabel (const location_type& l)
  {
    return symbol_type (token::integerUnicodeLabel, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_tstring (const location_type& l)
  {
    return symbol_type (token::tstring, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_objectreference (const std::string& v, const location_type& l)
  {
    return symbol_type (token::objectreference, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_objectsetreference (const location_type& l)
  {
    return symbol_type (token::objectsetreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_typefieldreference (const std::string& v, const location_type& l)
  {
    return symbol_type (token::typefieldreference, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_valuefieldreference (const std::string& v, const location_type& l)
  {
    return symbol_type (token::valuefieldreference, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_valuesetfieldreference (const location_type& l)
  {
    return symbol_type (token::valuesetfieldreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_objectfieldreference (const location_type& l)
  {
    return symbol_type (token::objectfieldreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_objectsetfieldreference (const location_type& l)
  {
    return symbol_type (token::objectsetfieldreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ABSENT (const location_type& l)
  {
    return symbol_type (token::ABSENT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ABSTRACT_SYNTAX (const location_type& l)
  {
    return symbol_type (token::ABSTRACT_SYNTAX, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ALL (const location_type& l)
  {
    return symbol_type (token::ALL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ANY (const location_type& l)
  {
    return symbol_type (token::ANY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_APPLICATION (const location_type& l)
  {
    return symbol_type (token::APPLICATION, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ASN_NULL (const location_type& l)
  {
    return symbol_type (token::ASN_NULL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_AUTOMATIC (const location_type& l)
  {
    return symbol_type (token::AUTOMATIC, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BEGIN (const location_type& l)
  {
    return symbol_type (token::BEGIN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BIT (const location_type& l)
  {
    return symbol_type (token::BIT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BMPString (const location_type& l)
  {
    return symbol_type (token::BMPString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BOOLEAN (const location_type& l)
  {
    return symbol_type (token::BOOLEAN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BY (const location_type& l)
  {
    return symbol_type (token::BY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CHARACTER (const location_type& l)
  {
    return symbol_type (token::CHARACTER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CHOICE (const location_type& l)
  {
    return symbol_type (token::CHOICE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CLASS (const location_type& l)
  {
    return symbol_type (token::CLASS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_COMPONENT (const location_type& l)
  {
    return symbol_type (token::COMPONENT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_COMPONENTS (const location_type& l)
  {
    return symbol_type (token::COMPONENTS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CONSTRAINED (const location_type& l)
  {
    return symbol_type (token::CONSTRAINED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CONTAINING (const location_type& l)
  {
    return symbol_type (token::CONTAINING, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DATE (const location_type& l)
  {
    return symbol_type (token::DATE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DATE_TIME (const location_type& l)
  {
    return symbol_type (token::DATE_TIME, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DEFAULT (const location_type& l)
  {
    return symbol_type (token::DEFAULT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DEFINITIONS (const location_type& l)
  {
    return symbol_type (token::DEFINITIONS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DURATION (const location_type& l)
  {
    return symbol_type (token::DURATION, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EMBEDDED (const location_type& l)
  {
    return symbol_type (token::EMBEDDED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ENCODED (const location_type& l)
  {
    return symbol_type (token::ENCODED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ENCODING_CONTROL (const location_type& l)
  {
    return symbol_type (token::ENCODING_CONTROL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_END (const location_type& l)
  {
    return symbol_type (token::END, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ENUMERATED (const location_type& l)
  {
    return symbol_type (token::ENUMERATED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXCEPT (const location_type& l)
  {
    return symbol_type (token::EXCEPT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXPLICIT (const location_type& l)
  {
    return symbol_type (token::EXPLICIT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXPORTS (const location_type& l)
  {
    return symbol_type (token::EXPORTS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXTENSIBILITY (const location_type& l)
  {
    return symbol_type (token::EXTENSIBILITY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXTERNAL (const location_type& l)
  {
    return symbol_type (token::EXTERNAL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_FALSE (const location_type& l)
  {
    return symbol_type (token::FALSE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_FROM (const location_type& l)
  {
    return symbol_type (token::FROM, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GeneralizedTime (const location_type& l)
  {
    return symbol_type (token::GeneralizedTime, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GeneralString (const location_type& l)
  {
    return symbol_type (token::GeneralString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GraphicString (const location_type& l)
  {
    return symbol_type (token::GraphicString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IA5String (const location_type& l)
  {
    return symbol_type (token::IA5String, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IDENTIFIER (const location_type& l)
  {
    return symbol_type (token::IDENTIFIER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IMPLICIT (const location_type& l)
  {
    return symbol_type (token::IMPLICIT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IMPLIED (const location_type& l)
  {
    return symbol_type (token::IMPLIED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IMPORTS (const location_type& l)
  {
    return symbol_type (token::IMPORTS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INCLUDES (const location_type& l)
  {
    return symbol_type (token::INCLUDES, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INSTANCE (const location_type& l)
  {
    return symbol_type (token::INSTANCE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INSTRUCTIONS (const location_type& l)
  {
    return symbol_type (token::INSTRUCTIONS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INTEGER (const location_type& l)
  {
    return symbol_type (token::INTEGER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INTERSECTION (const location_type& l)
  {
    return symbol_type (token::INTERSECTION, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ISO646String (const location_type& l)
  {
    return symbol_type (token::ISO646String, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_MAX (const location_type& l)
  {
    return symbol_type (token::MAX, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_MIN (const location_type& l)
  {
    return symbol_type (token::MIN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_MINUS_INFINITY (const location_type& l)
  {
    return symbol_type (token::MINUS_INFINITY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_NOT_A_NUMBER (const location_type& l)
  {
    return symbol_type (token::NOT_A_NUMBER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_NumericString (const location_type& l)
  {
    return symbol_type (token::NumericString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OBJECT (const location_type& l)
  {
    return symbol_type (token::OBJECT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ObjectDescriptor (const location_type& l)
  {
    return symbol_type (token::ObjectDescriptor, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OCTET (const location_type& l)
  {
    return symbol_type (token::OCTET, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OF (const location_type& l)
  {
    return symbol_type (token::OF, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OID_IRI (const location_type& l)
  {
    return symbol_type (token::OID_IRI, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OPTIONAL (const location_type& l)
  {
    return symbol_type (token::OPTIONAL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PATTERN (const location_type& l)
  {
    return symbol_type (token::PATTERN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PDV (const location_type& l)
  {
    return symbol_type (token::PDV, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PLUS_INFINITY (const location_type& l)
  {
    return symbol_type (token::PLUS_INFINITY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PRESENT (const location_type& l)
  {
    return symbol_type (token::PRESENT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PrintableString (const location_type& l)
  {
    return symbol_type (token::PrintableString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PRIVATE (const location_type& l)
  {
    return symbol_type (token::PRIVATE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_REAL (const location_type& l)
  {
    return symbol_type (token::REAL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_RELATIVE_OID (const location_type& l)
  {
    return symbol_type (token::RELATIVE_OID, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_RELATIVE_OID_IRI (const location_type& l)
  {
    return symbol_type (token::RELATIVE_OID_IRI, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SEQUENCE (const location_type& l)
  {
    return symbol_type (token::SEQUENCE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SET (const location_type& l)
  {
    return symbol_type (token::SET, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SETTINGS (const location_type& l)
  {
    return symbol_type (token::SETTINGS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SIZE (const location_type& l)
  {
    return symbol_type (token::SIZE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_STRING (const location_type& l)
  {
    return symbol_type (token::STRING, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SYNTAX (const location_type& l)
  {
    return symbol_type (token::SYNTAX, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_T61String (const location_type& l)
  {
    return symbol_type (token::T61String, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TAGS (const location_type& l)
  {
    return symbol_type (token::TAGS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TeletexString (const location_type& l)
  {
    return symbol_type (token::TeletexString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TIME (const location_type& l)
  {
    return symbol_type (token::TIME, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TIME_OF_DAY (const location_type& l)
  {
    return symbol_type (token::TIME_OF_DAY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TRUE (const location_type& l)
  {
    return symbol_type (token::TRUE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TYPE_IDENTIFIER (const location_type& l)
  {
    return symbol_type (token::TYPE_IDENTIFIER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UNION (const location_type& l)
  {
    return symbol_type (token::UNION, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UNIQUE (const location_type& l)
  {
    return symbol_type (token::UNIQUE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UNIVERSAL (const location_type& l)
  {
    return symbol_type (token::UNIVERSAL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UniversalString (const location_type& l)
  {
    return symbol_type (token::UniversalString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UTCTime (const location_type& l)
  {
    return symbol_type (token::UTCTime, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UTF8String (const location_type& l)
  {
    return symbol_type (token::UTF8String, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_VideotexString (const location_type& l)
  {
    return symbol_type (token::VideotexString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_VisibleString (const location_type& l)
  {
    return symbol_type (token::VisibleString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_WITH (const location_type& l)
  {
    return symbol_type (token::WITH, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DEFINED_AS (const location_type& l)
  {
    return symbol_type (token::DEFINED_AS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ELIPSIS (const location_type& l)
  {
    return symbol_type (token::ELIPSIS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_RANGE (const location_type& l)
  {
    return symbol_type (token::RANGE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OPEN_BRACE (const location_type& l)
  {
    return symbol_type (token::OPEN_BRACE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CLOSE_BRACE (const location_type& l)
  {
    return symbol_type (token::CLOSE_BRACE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OPEN_PARENTHESIS (const location_type& l)
  {
    return symbol_type (token::OPEN_PARENTHESIS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CLOSE_PARENTHESIS (const location_type& l)
  {
    return symbol_type (token::CLOSE_PARENTHESIS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OPEN_SQUARE_BRACKET (const location_type& l)
  {
    return symbol_type (token::OPEN_SQUARE_BRACKET, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CLOSE_SQUARE_BRACKET (const location_type& l)
  {
    return symbol_type (token::CLOSE_SQUARE_BRACKET, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_LESS_THAN (const location_type& l)
  {
    return symbol_type (token::LESS_THAN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GREATER_THAN (const location_type& l)
  {
    return symbol_type (token::GREATER_THAN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXCLAMATION_MARK (const location_type& l)
  {
    return symbol_type (token::EXCLAMATION_MARK, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_QUOTATION_MARK (const location_type& l)
  {
    return symbol_type (token::QUOTATION_MARK, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_AMPERSAND (const location_type& l)
  {
    return symbol_type (token::AMPERSAND, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_APOSTROPHE (const location_type& l)
  {
    return symbol_type (token::APOSTROPHE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ASTERISK (const location_type& l)
  {
    return symbol_type (token::ASTERISK, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_COMMA (const location_type& l)
  {
    return symbol_type (token::COMMA, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_FULL_STOP (const location_type& l)
  {
    return symbol_type (token::FULL_STOP, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_HYPHEN_MINUS (const location_type& l)
  {
    return symbol_type (token::HYPHEN_MINUS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SOLIDUS (const location_type& l)
  {
    return symbol_type (token::SOLIDUS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_COLON (const location_type& l)
  {
    return symbol_type (token::COLON, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SEMICOLON (const location_type& l)
  {
    return symbol_type (token::SEMICOLON, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EQUALS_SIGN (const location_type& l)
  {
    return symbol_type (token::EQUALS_SIGN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_AT (const location_type& l)
  {
    return symbol_type (token::AT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_VERTICAL_LINE (const location_type& l)
  {
    return symbol_type (token::VERTICAL_LINE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ACCENT (const location_type& l)
  {
    return symbol_type (token::ACCENT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PLUS (const location_type& l)
  {
    return symbol_type (token::PLUS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_STAR (const location_type& l)
  {
    return symbol_type (token::STAR, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GENERIC_IDENTIFIER_UPPERCASE (const std::string& v, const location_type& l)
  {
    return symbol_type (token::GENERIC_IDENTIFIER_UPPERCASE, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GENERIC_IDENTIFIER_LOWERCASE (const std::string& v, const location_type& l)
  {
    return symbol_type (token::GENERIC_IDENTIFIER_LOWERCASE, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GENERIC_INTEGER (const location_type& l)
  {
    return symbol_type (token::GENERIC_INTEGER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmlasn1typename (const location_type& l)
  {
    return symbol_type (token::xmlasn1typename, l);
  }



} // yy
#line 4890 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:408





// User implementation prologue.

#line 4898 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:412
// Unqualified %code blocks.
#line 15 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:413

    struct Context
    {
        const char* cursor;
        yy::location location;

        Asn1Tree asn1_tree;
    };
    void yy::asn1_parser::error(const location_type& l, const std::string& m)
    {
        std::cerr << (l.begin.filename ? l.begin.filename->c_str() : "(undefined)");
        std::cerr << ':' << l.begin.line << ':' << l.begin.column << '-' << l.end.column << ": " << m << '\n';
    }

    namespace yy { asn1_parser::symbol_type yylex(Context& c); }

#line 4917 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:413


#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> // FIXME: INFRINGES ON USER NAME SPACE.
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K].location)
/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

# ifndef YYLLOC_DEFAULT
#  define YYLLOC_DEFAULT(Current, Rhs, N)                               \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).begin  = YYRHSLOC (Rhs, 1).begin;                   \
          (Current).end    = YYRHSLOC (Rhs, N).end;                     \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).begin = (Current).end = YYRHSLOC (Rhs, 0).end;      \
        }                                                               \
    while (/*CONSTCOND*/ false)
# endif


// Suppress unused-variable warnings by "using" E.
#define YYUSE(E) ((void) (E))

// Enable debugging if requested.
#if YYDEBUG

// A pseudo ostream that takes yydebug_ into account.
# define YYCDEBUG if (yydebug_) (*yycdebug_)

# define YY_SYMBOL_PRINT(Title, Symbol)         \
  do {                                          \
    if (yydebug_)                               \
    {                                           \
      *yycdebug_ << Title << ' ';               \
      yy_print_ (*yycdebug_, Symbol);           \
      *yycdebug_ << std::endl;                  \
    }                                           \
  } while (false)

# define YY_REDUCE_PRINT(Rule)          \
  do {                                  \
    if (yydebug_)                       \
      yy_reduce_print_ (Rule);          \
  } while (false)

# define YY_STACK_PRINT()               \
  do {                                  \
    if (yydebug_)                       \
      yystack_print_ ();                \
  } while (false)

#else // !YYDEBUG

# define YYCDEBUG if (false) std::cerr
# define YY_SYMBOL_PRINT(Title, Symbol)  YYUSE(Symbol)
# define YY_REDUCE_PRINT(Rule)           static_cast<void>(0)
# define YY_STACK_PRINT()                static_cast<void>(0)

#endif // !YYDEBUG

#define yyerrok         (yyerrstatus_ = 0)
#define yyclearin       (yyla.clear ())

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYRECOVERING()  (!!yyerrstatus_)


namespace yy {
#line 5003 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:479

  /* Return YYSTR after stripping away unnecessary quotes and
     backslashes, so that it's suitable for yyerror.  The heuristic is
     that double-quoting is unnecessary unless the string contains an
     apostrophe, a comma, or backslash (other than backslash-backslash).
     YYSTR is taken from yytname.  */
  std::string
  asn1_parser::yytnamerr_ (const char *yystr)
  {
    if (*yystr == '"')
      {
        std::string yyr = "";
        char const *yyp = yystr;

        for (;;)
          switch (*++yyp)
            {
            case '\'':
            case ',':
              goto do_not_strip_quotes;

            case '\\':
              if (*++yyp != '\\')
                goto do_not_strip_quotes;
              // Fall through.
            default:
              yyr += *yyp;
              break;

            case '"':
              return yyr;
            }
      do_not_strip_quotes: ;
      }

    return yystr;
  }


  /// Build a parser object.
  asn1_parser::asn1_parser (Context& context_yyarg)
    :
#if YYDEBUG
      yydebug_ (false),
      yycdebug_ (&std::cerr),
#endif
      context (context_yyarg)
  {}

  asn1_parser::~asn1_parser ()
  {}


  /*---------------.
  | Symbol types.  |
  `---------------*/



  // by_state.
  inline
  asn1_parser::by_state::by_state ()
    : state (empty_state)
  {}

  inline
  asn1_parser::by_state::by_state (const by_state& other)
    : state (other.state)
  {}

  inline
  void
  asn1_parser::by_state::clear ()
  {
    state = empty_state;
  }

  inline
  void
  asn1_parser::by_state::move (by_state& that)
  {
    state = that.state;
    that.clear ();
  }

  inline
  asn1_parser::by_state::by_state (state_type s)
    : state (s)
  {}

  inline
  asn1_parser::symbol_number_type
  asn1_parser::by_state::type_get () const
  {
    if (state == empty_state)
      return empty_symbol;
    else
      return yystos_[state];
  }

  inline
  asn1_parser::stack_symbol_type::stack_symbol_type ()
  {}


  inline
  asn1_parser::stack_symbol_type::stack_symbol_type (state_type s, symbol_type& that)
    : super_type (s, that.location)
  {
      switch (that.type_get ())
    {
      case 159: // ObjectClassAssignment
      case 198: // ObjectSetAssignment
      case 202: // ParameterizedAssignment
      case 203: // ParameterizedTypeAssignment
      case 204: // ParameterizedValueAssignment
      case 205: // ParameterizedValueSetTypeAssignment
      case 206: // ParameterizedObjectClassAssignment
      case 207: // ParameterizedObjectAssignment
      case 252: // Assignment
      case 261: // TypeAssignment
      case 262: // ValueAssignment
      case 263: // ValueSetTypeAssignment
        value.move< Assignment > (that.value);
        break;

      case 284: // BitStringType
        value.move< BitStringType > (that.value);
        break;

      case 273: // BooleanType
        value.move< BooleanType > (that.value);
        break;

      case 265: // BuiltinType
        value.move< BuiltinType > (that.value);
        break;

      case 329: // CharacterStringType
        value.move< CharacterStringType > (that.value);
        break;

      case 296: // ChoiceType
        value.move< ChoiceType > (that.value);
        break;

      case 306: // Class
        value.move< Class > (that.value);
        break;

      case 292: // ComponentType
        value.move< ComponentType > (that.value);
        break;

      case 290: // ComponentTypeLists
      case 291: // ComponentTypeList
        value.move< ComponentTypeList > (that.value);
        break;

      case 327: // DateTimeType
        value.move< DateTimeType > (that.value);
        break;

      case 325: // DateType
        value.move< DateType > (that.value);
        break;

      case 253: // DefinedType
      case 255: // ParameterizedType
      case 259: // ExternalTypeReference
        value.move< DefinedType > (that.value);
        break;

      case 254: // DefinedValue
        value.move< DefinedValue > (that.value);
        break;

      case 328: // DurationType
        value.move< DurationType > (that.value);
        break;

      case 321: // EmbeddedPDVType
        value.move< EmbeddedPDVType > (that.value);
        break;

      case 279: // EnumeratedType
      case 280: // Enumerations
      case 281: // Enumeration
        value.move< EnumeratedType > (that.value);
        break;

      case 282: // EnumerationItem
        value.move< EnumerationValue > (that.value);
        break;

      case 322: // ExternalType
        value.move< ExternalType > (that.value);
        break;

      case 315: // IRIType
        value.move< IRIType > (that.value);
        break;

      case 245: // SymbolsFromModule
        value.move< Import > (that.value);
        break;

      case 215: // InstanceOfType
        value.move< InstanceOfType > (that.value);
        break;

      case 275: // IntegerType
        value.move< IntegerType > (that.value);
        break;

      case 239: // ModuleBody
        value.move< Module > (that.value);
        break;

      case 277: // NamedNumber
        value.move< NamedNumber > (that.value);
        break;

      case 266: // NamedType
        value.move< NamedType > (that.value);
        break;

      case 288: // NullType
        value.move< NullType > (that.value);
        break;

      case 160: // ObjectClass
      case 161: // ObjectClassDefn
        value.move< ObjectClassAssignment > (that.value);
        break;

      case 201: // ObjectClassFieldType
        value.move< ObjectClassFieldType > (that.value);
        break;

      case 310: // ObjIdComponents
      case 311: // NameForm
      case 312: // NumberForm
      case 313: // NameAndNumberForm
        value.move< ObjectIdComponentValue > (that.value);
        break;

      case 307: // ObjectIdentifierType
        value.move< ObjectIdentifierType > (that.value);
        break;

      case 287: // OctetStringType
        value.move< OctetStringType > (that.value);
        break;

      case 301: // PrefixedType
        value.move< PrefixedType > (that.value);
        break;

      case 283: // RealType
        value.move< RealType > (that.value);
        break;

      case 320: // RelativeIRIType
        value.move< RelativeIRIType > (that.value);
        break;

      case 314: // RelativeOIDType
        value.move< RelativeOIDType > (that.value);
        break;

      case 293: // SequenceOfType
        value.move< SequenceOfType > (that.value);
        break;

      case 289: // SequenceType
        value.move< SequenceType > (that.value);
        break;

      case 295: // SetOfType
        value.move< SetOfType > (that.value);
        break;

      case 294: // SetType
        value.move< SetType > (that.value);
        break;

      case 303: // Tag
        value.move< Tag > (that.value);
        break;

      case 302: // TaggedType
        value.move< TaggedType > (that.value);
        break;

      case 237: // TagDefault
        value.move< TaggingMode > (that.value);
        break;

      case 326: // TimeOfDayType
        value.move< TimeOfDayType > (that.value);
        break;

      case 323: // TimeType
        value.move< TimeType > (that.value);
        break;

      case 258: // ActualParameter
      case 264: // Type
      case 332: // ConstrainedType
      case 333: // TypeWithConstraint
        value.move< Type > (that.value);
        break;

      case 267: // ValueWithoutTypeIdentifier
      case 268: // Value
      case 350: // SingleValue
        value.move< Value > (that.value);
        break;

      case 5: // realnumber
        value.move< double > (that.value);
        break;

      case 305: // ClassNumber
        value.move< int > (that.value);
        break;

      case 4: // number
      case 278: // SignedNumber
        value.move< long long > (that.value);
        break;

      case 208: // ParameterList
      case 209: // ParameterSeries
        value.move< std::set<std::string> > (that.value);
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 21: // objectreference
      case 23: // typefieldreference
      case 24: // valuefieldreference
      case 148: // GENERIC_IDENTIFIER_UPPERCASE
      case 149: // GENERIC_IDENTIFIER_LOWERCASE
      case 158: // UsefulObjectClassReference
      case 164: // FieldName
      case 210: // Parameter
      case 216: // SimpleDefinedType
      case 228: // ModuleIdentifier
      case 246: // GlobalModuleReference
      case 249: // Symbol
      case 250: // Reference
      case 373: // typereference
      case 374: // identifier
      case 375: // valuereference
      case 376: // modulereference
      case 377: // objectclassreference
      case 378: // word
        value.move< std::string > (that.value);
        break;

      case 251: // AssignmentList
        value.move< std::vector<Assignment> > (that.value);
        break;

      case 162: // FieldSpecList
      case 163: // FieldSpec
      case 166: // TypeFieldSpec
      case 170: // FixedTypeValueFieldSpec
        value.move< std::vector<ClassField> > (that.value);
        break;

      case 240: // Exports
        value.move< std::vector<Export> > (that.value);
        break;

      case 242: // Imports
      case 243: // SymbolsImported
      case 244: // SymbolsFromModuleList
        value.move< std::vector<Import> > (that.value);
        break;

      case 276: // NamedNumberList
        value.move< std::vector<NamedNumber> > (that.value);
        break;

      case 297: // AlternativeTypeLists
      case 298: // RootAlternativeTypeList
      case 299: // AlternativeTypeList
        value.move< std::vector<NamedType> > (that.value);
        break;

      case 308: // ObjectIdentifierValue
      case 309: // ObjIdComponentsList
        value.move< std::vector<ObjectIdComponentValue> > (that.value);
        break;

      case 257: // ActualParameterList
        value.move< std::vector<Type> > (that.value);
        break;

      case 272: // SequenceOfValues
        value.move< std::vector<Value> > (that.value);
        break;

      case 165: // FieldNameList
      case 167: // OneOrManyTypeFieldReference
      case 248: // SymbolList
        value.move< std::vector<std::string> > (that.value);
        break;

      default:
        break;
    }

    // that is emptied.
    that.type = empty_symbol;
  }

  inline
  asn1_parser::stack_symbol_type&
  asn1_parser::stack_symbol_type::operator= (const stack_symbol_type& that)
  {
    state = that.state;
      switch (that.type_get ())
    {
      case 159: // ObjectClassAssignment
      case 198: // ObjectSetAssignment
      case 202: // ParameterizedAssignment
      case 203: // ParameterizedTypeAssignment
      case 204: // ParameterizedValueAssignment
      case 205: // ParameterizedValueSetTypeAssignment
      case 206: // ParameterizedObjectClassAssignment
      case 207: // ParameterizedObjectAssignment
      case 252: // Assignment
      case 261: // TypeAssignment
      case 262: // ValueAssignment
      case 263: // ValueSetTypeAssignment
        value.copy< Assignment > (that.value);
        break;

      case 284: // BitStringType
        value.copy< BitStringType > (that.value);
        break;

      case 273: // BooleanType
        value.copy< BooleanType > (that.value);
        break;

      case 265: // BuiltinType
        value.copy< BuiltinType > (that.value);
        break;

      case 329: // CharacterStringType
        value.copy< CharacterStringType > (that.value);
        break;

      case 296: // ChoiceType
        value.copy< ChoiceType > (that.value);
        break;

      case 306: // Class
        value.copy< Class > (that.value);
        break;

      case 292: // ComponentType
        value.copy< ComponentType > (that.value);
        break;

      case 290: // ComponentTypeLists
      case 291: // ComponentTypeList
        value.copy< ComponentTypeList > (that.value);
        break;

      case 327: // DateTimeType
        value.copy< DateTimeType > (that.value);
        break;

      case 325: // DateType
        value.copy< DateType > (that.value);
        break;

      case 253: // DefinedType
      case 255: // ParameterizedType
      case 259: // ExternalTypeReference
        value.copy< DefinedType > (that.value);
        break;

      case 254: // DefinedValue
        value.copy< DefinedValue > (that.value);
        break;

      case 328: // DurationType
        value.copy< DurationType > (that.value);
        break;

      case 321: // EmbeddedPDVType
        value.copy< EmbeddedPDVType > (that.value);
        break;

      case 279: // EnumeratedType
      case 280: // Enumerations
      case 281: // Enumeration
        value.copy< EnumeratedType > (that.value);
        break;

      case 282: // EnumerationItem
        value.copy< EnumerationValue > (that.value);
        break;

      case 322: // ExternalType
        value.copy< ExternalType > (that.value);
        break;

      case 315: // IRIType
        value.copy< IRIType > (that.value);
        break;

      case 245: // SymbolsFromModule
        value.copy< Import > (that.value);
        break;

      case 215: // InstanceOfType
        value.copy< InstanceOfType > (that.value);
        break;

      case 275: // IntegerType
        value.copy< IntegerType > (that.value);
        break;

      case 239: // ModuleBody
        value.copy< Module > (that.value);
        break;

      case 277: // NamedNumber
        value.copy< NamedNumber > (that.value);
        break;

      case 266: // NamedType
        value.copy< NamedType > (that.value);
        break;

      case 288: // NullType
        value.copy< NullType > (that.value);
        break;

      case 160: // ObjectClass
      case 161: // ObjectClassDefn
        value.copy< ObjectClassAssignment > (that.value);
        break;

      case 201: // ObjectClassFieldType
        value.copy< ObjectClassFieldType > (that.value);
        break;

      case 310: // ObjIdComponents
      case 311: // NameForm
      case 312: // NumberForm
      case 313: // NameAndNumberForm
        value.copy< ObjectIdComponentValue > (that.value);
        break;

      case 307: // ObjectIdentifierType
        value.copy< ObjectIdentifierType > (that.value);
        break;

      case 287: // OctetStringType
        value.copy< OctetStringType > (that.value);
        break;

      case 301: // PrefixedType
        value.copy< PrefixedType > (that.value);
        break;

      case 283: // RealType
        value.copy< RealType > (that.value);
        break;

      case 320: // RelativeIRIType
        value.copy< RelativeIRIType > (that.value);
        break;

      case 314: // RelativeOIDType
        value.copy< RelativeOIDType > (that.value);
        break;

      case 293: // SequenceOfType
        value.copy< SequenceOfType > (that.value);
        break;

      case 289: // SequenceType
        value.copy< SequenceType > (that.value);
        break;

      case 295: // SetOfType
        value.copy< SetOfType > (that.value);
        break;

      case 294: // SetType
        value.copy< SetType > (that.value);
        break;

      case 303: // Tag
        value.copy< Tag > (that.value);
        break;

      case 302: // TaggedType
        value.copy< TaggedType > (that.value);
        break;

      case 237: // TagDefault
        value.copy< TaggingMode > (that.value);
        break;

      case 326: // TimeOfDayType
        value.copy< TimeOfDayType > (that.value);
        break;

      case 323: // TimeType
        value.copy< TimeType > (that.value);
        break;

      case 258: // ActualParameter
      case 264: // Type
      case 332: // ConstrainedType
      case 333: // TypeWithConstraint
        value.copy< Type > (that.value);
        break;

      case 267: // ValueWithoutTypeIdentifier
      case 268: // Value
      case 350: // SingleValue
        value.copy< Value > (that.value);
        break;

      case 5: // realnumber
        value.copy< double > (that.value);
        break;

      case 305: // ClassNumber
        value.copy< int > (that.value);
        break;

      case 4: // number
      case 278: // SignedNumber
        value.copy< long long > (that.value);
        break;

      case 208: // ParameterList
      case 209: // ParameterSeries
        value.copy< std::set<std::string> > (that.value);
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 21: // objectreference
      case 23: // typefieldreference
      case 24: // valuefieldreference
      case 148: // GENERIC_IDENTIFIER_UPPERCASE
      case 149: // GENERIC_IDENTIFIER_LOWERCASE
      case 158: // UsefulObjectClassReference
      case 164: // FieldName
      case 210: // Parameter
      case 216: // SimpleDefinedType
      case 228: // ModuleIdentifier
      case 246: // GlobalModuleReference
      case 249: // Symbol
      case 250: // Reference
      case 373: // typereference
      case 374: // identifier
      case 375: // valuereference
      case 376: // modulereference
      case 377: // objectclassreference
      case 378: // word
        value.copy< std::string > (that.value);
        break;

      case 251: // AssignmentList
        value.copy< std::vector<Assignment> > (that.value);
        break;

      case 162: // FieldSpecList
      case 163: // FieldSpec
      case 166: // TypeFieldSpec
      case 170: // FixedTypeValueFieldSpec
        value.copy< std::vector<ClassField> > (that.value);
        break;

      case 240: // Exports
        value.copy< std::vector<Export> > (that.value);
        break;

      case 242: // Imports
      case 243: // SymbolsImported
      case 244: // SymbolsFromModuleList
        value.copy< std::vector<Import> > (that.value);
        break;

      case 276: // NamedNumberList
        value.copy< std::vector<NamedNumber> > (that.value);
        break;

      case 297: // AlternativeTypeLists
      case 298: // RootAlternativeTypeList
      case 299: // AlternativeTypeList
        value.copy< std::vector<NamedType> > (that.value);
        break;

      case 308: // ObjectIdentifierValue
      case 309: // ObjIdComponentsList
        value.copy< std::vector<ObjectIdComponentValue> > (that.value);
        break;

      case 257: // ActualParameterList
        value.copy< std::vector<Type> > (that.value);
        break;

      case 272: // SequenceOfValues
        value.copy< std::vector<Value> > (that.value);
        break;

      case 165: // FieldNameList
      case 167: // OneOrManyTypeFieldReference
      case 248: // SymbolList
        value.copy< std::vector<std::string> > (that.value);
        break;

      default:
        break;
    }

    location = that.location;
    return *this;
  }


  template <typename Base>
  inline
  void
  asn1_parser::yy_destroy_ (const char* yymsg, basic_symbol<Base>& yysym) const
  {
    if (yymsg)
      YY_SYMBOL_PRINT (yymsg, yysym);
  }

#if YYDEBUG
  template <typename Base>
  void
  asn1_parser::yy_print_ (std::ostream& yyo,
                                     const basic_symbol<Base>& yysym) const
  {
    std::ostream& yyoutput = yyo;
    YYUSE (yyoutput);
    symbol_number_type yytype = yysym.type_get ();
    // Avoid a (spurious) G++ 4.8 warning about "array subscript is
    // below array bounds".
    if (yysym.empty ())
      std::abort ();
    yyo << (yytype < yyntokens_ ? "token" : "nterm")
        << ' ' << yytname_[yytype] << " ("
        << yysym.location << ": ";
    YYUSE (yytype);
    yyo << ')';
  }
#endif

  inline
  void
  asn1_parser::yypush_ (const char* m, state_type s, symbol_type& sym)
  {
    stack_symbol_type t (s, sym);
    yypush_ (m, t);
  }

  inline
  void
  asn1_parser::yypush_ (const char* m, stack_symbol_type& s)
  {
    if (m)
      YY_SYMBOL_PRINT (m, s);
    yystack_.push (s);
  }

  inline
  void
  asn1_parser::yypop_ (unsigned int n)
  {
    yystack_.pop (n);
  }

#if YYDEBUG
  std::ostream&
  asn1_parser::debug_stream () const
  {
    return *yycdebug_;
  }

  void
  asn1_parser::set_debug_stream (std::ostream& o)
  {
    yycdebug_ = &o;
  }


  asn1_parser::debug_level_type
  asn1_parser::debug_level () const
  {
    return yydebug_;
  }

  void
  asn1_parser::set_debug_level (debug_level_type l)
  {
    yydebug_ = l;
  }
#endif // YYDEBUG

  inline asn1_parser::state_type
  asn1_parser::yy_lr_goto_state_ (state_type yystate, int yysym)
  {
    int yyr = yypgoto_[yysym - yyntokens_] + yystate;
    if (0 <= yyr && yyr <= yylast_ && yycheck_[yyr] == yystate)
      return yytable_[yyr];
    else
      return yydefgoto_[yysym - yyntokens_];
  }

  inline bool
  asn1_parser::yy_pact_value_is_default_ (int yyvalue)
  {
    return yyvalue == yypact_ninf_;
  }

  inline bool
  asn1_parser::yy_table_value_is_error_ (int yyvalue)
  {
    return yyvalue == yytable_ninf_;
  }

  int
  asn1_parser::parse ()
  {
    // State.
    int yyn;
    /// Length of the RHS of the rule being reduced.
    int yylen = 0;

    // Error handling.
    int yynerrs_ = 0;
    int yyerrstatus_ = 0;

    /// The lookahead symbol.
    symbol_type yyla;

    /// The locations where the error started and ended.
    stack_symbol_type yyerror_range[3];

    /// The return value of parse ().
    int yyresult;

    // FIXME: This shoud be completely indented.  It is not yet to
    // avoid gratuitous conflicts when merging into the master branch.
    try
      {
    YYCDEBUG << "Starting parse" << std::endl;


    /* Initialize the stack.  The initial state will be set in
       yynewstate, since the latter expects the semantical and the
       location values to have been already stored, initialize these
       stacks with a primary value.  */
    yystack_.clear ();
    yypush_ (YY_NULLPTR, 0, yyla);

    // A new symbol was pushed on the stack.
  yynewstate:
    YYCDEBUG << "Entering state " << yystack_[0].state << std::endl;

    // Accept?
    if (yystack_[0].state == yyfinal_)
      goto yyacceptlab;

    goto yybackup;

    // Backup.
  yybackup:

    // Try to take a decision without lookahead.
    yyn = yypact_[yystack_[0].state];
    if (yy_pact_value_is_default_ (yyn))
      goto yydefault;

    // Read a lookahead token.
    if (yyla.empty ())
      {
        YYCDEBUG << "Reading a token: ";
        try
          {
            symbol_type yylookahead (yylex (context));
            yyla.move (yylookahead);
          }
        catch (const syntax_error& yyexc)
          {
            error (yyexc);
            goto yyerrlab1;
          }
      }
    YY_SYMBOL_PRINT ("Next token is", yyla);

    /* If the proper action on seeing token YYLA.TYPE is to reduce or
       to detect an error, take that action.  */
    yyn += yyla.type_get ();
    if (yyn < 0 || yylast_ < yyn || yycheck_[yyn] != yyla.type_get ())
      goto yydefault;

    // Reduce or error.
    yyn = yytable_[yyn];
    if (yyn <= 0)
      {
        if (yy_table_value_is_error_ (yyn))
          goto yyerrlab;
        yyn = -yyn;
        goto yyreduce;
      }

    // Count tokens shifted since error; after three, turn off error status.
    if (yyerrstatus_)
      --yyerrstatus_;

    // Shift the lookahead token.
    yypush_ ("Shifting", yyn, yyla);
    goto yynewstate;

  /*-----------------------------------------------------------.
  | yydefault -- do the default action for the current state.  |
  `-----------------------------------------------------------*/
  yydefault:
    yyn = yydefact_[yystack_[0].state];
    if (yyn == 0)
      goto yyerrlab;
    goto yyreduce;

  /*-----------------------------.
  | yyreduce -- Do a reduction.  |
  `-----------------------------*/
  yyreduce:
    yylen = yyr2_[yyn];
    {
      stack_symbol_type yylhs;
      yylhs.state = yy_lr_goto_state_(yystack_[yylen].state, yyr1_[yyn]);
      /* Variants are always initialized to an empty instance of the
         correct type. The default '$$ = $1' action is NOT applied
         when using variants.  */
        switch (yyr1_[yyn])
    {
      case 159: // ObjectClassAssignment
      case 198: // ObjectSetAssignment
      case 202: // ParameterizedAssignment
      case 203: // ParameterizedTypeAssignment
      case 204: // ParameterizedValueAssignment
      case 205: // ParameterizedValueSetTypeAssignment
      case 206: // ParameterizedObjectClassAssignment
      case 207: // ParameterizedObjectAssignment
      case 252: // Assignment
      case 261: // TypeAssignment
      case 262: // ValueAssignment
      case 263: // ValueSetTypeAssignment
        yylhs.value.build< Assignment > ();
        break;

      case 284: // BitStringType
        yylhs.value.build< BitStringType > ();
        break;

      case 273: // BooleanType
        yylhs.value.build< BooleanType > ();
        break;

      case 265: // BuiltinType
        yylhs.value.build< BuiltinType > ();
        break;

      case 329: // CharacterStringType
        yylhs.value.build< CharacterStringType > ();
        break;

      case 296: // ChoiceType
        yylhs.value.build< ChoiceType > ();
        break;

      case 306: // Class
        yylhs.value.build< Class > ();
        break;

      case 292: // ComponentType
        yylhs.value.build< ComponentType > ();
        break;

      case 290: // ComponentTypeLists
      case 291: // ComponentTypeList
        yylhs.value.build< ComponentTypeList > ();
        break;

      case 327: // DateTimeType
        yylhs.value.build< DateTimeType > ();
        break;

      case 325: // DateType
        yylhs.value.build< DateType > ();
        break;

      case 253: // DefinedType
      case 255: // ParameterizedType
      case 259: // ExternalTypeReference
        yylhs.value.build< DefinedType > ();
        break;

      case 254: // DefinedValue
        yylhs.value.build< DefinedValue > ();
        break;

      case 328: // DurationType
        yylhs.value.build< DurationType > ();
        break;

      case 321: // EmbeddedPDVType
        yylhs.value.build< EmbeddedPDVType > ();
        break;

      case 279: // EnumeratedType
      case 280: // Enumerations
      case 281: // Enumeration
        yylhs.value.build< EnumeratedType > ();
        break;

      case 282: // EnumerationItem
        yylhs.value.build< EnumerationValue > ();
        break;

      case 322: // ExternalType
        yylhs.value.build< ExternalType > ();
        break;

      case 315: // IRIType
        yylhs.value.build< IRIType > ();
        break;

      case 245: // SymbolsFromModule
        yylhs.value.build< Import > ();
        break;

      case 215: // InstanceOfType
        yylhs.value.build< InstanceOfType > ();
        break;

      case 275: // IntegerType
        yylhs.value.build< IntegerType > ();
        break;

      case 239: // ModuleBody
        yylhs.value.build< Module > ();
        break;

      case 277: // NamedNumber
        yylhs.value.build< NamedNumber > ();
        break;

      case 266: // NamedType
        yylhs.value.build< NamedType > ();
        break;

      case 288: // NullType
        yylhs.value.build< NullType > ();
        break;

      case 160: // ObjectClass
      case 161: // ObjectClassDefn
        yylhs.value.build< ObjectClassAssignment > ();
        break;

      case 201: // ObjectClassFieldType
        yylhs.value.build< ObjectClassFieldType > ();
        break;

      case 310: // ObjIdComponents
      case 311: // NameForm
      case 312: // NumberForm
      case 313: // NameAndNumberForm
        yylhs.value.build< ObjectIdComponentValue > ();
        break;

      case 307: // ObjectIdentifierType
        yylhs.value.build< ObjectIdentifierType > ();
        break;

      case 287: // OctetStringType
        yylhs.value.build< OctetStringType > ();
        break;

      case 301: // PrefixedType
        yylhs.value.build< PrefixedType > ();
        break;

      case 283: // RealType
        yylhs.value.build< RealType > ();
        break;

      case 320: // RelativeIRIType
        yylhs.value.build< RelativeIRIType > ();
        break;

      case 314: // RelativeOIDType
        yylhs.value.build< RelativeOIDType > ();
        break;

      case 293: // SequenceOfType
        yylhs.value.build< SequenceOfType > ();
        break;

      case 289: // SequenceType
        yylhs.value.build< SequenceType > ();
        break;

      case 295: // SetOfType
        yylhs.value.build< SetOfType > ();
        break;

      case 294: // SetType
        yylhs.value.build< SetType > ();
        break;

      case 303: // Tag
        yylhs.value.build< Tag > ();
        break;

      case 302: // TaggedType
        yylhs.value.build< TaggedType > ();
        break;

      case 237: // TagDefault
        yylhs.value.build< TaggingMode > ();
        break;

      case 326: // TimeOfDayType
        yylhs.value.build< TimeOfDayType > ();
        break;

      case 323: // TimeType
        yylhs.value.build< TimeType > ();
        break;

      case 258: // ActualParameter
      case 264: // Type
      case 332: // ConstrainedType
      case 333: // TypeWithConstraint
        yylhs.value.build< Type > ();
        break;

      case 267: // ValueWithoutTypeIdentifier
      case 268: // Value
      case 350: // SingleValue
        yylhs.value.build< Value > ();
        break;

      case 5: // realnumber
        yylhs.value.build< double > ();
        break;

      case 305: // ClassNumber
        yylhs.value.build< int > ();
        break;

      case 4: // number
      case 278: // SignedNumber
        yylhs.value.build< long long > ();
        break;

      case 208: // ParameterList
      case 209: // ParameterSeries
        yylhs.value.build< std::set<std::string> > ();
        break;

      case 6: // bstring
      case 7: // xmlbstring
      case 8: // hstring
      case 9: // xmlhstring
      case 10: // cstring
      case 11: // xmlcstring
      case 12: // simplestring
      case 13: // xmltstring
      case 21: // objectreference
      case 23: // typefieldreference
      case 24: // valuefieldreference
      case 148: // GENERIC_IDENTIFIER_UPPERCASE
      case 149: // GENERIC_IDENTIFIER_LOWERCASE
      case 158: // UsefulObjectClassReference
      case 164: // FieldName
      case 210: // Parameter
      case 216: // SimpleDefinedType
      case 228: // ModuleIdentifier
      case 246: // GlobalModuleReference
      case 249: // Symbol
      case 250: // Reference
      case 373: // typereference
      case 374: // identifier
      case 375: // valuereference
      case 376: // modulereference
      case 377: // objectclassreference
      case 378: // word
        yylhs.value.build< std::string > ();
        break;

      case 251: // AssignmentList
        yylhs.value.build< std::vector<Assignment> > ();
        break;

      case 162: // FieldSpecList
      case 163: // FieldSpec
      case 166: // TypeFieldSpec
      case 170: // FixedTypeValueFieldSpec
        yylhs.value.build< std::vector<ClassField> > ();
        break;

      case 240: // Exports
        yylhs.value.build< std::vector<Export> > ();
        break;

      case 242: // Imports
      case 243: // SymbolsImported
      case 244: // SymbolsFromModuleList
        yylhs.value.build< std::vector<Import> > ();
        break;

      case 276: // NamedNumberList
        yylhs.value.build< std::vector<NamedNumber> > ();
        break;

      case 297: // AlternativeTypeLists
      case 298: // RootAlternativeTypeList
      case 299: // AlternativeTypeList
        yylhs.value.build< std::vector<NamedType> > ();
        break;

      case 308: // ObjectIdentifierValue
      case 309: // ObjIdComponentsList
        yylhs.value.build< std::vector<ObjectIdComponentValue> > ();
        break;

      case 257: // ActualParameterList
        yylhs.value.build< std::vector<Type> > ();
        break;

      case 272: // SequenceOfValues
        yylhs.value.build< std::vector<Value> > ();
        break;

      case 165: // FieldNameList
      case 167: // OneOrManyTypeFieldReference
      case 248: // SymbolList
        yylhs.value.build< std::vector<std::string> > ();
        break;

      default:
        break;
    }


      // Compute the default @$.
      {
        slice<stack_symbol_type, stack_type> slice (yystack_, yylen);
        YYLLOC_DEFAULT (yylhs.location, slice, yylen);
      }

      // Perform the reduction.
      YY_REDUCE_PRINT (yyn);
      try
        {
          switch (yyn)
            {
  case 4:
#line 333 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yystack_[2].value.as< Module > ().module_reference = yystack_[9].value.as< std::string > ();
      yystack_[2].value.as< Module > ().tagging_default = yystack_[6].value.as< TaggingMode > ();
      context.asn1_tree.modules.push_back(yystack_[2].value.as< Module > ()); }
#line 6301 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 10:
#line 350 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = "TYPE-IDENTIFIER"; }
#line 6307 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 11:
#line 352 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = "TYPE-IDENTIFIER"; }
#line 6313 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 12:
#line 356 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{yystack_[2].value.as< std::string > (), yystack_[0].value.as< ObjectClassAssignment > ()}; }
#line 6319 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 13:
#line 360 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << "Warning - Unhandled DefinedObjectClass\n"; }
#line 6325 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 14:
#line 362 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectClassAssignment > () = yystack_[0].value.as< ObjectClassAssignment > (); }
#line 6331 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 15:
#line 367 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectClassAssignment > () = {yystack_[2].value.as< std::vector<ClassField> > ()}; }
#line 6337 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 16:
#line 371 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<ClassField> > () = yystack_[0].value.as< std::vector<ClassField> > (); }
#line 6343 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 17:
#line 373 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<ClassField> > () = yystack_[2].value.as< std::vector<ClassField> > (); yylhs.value.as< std::vector<ClassField> > ().insert(yylhs.value.as< std::vector<ClassField> > ().end(), yystack_[0].value.as< std::vector<ClassField> > ().begin(), yystack_[0].value.as< std::vector<ClassField> > ().end()); }
#line 6349 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 18:
#line 377 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<ClassField> > () = yystack_[0].value.as< std::vector<ClassField> > (); }
#line 6355 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 19:
#line 379 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<ClassField> > () = yystack_[0].value.as< std::vector<ClassField> > (); }
#line 6361 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 24:
#line 387 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 6367 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 25:
#line 389 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 6373 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 26:
#line 397 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<std::string> > ().push_back(yystack_[0].value.as< std::string > ()); }
#line 6379 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 27:
#line 399 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<std::string> > () = yystack_[2].value.as< std::vector<std::string> > (); yylhs.value.as< std::vector<std::string> > ().push_back(yystack_[0].value.as< std::string > ()); }
#line 6385 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 28:
#line 403 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { for (const std::string& name : yystack_[1].value.as< std::vector<std::string> > ()) yylhs.value.as< std::vector<ClassField> > ().push_back(ClassField{name, TypeField{}}); }
#line 6391 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 29:
#line 407 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<std::string> > ().push_back(yystack_[0].value.as< std::string > ()); }
#line 6397 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 30:
#line 409 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<std::string> > () = yystack_[1].value.as< std::vector<std::string> > (); yylhs.value.as< std::vector<std::string> > ().push_back(yystack_[0].value.as< std::string > ()); }
#line 6403 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 37:
#line 423 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<ClassField> > ().push_back(ClassField{yystack_[3].value.as< std::string > (), FixedTypeValueField{yystack_[2].value.as< Type > ()}}); }
#line 6409 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 86:
#line 538 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{yystack_[3].value.as< std::string > (), ObjectSetAssignment{}}; }
#line 6415 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 93:
#line 558 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectClassFieldType > () = {DefinedType{{}, }, yystack_[0].value.as< std::vector<std::string> > ()}; }
#line 6421 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 94:
#line 560 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectClassFieldType > () = {DefinedType{{}, yystack_[2].value.as< std::string > ()}, yystack_[0].value.as< std::vector<std::string> > ()}; }
#line 6427 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 95:
#line 567 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 6433 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 96:
#line 569 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 6439 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 97:
#line 571 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 6445 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 98:
#line 573 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 6451 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 99:
#line 575 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 6457 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 100:
#line 580 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[3].value.as< std::string > (), TypeAssignment{yystack_[0].value.as< Type > ()}, {}, yystack_[2].value.as< std::set<std::string> > () }; }
#line 6463 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 101:
#line 584 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[4].value.as< std::string > (), ValueAssignment{} }; }
#line 6469 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 102:
#line 588 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[4].value.as< std::string > (), ValueAssignment{} }; }
#line 6475 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 103:
#line 592 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[3].value.as< std::string > (), ObjectClassAssignment{} }; }
#line 6481 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 104:
#line 596 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[4].value.as< std::string > (), ObjectClassAssignment{} }; }
#line 6487 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 105:
#line 604 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::set<std::string> > () = yystack_[1].value.as< std::set<std::string> > (); }
#line 6493 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 106:
#line 608 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::set<std::string> > ().insert(yystack_[0].value.as< std::string > ()); }
#line 6499 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 107:
#line 610 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::set<std::string> > () = yystack_[2].value.as< std::set<std::string> > (); yystack_[2].value.as< std::set<std::string> > ().insert(yystack_[0].value.as< std::string > ()); }
#line 6505 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 108:
#line 614 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 6511 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 109:
#line 616 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 6517 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 118:
#line 669 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 6523 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 132:
#line 694 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << "Simple constraint\n"; }
#line 6529 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 133:
#line 696 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << "Relation constraint\n"; }
#line 6535 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 146:
#line 738 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    {
    yylhs.value.as< std::string > () = yystack_[1].value.as< std::string > ();
}
#line 6543 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 161:
#line 777 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggingMode > () = TaggingMode::explicit_; }
#line 6549 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 162:
#line 779 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggingMode > () = TaggingMode::implicit; }
#line 6555 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 163:
#line 781 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggingMode > () = TaggingMode::automatic; }
#line 6561 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 164:
#line 783 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggingMode > () = TaggingMode::explicit_; }
#line 6567 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 167:
#line 791 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Module > () = Module{ {}, TaggingMode(), yystack_[2].value.as< std::vector<Export> > (), yystack_[1].value.as< std::vector<Import> > (), yystack_[0].value.as< std::vector<Assignment> > ()}; }
#line 6573 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 168:
#line 793 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { }
#line 6579 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 174:
#line 806 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Import> > () = yystack_[1].value.as< std::vector<Import> > (); }
#line 6585 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 176:
#line 811 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Import> > () = yystack_[0].value.as< std::vector<Import> > (); }
#line 6591 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 178:
#line 816 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Import> > ().push_back(yystack_[0].value.as< Import > ()); }
#line 6597 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 179:
#line 818 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Import> > () = yystack_[1].value.as< std::vector<Import> > (); yylhs.value.as< std::vector<Import> > ().push_back(yystack_[0].value.as< Import > ()); }
#line 6603 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 180:
#line 822 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Import > () = Import{ yystack_[0].value.as< std::string > (), yystack_[2].value.as< std::vector<std::string> > () }; }
#line 6609 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 181:
#line 826 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[1].value.as< std::string > (); }
#line 6615 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 185:
#line 835 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<std::string> > ().push_back(yystack_[0].value.as< std::string > ()); }
#line 6621 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 186:
#line 837 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<std::string> > () = yystack_[2].value.as< std::vector<std::string> > (); yylhs.value.as< std::vector<std::string> > ().push_back(yystack_[0].value.as< std::string > ()); }
#line 6627 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 187:
#line 841 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 6633 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 188:
#line 845 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 6639 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 189:
#line 847 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[2].value.as< std::string > (); }
#line 6645 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 190:
#line 849 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 6651 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 191:
#line 858 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Assignment> > ().push_back(yystack_[0].value.as< Assignment > ()); }
#line 6657 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 192:
#line 860 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Assignment> > () = yystack_[0].value.as< std::vector<Assignment> > (); yylhs.value.as< std::vector<Assignment> > ().push_back(yystack_[1].value.as< Assignment > ()); }
#line 6663 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 193:
#line 864 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 6669 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 194:
#line 866 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 6675 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 195:
#line 868 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 6681 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 196:
#line 870 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 6687 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 197:
#line 873 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 6693 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 198:
#line 875 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 6699 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 199:
#line 879 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< DefinedType > () = yystack_[0].value.as< DefinedType > (); }
#line 6705 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 200:
#line 881 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< DefinedType > () = DefinedType{absl::nullopt, yystack_[0].value.as< std::string > (), {}}; }
#line 6711 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 201:
#line 883 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< DefinedType > () = yystack_[0].value.as< DefinedType > (); }
#line 6717 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 202:
#line 889 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< DefinedValue > () = DefinedValue{yystack_[0].value.as< std::string > ()}; }
#line 6723 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 204:
#line 894 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< DefinedType > () = DefinedType{ absl::nullopt, yystack_[3].value.as< std::string > (), yystack_[1].value.as< std::vector<Type> > ()}; }
#line 6729 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 206:
#line 901 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Type> > ().push_back(yystack_[0].value.as< Type > ()); }
#line 6735 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 207:
#line 903 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Type> > () = yystack_[0].value.as< std::vector<Type> > (); yylhs.value.as< std::vector<Type> > ().push_back(yystack_[2].value.as< Type > ()); }
#line 6741 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 208:
#line 907 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = yystack_[0].value.as< Type > (); }
#line 6747 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 209:
#line 909 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << "Warning: Not yet dealing with value paramaters\n"; }
#line 6753 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 211:
#line 922 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< DefinedType > () = DefinedType{yystack_[2].value.as< std::string > (), yystack_[0].value.as< std::string > (), {}}; }
#line 6759 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 213:
#line 951 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[2].value.as< std::string > (), TypeAssignment{yystack_[0].value.as< Type > ()}, {} }; }
#line 6765 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 214:
#line 955 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[3].value.as< std::string > (), ValueAssignment{yystack_[2].value.as< Type > (), yystack_[0].value.as< Value > ()}, {} }; }
#line 6771 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 215:
#line 959 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[3].value.as< std::string > (), TypeAssignment{yystack_[2].value.as< Type > ()}, {} }; }
#line 6777 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 216:
#line 963 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = yystack_[0].value.as< BuiltinType > (); }
#line 6783 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 217:
#line 965 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = yystack_[0].value.as< Type > (); }
#line 6789 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 218:
#line 967 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = yystack_[0].value.as< DefinedType > (); }
#line 6795 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 219:
#line 969 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << "Warning: Not handled - SelectionType\n"; }
#line 6801 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 220:
#line 971 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << "Warning: Not handled - TypeFromObject\n"; }
#line 6807 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 221:
#line 975 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = AnyType(); }
#line 6813 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 222:
#line 976 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< BitStringType > (); }
#line 6819 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 223:
#line 977 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< BooleanType > (); }
#line 6825 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 224:
#line 978 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< CharacterStringType > (); }
#line 6831 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 225:
#line 979 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< ChoiceType > (); }
#line 6837 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 226:
#line 980 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< DateType > (); }
#line 6843 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 227:
#line 981 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< DateTimeType > (); }
#line 6849 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 228:
#line 982 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< DurationType > (); }
#line 6855 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 229:
#line 983 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< EmbeddedPDVType > (); }
#line 6861 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 230:
#line 984 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< EnumeratedType > (); }
#line 6867 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 231:
#line 985 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< ExternalType > (); }
#line 6873 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 232:
#line 986 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = GeneralizedTimeType(); }
#line 6879 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 233:
#line 987 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< InstanceOfType > (); }
#line 6885 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 234:
#line 988 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< IntegerType > (); }
#line 6891 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 235:
#line 989 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< IRIType > (); }
#line 6897 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 236:
#line 990 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< NullType > (); }
#line 6903 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 237:
#line 991 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< ObjectClassFieldType > (); }
#line 6909 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 238:
#line 992 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = ObjectDescriptorType(); }
#line 6915 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 239:
#line 993 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< ObjectIdentifierType > (); }
#line 6921 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 240:
#line 994 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< OctetStringType > (); }
#line 6927 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 241:
#line 995 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< RealType > (); }
#line 6933 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 242:
#line 996 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< RelativeIRIType > (); }
#line 6939 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 243:
#line 997 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< RelativeOIDType > (); }
#line 6945 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 244:
#line 998 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< SequenceType > (); }
#line 6951 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 245:
#line 999 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< SequenceOfType > (); }
#line 6957 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 246:
#line 1000 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< SetType > (); }
#line 6963 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 247:
#line 1001 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< SetOfType > (); }
#line 6969 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 248:
#line 1002 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< PrefixedType > (); }
#line 6975 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 249:
#line 1003 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< TimeType > (); }
#line 6981 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 250:
#line 1004 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< TimeOfDayType > (); }
#line 6987 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 251:
#line 1005 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = UTCTimeType(); }
#line 6993 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 252:
#line 1009 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< NamedType > () = NamedType{ yystack_[1].value.as< std::string > (), yystack_[0].value.as< Type > () }; }
#line 6999 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 253:
#line 1013 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Warning: Unhandled field: BooleanValue\n"); }
#line 7005 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 254:
#line 1015 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Warning: Unhandled field: IRIValue\n"); }
#line 7011 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 255:
#line 1017 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Warning: Unhandled field: ASN_NULL\n"); }
#line 7017 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 256:
#line 1019 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Warning: Unhandled field: TimeValue\n"); }
#line 7023 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 257:
#line 1021 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = BitStringValue{yystack_[0].value.as< std::string > ()}; }
#line 7029 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 258:
#line 1023 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = HexStringValue{yystack_[0].value.as< std::string > ()}; }
#line 7035 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 259:
#line 1025 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = CharStringValue{yystack_[0].value.as< std::string > ()}; }
#line 7041 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 260:
#line 1027 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Warning: Unhandled field: CONTAINING\n"); }
#line 7047 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 261:
#line 1029 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = yystack_[0].value.as< DefinedValue > (); }
#line 7053 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 262:
#line 1031 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = NamedNumber{yystack_[3].value.as< std::string > (), yystack_[1].value.as< long long > ()}; }
#line 7059 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 264:
#line 1034 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = yystack_[0].value.as< long long > (); }
#line 7065 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 265:
#line 1036 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = yystack_[0].value.as< double > (); }
#line 7071 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 266:
#line 1038 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Warning: Unhandled field: ValueCommaListChoice\n"); }
#line 7077 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 267:
#line 1040 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Warning: Unhandled field: ValueCommaListChoice\n"); }
#line 7083 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 272:
#line 1048 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = yystack_[1].value.as< std::vector<Value> > (); }
#line 7089 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 273:
#line 1050 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Warning: Unhandled field: ValueChoice\n"); }
#line 7095 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 274:
#line 1052 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Warning: Unhandled field: OPTIONAL\n"); }
#line 7101 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 275:
#line 1054 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Warning: Unhandled field: ValueCommaListChoice\n"); }
#line 7107 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 276:
#line 1056 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Warning: Unhandled field: BY\n"); }
#line 7113 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 277:
#line 1058 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { std::cerr << std::string("Warning: Unhandled field: WITH\n"); }
#line 7119 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 279:
#line 1064 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > () = yystack_[0].value.as< Value > (); }
#line 7125 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 280:
#line 1066 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = yystack_[0].value.as< std::string > (); }
#line 7131 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 286:
#line 1081 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Value> > ().push_back(yystack_[0].value.as< Value > ()); }
#line 7137 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 287:
#line 1083 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Value> > () = yystack_[1].value.as< std::vector<Value> > (); yylhs.value.as< std::vector<Value> > ().push_back(yystack_[0].value.as< Value > ()); }
#line 7143 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 291:
#line 1098 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< IntegerType > () = IntegerType{{}}; }
#line 7149 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 292:
#line 1100 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< IntegerType > () = IntegerType{yystack_[1].value.as< std::vector<NamedNumber> > ()}; }
#line 7155 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 293:
#line 1104 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedNumber> > () = {yystack_[0].value.as< NamedNumber > ()}; }
#line 7161 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 294:
#line 1106 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedNumber> > () = yystack_[2].value.as< std::vector<NamedNumber> > (); yylhs.value.as< std::vector<NamedNumber> > ().push_back(yystack_[0].value.as< NamedNumber > ()); }
#line 7167 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 295:
#line 1110 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< NamedNumber > () = NamedNumber{ yystack_[3].value.as< std::string > (), yystack_[1].value.as< long long > () }; }
#line 7173 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 296:
#line 1112 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< NamedNumber > () = NamedNumber{ yystack_[3].value.as< std::string > (), 0 }; }
#line 7179 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 297:
#line 1116 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< long long > () = yystack_[0].value.as< long long > (); }
#line 7185 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 298:
#line 1118 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< long long > () = -yystack_[0].value.as< long long > (); }
#line 7191 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 299:
#line 1122 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[1].value.as< EnumeratedType > (); }
#line 7197 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 300:
#line 1126 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[0].value.as< EnumeratedType > ();
      yylhs.value.as< EnumeratedType > ().accept_anything = false; }
#line 7204 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 301:
#line 1129 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[3].value.as< EnumeratedType > ();
      yylhs.value.as< EnumeratedType > ().accept_anything = true; }
#line 7211 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 302:
#line 1132 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[5].value.as< EnumeratedType > ();
      yylhs.value.as< EnumeratedType > ().accept_anything = true;
      yylhs.value.as< EnumeratedType > ().enum_values.insert(yylhs.value.as< EnumeratedType > ().enum_values.end(), yystack_[0].value.as< EnumeratedType > ().enum_values.begin(), yystack_[0].value.as< EnumeratedType > ().enum_values.end()); }
#line 7219 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 304:
#line 1139 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > ().enum_values.push_back(yystack_[0].value.as< EnumerationValue > ()); }
#line 7225 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 305:
#line 1141 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[2].value.as< EnumeratedType > (); yylhs.value.as< EnumeratedType > ().enum_values.push_back(yystack_[0].value.as< EnumerationValue > ()); }
#line 7231 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 306:
#line 1145 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumerationValue > ().name  = yystack_[0].value.as< std::string > (); }
#line 7237 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 307:
#line 1147 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumerationValue > ().name  = yystack_[0].value.as< NamedNumber > ().name;
      yylhs.value.as< EnumerationValue > ().value = yystack_[0].value.as< NamedNumber > ().number; }
#line 7244 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 309:
#line 1158 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BitStringType > () = BitStringType{}; }
#line 7250 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 310:
#line 1160 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BitStringType > () = BitStringType{}; }
#line 7256 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 317:
#line 1189 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SequenceType > () = SequenceType(); }
#line 7262 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 318:
#line 1191 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SequenceType > () = SequenceType{yystack_[1].value.as< ComponentTypeList > ()}; }
#line 7268 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 319:
#line 1195 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[0].value.as< ComponentTypeList > (); }
#line 7274 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 320:
#line 1197 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[3].value.as< ComponentTypeList > (); }
#line 7280 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 321:
#line 1199 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[5].value.as< ComponentTypeList > (); yylhs.value.as< ComponentTypeList > ().insert(yylhs.value.as< ComponentTypeList > ().end(), yystack_[0].value.as< ComponentTypeList > ().begin(), yystack_[0].value.as< ComponentTypeList > ().end()); }
#line 7286 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 322:
#line 1201 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[7].value.as< ComponentTypeList > (); yylhs.value.as< ComponentTypeList > ().insert(yylhs.value.as< ComponentTypeList > ().end(), yystack_[2].value.as< ComponentTypeList > ().begin(), yystack_[2].value.as< ComponentTypeList > ().end()); }
#line 7292 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 323:
#line 1203 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[9].value.as< ComponentTypeList > (); yylhs.value.as< ComponentTypeList > ().insert(yylhs.value.as< ComponentTypeList > ().end(), yystack_[4].value.as< ComponentTypeList > ().begin(), yystack_[4].value.as< ComponentTypeList > ().end()); yylhs.value.as< ComponentTypeList > ().insert(yylhs.value.as< ComponentTypeList > ().end(), yystack_[0].value.as< ComponentTypeList > ().begin(), yystack_[0].value.as< ComponentTypeList > ().end()); }
#line 7298 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 324:
#line 1205 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[0].value.as< ComponentTypeList > (); }
#line 7304 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 325:
#line 1207 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[2].value.as< ComponentTypeList > (); }
#line 7310 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 326:
#line 1209 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = {}; }
#line 7316 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 327:
#line 1211 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = {}; }
#line 7322 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 328:
#line 1215 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = ComponentTypeList{yystack_[0].value.as< ComponentType > ()}; }
#line 7328 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 329:
#line 1217 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yystack_[2].value.as< ComponentTypeList > ().push_back(yystack_[0].value.as< ComponentType > ()); yylhs.value.as< ComponentTypeList > () = yystack_[2].value.as< ComponentTypeList > (); }
#line 7334 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 330:
#line 1221 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentType > () = ComponentType{yystack_[0].value.as< NamedType > (), false, absl::nullopt, absl::nullopt}; }
#line 7340 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 331:
#line 1223 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentType > () = ComponentType{yystack_[1].value.as< NamedType > (), true, absl::nullopt, absl::nullopt}; }
#line 7346 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 332:
#line 1225 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentType > () = ComponentType{yystack_[2].value.as< NamedType > (), false, yystack_[0].value.as< Value > (), absl::nullopt}; }
#line 7352 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 333:
#line 1227 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentType > () = ComponentType{{}, false, absl::nullopt, yystack_[0].value.as< Type > ()}; }
#line 7358 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 334:
#line 1239 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SequenceOfType > () = SequenceOfType{ false, nullptr, std::make_shared<Type>(yystack_[0].value.as< Type > ()) }; }
#line 7364 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 335:
#line 1241 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SequenceOfType > () = SequenceOfType{ true, std::make_shared<NamedType>(yystack_[0].value.as< NamedType > ()), nullptr }; }
#line 7370 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 336:
#line 1245 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SetType > () = SetType{}; }
#line 7376 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 337:
#line 1247 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SetType > () = SetType{yystack_[1].value.as< ComponentTypeList > ()}; }
#line 7382 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 338:
#line 1251 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SetOfType > () = SetOfType{ false, nullptr, std::make_shared<Type>(yystack_[0].value.as< Type > ()) }; }
#line 7388 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 339:
#line 1253 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SetOfType > () = SetOfType{ true, std::make_shared<NamedType>(yystack_[0].value.as< NamedType > ()), nullptr }; }
#line 7394 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 340:
#line 1257 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ChoiceType > () = ChoiceType{ yystack_[1].value.as< std::vector<NamedType> > () }; }
#line 7400 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 341:
#line 1261 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedType> > () = yystack_[0].value.as< std::vector<NamedType> > (); }
#line 7406 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 342:
#line 1265 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedType> > () = yystack_[0].value.as< std::vector<NamedType> > (); }
#line 7412 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 343:
#line 1267 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedType> > () = yystack_[2].value.as< std::vector<NamedType> > (); }
#line 7418 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 344:
#line 1269 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedType> > () = yystack_[4].value.as< std::vector<NamedType> > (); yylhs.value.as< std::vector<NamedType> > ().insert(yylhs.value.as< std::vector<NamedType> > ().begin(), yystack_[0].value.as< std::vector<NamedType> > ().begin(), yystack_[0].value.as< std::vector<NamedType> > ().end()); }
#line 7424 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 345:
#line 1273 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedType> > () = std::vector<NamedType> { yystack_[0].value.as< NamedType > () }; }
#line 7430 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 346:
#line 1275 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yystack_[2].value.as< std::vector<NamedType> > ().push_back( yystack_[0].value.as< NamedType > () ); yylhs.value.as< std::vector<NamedType> > () = yystack_[2].value.as< std::vector<NamedType> > (); }
#line 7436 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 348:
#line 1285 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< PrefixedType > () = PrefixedType(yystack_[0].value.as< TaggedType > ()); }
#line 7442 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 349:
#line 1289 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggedType > () = TaggedType{ yystack_[1].value.as< Tag > (), TaggingMode::automatic, yystack_[0].value.as< Type > () }; }
#line 7448 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 350:
#line 1291 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggedType > () = TaggedType{ yystack_[2].value.as< Tag > (), TaggingMode::implicit, yystack_[0].value.as< Type > () }; }
#line 7454 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 351:
#line 1293 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggedType > () = TaggedType{ yystack_[2].value.as< Tag > (), TaggingMode::explicit_, yystack_[0].value.as< Type > () }; }
#line 7460 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 352:
#line 1297 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Tag > () = Tag{ yystack_[2].value.as< Class > (), yystack_[1].value.as< int > () }; }
#line 7466 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 355:
#line 1305 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< int > () = yystack_[0].value.as< long long > (); }
#line 7472 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 357:
#line 1310 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Class > () = Class::universal; }
#line 7478 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 358:
#line 1312 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Class > () = Class::application; }
#line 7484 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 359:
#line 1314 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Class > () = Class::private_; }
#line 7490 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 360:
#line 1316 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Class > () = Class::context_specific; }
#line 7496 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 362:
#line 1329 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<ObjectIdComponentValue> > () = yystack_[1].value.as< std::vector<ObjectIdComponentValue> > (); std::reverse(yylhs.value.as< std::vector<ObjectIdComponentValue> > ().begin(), yylhs.value.as< std::vector<ObjectIdComponentValue> > ().end()); }
#line 7502 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 363:
#line 1331 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<ObjectIdComponentValue> > () = yystack_[1].value.as< std::vector<ObjectIdComponentValue> > (); std::reverse(yylhs.value.as< std::vector<ObjectIdComponentValue> > ().begin(), yylhs.value.as< std::vector<ObjectIdComponentValue> > ().end()); }
#line 7508 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 364:
#line 1335 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<ObjectIdComponentValue> > ().push_back(yystack_[0].value.as< ObjectIdComponentValue > ()); }
#line 7514 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 365:
#line 1337 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<ObjectIdComponentValue> > () = yystack_[0].value.as< std::vector<ObjectIdComponentValue> > (); yylhs.value.as< std::vector<ObjectIdComponentValue> > ().push_back(yystack_[1].value.as< ObjectIdComponentValue > ()); }
#line 7520 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 366:
#line 1341 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > () = yystack_[0].value.as< ObjectIdComponentValue > (); }
#line 7526 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 367:
#line 1343 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > () = yystack_[0].value.as< ObjectIdComponentValue > (); }
#line 7532 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 368:
#line 1345 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > () = yystack_[0].value.as< ObjectIdComponentValue > (); }
#line 7538 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 369:
#line 1349 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > ().name = yystack_[0].value.as< std::string > (); }
#line 7544 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 370:
#line 1353 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > ().value = yystack_[0].value.as< long long > (); }
#line 7550 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 372:
#line 1358 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > () = yystack_[1].value.as< ObjectIdComponentValue > (); yylhs.value.as< ObjectIdComponentValue > ().name = yystack_[3].value.as< std::string > (); }
#line 7556 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 406:
#line 1454 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = yystack_[1].value.as< Type > (); }
#line 7562 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 407:
#line 1456 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = yystack_[0].value.as< Type > (); }
#line 7568 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 408:
#line 1460 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = SetOfType{ false, nullptr, std::make_shared<Type>(yystack_[0].value.as< Type > ()) }; }
#line 7574 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 409:
#line 1462 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = SetOfType{ false, nullptr, std::make_shared<Type>(yystack_[0].value.as< Type > ()) }; }
#line 7580 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 410:
#line 1464 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = SequenceOfType{ false, nullptr, std::make_shared<Type>(yystack_[0].value.as< Type > ()) }; }
#line 7586 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 411:
#line 1466 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = SequenceOfType{ false, nullptr, std::make_shared<Type>(yystack_[0].value.as< Type > ()) }; }
#line 7592 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 412:
#line 1468 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = SetOfType{ true, std::make_shared<NamedType>(yystack_[0].value.as< NamedType > ()), nullptr }; }
#line 7598 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 413:
#line 1470 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = SetOfType{ true, std::make_shared<NamedType>(yystack_[0].value.as< NamedType > ()), nullptr }; }
#line 7604 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 414:
#line 1472 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = SequenceOfType{ true, std::make_shared<NamedType>(yystack_[0].value.as< NamedType > ()), nullptr }; }
#line 7610 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 415:
#line 1474 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = SequenceOfType{ true, std::make_shared<NamedType>(yystack_[0].value.as< NamedType > ()), nullptr }; }
#line 7616 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 498:
#line 1642 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 7622 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 499:
#line 1646 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 7628 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 500:
#line 1650 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 7634 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 501:
#line 1654 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 7640 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 502:
#line 1658 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 7646 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;


#line 7650 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
            default:
              break;
            }
        }
      catch (const syntax_error& yyexc)
        {
          error (yyexc);
          YYERROR;
        }
      YY_SYMBOL_PRINT ("-> $$ =", yylhs);
      yypop_ (yylen);
      yylen = 0;
      YY_STACK_PRINT ();

      // Shift the result of the reduction.
      yypush_ (YY_NULLPTR, yylhs);
    }
    goto yynewstate;

  /*--------------------------------------.
  | yyerrlab -- here on detecting error.  |
  `--------------------------------------*/
  yyerrlab:
    // If not already recovering from an error, report this error.
    if (!yyerrstatus_)
      {
        ++yynerrs_;
        error (yyla.location, yysyntax_error_ (yystack_[0].state, yyla));
      }


    yyerror_range[1].location = yyla.location;
    if (yyerrstatus_ == 3)
      {
        /* If just tried and failed to reuse lookahead token after an
           error, discard it.  */

        // Return failure if at end of input.
        if (yyla.type_get () == yyeof_)
          YYABORT;
        else if (!yyla.empty ())
          {
            yy_destroy_ ("Error: discarding", yyla);
            yyla.clear ();
          }
      }

    // Else will try to reuse lookahead token after shifting the error token.
    goto yyerrlab1;


  /*---------------------------------------------------.
  | yyerrorlab -- error raised explicitly by YYERROR.  |
  `---------------------------------------------------*/
  yyerrorlab:

    /* Pacify compilers like GCC when the user code never invokes
       YYERROR and the label yyerrorlab therefore never appears in user
       code.  */
    if (false)
      goto yyerrorlab;
    yyerror_range[1].location = yystack_[yylen - 1].location;
    /* Do not reclaim the symbols of the rule whose action triggered
       this YYERROR.  */
    yypop_ (yylen);
    yylen = 0;
    goto yyerrlab1;

  /*-------------------------------------------------------------.
  | yyerrlab1 -- common code for both syntax error and YYERROR.  |
  `-------------------------------------------------------------*/
  yyerrlab1:
    yyerrstatus_ = 3;   // Each real token shifted decrements this.
    {
      stack_symbol_type error_token;
      for (;;)
        {
          yyn = yypact_[yystack_[0].state];
          if (!yy_pact_value_is_default_ (yyn))
            {
              yyn += yyterror_;
              if (0 <= yyn && yyn <= yylast_ && yycheck_[yyn] == yyterror_)
                {
                  yyn = yytable_[yyn];
                  if (0 < yyn)
                    break;
                }
            }

          // Pop the current state because it cannot handle the error token.
          if (yystack_.size () == 1)
            YYABORT;

          yyerror_range[1].location = yystack_[0].location;
          yy_destroy_ ("Error: popping", yystack_[0]);
          yypop_ ();
          YY_STACK_PRINT ();
        }

      yyerror_range[2].location = yyla.location;
      YYLLOC_DEFAULT (error_token.location, yyerror_range, 2);

      // Shift the error token.
      error_token.state = yyn;
      yypush_ ("Shifting", error_token);
    }
    goto yynewstate;

    // Accept.
  yyacceptlab:
    yyresult = 0;
    goto yyreturn;

    // Abort.
  yyabortlab:
    yyresult = 1;
    goto yyreturn;

  yyreturn:
    if (!yyla.empty ())
      yy_destroy_ ("Cleanup: discarding lookahead", yyla);

    /* Do not reclaim the symbols of the rule whose action triggered
       this YYABORT or YYACCEPT.  */
    yypop_ (yylen);
    while (1 < yystack_.size ())
      {
        yy_destroy_ ("Cleanup: popping", yystack_[0]);
        yypop_ ();
      }

    return yyresult;
  }
    catch (...)
      {
        YYCDEBUG << "Exception caught: cleaning lookahead and stack"
                 << std::endl;
        // Do not try to display the values of the reclaimed symbols,
        // as their printer might throw an exception.
        if (!yyla.empty ())
          yy_destroy_ (YY_NULLPTR, yyla);

        while (1 < yystack_.size ())
          {
            yy_destroy_ (YY_NULLPTR, yystack_[0]);
            yypop_ ();
          }
        throw;
      }
  }

  void
  asn1_parser::error (const syntax_error& yyexc)
  {
    error (yyexc.location, yyexc.what());
  }

  // Generate an error message.
  std::string
  asn1_parser::yysyntax_error_ (state_type yystate, const symbol_type& yyla) const
  {
    // Number of reported tokens (one for the "unexpected", one per
    // "expected").
    size_t yycount = 0;
    // Its maximum.
    enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
    // Arguments of yyformat.
    char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];

    /* There are many possibilities here to consider:
       - If this state is a consistent state with a default action, then
         the only way this function was invoked is if the default action
         is an error action.  In that case, don't check for expected
         tokens because there are none.
       - The only way there can be no lookahead present (in yyla) is
         if this state is a consistent state with a default action.
         Thus, detecting the absence of a lookahead is sufficient to
         determine that there is no unexpected or expected token to
         report.  In that case, just report a simple "syntax error".
       - Don't assume there isn't a lookahead just because this state is
         a consistent state with a default action.  There might have
         been a previous inconsistent state, consistent state with a
         non-default action, or user semantic action that manipulated
         yyla.  (However, yyla is currently not documented for users.)
       - Of course, the expected token list depends on states to have
         correct lookahead information, and it depends on the parser not
         to perform extra reductions after fetching a lookahead from the
         scanner and before detecting a syntax error.  Thus, state
         merging (from LALR or IELR) and default reductions corrupt the
         expected token list.  However, the list is correct for
         canonical LR with one exception: it will still contain any
         token that will not be accepted due to an error action in a
         later state.
    */
    if (!yyla.empty ())
      {
        int yytoken = yyla.type_get ();
        yyarg[yycount++] = yytname_[yytoken];
        int yyn = yypact_[yystate];
        if (!yy_pact_value_is_default_ (yyn))
          {
            /* Start YYX at -YYN if negative to avoid negative indexes in
               YYCHECK.  In other words, skip the first -YYN actions for
               this state because they are default actions.  */
            int yyxbegin = yyn < 0 ? -yyn : 0;
            // Stay within bounds of both yycheck and yytname.
            int yychecklim = yylast_ - yyn + 1;
            int yyxend = yychecklim < yyntokens_ ? yychecklim : yyntokens_;
            for (int yyx = yyxbegin; yyx < yyxend; ++yyx)
              if (yycheck_[yyx + yyn] == yyx && yyx != yyterror_
                  && !yy_table_value_is_error_ (yytable_[yyx + yyn]))
                {
                  if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                    {
                      yycount = 1;
                      break;
                    }
                  else
                    yyarg[yycount++] = yytname_[yyx];
                }
          }
      }

    char const* yyformat = YY_NULLPTR;
    switch (yycount)
      {
#define YYCASE_(N, S)                         \
        case N:                               \
          yyformat = S;                       \
        break
        YYCASE_(0, YY_("syntax error"));
        YYCASE_(1, YY_("syntax error, unexpected %s"));
        YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
        YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
        YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
        YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
#undef YYCASE_
      }

    std::string yyres;
    // Argument number.
    size_t yyi = 0;
    for (char const* yyp = yyformat; *yyp; ++yyp)
      if (yyp[0] == '%' && yyp[1] == 's' && yyi < yycount)
        {
          yyres += yytnamerr_ (yyarg[yyi++]);
          ++yyp;
        }
      else
        yyres += *yyp;
    return yyres;
  }


  const short int asn1_parser::yypact_ninf_ = -653;

  const short int asn1_parser::yytable_ninf_ = -503;

  const short int
  asn1_parser::yypact_[] =
  {
     -76,  -653,    78,   -76,    67,   119,  -653,  -653,   117,    21,
    -653,    30,  -653,   175,   192,  -653,  -653,   168,    21,  -653,
    -653,  -653,   143,   177,  -653,  -653,   200,   240,   265,   273,
    -653,  -653,   351,   359,   244,  -653,  -653,  -653,   321,   282,
     267,  -653,  -653,  -653,   359,   284,  -653,   385,  -653,   244,
    -653,   330,  -653,    -2,  -653,   354,   281,  -653,  -653,   296,
     303,  -653,  -653,   320,  -653,   393,   260,    49,  -653,  -653,
     260,   329,  -653,   313,   260,  -653,   -20,   334,  -653,  -653,
    -653,  -653,  -653,  -653,  -653,  -653,  -653,    49,  -653,  -653,
    -653,  2207,  2508,  -653,  -653,  -653,  -653,   -76,  3007,    13,
    -653,  -653,  -653,  -653,  -653,   357,  -653,  -653,   358,   338,
    -653,  -653,  -653,   372,   340,  -653,  -653,  -653,  -653,  -653,
     379,   343,  -653,  -653,   399,  -653,   369,  -653,  -653,  -653,
    -653,  -653,    -5,     1,  -653,  -653,  -653,  -653,  -653,  -653,
    -653,  -653,  -653,  -653,  2607,   454,  -653,   336,  -653,  -653,
     356,  -653,  -653,  2706,   337,  -653,  -653,   355,  -653,  -653,
     364,   228,  -653,  -653,  -653,  -653,  -653,  -653,  -653,  -653,
    -653,  -653,  -653,  -653,  -653,  -653,  -653,  -653,  2310,  -653,
    -653,  -653,  -653,  -653,  -653,  -653,  -653,  -653,  -653,  -653,
    -653,  -653,  -653,  -653,  -653,   150,   348,   344,  3106,   234,
     144,   345,  -653,   -41,  -653,   153,  -653,  -653,   336,   123,
    -653,   349,  -653,   361,   365,   173,   362,  -653,   363,   371,
    -653,   368,   374,  -653,   331,  -653,   -37,    13,   331,  -653,
    -653,  3106,   365,     4,  1216,   409,   412,  3106,    86,   416,
     424,   394,  -653,  -653,  -653,   365,   381,     6,   375,   396,
    2607,   242,   375,  1471,   401,  -653,  3106,  3106,   365,    37,
    3106,    10,   246,  2101,   493,    17,  -653,  -653,  -653,  -653,
    3007,   260,    20,    44,   378,   331,  -653,   408,  -653,   400,
    3106,   418,  -653,   423,   404,  -653,   425,  -653,   128,  -653,
     425,   365,  -653,  2809,  -653,   467,   418,  -653,     5,   430,
     419,  -653,  -653,  -653,  -653,  -653,  -653,  -653,   499,    94,
     521,  3106,   524,  -653,   365,  -653,  -653,  2101,   552,  -653,
     367,  1340,  1596,   562,   176,  -653,   444,  -653,  -653,  -653,
    -653,   365,  -653,  -653,  -653,   418,  -653,  -653,   432,   -55,
     -43,    15,    19,  -653,   499,   512,  -653,   190,  -653,  3106,
    -653,   449,   445,  -653,  -653,  -653,  -653,  -653,  -653,  3106,
    3106,   365,  -653,  -653,   451,  3106,  3106,   350,  -653,  -653,
    -653,  -653,    35,  -653,  -653,  -653,   436,  -653,  -653,   365,
    2101,   436,  -653,  -653,  -653,  -653,  -653,  -653,   453,  -653,
    2101,   -26,  -653,  -653,  2101,  -653,   199,   263,  -653,   438,
     457,  -653,  -653,   452,   447,  -653,   365,   250,   224,   450,
     441,  -653,  -653,  -653,  -653,   157,   455,  1596,  -653,   365,
     365,   436,  -653,   365,  -653,  -653,  2101,  -653,  -653,   146,
     462,  -653,  -653,   224,   456,   459,  -653,    17,   464,    17,
    -653,  -653,  -653,   465,   466,  -653,  -653,  -653,  -653,  1091,
    -653,  -653,  -653,  -653,  -653,   178,  -653,   469,  -653,   -27,
     365,  1951,  -653,  -653,   -14,    33,  -653,   331,  3106,   463,
    2077,  -653,  -653,    29,  1852,  -653,   468,    -4,  2101,  -653,
     224,  -653,   365,   475,   470,   477,   472,   476,  -653,   461,
     479,   489,  -653,  -653,  1852,  -653,  -653,  1852,  -653,   365,
     694,  -653,   365,  -653,   365,  -653,  -653,   365,  -653,   365,
    -653,  3205,  2409,    13,   187,  -653,  -653,    91,  -653,  -653,
    -653,  -653,  -653,  -653,  -653,   484,   375,   224,   224,   224,
     716,   609,  1471,  -653,  1471,  2101,  2101,  2101,  2101,  2101,
     391,    56,   490,   224,   375,   474,  -653,   491,  -653,  -653,
      40,  3774,  3862,  -653,   480,  -653,  -653,   453,  -653,  -653,
     357,  -653,  -653,  -653,   358,   338,  -653,  -653,  -653,  -653,
    2101,  -653,  -653,  -653,  -653,  -653,   372,  -653,  -653,  -653,
     340,  -653,  -653,  -653,  -653,  -653,  -653,  -653,  -653,  -653,
    -653,  -653,  -653,   379,  -653,   -26,  -653,  -653,  -653,  -653,
    -653,   399,   369,  -653,  -653,  -653,  -653,  -653,  -653,  -653,
    -653,  -653,  -653,  -653,    -5,     1,  -653,  -653,  -653,  -653,
    -653,  -653,  -653,  -653,   481,  -653,  -653,  -653,  -653,  -653,
     146,  1727,  -653,   483,   954,  -653,  -653,   365,   224,   487,
    -653,  -653,   331,    53,   492,  -653,  -653,    87,  -653,  -653,
     418,  -653,   500,   501,  -653,   365,    31,  -653,  -653,  -653,
    -653,   418,  -653,  -653,  2908,   577,   224,  -653,  -653,   -12,
    -653,  1596,  -653,   504,  -653,   183,   201,  -653,  -653,   494,
      15,  -653,  -653,   808,  -653,  -653,  -653,    25,   121,   120,
     121,    27,   510,   350,  -653,  3106,  -653,  -653,  -653,  -653,
    -653,   224,   505,   508,  -653,   224,   224,   224,   224,   224,
    -653,  -653,  -653,  -653,  -653,   509,  -653,   496,  -653,  -653,
       8,  -653,   511,   513,   331,  2101,   498,  -653,  -653,  -653,
     515,   517,  -653,   516,  -653,   506,   520,   311,   518,  2101,
     205,   530,   522,   365,  -653,   523,   525,   526,  -653,  -653,
     461,  1596,  -653,    44,  -653,  -653,  -653,  -653,    39,    43,
      43,  -653,  -653,  -653,   542,  -653,  -653,   365,  -653,  -653,
    -653,   533,  -653,  -653,   528,   224,   331,    90,    23,  2069,
    -653,    42,   224,  -653,   331,  -653,   331,  -653,  -653,   166,
    1596,   525,   331,   331,  -653,  -653,  -653,   401,  -653,  -653,
    2077,  -653,  -653,  -653,   538,  -653,   331,   529,  -653,   531,
    1091,  -653,   224,   532,   544,  -653,  -653,  -653,  -653,  -653,
    -653,  -653,   526,  -653,  -653,  -653,  3678,  -653,   331,    92,
     224,  -653,  -653,  -653,  -653,  -653,  -653,  -653,  -653,  -653,
    -653,  -653,  -653,  -653,  -653,  -653,  -653,  -653,  -653,  -653,
    -653,  -653,  -653,  -653,  -653,  -653,  -653,  -653,  -653,  -653,
    -653,  -653,  -653,  -653,  3678,  -653,  3444,  -653,  -653,  -653,
    3327,  -653,   534,  3561,  -653,  -653,  -653,  -653,    23,  -653,
     537,    23
  };

  const unsigned short int
  asn1_parser::yydefact_[] =
  {
       0,   501,     0,     2,     0,   149,     1,     3,   160,     0,
     146,   147,   148,     0,   164,   157,   499,     0,   152,   155,
     156,   154,   369,     0,   151,   159,     0,     0,     0,   166,
     150,   153,     0,     0,   378,   163,   161,   162,     0,     0,
       0,   379,   380,   376,     0,     0,   165,     0,   158,   378,
     375,   171,   377,   173,   145,   175,     0,   498,   500,     0,
     172,   185,   187,   188,   190,     0,   177,     0,   170,   169,
       0,     0,     4,     0,   176,   178,     0,     0,   195,   197,
     198,    95,    96,    97,    98,    99,   167,   191,   193,   194,
     196,     0,     0,   186,   189,   174,   179,     0,     0,     0,
     192,    68,    11,   221,   316,     0,   392,   288,     0,     0,
     386,   388,   389,     0,     0,   383,   232,   393,   394,   395,
       0,   291,   396,   397,     0,   238,     0,   374,   398,   308,
     373,   381,     0,     0,   400,   399,   384,   387,    10,   401,
     251,   402,   403,   404,     0,   354,   498,     0,   114,    67,
       0,    83,   237,     0,     0,   220,   233,     0,   218,   201,
     199,     0,   216,   223,   234,   230,   241,   222,   240,   236,
     244,   245,   246,   247,   225,   219,   248,   348,     0,   239,
     243,   235,   242,   229,   231,   249,   226,   250,   227,   228,
     224,   390,   391,   217,   407,    84,     0,     0,     0,     0,
     200,     0,   180,   184,   498,   499,   113,     6,     8,     0,
     106,     0,   110,   109,   112,   188,     0,     7,   502,     0,
       8,     0,   309,   405,     0,   382,     0,     0,     0,   361,
     315,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    13,    12,    14,   213,     0,   360,     0,     0,
       0,     0,     0,     0,     0,   406,     0,     0,   349,     0,
       0,     0,     0,     0,     0,     0,   181,   182,   183,   105,
       0,     0,     0,     0,     0,     0,   345,     0,   341,   342,
       0,   494,   307,     0,   300,   304,   306,   116,     0,   293,
       0,   334,   335,     0,   471,     0,   494,   317,   330,     0,
     319,   328,   297,   459,   453,   454,   455,   385,     0,   316,
       0,     0,     0,   290,     0,   461,   468,     0,     0,   289,
       0,     0,     0,     0,   456,   457,   132,   418,   121,   122,
     123,   472,   450,   458,   452,   494,   417,   419,   420,   423,
       0,   425,     0,   428,     0,   431,   439,   441,   442,     0,
     443,     0,   463,   445,   446,   444,   447,   448,   449,     0,
       0,   338,   339,   336,     0,     0,     0,     0,   353,   358,
     359,   357,     0,    24,    25,    26,    93,    86,   103,   100,
       0,   115,   265,   257,   258,   259,   270,   271,   255,   276,
       0,   278,   274,   277,     0,   263,   498,   500,   210,   237,
       0,   261,   203,     0,   206,   119,   208,   209,     0,   275,
     273,   253,   264,   254,   256,   202,     0,     0,   215,   351,
     350,    94,   211,   347,    69,    85,     0,   255,   278,   280,
     500,   266,   279,   214,     0,     0,   370,   371,     0,   364,
     366,   367,   368,   369,   202,   107,   108,   502,     9,     0,
      70,   104,    71,    72,    73,     0,   311,     0,   340,     0,
     252,     0,   303,   299,     0,     0,   292,     0,     0,   326,
       0,   331,   318,     0,     0,   424,     0,   142,     0,   473,
     491,   492,     0,   477,    90,     0,    88,     0,   298,     0,
       0,     0,   436,   435,     0,   438,   437,     0,   432,   460,
       0,   464,   410,   414,   411,   415,   337,   408,   412,   409,
     413,    29,     0,     0,     0,    16,    18,    33,    19,    20,
      21,    22,    23,   355,   356,     0,     0,   102,   260,   286,
       0,     0,     0,   204,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   101,     0,     0,   371,     0,   362,   365,
       0,    24,    25,   504,   505,   506,   507,   255,   509,   510,
     511,   392,   288,   276,   515,   516,   517,   518,   519,   520,
     521,   386,   388,   524,   525,   389,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   383,   290,   538,   539,   540,
     541,   542,   543,   544,   545,   278,   547,   548,   549,   550,
     551,   552,   553,   554,   374,   274,   557,   558,   559,   560,
     561,   308,   373,   381,   565,   566,   567,   568,   569,   570,
     571,   384,   387,   289,   575,   576,   577,   578,   277,    66,
     280,     0,    79,     0,     0,    77,    80,    81,    82,     0,
      65,   310,     0,     0,   343,   346,   496,     0,   495,   493,
     494,   305,     0,     0,   294,   333,     0,   451,   456,   457,
     332,   494,   329,   434,   131,     0,   143,   476,   474,     0,
     475,     0,    87,     0,   440,     0,     0,   134,   416,   421,
     426,   429,   470,     0,   469,   462,   465,    49,    36,    36,
      36,    53,    55,     0,    30,     0,    31,    28,   352,    27,
     272,   287,     0,     0,   207,   281,   267,   283,   282,   284,
     268,   269,   212,   285,   363,     0,    75,     0,    76,    78,
       0,   312,     0,     0,     0,     0,   301,   296,   295,   327,
     324,   320,   130,   113,   127,     0,     0,   112,     0,     0,
       0,     0,   481,   486,    91,    89,   139,   136,   140,   133,
       0,     0,   466,     0,    47,    46,    34,    35,    45,    40,
      40,    52,    51,    50,     0,    15,    17,    32,   262,   205,
     372,     0,   313,   314,   344,   497,     0,     0,     0,     0,
     124,     0,   144,   478,     0,   480,     0,   485,   483,   490,
       0,   139,     0,     0,   135,   422,    48,     0,    43,    42,
       0,    38,    41,    37,     0,    74,     0,   302,   325,   321,
       0,   126,   125,   498,     0,   482,   488,   489,   487,   484,
      92,   138,   137,   141,    44,    39,    64,    54,     0,     0,
      82,   479,   505,   508,   511,   512,   513,   514,   515,   516,
     521,   522,   523,   526,   527,   531,   536,   537,   544,   546,
     552,   553,   555,   556,   562,   563,   564,   565,   566,   572,
     573,   574,   575,   579,    64,   503,    64,    56,    59,    58,
       0,    62,   322,    64,     5,    57,    61,    63,     0,    60,
     323,     0
  };

  const short int
  asn1_parser::yypgoto_[] =
  {
    -653,   645,  -653,  -653,   -64,  -653,   -94,  -653,   426,  -653,
    -653,   -24,  -441,   152,  -653,  -653,  -653,  -248,  -653,   -86,
    -653,  -653,  -653,  -653,  -653,  -653,  -653,  -653,  -189,  -652,
    -653,  -653,  -653,  -447,  -267,  -653,  -650,  -653,  -653,  -653,
    -653,  -653,    45,    46,    18,  -653,  -653,   434,  -653,   171,
    -653,  -653,  -653,  -653,  -653,  -653,   360,  -653,   414,  -653,
      26,  -653,  -653,  -653,  -653,  -653,  -653,  -653,  -653,  -653,
    -653,   -65,  -104,  -101,  -653,  -653,  -653,  -653,  -653,  -653,
     671,  -653,   680,  -653,  -653,  -653,  -653,  -653,  -653,  -653,
    -653,  -653,  -653,   640,  -653,  -653,   663,   648,   -75,   632,
    -653,  -653,  -262,  -653,  -653,  -314,  -653,  -653,  -653,  -653,
    -653,  -653,    47,  -653,  -211,  -226,   158,  -653,  -653,   -74,
    -653,  -653,  -148,  -653,  -653,  -227,  -179,  -653,  -653,   -51,
    -450,  -653,  -653,  -653,    88,  -653,  -653,  -653,   495,  -634,
    -449,  -653,  -653,  -653,  -653,  -653,  -653,    12,  -653,  -653,
    -653,  -653,  -653,  -653,  -653,  -653,  -653,  -103,  -653,   256,
     179,  -653,  -653,  -653,   723,  -653,   688,   699,  -653,  -653,
    -653,  -653,     9,  -653,  -653,  -653,  -653,  -653,  -653,  -653,
    -653,  -653,  -121,  -653,  -653,  -276,  -306,  -653,  -653,   253,
    -653,   241,  -653,   406,  -653,  -653,   270,  -653,  -453,  -653,
    -653,  -653,  -653,  -653,  -653,    65,   -81,  -653,  -653,  -653,
    -653,  -653,  -442,  -653,  -653,  -653,  -653,  -653,  -653,  -266,
    -653,    -8,    -9,   -34,     7,  -256,  -653
  };

  const short int
  asn1_parser::yydefgoto_[] =
  {
      -1,     2,     3,   827,   398,   207,   147,    78,   243,   244,
     514,   515,   375,   421,   516,   517,   697,   758,   518,   802,
     519,   520,   799,   521,   755,   522,   763,   765,   866,   867,
     868,   869,   870,   871,   148,   149,   451,   452,   453,   633,
     454,   634,   635,   636,   150,   151,    79,   326,   485,   152,
      80,    81,    82,    83,    84,    85,    99,   209,   210,   211,
     212,   154,   155,   156,   157,   400,   327,   328,   736,   329,
     676,   677,   792,   747,   330,    65,     4,    10,    11,    12,
      17,    18,    19,    20,    14,    29,    39,    54,    55,    59,
      67,    73,    74,    75,   202,   266,    76,    61,    62,    86,
      87,   158,   401,   159,   402,   403,   404,   160,   405,    88,
      89,    90,   331,   162,   298,   432,   408,   409,   410,   418,
     530,   163,   411,   164,   288,   282,   412,   165,   283,   284,
     285,   166,   167,   455,   456,   168,   169,   170,   299,   300,
     301,   171,   172,   173,   174,   277,   278,   279,   175,   176,
     177,   178,   247,   525,   372,   179,   267,   438,   439,   440,
     441,   442,   180,   181,   413,    34,    45,    43,   182,   183,
     184,   185,   414,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   255,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   475,   494,   497,   345,   346,   347,   348,
     349,   350,   351,   685,   352,   686,   353,   354,   355,   356,
     668,   670,   741,   742,   788,   789,   819,   357,   358,   462,
     649,   200,   196,   415,   201,   217,   640
  };

  const short int
  asn1_parser::yytable_[] =
  {
      22,   289,   632,   437,   208,   220,   450,     5,   631,    22,
       5,   235,   239,   276,   651,   486,   448,   660,   448,    64,
     292,   436,   730,   213,   662,    15,   362,   407,    56,   424,
     469,   424,    64,    92,   206,   219,    64,   302,   369,   523,
      64,   424,   102,    97,   436,    63,   487,   684,   295,   665,
     208,   236,   240,    92,   470,   333,  -427,   722,    63,    91,
     373,   374,    63,   424,    64,   101,    63,   295,   492,   490,
      77,   689,     1,   295,   753,   295,   761,   424,     6,    91,
     242,   231,   265,   195,   281,   699,   332,   237,   797,  -427,
     215,  -430,   800,   471,   644,   495,   232,   228,   197,  -291,
     370,   493,   232,   796,   203,   216,   221,   650,    58,   740,
     524,   294,    16,   754,   694,   762,    70,     8,   233,   371,
     234,   234,    16,   138,   238,   296,   234,   798,   297,   811,
     295,   801,    13,   220,   295,    16,   295,    16,   161,   199,
     695,   542,   333,   333,   809,   214,    57,    58,   503,   505,
     661,   216,   729,    16,   508,   510,   208,    58,    57,   208,
    -430,   218,    23,   287,   496,     1,   205,   449,   447,   268,
      16,   323,    16,   332,   332,   546,   208,   546,    16,   696,
      16,     1,    58,     1,    58,    57,   242,   632,     1,    58,
     813,   245,     1,   479,   816,   213,   446,    57,    58,   646,
     251,     1,    58,   652,   447,    58,   206,   296,   756,   756,
     363,   808,   234,   872,   875,   280,  -451,   286,   703,   290,
     704,   875,   293,  -451,   280,   258,    26,   725,   293,   280,
     684,   444,   757,   757,   221,    16,    64,    64,   333,    16,
     654,    16,     9,   334,   880,   262,   234,   269,   645,    25,
      27,   422,   466,   425,   817,   434,   443,   216,   818,   270,
     416,    28,   215,    63,   467,    21,   457,  -118,    32,   332,
     435,  -498,   435,  -118,    21,  -200,  -500,   216,   291,  -500,
    -120,   259,   648,  -498,   361,   448,   653,   259,   546,  -500,
    -200,   333,    30,  -500,   540,   333,    71,   379,  -200,  -498,
     406,  -498,   641,   419,   420,    35,   407,   423,   407,   434,
     259,   692,  -467,  -498,   642,   333,    33,   214,   333,  -467,
     746,   333,   332,   693,   435,   749,   332,   460,   662,   783,
     334,   334,    16,    38,   547,  -280,   549,   750,   444,  -280,
     460,   784,   814,  -280,   815,    36,   332,   825,   254,   332,
     293,   293,   332,   234,   263,    15,   293,   293,   477,   234,
     535,   667,   380,   632,   536,   744,   426,   234,   537,   631,
      37,   234,   434,   511,   512,    41,    42,   513,   651,   435,
     662,   723,   434,    44,   726,  -168,   434,   435,   531,    53,
    -279,    46,  -499,    48,  -279,   731,   499,   435,   373,   374,
     376,   435,    47,   444,   381,   444,   502,   504,    57,    58,
     482,   483,   507,   509,   710,   711,    50,   208,   434,   220,
      51,   433,    68,   877,   399,    66,   334,   444,   443,   876,
     443,   444,   662,   435,   431,  -128,   234,    69,   208,    70,
     208,   759,   760,    71,   435,   795,   435,   687,    72,   691,
     280,   153,   198,    94,    95,   286,   639,    98,   290,   222,
     223,   224,   225,   226,   280,   227,   228,   229,   639,   246,
     434,   230,   435,   248,   252,   480,   249,   260,   253,   334,
      16,   261,   264,   334,   820,   435,   450,  -117,   431,   271,
     234,   273,   333,   235,   239,   359,   637,   275,   360,   272,
    -501,  -111,   365,   334,   333,   274,   334,   712,   647,   334,
     366,   712,   450,   276,   424,   655,   444,   367,   216,   321,
     221,   368,   434,   332,   417,   448,   447,   434,   434,   434,
     434,   434,   458,   236,   240,   332,   459,   435,   527,   416,
     464,   416,   435,   435,   435,   435,   435,   463,   528,   461,
     465,   431,   529,   468,   472,   473,   474,   435,   688,   690,
     476,   431,   434,   478,   481,   431,   488,   489,   491,  -433,
     208,   500,   333,   526,   501,   506,   533,   435,  -316,   406,
     532,   406,  -266,   534,   543,   539,   538,   531,   548,  -120,
     550,   664,   541,   544,   643,   645,   545,   431,   669,   656,
     733,   672,   674,   332,   675,   678,   671,   638,   673,   444,
     679,   333,   698,   702,   713,   714,   739,   -11,   -10,   717,
     399,   333,   787,    58,   720,   745,   727,   728,   724,   764,
     751,   768,   769,   457,   776,   770,   666,   772,   639,   773,
    -129,   639,   332,   771,   780,   804,   779,   280,     7,   431,
     435,   777,   332,   778,   785,   781,   195,   805,   786,   790,
     743,   826,   791,   793,   806,   828,   748,   829,   831,   766,
     878,   738,  -502,   881,   803,   873,   378,   716,   637,   719,
     334,   637,   734,   377,   445,   794,   712,   821,   701,    31,
     735,   822,   334,   705,   706,   707,   708,   709,   302,   303,
     304,   431,   305,   399,   306,   399,   431,   431,   431,   431,
     431,   737,    40,   307,    96,   280,    60,   434,    93,   100,
     302,   382,   383,   824,   384,   807,   385,   657,   528,   715,
     721,   434,   435,   364,    24,   307,   774,    52,   681,   386,
     387,   431,   767,    49,   663,   102,   435,   680,   752,   427,
     498,     0,     0,     0,     0,   389,   313,     0,     0,     0,
     334,     0,   390,     0,     0,     0,     0,   286,   280,   280,
       0,   434,   682,   425,     0,   743,     0,   743,   313,     0,
       0,     0,     0,   748,   823,     0,   639,     0,     0,   638,
       0,   428,   638,     0,     0,     0,     0,   280,     0,   334,
       0,     0,   399,   319,   392,   399,     0,     0,     0,   334,
       0,     0,   302,   303,   304,     0,   305,   639,   306,   286,
     280,     0,     0,   683,     0,   319,   138,   307,     0,     0,
       0,     0,   323,     0,     0,   393,     0,     0,     0,   394,
     700,   657,   658,   659,     0,     0,     0,     0,    23,     0,
       0,     0,     0,     0,   323,     0,   395,   637,     0,     0,
       0,     0,     0,     0,   429,   430,     0,     0,     0,   280,
     313,     0,   280,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   775,     0,     0,   682,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   431,   782,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     431,     0,     0,     0,     0,     0,     0,   319,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   812,     0,     0,
       0,     0,     0,     0,     0,     0,   323,     0,     0,     0,
     431,     0,     0,     0,     0,     0,   658,   659,   302,   382,
     383,     0,   384,     0,   385,     0,     0,     0,   830,     0,
       0,     0,     0,   307,     0,   101,     0,   386,   387,     0,
       0,   399,   553,   554,   555,   103,   556,   557,   558,   559,
     560,   561,   562,   563,   564,   565,   566,   567,   568,   569,
     570,   571,   572,   573,   574,   575,   576,   577,   578,   579,
     580,   581,   582,   583,   584,   585,   586,   587,   116,   117,
     118,   119,   588,   589,   590,   591,   592,   593,   594,   595,
     596,   122,   597,   598,   599,   600,   123,   601,   125,   602,
     603,   604,   605,   606,   607,   608,   609,   128,   610,   611,
     612,   613,   614,   615,   616,   617,   618,   619,   134,   620,
     135,   621,   622,   623,   624,   625,   626,   627,   139,   140,
     141,   142,   143,   628,     0,     0,     0,   394,   718,     0,
       0,   145,     0,     0,     0,     0,    23,     0,     0,     0,
     629,     0,   323,     0,   395,   302,   382,   383,     0,   384,
       0,   385,   630,   397,     0,     0,     0,     0,     0,     0,
     307,     0,   101,     0,   551,   552,     0,     0,     0,   553,
     554,   555,   103,   556,   557,   558,   559,   560,   561,   562,
     563,   564,   565,   566,   567,   568,   569,   570,   571,   572,
     573,   574,   575,   576,   577,   578,   579,   580,   581,   582,
     583,   584,   585,   586,   587,   116,   117,   118,   119,   588,
     589,   590,   591,   592,   593,   594,   595,   596,   122,   597,
     598,   599,   600,   123,   601,   125,   602,   603,   604,   605,
     606,   607,   608,   609,   128,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   134,   620,   135,   621,   622,
     623,   624,   625,   626,   627,   139,   140,   141,   142,   143,
     628,     0,     0,     0,   394,     0,     0,     0,   145,     0,
     302,   303,   304,    23,   305,     0,   306,   629,     0,   323,
       0,   395,     0,     0,     0,   307,     0,   101,     0,   630,
     397,     0,     0,     0,     0,   102,   308,   103,     0,   309,
       0,     0,   105,   106,   107,     0,   108,   109,     0,     0,
       0,   310,   311,   110,   111,     0,     0,   112,   113,   312,
       0,     0,   114,     0,     0,     0,     0,   115,   313,   314,
     116,   117,   118,   119,     0,     0,     0,     0,   315,   120,
       0,   121,     0,   122,     0,   316,     0,     0,   123,   124,
     125,   126,     0,   127,     0,   317,     0,     0,     0,   128,
       0,   129,   130,   131,   132,   133,   318,   232,     0,     0,
     134,     0,   135,   136,   137,   319,   138,     0,     0,     0,
     139,   140,   141,   142,   143,   320,     0,     0,     0,   321,
       0,   322,     0,   145,   302,   303,   304,     0,   305,     0,
     306,     0,     0,     0,   323,     0,     0,     0,     0,   307,
       0,   101,     0,     0,   324,   325,     0,     0,     0,   102,
     308,   103,     0,   309,     0,     0,   105,   106,   107,     0,
     108,   109,     0,     0,     0,     0,     0,   110,   111,     0,
       0,   112,   113,     0,     0,     0,   114,     0,     0,     0,
       0,   115,   313,   314,   116,   117,   118,   119,     0,     0,
       0,     0,   315,   120,     0,   121,     0,   122,     0,   316,
       0,     0,   123,   124,   125,   126,     0,   127,     0,   317,
       0,     0,     0,   128,     0,   129,   130,   131,   132,   133,
     318,   232,     0,     0,   134,     0,   135,   136,   137,   319,
     138,     0,     0,     0,   139,   140,   141,   142,   143,   320,
       0,   484,     0,     0,     0,   322,     0,   145,     0,     0,
       0,     0,     0,     0,     0,   302,   382,   383,   323,   384,
       0,   385,     0,     0,     0,     0,     0,     0,   324,   325,
     307,     0,   101,     0,   386,   387,     0,     0,     0,     0,
     102,     0,   103,     0,   388,     0,     0,   105,   106,   107,
     389,   108,   109,     0,     0,     0,     0,   390,   110,   111,
       0,     0,   112,   113,     0,     0,     0,   114,     0,     0,
       0,     0,   115,   313,     0,   116,   117,   118,   119,     0,
       0,     0,     0,     0,   120,     0,   391,     0,   122,     0,
       0,     0,     0,   123,   124,   125,   126,     0,   127,   392,
       0,     0,     0,     0,   128,     0,   129,   130,   131,   132,
     133,     0,     0,     0,     0,   134,     0,   135,   136,   137,
     319,   138,     0,     0,     0,   139,   140,   141,   142,   143,
     393,     0,     0,     0,   394,     0,     0,     0,   145,     0,
     302,   303,   304,    23,   305,     0,   306,     0,     0,   323,
       0,   395,     0,     0,     0,   307,     0,   101,     0,   396,
     397,     0,     0,     0,     0,   102,   308,   103,     0,   309,
       0,     0,   105,   106,   107,     0,   108,   109,     0,     0,
       0,     0,     0,   110,   111,     0,     0,   112,   113,     0,
       0,     0,   114,     0,     0,     0,     0,   115,   313,   314,
     116,   117,   118,   119,     0,     0,     0,     0,   315,   120,
       0,   121,     0,   122,     0,   316,     0,     0,   123,   124,
     125,   126,     0,   127,     0,   317,     0,     0,     0,   128,
       0,   129,   130,   131,   132,   133,   318,   232,     0,     0,
     134,     0,   135,   136,   137,   319,   138,     0,     0,     0,
     139,   140,   141,   142,   143,   320,     0,     0,     0,     0,
       0,   322,     0,   145,     0,     0,     0,     0,     0,     0,
       0,   302,   382,   383,   323,   384,     0,   385,     0,     0,
       0,     0,     0,     0,   324,   325,   307,     0,   101,     0,
     386,   387,     0,     0,     0,     0,   102,     0,   103,     0,
     388,     0,     0,   105,   106,   107,   389,   108,   109,     0,
       0,     0,     0,   390,   110,   111,     0,     0,   112,   113,
       0,     0,     0,   114,     0,     0,     0,     0,   115,   313,
       0,   116,   117,   118,   119,     0,     0,     0,     0,     0,
     120,     0,   391,     0,   122,     0,     0,     0,     0,   123,
     124,   125,   126,     0,   127,   392,     0,     0,     0,     0,
     128,     0,   129,   130,   131,   132,   133,     0,     0,     0,
       0,   134,     0,   135,   136,   137,   319,   138,     0,     0,
       0,   139,   140,   141,   142,   143,   393,     0,     0,     0,
     394,     0,     0,     0,   145,     0,   302,   303,   304,    23,
     305,     0,   306,     0,     0,   323,     0,   395,     0,     0,
       0,   307,     0,   101,     0,   429,   397,     0,     0,     0,
       0,   102,     0,   103,     0,   309,     0,     0,   105,   106,
     107,     0,   108,   109,     0,     0,     0,     0,     0,   110,
     111,     0,     0,   112,   113,     0,     0,     0,   114,     0,
       0,     0,     0,   115,   313,   314,   116,   117,   118,   119,
       0,     0,     0,     0,   315,   120,     0,   121,     0,   122,
       0,   316,     0,     0,   123,   124,   125,   126,     0,   127,
       0,   317,     0,     0,     0,   128,     0,   129,   130,   131,
     132,   133,   318,   232,     0,   302,   134,     0,   135,   136,
     137,   319,   138,     0,     0,     0,   139,   140,   141,   142,
     143,   320,   101,     0,     0,     0,     0,   322,     0,   145,
     102,     0,   103,     0,   104,     0,     0,   105,   106,   107,
     323,   108,   109,     0,     0,     0,     0,     0,   110,   111,
     324,   325,   112,   113,     0,     0,     0,   114,     0,     0,
       0,     0,   115,     0,     0,   116,   117,   118,   119,     0,
       0,     0,     0,     0,   120,     0,   121,     0,   122,     0,
       0,     0,     0,   123,   124,   125,   126,     0,   127,     0,
       0,     0,     0,     0,   128,     0,   129,   130,   131,   132,
     133,     0,     0,     0,     0,   134,     0,   135,   136,   137,
       0,   138,     0,     0,     0,   139,   140,   141,   142,   143,
       0,     0,     0,   302,   382,   383,     0,   384,   145,   385,
       0,   302,   303,   304,     0,   305,     0,   306,   307,   323,
     101,     0,   386,   387,     0,     0,   307,     0,   102,   146,
     205,     0,   427,     0,     0,   302,   382,   383,   389,   384,
     657,   385,     0,     0,     0,   390,     0,     0,     0,     0,
     307,     0,     0,     0,   386,   387,     0,     0,     0,     0,
     102,   313,     0,     0,   427,     0,     0,     0,     0,   313,
     389,     0,     0,     0,   428,     0,     0,   390,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   392,     0,     0,
       0,     0,     0,   313,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   428,     0,   319,   138,
       0,     0,     0,     0,     0,     0,   319,     0,   393,   392,
       0,     0,   810,     0,     0,     0,     0,     0,     0,     0,
       0,    23,     0,     0,     0,     0,     0,   323,     0,   395,
     319,   138,     0,     0,     0,   323,     0,   429,   430,     0,
     393,     0,     0,     0,   394,   658,   659,     0,   101,     0,
       0,     0,     0,    23,     0,     0,   102,     0,   103,   323,
     104,   395,     0,   105,   106,   107,     0,   108,   109,   429,
     430,     0,     0,     0,   110,   111,     0,     0,   112,   113,
       0,     0,     0,   114,     0,     0,     0,     0,   115,     0,
       0,   116,   117,   118,   119,     0,     0,     0,     0,     0,
     120,     0,   121,     0,   122,     0,     0,     0,     0,   123,
     124,   125,   126,     0,   127,     0,     0,     0,     0,     0,
     128,     0,   129,   130,   131,   132,   133,     0,     0,     0,
       0,   134,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,   141,   142,   143,     0,   144,     0,     0,
      98,   101,     0,     0,   145,     0,     0,     0,     0,   102,
       0,   103,     0,   104,     0,     0,   105,   106,   107,     0,
     108,   109,     0,     0,     0,   146,    16,   110,   111,     0,
       0,   112,   113,     0,     0,     0,   114,     0,   256,     0,
       0,   115,     0,     0,   116,   117,   118,   119,     0,   257,
       0,     0,     0,   120,     0,   121,     0,   122,     0,     0,
       0,     0,   123,   124,   125,   126,     0,   127,     0,     0,
       0,     0,     0,   128,     0,   129,   130,   131,   132,   133,
       0,     0,     0,     0,   134,     0,   135,   136,   137,     0,
     138,     0,     0,     0,   139,   140,   141,   142,   143,     0,
     101,     0,   373,   374,     0,     0,     0,   145,   102,     0,
     103,     0,   104,     0,     0,   105,   106,   107,     0,   108,
     109,     0,     0,     0,     0,     0,   110,   111,   146,    16,
     112,   113,     0,     0,     0,   114,     0,     0,     0,     0,
     115,     0,     0,   116,   117,   118,   119,     0,     0,     0,
       0,     0,   120,     0,   121,     0,   122,     0,     0,     0,
       0,   123,   124,   125,   126,     0,   127,     0,     0,     0,
       0,     0,   128,     0,   129,   130,   131,   132,   133,     0,
       0,     0,     0,   134,     0,   135,   136,   137,     0,   138,
       0,     0,     0,   139,   140,   141,   142,   143,     0,   101,
       0,     0,     0,     0,     0,     0,   145,   102,     0,   103,
       0,   104,     0,     0,   105,   106,   107,     0,   108,   109,
       0,     0,     0,     0,     0,   110,   111,   146,    16,   112,
     113,     0,     0,     0,   114,     0,     0,     0,     0,   115,
       0,     0,   116,   117,   118,   119,     0,     0,     0,     0,
       0,   120,     0,   121,     0,   122,     0,     0,     0,     0,
     123,   124,   125,   126,     0,   127,     0,     0,     0,     0,
       0,   128,     0,   129,   130,   131,   132,   133,     0,     0,
       0,     0,   134,     0,   135,   136,   137,     0,   138,     0,
       0,     0,   139,   140,   141,   142,   143,     0,   101,     0,
       0,    98,     0,     0,     0,   145,   102,     0,   103,     0,
     104,     0,     0,   105,   106,   107,     0,   108,   109,   241,
       0,     0,     0,     0,   110,   111,   146,    16,   112,   113,
       0,     0,     0,   114,     0,     0,     0,     0,   115,     0,
       0,   116,   117,   118,   119,     0,     0,     0,     0,     0,
     120,     0,   121,     0,   122,     0,     0,     0,     0,   123,
     124,   125,   126,     0,   127,     0,     0,     0,     0,     0,
     128,     0,   129,   130,   131,   132,   133,     0,     0,     0,
       0,   134,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,   141,   142,   143,     0,   101,     0,     0,
       0,     0,     0,     0,   145,   102,     0,   103,     0,   104,
       0,     0,   105,   106,   107,     0,   108,   109,     0,     0,
       0,     0,     0,   110,   111,   204,    16,   112,   113,     0,
       0,     0,   114,     0,     0,     0,     0,   115,     0,     0,
     116,   117,   118,   119,     0,     0,     0,     0,     0,   120,
       0,   121,     0,   122,     0,     0,     0,     0,   123,   124,
     125,   126,     0,   127,     0,     0,     0,     0,     0,   128,
       0,   129,   130,   131,   132,   133,     0,     0,     0,     0,
     134,     0,   135,   136,   137,     0,   138,     0,     0,     0,
     139,   140,   141,   142,   143,     0,   250,     0,     0,     0,
     101,     0,     0,   145,     0,     0,     0,     0,   102,     0,
     103,     0,   104,     0,     0,   105,   106,   107,     0,   108,
     109,     0,     0,     0,   146,    16,   110,   111,     0,     0,
     112,   113,     0,     0,     0,   114,     0,     0,     0,     0,
     115,     0,     0,   116,   117,   118,   119,     0,     0,     0,
       0,     0,   120,     0,   121,     0,   122,     0,     0,     0,
       0,   123,   124,   125,   126,     0,   127,     0,     0,     0,
       0,     0,   128,     0,   129,   130,   131,   132,   133,     0,
       0,     0,     0,   134,     0,   135,   136,   137,     0,   138,
       0,     0,     0,   139,   140,   141,   142,   143,     0,   101,
       0,     0,     0,     0,     0,     0,   145,   102,   260,   103,
       0,   104,     0,     0,   105,   106,   107,     0,   108,   109,
       0,     0,     0,     0,     0,   110,   111,   146,    16,   112,
     113,     0,     0,     0,   114,     0,     0,     0,     0,   115,
       0,     0,   116,   117,   118,   119,     0,     0,     0,     0,
       0,   120,     0,   121,     0,   122,     0,     0,     0,     0,
     123,   124,   125,   126,     0,   127,     0,     0,     0,     0,
       0,   128,     0,   129,   130,   131,   132,   133,     0,     0,
       0,     0,   134,     0,   135,   136,   137,     0,   138,     0,
       0,     0,   139,   140,   141,   142,   143,     0,   101,   732,
       0,     0,     0,     0,     0,   145,   102,     0,   103,     0,
     104,     0,     0,   105,   106,   107,     0,   108,   109,     0,
       0,     0,     0,     0,   110,   111,   204,    16,   112,   113,
       0,     0,     0,   114,     0,     0,     0,     0,   115,     0,
       0,   116,   117,   118,   119,     0,     0,     0,     0,     0,
     120,     0,   121,     0,   122,     0,     0,     0,     0,   123,
     124,   125,   126,     0,   127,     0,     0,     0,     0,     0,
     128,     0,   129,   130,   131,   132,   133,     0,     0,     0,
       0,   134,     0,   135,   136,   137,     0,   138,     0,     0,
       0,   139,   140,   141,   142,   143,     0,   101,     0,     0,
       0,     0,     0,     0,   145,   102,     0,   103,     0,   104,
       0,     0,   105,   106,   107,     0,   108,   109,     0,     0,
       0,     0,     0,   110,   111,   204,   205,   112,   113,     0,
       0,     0,   114,     0,     0,     0,     0,   115,     0,     0,
     116,   117,   118,   119,     0,     0,     0,     0,     0,   120,
       0,   121,     0,   122,     0,     0,     0,     0,   123,   124,
     125,   126,     0,   127,     0,     0,     0,     0,     0,   128,
       0,   129,   130,   131,   132,   133,     0,     0,     0,     0,
     134,     0,   135,   136,   137,     0,   138,     0,     0,     0,
     139,   140,   141,   142,   143,     0,   101,     0,     0,     0,
       0,     0,     0,   145,   102,     0,   103,     0,   104,     0,
       0,   105,   106,   107,     0,   108,   109,     0,     0,     0,
       0,     0,   110,   111,   146,    16,   112,   113,     0,     0,
       0,   114,     0,     0,     0,     0,   115,     0,     0,   116,
     117,   118,   119,     0,     0,     0,     0,     0,   120,     0,
     121,     0,   122,     0,     0,     0,     0,   123,   124,   125,
     126,     0,   127,     0,     0,     0,     0,     0,   128,     0,
     129,   130,   131,   132,   133,     0,     0,     0,     0,   134,
       0,   135,   136,   137,     0,   138,     0,     0,     0,   139,
     140,   141,   142,   143,     0,     0,     0,     0,     0,     0,
       0,     0,   145,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     373,   374,     0,   204,    16,   553,   832,   555,     0,   556,
     833,   558,   559,   834,   835,   836,   837,   838,   839,   566,
     567,   568,   569,   840,   841,   842,   573,   574,   843,   844,
     577,   578,   579,   845,   581,   582,   583,   584,   846,   847,
     587,     0,     0,     0,     0,   588,   589,   590,   591,   592,
     848,   594,   849,   596,     0,   597,   598,   599,   600,     0,
     850,     0,   851,   603,   852,   853,   606,   607,   608,   609,
       0,   610,   854,   855,   856,   857,   858,   616,   617,   618,
     619,     0,   620,     0,   859,   860,   861,   862,   625,   626,
     627,     0,     0,     0,     0,     0,   863,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   629,     0,     0,     0,     0,     0,     0,
       0,     0,   553,   832,   555,   865,   556,   833,   558,   559,
     834,   835,   836,   837,   838,   839,   566,   567,   568,   569,
     840,   841,   842,   573,   574,   843,   844,   577,   578,   579,
     845,   581,   582,   583,   584,   846,   847,   587,     0,     0,
       0,     0,   588,   589,   590,   591,   592,   848,   594,   849,
     596,     0,   597,   598,   599,   600,     0,   850,     0,   851,
     603,   852,   853,   606,   607,   608,   609,     0,   610,   854,
     855,   856,   857,   858,   616,   617,   618,   619,     0,   620,
       0,   859,   860,   861,   862,   625,   626,   627,     0,     0,
       0,     0,     0,   863,     0,     0,     0,     0,   874,     0,
       0,   864,     0,     0,     0,     0,     0,     0,     0,     0,
     629,     0,     0,     0,     0,     0,     0,     0,     0,   553,
     832,   555,   865,   556,   833,   558,   559,   834,   835,   836,
     837,   838,   839,   566,   567,   568,   569,   840,   841,   842,
     573,   574,   843,   844,   577,   578,   579,   845,   581,   582,
     583,   584,   846,   847,   587,     0,     0,     0,     0,   588,
     589,   590,   591,   592,   848,   594,   849,   596,     0,   597,
     598,   599,   600,     0,   850,     0,   851,   603,   852,   853,
     606,   607,   608,   609,     0,   610,   854,   855,   856,   857,
     858,   616,   617,   618,   619,     0,   620,     0,   859,   860,
     861,   862,   625,   626,   627,     0,     0,     0,     0,     0,
     863,     0,     0,     0,     0,     0,     0,     0,   864,   879,
       0,     0,     0,     0,     0,     0,     0,   629,     0,     0,
       0,     0,     0,     0,     0,     0,   553,   832,   555,   865,
     556,   833,   558,   559,   834,   835,   836,   837,   838,   839,
     566,   567,   568,   569,   840,   841,   842,   573,   574,   843,
     844,   577,   578,   579,   845,   581,   582,   583,   584,   846,
     847,   587,     0,     0,     0,     0,   588,   589,   590,   591,
     592,   848,   594,   849,   596,     0,   597,   598,   599,   600,
       0,   850,     0,   851,   603,   852,   853,   606,   607,   608,
     609,     0,   610,   854,   855,   856,   857,   858,   616,   617,
     618,   619,     0,   620,     0,   859,   860,   861,   862,   625,
     626,   627,     0,     0,     0,     0,     0,   863,     0,     0,
       0,     0,  -270,     0,  -270,   864,  -270,     0,  -270,  -270,
       0,     0,     0,     0,   629,     0,  -270,  -270,  -270,  -270,
       0,     0,     0,  -270,  -270,     0,   865,  -270,  -270,  -270,
       0,  -270,  -270,  -270,  -270,     0,     0,  -270,     0,     0,
       0,     0,  -270,  -270,  -270,  -270,  -270,     0,  -270,     0,
    -270,     0,  -270,  -270,  -270,  -270,     0,     0,     0,     0,
    -270,     0,     0,  -270,  -270,  -270,  -270,     0,  -270,     0,
       0,     0,     0,     0,  -270,  -270,  -270,  -270,     0,  -270,
       0,     0,     0,     0,     0,  -270,  -270,  -270,     0,     0,
    -271,     0,  -271,     0,  -271,     0,  -271,  -271,  -270,     0,
       0,     0,     0,     0,  -271,  -271,  -271,  -271,     0,     0,
    -270,  -271,  -271,     0,     0,  -271,  -271,  -271,  -270,  -271,
    -271,  -271,  -271,     0,     0,  -271,     0,     0,     0,     0,
    -271,  -271,  -271,  -271,  -271,     0,  -271,     0,  -271,     0,
    -271,  -271,  -271,  -271,     0,     0,     0,     0,  -271,     0,
       0,  -271,  -271,  -271,  -271,     0,  -271,     0,     0,     0,
       0,     0,  -271,  -271,  -271,  -271,     0,  -271,     0,     0,
       0,     0,     0,  -271,  -271,  -271,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -271,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -271,     0,
       0,     0,     0,     0,     0,     0,  -271
  };

  const short int
  asn1_parser::yycheck_[] =
  {
       9,   228,   449,   265,    98,    99,   273,     0,   449,    18,
       3,   132,   133,   224,   464,   321,   272,   470,   274,    53,
     231,     4,   656,    98,   473,     4,   237,   253,    30,    21,
     296,    21,    66,    67,    98,    99,    70,     4,    32,     4,
      74,    21,    29,    63,     4,    53,   322,   500,    44,    53,
     144,   132,   133,    87,    49,   234,   111,     4,    66,    67,
      23,    24,    70,    21,    98,    21,    74,    44,   111,   335,
      21,   512,   148,    44,    49,    44,    49,    21,     0,    87,
     144,    86,   123,    91,   121,   526,   234,    86,    49,   144,
      98,    76,    49,    88,   121,    76,   101,   123,    91,   125,
      94,   144,   101,   753,    97,    98,    99,   121,   149,   121,
     372,   232,   149,    88,    23,    88,   136,    50,   123,   113,
     125,   125,   149,   110,   123,   121,   125,    88,   124,   779,
      44,    88,    15,   227,    44,   149,    44,   149,    91,    92,
      49,   417,   321,   322,   778,    98,   148,   149,   359,   360,
     121,   144,   121,   149,   365,   366,   250,   149,   148,   253,
     145,   148,   132,   227,   145,   148,   149,   123,   148,   203,
     149,   138,   149,   321,   322,   437,   270,   439,   149,    88,
     149,   148,   149,   148,   149,   148,   250,   634,   148,   149,
     148,   144,   148,   314,    28,   270,   271,   148,   149,   461,
     153,   148,   149,   465,   148,   149,   270,   121,    88,    88,
     124,   121,   125,   121,   866,   224,   122,   226,   532,   228,
     534,   873,   231,   129,   233,   178,    34,   140,   237,   238,
     683,   265,   112,   112,   227,   149,   270,   271,   417,   149,
     467,   149,   123,   234,   878,   198,   125,   124,   459,    74,
      58,   259,   124,   261,    88,   263,   265,   250,    92,   136,
     253,    69,   270,   271,   136,     9,   275,   123,   125,   417,
     263,   125,   265,   123,    18,   125,   123,   270,   231,   126,
     123,   137,   461,   137,   237,   541,   465,   137,   550,   136,
     140,   470,   124,   140,   137,   474,   123,   250,   125,   123,
     253,   125,   124,   256,   257,   105,   532,   260,   534,   317,
     137,   124,   122,   137,   136,   494,   139,   270,   497,   129,
     137,   500,   470,   136,   317,   124,   474,   280,   777,   124,
     321,   322,   149,    60,   437,   136,   439,   136,   372,   140,
     293,   136,   784,   144,   786,   105,   494,   800,   120,   497,
     359,   360,   500,   125,   120,     4,   365,   366,   311,   125,
     136,   482,   120,   810,   140,   671,   120,   125,   144,   810,
     105,   125,   380,    23,    24,    16,    17,    27,   828,   372,
     829,   643,   390,   139,   650,    55,   394,   380,   125,    59,
     140,    70,   129,   126,   144,   661,   349,   390,    23,    24,
     248,   394,   120,   437,   252,   439,   359,   360,   148,   149,
      43,    44,   365,   366,    23,    24,   132,   511,   426,   513,
      35,   263,   141,   870,   253,    71,   417,   461,   437,   870,
     439,   465,   881,   426,   263,   124,   125,   141,   532,   136,
     534,   689,   690,   123,   437,   751,   439,   511,    55,   513,
     459,    91,    92,   124,   141,   464,   449,   123,   467,   102,
     102,   123,    90,   123,   473,    86,   123,    68,   461,    15,
     478,   102,   465,   137,   137,   317,   120,   129,   123,   470,
     149,   137,   137,   474,   790,   478,   753,   123,   317,   140,
     125,   120,   671,   614,   615,    86,   449,   123,    86,   137,
     137,   140,    86,   494,   683,   137,   497,   541,   461,   500,
      86,   545,   779,   724,    21,   468,   550,   123,   511,   123,
     513,   140,   530,   671,   123,   781,   148,   535,   536,   537,
     538,   539,   124,   614,   615,   683,   136,   530,   380,   532,
     136,   534,   535,   536,   537,   538,   539,   124,   390,   131,
     125,   380,   394,    86,   124,   136,    57,   550,   511,   512,
      39,   390,   570,    39,    12,   394,     4,   123,   136,    57,
     664,   122,   751,   137,   129,   124,   124,   570,   125,   532,
     123,   534,   144,   136,   426,   144,   136,   125,   124,   123,
     125,   123,   137,   137,   125,   806,   137,   426,   123,   136,
     664,   124,   126,   751,   143,   126,   136,   449,   136,   643,
     121,   790,   128,     4,   124,   124,    39,   137,   137,   136,
     449,   800,   743,   149,   137,   121,   126,   126,   136,   119,
     136,   126,   124,   642,   136,   126,   478,   126,   631,   126,
     124,   634,   790,   147,   124,   103,   140,   656,     3,   478,
     643,   136,   800,   136,   124,   137,   664,   124,   136,   136,
     669,   123,   137,   137,   136,   136,   675,   136,   124,   693,
     136,   664,   140,   136,   760,   864,   250,   631,   631,   634,
     671,   634,   664,   249,   270,   750,   720,   791,   530,    18,
     664,   792,   683,   535,   536,   537,   538,   539,     4,     5,
       6,   530,     8,   532,    10,   534,   535,   536,   537,   538,
     539,   664,    32,    19,    74,   724,    53,   725,    70,    87,
       4,     5,     6,   797,     8,   776,    10,    33,   570,   550,
     642,   739,   725,   238,    11,    19,   724,    49,   497,    23,
      24,   570,   695,    44,   474,    29,   739,   494,   683,    33,
     344,    -1,    -1,    -1,    -1,    39,    62,    -1,    -1,    -1,
     751,    -1,    46,    -1,    -1,    -1,    -1,   776,   777,   778,
      -1,   779,    78,   781,    -1,   784,    -1,   786,    62,    -1,
      -1,    -1,    -1,   792,   793,    -1,   779,    -1,    -1,   631,
      -1,    75,   634,    -1,    -1,    -1,    -1,   806,    -1,   790,
      -1,    -1,   631,   109,    88,   634,    -1,    -1,    -1,   800,
      -1,    -1,     4,     5,     6,    -1,     8,   810,    10,   828,
     829,    -1,    -1,   129,    -1,   109,   110,    19,    -1,    -1,
      -1,    -1,   138,    -1,    -1,   119,    -1,    -1,    -1,   123,
     124,    33,   148,   149,    -1,    -1,    -1,    -1,   132,    -1,
      -1,    -1,    -1,    -1,   138,    -1,   140,   810,    -1,    -1,
      -1,    -1,    -1,    -1,   148,   149,    -1,    -1,    -1,   878,
      62,    -1,   881,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   725,    -1,    -1,    78,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   725,   739,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     739,    -1,    -1,    -1,    -1,    -1,    -1,   109,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   779,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   138,    -1,    -1,    -1,
     779,    -1,    -1,    -1,    -1,    -1,   148,   149,     4,     5,
       6,    -1,     8,    -1,    10,    -1,    -1,    -1,   810,    -1,
      -1,    -1,    -1,    19,    -1,    21,    -1,    23,    24,    -1,
      -1,   810,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,    -1,    -1,   123,   124,    -1,
      -1,   127,    -1,    -1,    -1,    -1,   132,    -1,    -1,    -1,
     136,    -1,   138,    -1,   140,     4,     5,     6,    -1,     8,
      -1,    10,   148,   149,    -1,    -1,    -1,    -1,    -1,    -1,
      19,    -1,    21,    -1,    23,    24,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,    -1,   123,    -1,    -1,    -1,   127,    -1,
       4,     5,     6,   132,     8,    -1,    10,   136,    -1,   138,
      -1,   140,    -1,    -1,    -1,    19,    -1,    21,    -1,   148,
     149,    -1,    -1,    -1,    -1,    29,    30,    31,    -1,    33,
      -1,    -1,    36,    37,    38,    -1,    40,    41,    -1,    -1,
      -1,    45,    46,    47,    48,    -1,    -1,    51,    52,    53,
      -1,    -1,    56,    -1,    -1,    -1,    -1,    61,    62,    63,
      64,    65,    66,    67,    -1,    -1,    -1,    -1,    72,    73,
      -1,    75,    -1,    77,    -1,    79,    -1,    -1,    82,    83,
      84,    85,    -1,    87,    -1,    89,    -1,    -1,    -1,    93,
      -1,    95,    96,    97,    98,    99,   100,   101,    -1,    -1,
     104,    -1,   106,   107,   108,   109,   110,    -1,    -1,    -1,
     114,   115,   116,   117,   118,   119,    -1,    -1,    -1,   123,
      -1,   125,    -1,   127,     4,     5,     6,    -1,     8,    -1,
      10,    -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,    19,
      -1,    21,    -1,    -1,   148,   149,    -1,    -1,    -1,    29,
      30,    31,    -1,    33,    -1,    -1,    36,    37,    38,    -1,
      40,    41,    -1,    -1,    -1,    -1,    -1,    47,    48,    -1,
      -1,    51,    52,    -1,    -1,    -1,    56,    -1,    -1,    -1,
      -1,    61,    62,    63,    64,    65,    66,    67,    -1,    -1,
      -1,    -1,    72,    73,    -1,    75,    -1,    77,    -1,    79,
      -1,    -1,    82,    83,    84,    85,    -1,    87,    -1,    89,
      -1,    -1,    -1,    93,    -1,    95,    96,    97,    98,    99,
     100,   101,    -1,    -1,   104,    -1,   106,   107,   108,   109,
     110,    -1,    -1,    -1,   114,   115,   116,   117,   118,   119,
      -1,   121,    -1,    -1,    -1,   125,    -1,   127,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     4,     5,     6,   138,     8,
      -1,    10,    -1,    -1,    -1,    -1,    -1,    -1,   148,   149,
      19,    -1,    21,    -1,    23,    24,    -1,    -1,    -1,    -1,
      29,    -1,    31,    -1,    33,    -1,    -1,    36,    37,    38,
      39,    40,    41,    -1,    -1,    -1,    -1,    46,    47,    48,
      -1,    -1,    51,    52,    -1,    -1,    -1,    56,    -1,    -1,
      -1,    -1,    61,    62,    -1,    64,    65,    66,    67,    -1,
      -1,    -1,    -1,    -1,    73,    -1,    75,    -1,    77,    -1,
      -1,    -1,    -1,    82,    83,    84,    85,    -1,    87,    88,
      -1,    -1,    -1,    -1,    93,    -1,    95,    96,    97,    98,
      99,    -1,    -1,    -1,    -1,   104,    -1,   106,   107,   108,
     109,   110,    -1,    -1,    -1,   114,   115,   116,   117,   118,
     119,    -1,    -1,    -1,   123,    -1,    -1,    -1,   127,    -1,
       4,     5,     6,   132,     8,    -1,    10,    -1,    -1,   138,
      -1,   140,    -1,    -1,    -1,    19,    -1,    21,    -1,   148,
     149,    -1,    -1,    -1,    -1,    29,    30,    31,    -1,    33,
      -1,    -1,    36,    37,    38,    -1,    40,    41,    -1,    -1,
      -1,    -1,    -1,    47,    48,    -1,    -1,    51,    52,    -1,
      -1,    -1,    56,    -1,    -1,    -1,    -1,    61,    62,    63,
      64,    65,    66,    67,    -1,    -1,    -1,    -1,    72,    73,
      -1,    75,    -1,    77,    -1,    79,    -1,    -1,    82,    83,
      84,    85,    -1,    87,    -1,    89,    -1,    -1,    -1,    93,
      -1,    95,    96,    97,    98,    99,   100,   101,    -1,    -1,
     104,    -1,   106,   107,   108,   109,   110,    -1,    -1,    -1,
     114,   115,   116,   117,   118,   119,    -1,    -1,    -1,    -1,
      -1,   125,    -1,   127,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     4,     5,     6,   138,     8,    -1,    10,    -1,    -1,
      -1,    -1,    -1,    -1,   148,   149,    19,    -1,    21,    -1,
      23,    24,    -1,    -1,    -1,    -1,    29,    -1,    31,    -1,
      33,    -1,    -1,    36,    37,    38,    39,    40,    41,    -1,
      -1,    -1,    -1,    46,    47,    48,    -1,    -1,    51,    52,
      -1,    -1,    -1,    56,    -1,    -1,    -1,    -1,    61,    62,
      -1,    64,    65,    66,    67,    -1,    -1,    -1,    -1,    -1,
      73,    -1,    75,    -1,    77,    -1,    -1,    -1,    -1,    82,
      83,    84,    85,    -1,    87,    88,    -1,    -1,    -1,    -1,
      93,    -1,    95,    96,    97,    98,    99,    -1,    -1,    -1,
      -1,   104,    -1,   106,   107,   108,   109,   110,    -1,    -1,
      -1,   114,   115,   116,   117,   118,   119,    -1,    -1,    -1,
     123,    -1,    -1,    -1,   127,    -1,     4,     5,     6,   132,
       8,    -1,    10,    -1,    -1,   138,    -1,   140,    -1,    -1,
      -1,    19,    -1,    21,    -1,   148,   149,    -1,    -1,    -1,
      -1,    29,    -1,    31,    -1,    33,    -1,    -1,    36,    37,
      38,    -1,    40,    41,    -1,    -1,    -1,    -1,    -1,    47,
      48,    -1,    -1,    51,    52,    -1,    -1,    -1,    56,    -1,
      -1,    -1,    -1,    61,    62,    63,    64,    65,    66,    67,
      -1,    -1,    -1,    -1,    72,    73,    -1,    75,    -1,    77,
      -1,    79,    -1,    -1,    82,    83,    84,    85,    -1,    87,
      -1,    89,    -1,    -1,    -1,    93,    -1,    95,    96,    97,
      98,    99,   100,   101,    -1,     4,   104,    -1,   106,   107,
     108,   109,   110,    -1,    -1,    -1,   114,   115,   116,   117,
     118,   119,    21,    -1,    -1,    -1,    -1,   125,    -1,   127,
      29,    -1,    31,    -1,    33,    -1,    -1,    36,    37,    38,
     138,    40,    41,    -1,    -1,    -1,    -1,    -1,    47,    48,
     148,   149,    51,    52,    -1,    -1,    -1,    56,    -1,    -1,
      -1,    -1,    61,    -1,    -1,    64,    65,    66,    67,    -1,
      -1,    -1,    -1,    -1,    73,    -1,    75,    -1,    77,    -1,
      -1,    -1,    -1,    82,    83,    84,    85,    -1,    87,    -1,
      -1,    -1,    -1,    -1,    93,    -1,    95,    96,    97,    98,
      99,    -1,    -1,    -1,    -1,   104,    -1,   106,   107,   108,
      -1,   110,    -1,    -1,    -1,   114,   115,   116,   117,   118,
      -1,    -1,    -1,     4,     5,     6,    -1,     8,   127,    10,
      -1,     4,     5,     6,    -1,     8,    -1,    10,    19,   138,
      21,    -1,    23,    24,    -1,    -1,    19,    -1,    29,   148,
     149,    -1,    33,    -1,    -1,     4,     5,     6,    39,     8,
      33,    10,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,
      19,    -1,    -1,    -1,    23,    24,    -1,    -1,    -1,    -1,
      29,    62,    -1,    -1,    33,    -1,    -1,    -1,    -1,    62,
      39,    -1,    -1,    -1,    75,    -1,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,
      -1,    -1,    -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    -1,   109,   110,
      -1,    -1,    -1,    -1,    -1,    -1,   109,    -1,   119,    88,
      -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   132,    -1,    -1,    -1,    -1,    -1,   138,    -1,   140,
     109,   110,    -1,    -1,    -1,   138,    -1,   148,   149,    -1,
     119,    -1,    -1,    -1,   123,   148,   149,    -1,    21,    -1,
      -1,    -1,    -1,   132,    -1,    -1,    29,    -1,    31,   138,
      33,   140,    -1,    36,    37,    38,    -1,    40,    41,   148,
     149,    -1,    -1,    -1,    47,    48,    -1,    -1,    51,    52,
      -1,    -1,    -1,    56,    -1,    -1,    -1,    -1,    61,    -1,
      -1,    64,    65,    66,    67,    -1,    -1,    -1,    -1,    -1,
      73,    -1,    75,    -1,    77,    -1,    -1,    -1,    -1,    82,
      83,    84,    85,    -1,    87,    -1,    -1,    -1,    -1,    -1,
      93,    -1,    95,    96,    97,    98,    99,    -1,    -1,    -1,
      -1,   104,    -1,   106,   107,   108,    -1,   110,    -1,    -1,
      -1,   114,   115,   116,   117,   118,    -1,   120,    -1,    -1,
     123,    21,    -1,    -1,   127,    -1,    -1,    -1,    -1,    29,
      -1,    31,    -1,    33,    -1,    -1,    36,    37,    38,    -1,
      40,    41,    -1,    -1,    -1,   148,   149,    47,    48,    -1,
      -1,    51,    52,    -1,    -1,    -1,    56,    -1,    58,    -1,
      -1,    61,    -1,    -1,    64,    65,    66,    67,    -1,    69,
      -1,    -1,    -1,    73,    -1,    75,    -1,    77,    -1,    -1,
      -1,    -1,    82,    83,    84,    85,    -1,    87,    -1,    -1,
      -1,    -1,    -1,    93,    -1,    95,    96,    97,    98,    99,
      -1,    -1,    -1,    -1,   104,    -1,   106,   107,   108,    -1,
     110,    -1,    -1,    -1,   114,   115,   116,   117,   118,    -1,
      21,    -1,    23,    24,    -1,    -1,    -1,   127,    29,    -1,
      31,    -1,    33,    -1,    -1,    36,    37,    38,    -1,    40,
      41,    -1,    -1,    -1,    -1,    -1,    47,    48,   148,   149,
      51,    52,    -1,    -1,    -1,    56,    -1,    -1,    -1,    -1,
      61,    -1,    -1,    64,    65,    66,    67,    -1,    -1,    -1,
      -1,    -1,    73,    -1,    75,    -1,    77,    -1,    -1,    -1,
      -1,    82,    83,    84,    85,    -1,    87,    -1,    -1,    -1,
      -1,    -1,    93,    -1,    95,    96,    97,    98,    99,    -1,
      -1,    -1,    -1,   104,    -1,   106,   107,   108,    -1,   110,
      -1,    -1,    -1,   114,   115,   116,   117,   118,    -1,    21,
      -1,    -1,    -1,    -1,    -1,    -1,   127,    29,    -1,    31,
      -1,    33,    -1,    -1,    36,    37,    38,    -1,    40,    41,
      -1,    -1,    -1,    -1,    -1,    47,    48,   148,   149,    51,
      52,    -1,    -1,    -1,    56,    -1,    -1,    -1,    -1,    61,
      -1,    -1,    64,    65,    66,    67,    -1,    -1,    -1,    -1,
      -1,    73,    -1,    75,    -1,    77,    -1,    -1,    -1,    -1,
      82,    83,    84,    85,    -1,    87,    -1,    -1,    -1,    -1,
      -1,    93,    -1,    95,    96,    97,    98,    99,    -1,    -1,
      -1,    -1,   104,    -1,   106,   107,   108,    -1,   110,    -1,
      -1,    -1,   114,   115,   116,   117,   118,    -1,    21,    -1,
      -1,   123,    -1,    -1,    -1,   127,    29,    -1,    31,    -1,
      33,    -1,    -1,    36,    37,    38,    -1,    40,    41,    42,
      -1,    -1,    -1,    -1,    47,    48,   148,   149,    51,    52,
      -1,    -1,    -1,    56,    -1,    -1,    -1,    -1,    61,    -1,
      -1,    64,    65,    66,    67,    -1,    -1,    -1,    -1,    -1,
      73,    -1,    75,    -1,    77,    -1,    -1,    -1,    -1,    82,
      83,    84,    85,    -1,    87,    -1,    -1,    -1,    -1,    -1,
      93,    -1,    95,    96,    97,    98,    99,    -1,    -1,    -1,
      -1,   104,    -1,   106,   107,   108,    -1,   110,    -1,    -1,
      -1,   114,   115,   116,   117,   118,    -1,    21,    -1,    -1,
      -1,    -1,    -1,    -1,   127,    29,    -1,    31,    -1,    33,
      -1,    -1,    36,    37,    38,    -1,    40,    41,    -1,    -1,
      -1,    -1,    -1,    47,    48,   148,   149,    51,    52,    -1,
      -1,    -1,    56,    -1,    -1,    -1,    -1,    61,    -1,    -1,
      64,    65,    66,    67,    -1,    -1,    -1,    -1,    -1,    73,
      -1,    75,    -1,    77,    -1,    -1,    -1,    -1,    82,    83,
      84,    85,    -1,    87,    -1,    -1,    -1,    -1,    -1,    93,
      -1,    95,    96,    97,    98,    99,    -1,    -1,    -1,    -1,
     104,    -1,   106,   107,   108,    -1,   110,    -1,    -1,    -1,
     114,   115,   116,   117,   118,    -1,   120,    -1,    -1,    -1,
      21,    -1,    -1,   127,    -1,    -1,    -1,    -1,    29,    -1,
      31,    -1,    33,    -1,    -1,    36,    37,    38,    -1,    40,
      41,    -1,    -1,    -1,   148,   149,    47,    48,    -1,    -1,
      51,    52,    -1,    -1,    -1,    56,    -1,    -1,    -1,    -1,
      61,    -1,    -1,    64,    65,    66,    67,    -1,    -1,    -1,
      -1,    -1,    73,    -1,    75,    -1,    77,    -1,    -1,    -1,
      -1,    82,    83,    84,    85,    -1,    87,    -1,    -1,    -1,
      -1,    -1,    93,    -1,    95,    96,    97,    98,    99,    -1,
      -1,    -1,    -1,   104,    -1,   106,   107,   108,    -1,   110,
      -1,    -1,    -1,   114,   115,   116,   117,   118,    -1,    21,
      -1,    -1,    -1,    -1,    -1,    -1,   127,    29,   129,    31,
      -1,    33,    -1,    -1,    36,    37,    38,    -1,    40,    41,
      -1,    -1,    -1,    -1,    -1,    47,    48,   148,   149,    51,
      52,    -1,    -1,    -1,    56,    -1,    -1,    -1,    -1,    61,
      -1,    -1,    64,    65,    66,    67,    -1,    -1,    -1,    -1,
      -1,    73,    -1,    75,    -1,    77,    -1,    -1,    -1,    -1,
      82,    83,    84,    85,    -1,    87,    -1,    -1,    -1,    -1,
      -1,    93,    -1,    95,    96,    97,    98,    99,    -1,    -1,
      -1,    -1,   104,    -1,   106,   107,   108,    -1,   110,    -1,
      -1,    -1,   114,   115,   116,   117,   118,    -1,    21,   121,
      -1,    -1,    -1,    -1,    -1,   127,    29,    -1,    31,    -1,
      33,    -1,    -1,    36,    37,    38,    -1,    40,    41,    -1,
      -1,    -1,    -1,    -1,    47,    48,   148,   149,    51,    52,
      -1,    -1,    -1,    56,    -1,    -1,    -1,    -1,    61,    -1,
      -1,    64,    65,    66,    67,    -1,    -1,    -1,    -1,    -1,
      73,    -1,    75,    -1,    77,    -1,    -1,    -1,    -1,    82,
      83,    84,    85,    -1,    87,    -1,    -1,    -1,    -1,    -1,
      93,    -1,    95,    96,    97,    98,    99,    -1,    -1,    -1,
      -1,   104,    -1,   106,   107,   108,    -1,   110,    -1,    -1,
      -1,   114,   115,   116,   117,   118,    -1,    21,    -1,    -1,
      -1,    -1,    -1,    -1,   127,    29,    -1,    31,    -1,    33,
      -1,    -1,    36,    37,    38,    -1,    40,    41,    -1,    -1,
      -1,    -1,    -1,    47,    48,   148,   149,    51,    52,    -1,
      -1,    -1,    56,    -1,    -1,    -1,    -1,    61,    -1,    -1,
      64,    65,    66,    67,    -1,    -1,    -1,    -1,    -1,    73,
      -1,    75,    -1,    77,    -1,    -1,    -1,    -1,    82,    83,
      84,    85,    -1,    87,    -1,    -1,    -1,    -1,    -1,    93,
      -1,    95,    96,    97,    98,    99,    -1,    -1,    -1,    -1,
     104,    -1,   106,   107,   108,    -1,   110,    -1,    -1,    -1,
     114,   115,   116,   117,   118,    -1,    21,    -1,    -1,    -1,
      -1,    -1,    -1,   127,    29,    -1,    31,    -1,    33,    -1,
      -1,    36,    37,    38,    -1,    40,    41,    -1,    -1,    -1,
      -1,    -1,    47,    48,   148,   149,    51,    52,    -1,    -1,
      -1,    56,    -1,    -1,    -1,    -1,    61,    -1,    -1,    64,
      65,    66,    67,    -1,    -1,    -1,    -1,    -1,    73,    -1,
      75,    -1,    77,    -1,    -1,    -1,    -1,    82,    83,    84,
      85,    -1,    87,    -1,    -1,    -1,    -1,    -1,    93,    -1,
      95,    96,    97,    98,    99,    -1,    -1,    -1,    -1,   104,
      -1,   106,   107,   108,    -1,   110,    -1,    -1,    -1,   114,
     115,   116,   117,   118,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   127,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      23,    24,    -1,   148,   149,    28,    29,    30,    -1,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    -1,    -1,    -1,    -1,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    -1,    78,    79,    80,    81,    -1,
      83,    -1,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,    -1,   105,    -1,   107,   108,   109,   110,   111,   112,
     113,    -1,    -1,    -1,    -1,    -1,   119,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,   148,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    -1,    -1,
      -1,    -1,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    80,    81,    -1,    83,    -1,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,    -1,   105,
      -1,   107,   108,   109,   110,   111,   112,   113,    -1,    -1,
      -1,    -1,    -1,   119,    -1,    -1,    -1,    -1,   124,    -1,
      -1,   127,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,   148,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    -1,    -1,    -1,    -1,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    80,    81,    -1,    83,    -1,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,    -1,   105,    -1,   107,   108,
     109,   110,   111,   112,   113,    -1,    -1,    -1,    -1,    -1,
     119,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   136,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,   148,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    -1,    -1,    -1,    -1,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    -1,    78,    79,    80,    81,
      -1,    83,    -1,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,    -1,   105,    -1,   107,   108,   109,   110,   111,
     112,   113,    -1,    -1,    -1,    -1,    -1,   119,    -1,    -1,
      -1,    -1,    28,    -1,    30,   127,    32,    -1,    34,    35,
      -1,    -1,    -1,    -1,   136,    -1,    42,    43,    44,    45,
      -1,    -1,    -1,    49,    50,    -1,   148,    53,    54,    55,
      -1,    57,    58,    59,    60,    -1,    -1,    63,    -1,    -1,
      -1,    -1,    68,    69,    70,    71,    72,    -1,    74,    -1,
      76,    -1,    78,    79,    80,    81,    -1,    -1,    -1,    -1,
      86,    -1,    -1,    89,    90,    91,    92,    -1,    94,    -1,
      -1,    -1,    -1,    -1,   100,   101,   102,   103,    -1,   105,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,    -1,    -1,
      28,    -1,    30,    -1,    32,    -1,    34,    35,   124,    -1,
      -1,    -1,    -1,    -1,    42,    43,    44,    45,    -1,    -1,
     136,    49,    50,    -1,    -1,    53,    54,    55,   144,    57,
      58,    59,    60,    -1,    -1,    63,    -1,    -1,    -1,    -1,
      68,    69,    70,    71,    72,    -1,    74,    -1,    76,    -1,
      78,    79,    80,    81,    -1,    -1,    -1,    -1,    86,    -1,
      -1,    89,    90,    91,    92,    -1,    94,    -1,    -1,    -1,
      -1,    -1,   100,   101,   102,   103,    -1,   105,    -1,    -1,
      -1,    -1,    -1,   111,   112,   113,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   124,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   136,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   144
  };

  const unsigned short int
  asn1_parser::yystos_[] =
  {
       0,   148,   153,   154,   228,   376,     0,   153,    50,   123,
     229,   230,   231,    15,   236,     4,   149,   232,   233,   234,
     235,   311,   374,   132,   316,    74,    34,    58,    69,   237,
     124,   232,   125,   139,   317,   105,   105,   105,    60,   238,
     234,    16,    17,   319,   139,   318,    70,   120,   126,   319,
     132,    35,   318,    59,   239,   240,    30,   148,   149,   241,
     248,   249,   250,   373,   375,   227,    71,   242,   141,   141,
     136,   123,    55,   243,   244,   245,   248,    21,   159,   198,
     202,   203,   204,   205,   206,   207,   251,   252,   261,   262,
     263,   373,   375,   249,   124,   141,   245,    63,   123,   208,
     251,    21,    29,    31,    33,    36,    37,    38,    40,    41,
      47,    48,    51,    52,    56,    61,    64,    65,    66,    67,
      73,    75,    77,    82,    83,    84,    85,    87,    93,    95,
      96,    97,    98,    99,   104,   106,   107,   108,   110,   114,
     115,   116,   117,   118,   120,   127,   148,   158,   186,   187,
     196,   197,   201,   208,   213,   214,   215,   216,   253,   255,
     259,   264,   265,   273,   275,   279,   283,   284,   287,   288,
     289,   293,   294,   295,   296,   300,   301,   302,   303,   307,
     314,   315,   320,   321,   322,   323,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   373,   374,   376,   208,   264,
     373,   376,   246,   376,   148,   149,   156,   157,   158,   209,
     210,   211,   212,   250,   264,   373,   376,   377,   148,   156,
     158,   376,   102,   102,   123,    90,   123,    86,   123,    68,
     102,    86,   101,   123,   125,   334,   358,    86,   123,   334,
     358,    42,   156,   160,   161,   264,    15,   304,   137,   120,
     120,   264,   137,   123,   120,   334,    58,    69,   264,   137,
     129,   137,   264,   120,   137,   123,   247,   308,   375,   124,
     136,   140,   137,   120,   137,   123,   266,   297,   298,   299,
     374,   121,   277,   280,   281,   282,   374,   156,   276,   277,
     374,   264,   266,   374,   334,    44,   121,   124,   266,   290,
     291,   292,     4,     5,     6,     8,    10,    19,    30,    33,
      45,    46,    53,    62,    63,    72,    79,    89,   100,   109,
     119,   123,   125,   138,   148,   149,   199,   218,   219,   221,
     226,   264,   274,   278,   324,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   348,   349,   350,   351,   352,
     353,   354,   356,   358,   359,   360,   361,   369,   370,    86,
      86,   264,   266,   124,   290,    86,    86,   123,   140,    32,
      94,   113,   306,    23,    24,   164,   165,   199,   160,   264,
     120,   165,     5,     6,     8,    10,    23,    24,    33,    39,
      46,    75,    88,   119,   123,   140,   148,   149,   156,   201,
     217,   254,   256,   257,   258,   260,   264,   267,   268,   269,
     270,   274,   278,   316,   324,   375,   376,   123,   271,   264,
     264,   165,   373,   264,    21,   373,   120,    33,    75,   148,
     149,   201,   267,   268,   373,   376,     4,   254,   309,   310,
     311,   312,   313,   374,   375,   210,   250,   148,   377,   123,
     186,   188,   189,   190,   192,   285,   286,   374,   124,   136,
     264,   131,   371,   124,   136,   125,   124,   136,    86,   371,
      49,    88,   124,   136,    57,   345,    39,   264,    39,   334,
     268,    12,    43,    44,   121,   200,   338,   337,     4,   123,
     371,   136,   111,   144,   346,    76,   145,   347,   345,   264,
     122,   129,   264,   266,   264,   266,   124,   264,   266,   264,
     266,    23,    24,    27,   162,   163,   166,   167,   170,   172,
     173,   175,   177,     4,   254,   305,   137,   268,   268,   268,
     272,   125,   123,   124,   136,   136,   140,   144,   136,   144,
     137,   137,   337,   268,   137,   137,   254,   309,   124,   309,
     125,    23,    24,    28,    29,    30,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    78,    79,    80,
      81,    83,    85,    86,    87,    88,    89,    90,    91,    92,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     105,   107,   108,   109,   110,   111,   112,   113,   119,   136,
     148,   164,   185,   191,   193,   194,   195,   264,   268,   376,
     378,   124,   136,   125,   121,   266,   254,   264,   278,   372,
     121,   282,   254,   278,   277,   264,   136,    33,   148,   149,
     350,   121,   292,   348,   123,    53,   268,   334,   362,   123,
     363,   136,   124,   136,   126,   143,   222,   223,   126,   121,
     341,   343,    78,   129,   350,   355,   357,   156,   264,   164,
     264,   156,   124,   136,    23,    49,    88,   168,   128,   164,
     124,   268,     4,   257,   257,   268,   268,   268,   268,   268,
      23,    24,   375,   124,   124,   312,   195,   136,   124,   194,
     137,   286,     4,   254,   136,   140,   371,   126,   126,   121,
     291,   371,   121,   156,   196,   212,   220,   264,   376,    39,
     121,   364,   365,   374,   338,   121,   137,   225,   374,   124,
     136,   136,   357,    49,    88,   176,    88,   112,   169,   169,
     169,    49,    88,   178,   119,   179,   163,   264,   126,   124,
     126,   147,   126,   126,   299,   268,   136,   136,   136,   140,
     124,   137,   268,   124,   136,   124,   136,   334,   366,   367,
     136,   137,   224,   137,   223,   338,   188,    49,    88,   174,
      49,    88,   171,   171,   103,   124,   136,   281,   121,   291,
     123,   188,   268,   148,   364,   364,    28,    88,    92,   368,
     338,   224,   225,   374,   271,   350,   123,   155,   136,   136,
     268,   124,    29,    33,    36,    37,    38,    39,    40,    41,
      46,    47,    48,    51,    52,    56,    61,    62,    73,    75,
      83,    85,    87,    88,    95,    96,    97,    98,    99,   107,
     108,   109,   110,   119,   127,   148,   180,   181,   182,   183,
     184,   185,   121,   180,   124,   181,   164,   185,   136,   128,
     291,   136
  };

  const unsigned short int
  asn1_parser::yyr1_[] =
  {
       0,   152,   153,   153,   154,   155,   156,   156,   156,   157,
     158,   158,   159,   160,   160,   161,   162,   162,   163,   163,
     163,   163,   163,   163,   164,   164,   165,   165,   166,   167,
     167,   168,   168,   168,   169,   169,   169,   170,   171,   171,
     171,   172,   173,   174,   174,   174,   175,   176,   176,   176,
     177,   178,   178,   178,   179,   179,   180,   180,   181,   181,
     182,   183,   184,   184,   184,   185,   185,   186,   186,   187,
     188,   188,   189,   189,   190,   191,   192,   193,   193,   194,
     194,   195,   195,   196,   196,   197,   198,   199,   200,   200,
     200,   200,   200,   201,   201,   202,   202,   202,   202,   202,
     203,   204,   205,   206,   207,   208,   209,   209,   210,   210,
     211,   211,   212,   212,   213,   214,   215,   216,   216,   217,
     217,   218,   218,   218,   219,   220,   220,   220,   220,   220,
     220,   220,   221,   221,   222,   222,   223,   223,   224,   224,
     225,   225,   226,   226,   226,   227,   228,   229,   229,   229,
     230,   231,   232,   232,   233,   233,   233,   234,   235,   236,
     236,   237,   237,   237,   237,   238,   238,   239,   239,   240,
     240,   240,   241,   241,   242,   242,   243,   243,   244,   244,
     245,   246,   247,   247,   247,   248,   248,   249,   250,   250,
     250,   251,   251,   252,   252,   252,   252,   252,   252,   253,
     253,   253,   254,   254,   255,   256,   257,   257,   258,   258,
     258,   259,   260,   261,   262,   263,   264,   264,   264,   264,
     264,   265,   265,   265,   265,   265,   265,   265,   265,   265,
     265,   265,   265,   265,   265,   265,   265,   265,   265,   265,
     265,   265,   265,   265,   265,   265,   265,   265,   265,   265,
     265,   265,   266,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
     267,   267,   267,   267,   267,   267,   267,   267,   267,   268,
     268,   269,   269,   270,   270,   271,   272,   272,   273,   274,
     274,   275,   275,   276,   276,   277,   277,   278,   278,   279,
     280,   280,   280,   280,   281,   281,   282,   282,   283,   284,
     284,   285,   285,   286,   286,   287,   288,   289,   289,   290,
     290,   290,   290,   290,   290,   290,   290,   290,   291,   291,
     292,   292,   292,   292,   293,   293,   294,   294,   295,   295,
     296,   297,   298,   298,   298,   299,   299,   300,   301,   302,
     302,   302,   303,   304,   304,   305,   305,   306,   306,   306,
     306,   307,   308,   308,   309,   309,   310,   310,   310,   311,
     312,   312,   313,   314,   315,   316,   317,   318,   318,   319,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   329,   330,   330,   330,   330,   330,   330,   330,   330,
     330,   330,   330,   330,   330,   331,   332,   332,   333,   333,
     333,   333,   333,   333,   333,   333,   334,   335,   335,   336,
     337,   337,   337,   338,   338,   339,   339,   340,   341,   341,
     342,   343,   343,   344,   345,   346,   346,   347,   347,   348,
     348,   349,   349,   349,   349,   349,   349,   349,   349,   349,
     350,   350,   350,   350,   350,   350,   350,   350,   350,   350,
     351,   352,   353,   354,   354,   355,   355,   356,   356,   357,
     357,   358,   359,   360,   361,   361,   362,   363,   363,   363,
     363,   364,   364,   365,   366,   367,   367,   368,   368,   368,
     368,   369,   370,   371,   371,   372,   372,   372,   373,   374,
     375,   376,   377,   378,   378,   378,   378,   378,   378,   378,
     378,   378,   378,   378,   378,   378,   378,   378,   378,   378,
     378,   378,   378,   378,   378,   378,   378,   378,   378,   378,
     378,   378,   378,   378,   378,   378,   378,   378,   378,   378,
     378,   378,   378,   378,   378,   378,   378,   378,   378,   378,
     378,   378,   378,   378,   378,   378,   378,   378,   378,   378,
     378,   378,   378,   378,   378,   378,   378,   378,   378,   378,
     378,   378,   378,   378,   378,   378,   378,   378,   378,   378
  };

  const unsigned char
  asn1_parser::yyr2_[] =
  {
       0,     2,     1,     2,    10,     3,     1,     1,     1,     3,
       1,     1,     3,     1,     1,     5,     1,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     2,     1,
       2,     1,     2,     0,     1,     1,     0,     4,     1,     2,
       0,     4,     4,     1,     2,     0,     3,     1,     2,     0,
       3,     1,     1,     0,     3,     0,     1,     2,     1,     1,
       3,     2,     1,     2,     0,     1,     1,     1,     1,     3,
       1,     1,     1,     1,     5,     2,     3,     1,     2,     1,
       1,     1,     1,     1,     1,     3,     4,     3,     1,     3,
       1,     3,     5,     3,     3,     1,     1,     1,     1,     1,
       4,     5,     5,     4,     5,     3,     1,     3,     3,     1,
       1,     1,     1,     1,     1,     3,     3,     1,     1,     1,
       1,     1,     1,     1,     5,     3,     3,     1,     1,     1,
       1,     0,     1,     4,     1,     3,     2,     4,     2,     0,
       1,     3,     2,     3,     5,     0,     2,     1,     1,     0,
       3,     2,     1,     2,     1,     1,     1,     1,     4,     2,
       0,     2,     2,     2,     0,     2,     0,     3,     0,     3,
       3,     0,     1,     0,     3,     0,     1,     0,     1,     2,
       3,     2,     1,     1,     0,     1,     3,     1,     1,     3,
       1,     1,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     4,     1,     3,     1,     1,
       1,     3,     3,     3,     4,     4,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     1,     1,     1,     1,     1,     1,     1,
       2,     1,     4,     1,     1,     1,     1,     3,     3,     3,
       1,     1,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     3,     3,     3,     3,     1,     2,     1,     1,
       1,     1,     4,     1,     3,     4,     4,     1,     2,     4,
       1,     4,     6,     2,     1,     3,     1,     1,     1,     2,
       5,     1,     3,     4,     4,     2,     1,     3,     4,     1,
       4,     6,     8,    10,     4,     6,     2,     4,     1,     3,
       1,     2,     3,     3,     3,     3,     3,     4,     3,     3,
       4,     1,     1,     3,     5,     1,     3,     3,     1,     2,
       3,     3,     5,     2,     0,     1,     1,     1,     1,     1,
       0,     2,     3,     4,     1,     2,     1,     1,     1,     1,
       1,     1,     4,     1,     1,     4,     2,     3,     0,     1,
       1,     1,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     2,     1,     4,     4,
       4,     4,     4,     4,     4,     4,     4,     1,     1,     1,
       1,     3,     5,     1,     2,     1,     3,     1,     1,     3,
       1,     1,     2,     1,     2,     1,     1,     1,     1,     1,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     1,     3,     1,     2,     1,     2,     1,     1,     1,
       1,     2,     1,     2,     3,     3,     1,     0,     3,     5,
       3,     1,     3,     2,     2,     1,     0,     1,     1,     1,
       0,     2,     2,     2,     0,     1,     1,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1
  };



  // YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
  // First, the terminals, then, starting at \a yyntokens_, nonterminals.
  const char*
  const asn1_parser::yytname_[] =
  {
  "END_OF_FILE", "error", "$undefined", "comment", "number", "realnumber",
  "bstring", "xmlbstring", "hstring", "xmlhstring", "cstring",
  "xmlcstring", "simplestring", "xmltstring", "psname",
  "encodingreference", "integerUnicodeLabel", "non-integerUnicodeLabel",
  "extended-true", "tstring", "extended-false", "objectreference",
  "objectsetreference", "typefieldreference", "valuefieldreference",
  "valuesetfieldreference", "objectfieldreference",
  "objectsetfieldreference", "ABSENT", "ABSTRACT_SYNTAX", "ALL", "ANY",
  "APPLICATION", "ASN_NULL", "AUTOMATIC", "BEGIN", "BIT", "BMPString",
  "BOOLEAN", "BY", "CHARACTER", "CHOICE", "CLASS", "COMPONENT",
  "COMPONENTS", "CONSTRAINED", "CONTAINING", "DATE", "DATE_TIME",
  "DEFAULT", "DEFINITIONS", "DURATION", "EMBEDDED", "ENCODED",
  "ENCODING_CONTROL", "END", "ENUMERATED", "EXCEPT", "EXPLICIT", "EXPORTS",
  "EXTENSIBILITY", "EXTERNAL", "FALSE", "FROM", "GeneralizedTime",
  "GeneralString", "GraphicString", "IA5String", "IDENTIFIER", "IMPLICIT",
  "IMPLIED", "IMPORTS", "\"INCLUDES\"", "INSTANCE", "INSTRUCTIONS",
  "INTEGER", "INTERSECTION", "ISO646String", "MAX", "MIN",
  "MINUS_INFINITY", "NOT_A_NUMBER", "NumericString", "OBJECT",
  "ObjectDescriptor", "OCTET", "OF", "OID_IRI", "OPTIONAL", "PATTERN",
  "PDV", "PLUS_INFINITY", "PRESENT", "PrintableString", "PRIVATE", "REAL",
  "RELATIVE_OID", "RELATIVE_OID_IRI", "SEQUENCE", "SET", "SETTINGS",
  "SIZE", "STRING", "SYNTAX", "T61String", "TAGS", "TeletexString", "TIME",
  "TIME_OF_DAY", "TRUE", "TYPE_IDENTIFIER", "UNION", "UNIQUE", "UNIVERSAL",
  "UniversalString", "UTCTime", "UTF8String", "VideotexString",
  "VisibleString", "WITH", "\"::=\"", "\"...\"", "\"..\"", "\"{\"",
  "\"}\"", "\"(\"", "\")\"", "\"[\"", "\"]\"", "\"<\"", "\">\"", "\"!\"",
  "\"\\\"\"", "\"&\"", "\"'\"", "\"*\"", "\",\"", "\".\"", "\"-\"",
  "\"/\"", "\":\"", "\";\"", "\"=\"", "\"@\"", "\"|\"", "\"^\"", "PLUS",
  "STAR", "GENERIC_IDENTIFIER_UPPERCASE", "GENERIC_IDENTIFIER_LOWERCASE",
  "GENERIC_INTEGER", "xmlasn1typename", "$accept", "ModuleDefinitionList",
  "ModuleDefinition", "SyntaxList", "DefinedObjectClass",
  "ExternalObjectClassReference", "UsefulObjectClassReference",
  "ObjectClassAssignment", "ObjectClass", "ObjectClassDefn",
  "FieldSpecList", "FieldSpec", "FieldName", "FieldNameList",
  "TypeFieldSpec", "OneOrManyTypeFieldReference", "TypeOptionalitySpec",
  "OptionalUnique", "FixedTypeValueFieldSpec", "ValueOptionalitySpec",
  "VariableTypeValueFieldSpec", "FixedTypeValueSetFieldSpec",
  "ValueSetDefaultSpec", "ObjectFieldSpec", "ObjectOptionalitySpec",
  "ObjectSetFieldSpec", "ObjectSetOptionalitySpec", "WithSyntaxSpec",
  "TokenOrGroupSpecList", "TokenOrGroupSpec", "OptionalGroup",
  "RequiredToken", "LiteralList", "Literal", "DefinedObject",
  "ExternalObjectReference", "Object", "ObjectDefn", "DefaultSyntax",
  "FieldSetting", "DefinedSyntax", "DefinedSyntaxList",
  "DefinedSyntaxToken", "Setting", "DefinedObjectSet",
  "ExternalObjectSetReference", "ObjectSetAssignment", "ObjectSet",
  "ObjectSetSpec", "ObjectClassFieldType", "ParameterizedAssignment",
  "ParameterizedTypeAssignment", "ParameterizedValueAssignment",
  "ParameterizedValueSetTypeAssignment",
  "ParameterizedObjectClassAssignment", "ParameterizedObjectAssignment",
  "ParameterList", "ParameterSeries", "Parameter", "ParamGovernor",
  "Governor", "ReferencedObjects", "TypeFromObject", "InstanceOfType",
  "SimpleDefinedType", "SimpleDefinedValue", "GeneralConstraint",
  "UserDefinedConstraint", "UserDefinedConstraintParameter",
  "TableConstraint", "AtNotationList", "AtNotation", "Level",
  "ComponentIdList", "ContentsConstraint", "EncodingControlSections",
  "ModuleIdentifier", "DefinitiveIdentification", "DefinitiveOID",
  "DefinitiveOIDandIRI", "DefinitiveObjIdComponentList",
  "DefinitiveObjIdComponent", "DefinitiveNumberForm",
  "DefinitiveNameAndNumberForm", "EncodingReferenceDefault", "TagDefault",
  "ExtensionDefault", "ModuleBody", "Exports", "SymbolsExported",
  "Imports", "SymbolsImported", "SymbolsFromModuleList",
  "SymbolsFromModule", "GlobalModuleReference", "AssignedIdentifier",
  "SymbolList", "Symbol", "Reference", "AssignmentList", "Assignment",
  "DefinedType", "DefinedValue", "ParameterizedType", "ParameterizedValue",
  "ActualParameterList", "ActualParameter", "ExternalTypeReference",
  "ExternalValueReference", "TypeAssignment", "ValueAssignment",
  "ValueSetTypeAssignment", "Type", "BuiltinType", "NamedType",
  "ValueWithoutTypeIdentifier", "Value", "ValueCommaListChoice",
  "ValueChoice", "ValueSet", "SequenceOfValues", "BooleanType",
  "BooleanValue", "IntegerType", "NamedNumberList", "NamedNumber",
  "SignedNumber", "EnumeratedType", "Enumerations", "Enumeration",
  "EnumerationItem", "RealType", "BitStringType", "NamedBitList",
  "NamedBit", "OctetStringType", "NullType", "SequenceType",
  "ComponentTypeLists", "ComponentTypeList", "ComponentType",
  "SequenceOfType", "SetType", "SetOfType", "ChoiceType",
  "AlternativeTypeLists", "RootAlternativeTypeList", "AlternativeTypeList",
  "SelectionType", "PrefixedType", "TaggedType", "Tag",
  "EncodingReference", "ClassNumber", "Class", "ObjectIdentifierType",
  "ObjectIdentifierValue", "ObjIdComponentsList", "ObjIdComponents",
  "NameForm", "NumberForm", "NameAndNumberForm", "RelativeOIDType",
  "IRIType", "IRIValue", "FirstArcIdentifier", "SubsequentArcIdentifier",
  "ArcIdentifier", "RelativeIRIType", "EmbeddedPDVType", "ExternalType",
  "TimeType", "TimeValue", "DateType", "TimeOfDayType", "DateTimeType",
  "DurationType", "CharacterStringType", "RestrictedCharacterStringType",
  "UnrestrictedCharacterStringType", "ConstrainedType",
  "TypeWithConstraint", "Constraint", "ConstraintSpec",
  "SubtypeConstraint", "ElementSetSpecs", "ElementSetSpec", "Unions",
  "UElems", "Intersections", "IElems", "IntersectionElements", "Elems",
  "Exclusions", "UnionMark", "IntersectionMark", "Elements",
  "SubtypeElements", "SingleValue", "ContainedSubtype", "Includes",
  "ValueRange", "LowerEndpoint", "UpperEndpoint", "LowerEndValue",
  "UpperEndValue", "SizeConstraint", "TypeConstraint", "PermittedAlphabet",
  "InnerTypeConstraints", "SingleTypeConstraint",
  "MultipleTypeConstraints", "TypeConstraints", "NamedConstraint",
  "ComponentConstraint", "ValueConstraint", "PresenceConstraint",
  "PatternConstraint", "PropertySettings", "ExceptionSpec",
  "ExceptionIdentification", "typereference", "identifier",
  "valuereference", "modulereference", "objectclassreference", "word", YY_NULLPTR
  };

#if YYDEBUG
  const unsigned short int
  asn1_parser::yyrline_[] =
  {
       0,   319,   319,   320,   323,   338,   341,   342,   343,   346,
     349,   351,   355,   359,   361,   366,   370,   372,   376,   378,
     380,   381,   382,   383,   386,   388,   396,   398,   402,   406,
     408,   412,   413,   414,   417,   418,   419,   422,   426,   427,
     428,   431,   434,   437,   438,   439,   442,   445,   446,   447,
     450,   453,   454,   455,   461,   462,   465,   466,   469,   470,
     473,   476,   479,   480,   481,   484,   485,   488,   489,   492,
     498,   499,   504,   505,   508,   511,   514,   517,   518,   521,
     522,   525,   526,   530,   531,   534,   537,   541,   544,   545,
     546,   547,   548,   557,   559,   566,   568,   570,   572,   574,
     579,   583,   587,   591,   595,   603,   607,   609,   613,   615,
     619,   620,   623,   624,   639,   651,   660,   667,   668,   672,
     673,   676,   677,   678,   681,   684,   685,   686,   687,   688,
     689,   690,   693,   695,   699,   700,   703,   704,   707,   708,
     711,   712,   715,   716,   717,   728,   736,   743,   744,   745,
     748,   751,   755,   756,   760,   761,   762,   765,   768,   772,
     773,   776,   778,   780,   782,   786,   787,   790,   792,   796,
     797,   798,   801,   802,   805,   807,   810,   812,   815,   817,
     821,   825,   829,   830,   831,   834,   836,   840,   844,   846,
     848,   857,   859,   863,   865,   867,   869,   872,   874,   878,
     880,   882,   888,   890,   893,   897,   900,   902,   906,   908,
     911,   921,   925,   950,   954,   958,   962,   964,   966,   968,
     970,   975,   976,   977,   978,   979,   980,   981,   982,   983,
     984,   985,   986,   987,   988,   989,   990,   991,   992,   993,
     994,   995,   996,   997,   998,   999,  1000,  1001,  1002,  1003,
    1004,  1005,  1008,  1012,  1014,  1016,  1018,  1020,  1022,  1024,
    1026,  1028,  1030,  1032,  1033,  1035,  1037,  1039,  1043,  1044,
    1045,  1046,  1047,  1049,  1051,  1053,  1055,  1057,  1059,  1063,
    1065,  1069,  1070,  1073,  1074,  1077,  1080,  1082,  1090,  1093,
    1094,  1097,  1099,  1103,  1105,  1109,  1111,  1115,  1117,  1121,
    1125,  1128,  1131,  1135,  1138,  1140,  1144,  1146,  1154,  1157,
    1159,  1163,  1164,  1167,  1168,  1182,  1185,  1188,  1190,  1194,
    1196,  1198,  1200,  1202,  1204,  1206,  1208,  1210,  1214,  1216,
    1220,  1222,  1224,  1226,  1238,  1240,  1244,  1246,  1250,  1252,
    1256,  1260,  1264,  1266,  1268,  1272,  1274,  1281,  1284,  1288,
    1290,  1292,  1296,  1300,  1301,  1304,  1306,  1309,  1311,  1313,
    1315,  1325,  1328,  1330,  1334,  1336,  1340,  1342,  1344,  1348,
    1352,  1354,  1357,  1361,  1373,  1376,  1382,  1385,  1386,  1389,
    1390,  1393,  1399,  1406,  1412,  1415,  1418,  1421,  1424,  1427,
    1430,  1431,  1434,  1435,  1436,  1437,  1438,  1439,  1440,  1441,
    1442,  1443,  1444,  1445,  1446,  1450,  1453,  1455,  1459,  1461,
    1463,  1465,  1467,  1469,  1471,  1473,  1477,  1480,  1481,  1484,
    1487,  1488,  1489,  1492,  1493,  1496,  1497,  1500,  1503,  1504,
    1507,  1510,  1511,  1514,  1517,  1520,  1521,  1524,  1525,  1528,
    1530,  1533,  1534,  1535,  1536,  1537,  1538,  1539,  1540,  1541,
    1547,  1549,  1550,  1551,  1552,  1553,  1554,  1555,  1556,  1557,
    1560,  1563,  1566,  1569,  1570,  1573,  1574,  1577,  1578,  1581,
    1582,  1585,  1588,  1591,  1594,  1595,  1598,  1600,  1601,  1602,
    1603,  1606,  1607,  1610,  1613,  1616,  1617,  1620,  1621,  1622,
    1623,  1626,  1629,  1632,  1633,  1636,  1637,  1638,  1641,  1645,
    1649,  1653,  1657,  1661,  1662,  1663,  1664,  1665,  1666,  1667,
    1668,  1669,  1670,  1671,  1672,  1673,  1674,  1675,  1676,  1677,
    1678,  1679,  1680,  1681,  1682,  1683,  1684,  1685,  1686,  1687,
    1688,  1689,  1690,  1691,  1692,  1693,  1694,  1695,  1696,  1697,
    1698,  1699,  1700,  1701,  1702,  1703,  1704,  1705,  1706,  1707,
    1708,  1709,  1710,  1711,  1712,  1713,  1714,  1715,  1716,  1717,
    1718,  1719,  1720,  1721,  1722,  1723,  1724,  1725,  1726,  1727,
    1728,  1729,  1730,  1731,  1732,  1733,  1734,  1735,  1736,  1737
  };

  // Print the state stack on the debug stream.
  void
  asn1_parser::yystack_print_ ()
  {
    *yycdebug_ << "Stack now";
    for (stack_type::const_iterator
           i = yystack_.begin (),
           i_end = yystack_.end ();
         i != i_end; ++i)
      *yycdebug_ << ' ' << i->state;
    *yycdebug_ << std::endl;
  }

  // Report on the debug stream that the rule \a yyrule is going to be reduced.
  void
  asn1_parser::yy_reduce_print_ (int yyrule)
  {
    unsigned int yylno = yyrline_[yyrule];
    int yynrhs = yyr2_[yyrule];
    // Print the symbols being reduced, and their result.
    *yycdebug_ << "Reducing stack by rule " << yyrule - 1
               << " (line " << yylno << "):" << std::endl;
    // The symbols being reduced.
    for (int yyi = 0; yyi < yynrhs; yyi++)
      YY_SYMBOL_PRINT ("   $" << yyi + 1 << " =",
                       yystack_[(yynrhs) - (yyi + 1)]);
  }
#endif // YYDEBUG



} // yy
#line 9388 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:1167
#line 1739 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:1168



namespace yy {

    asn1_parser::symbol_type yylex(Context& context)
    {
        const char* start = context.cursor;
        const char* YYMARKER = nullptr;
        context.location.step();
        // Lexer

#line 9404 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
{
	char yych;
	unsigned int yyaccept = 0;
	yych = *context.cursor;
	switch (yych) {
	case 0x00:	goto yy2;
	case 0x08:
	case '\t':
	case '\v':
	case '\f':
	case ' ':	goto yy6;
	case '\n':	goto yy8;
	case '\r':	goto yy10;
	case '!':	goto yy11;
	case '"':	goto yy13;
	case '&':	goto yy15;
	case '\'':	goto yy16;
	case '(':	goto yy18;
	case ')':	goto yy20;
	case ',':	goto yy22;
	case '-':	goto yy24;
	case '.':	goto yy26;
	case '/':	goto yy28;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy29;
	case ':':	goto yy32;
	case ';':	goto yy34;
	case '<':	goto yy36;
	case '@':	goto yy38;
	case 'A':	goto yy40;
	case 'B':	goto yy42;
	case 'C':	goto yy43;
	case 'D':	goto yy44;
	case 'E':	goto yy45;
	case 'F':	goto yy46;
	case 'G':	goto yy47;
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'Q':
	case 'X':
	case 'Y':
	case 'Z':	goto yy48;
	case 'I':	goto yy50;
	case 'M':	goto yy51;
	case 'N':	goto yy52;
	case 'O':	goto yy53;
	case 'P':	goto yy54;
	case 'R':	goto yy55;
	case 'S':	goto yy56;
	case 'T':	goto yy57;
	case 'U':	goto yy58;
	case 'V':	goto yy59;
	case 'W':	goto yy60;
	case '[':	goto yy61;
	case ']':	goto yy63;
	case '^':	goto yy65;
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy67;
	case '{':	goto yy70;
	case '|':	goto yy72;
	case '}':	goto yy74;
	default:	goto yy4;
	}
yy2:
	++context.cursor;
#line 9521 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_END_OF_FILE(context.location); }
#line 9506 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy4:
	++context.cursor;
yy5:
#line 9548 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ throw(std::runtime_error(std::string("Unknown symbol!") + *start)); context.location.columns(context.cursor - start); return asn1_parser::symbol_type(asn1_parser::token_type(*start), context.location); }
#line 9512 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy6:
	++context.cursor;
#line 9525 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); context.location.columns(); return yylex(context); }
#line 9517 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy8:
	++context.cursor;
#line 9524 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); context.location.lines();   return yylex(context); }
#line 9522 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy10:
	yych = *++context.cursor;
	switch (yych) {
	case '\n':	goto yy8;
	default:	goto yy5;
	}
yy11:
	++context.cursor;
#line 9543 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXCLAMATION_MARK (context.location); }
#line 9533 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy13:
	yych = *++context.cursor;
	switch (yych) {
	case '"':	goto yy76;
	case '\'':	goto yy78;
	case '\\':	goto yy79;
	default:	goto yy13;
	}
yy15:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':	goto yy81;
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy84;
	default:	goto yy5;
	}
yy16:
	yych = *++context.cursor;
	switch (yych) {
	case '"':	goto yy76;
	case '\'':	goto yy87;
	case '0':
	case '1':	goto yy16;
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy88;
	case '\\':	goto yy79;
	default:	goto yy13;
	}
yy18:
	++context.cursor;
#line 9533 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPEN_PARENTHESIS (context.location); }
#line 9633 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy20:
	++context.cursor;
#line 9534 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLOSE_PARENTHESIS (context.location); }
#line 9638 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy22:
	++context.cursor;
#line 9539 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COMMA (context.location); }
#line 9643 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy24:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy90;
	default:	goto yy25;
	}
yy25:
#line 9540 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_HYPHEN_MINUS (context.location); }
#line 9653 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy26:
	yych = *++context.cursor;
	switch (yych) {
	case '.':	goto yy93;
	default:	goto yy27;
	}
yy27:
#line 9541 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_FULL_STOP (context.location); }
#line 9663 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy28:
	yych = *++context.cursor;
	switch (yych) {
	case '*':	goto yy95;
	default:	goto yy5;
	}
yy29:
	yyaccept = 0;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '.':	goto yy97;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy29;
	default:	goto yy31;
	}
yy31:
#line 9508 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_number(std::stoll(std::string(start, context.cursor)), context.location); }
#line 9690 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy32:
	yyaccept = 1;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case ':':	goto yy99;
	default:	goto yy33;
	}
yy33:
#line 9537 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COLON (context.location); }
#line 9701 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy34:
	++context.cursor;
#line 9538 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SEMICOLON (context.location); }
#line 9706 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy36:
	++context.cursor;
#line 9544 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_LESS_THAN (context.location); }
#line 9711 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy38:
	++context.cursor;
#line 9547 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_AT (context.location); }
#line 9716 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy40:
	yych = *++context.cursor;
	switch (yych) {
	case 'B':	goto yy100;
	case 'L':	goto yy101;
	case 'N':	goto yy102;
	case 'P':	goto yy103;
	case 'U':	goto yy104;
	default:	goto yy49;
	}
yy41:
#line 9515 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GENERIC_IDENTIFIER_UPPERCASE(santize_name(std::string(start, context.cursor)), context.location); }
#line 9730 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy42:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy105;
	case 'I':	goto yy106;
	case 'M':	goto yy107;
	case 'O':	goto yy108;
	case 'Y':	goto yy109;
	default:	goto yy49;
	}
yy43:
	yych = *++context.cursor;
	switch (yych) {
	case 'H':	goto yy111;
	case 'L':	goto yy112;
	case 'O':	goto yy113;
	default:	goto yy49;
	}
yy44:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy114;
	case 'E':	goto yy115;
	case 'U':	goto yy116;
	default:	goto yy49;
	}
yy45:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy117;
	case 'N':	goto yy118;
	case 'X':	goto yy119;
	default:	goto yy49;
	}
yy46:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy120;
	case 'R':	goto yy121;
	default:	goto yy49;
	}
yy47:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy122;
	case 'r':	goto yy123;
	default:	goto yy49;
	}
yy48:
	yych = *++context.cursor;
yy49:
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy41;
	}
yy50:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy124;
	case 'D':	goto yy125;
	case 'M':	goto yy126;
	case 'N':	goto yy127;
	case 'S':	goto yy128;
	default:	goto yy49;
	}
yy51:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy129;
	case 'I':	goto yy130;
	default:	goto yy49;
	}
yy52:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy131;
	case 'U':	goto yy132;
	case 'u':	goto yy133;
	default:	goto yy49;
	}
yy53:
	yych = *++context.cursor;
	switch (yych) {
	case 'B':	goto yy134;
	case 'C':	goto yy135;
	case 'F':	goto yy136;
	case 'I':	goto yy138;
	case 'P':	goto yy139;
	case 'b':	goto yy140;
	default:	goto yy49;
	}
yy54:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy141;
	case 'D':	goto yy142;
	case 'L':	goto yy143;
	case 'R':	goto yy144;
	case 'r':	goto yy145;
	default:	goto yy49;
	}
yy55:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy146;
	default:	goto yy49;
	}
yy56:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy147;
	case 'I':	goto yy148;
	case 'T':	goto yy149;
	case 'Y':	goto yy150;
	default:	goto yy49;
	}
yy57:
	yych = *++context.cursor;
	switch (yych) {
	case '6':	goto yy151;
	case 'A':	goto yy152;
	case 'I':	goto yy153;
	case 'R':	goto yy154;
	case 'Y':	goto yy155;
	case 'e':	goto yy156;
	default:	goto yy49;
	}
yy58:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy157;
	case 'T':	goto yy158;
	case 'n':	goto yy159;
	default:	goto yy49;
	}
yy59:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy160;
	default:	goto yy49;
	}
yy60:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy161;
	default:	goto yy49;
	}
yy61:
	++context.cursor;
#line 9535 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPEN_SQUARE_BRACKET (context.location); }
#line 9945 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy63:
	++context.cursor;
#line 9536 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLOSE_SQUARE_BRACKET (context.location); }
#line 9950 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy65:
	++context.cursor;
#line 9545 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ACCENT (context.location); }
#line 9955 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy67:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy67;
	default:	goto yy69;
	}
yy69:
#line 9516 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GENERIC_IDENTIFIER_LOWERCASE(santize_name(std::string(start, context.cursor)), context.location); }
#line 10028 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy70:
	++context.cursor;
#line 9531 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPEN_BRACE (context.location); }
#line 10033 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy72:
	++context.cursor;
#line 9542 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_VERTICAL_LINE (context.location); }
#line 10038 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy74:
	++context.cursor;
#line 9532 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLOSE_BRACE (context.location); }
#line 10043 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy76:
	yych = *++context.cursor;
	switch (yych) {
	case '"':	goto yy13;
	default:	goto yy77;
	}
yy77:
#line 9510 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_cstring(std::string(start, context.cursor), context.location); }
#line 10053 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy78:
	++context.cursor;
	goto yy77;
yy79:
	yych = *++context.cursor;
	switch (yych) {
	case '"':	goto yy162;
	case '\\':	goto yy79;
	default:	goto yy13;
	}
yy81:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy81;
	default:	goto yy83;
	}
yy83:
#line 9517 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_typefieldreference(santize_name(std::string(start, context.cursor)), context.location); }
#line 10136 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy84:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy84;
	default:	goto yy86;
	}
yy86:
#line 9518 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_valuefieldreference(santize_name(std::string(start, context.cursor)), context.location); }
#line 10209 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy87:
	yych = *++context.cursor;
	switch (yych) {
	case 'B':	goto yy164;
	case 'H':	goto yy166;
	default:	goto yy77;
	}
yy88:
	yych = *++context.cursor;
	switch (yych) {
	case '"':	goto yy76;
	case '\'':	goto yy168;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy88;
	case '\\':	goto yy79;
	default:	goto yy13;
	}
yy90:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '\n':
	case '\r':	goto yy92;
	case '-':	goto yy169;
	default:	goto yy90;
	}
yy92:
#line 9502 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return yylex(context); }
#line 10259 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy93:
	yych = *++context.cursor;
	switch (yych) {
	case '.':	goto yy170;
	default:	goto yy94;
	}
yy94:
#line 9530 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_RANGE (context.location); }
#line 10269 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy95:
	yych = *++context.cursor;
	switch (yych) {
	case '*':	goto yy172;
	default:	goto yy95;
	}
yy97:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy173;
	default:	goto yy98;
	}
yy98:
	context.cursor = YYMARKER;
	switch (yyaccept) {
	case 0: 	goto yy31;
	case 1: 	goto yy33;
	default:	goto yy92;
	}
yy99:
	yych = *++context.cursor;
	switch (yych) {
	case '=':	goto yy176;
	default:	goto yy98;
	}
yy100:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy178;
	default:	goto yy49;
	}
yy101:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy179;
	default:	goto yy49;
	}
yy102:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy181;
	default:	goto yy49;
	}
yy103:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy183;
	default:	goto yy49;
	}
yy104:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy184;
	default:	goto yy49;
	}
yy105:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy185;
	default:	goto yy49;
	}
yy106:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy186;
	default:	goto yy49;
	}
yy107:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy188;
	default:	goto yy49;
	}
yy108:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy189;
	default:	goto yy49;
	}
yy109:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy110;
	}
yy110:
#line 9416 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BY (context.location); }
#line 10430 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy111:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy190;
	case 'O':	goto yy191;
	default:	goto yy49;
	}
yy112:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy192;
	default:	goto yy49;
	}
yy113:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy193;
	case 'N':	goto yy194;
	default:	goto yy49;
	}
yy114:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy195;
	default:	goto yy49;
	}
yy115:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy196;
	default:	goto yy49;
	}
yy116:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy197;
	default:	goto yy49;
	}
yy117:
	yych = *++context.cursor;
	switch (yych) {
	case 'B':	goto yy198;
	default:	goto yy49;
	}
yy118:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy199;
	case 'D':	goto yy200;
	case 'U':	goto yy202;
	default:	goto yy49;
	}
yy119:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy203;
	case 'P':	goto yy204;
	case 'T':	goto yy205;
	default:	goto yy49;
	}
yy120:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy206;
	default:	goto yy49;
	}
yy121:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy207;
	default:	goto yy49;
	}
yy122:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy208;
	default:	goto yy49;
	}
yy123:
	yych = *++context.cursor;
	switch (yych) {
	case 'a':	goto yy209;
	default:	goto yy49;
	}
yy124:
	yych = *++context.cursor;
	switch (yych) {
	case '5':	goto yy210;
	default:	goto yy49;
	}
yy125:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy211;
	default:	goto yy49;
	}
yy126:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy212;
	default:	goto yy49;
	}
yy127:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy213;
	case 'S':	goto yy214;
	case 'T':	goto yy215;
	default:	goto yy49;
	}
yy128:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy216;
	default:	goto yy49;
	}
yy129:
	yych = *++context.cursor;
	switch (yych) {
	case 'X':	goto yy217;
	default:	goto yy49;
	}
yy130:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy219;
	default:	goto yy49;
	}
yy131:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy221;
	default:	goto yy49;
	}
yy132:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy222;
	default:	goto yy49;
	}
yy133:
	yych = *++context.cursor;
	switch (yych) {
	case 'm':	goto yy223;
	default:	goto yy49;
	}
yy134:
	yych = *++context.cursor;
	switch (yych) {
	case 'J':	goto yy224;
	default:	goto yy49;
	}
yy135:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy225;
	default:	goto yy49;
	}
yy136:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy137;
	}
yy137:
#line 9464 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OF (context.location); }
#line 10661 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy138:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy226;
	default:	goto yy49;
	}
yy139:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy227;
	default:	goto yy49;
	}
yy140:
	yych = *++context.cursor;
	switch (yych) {
	case 'j':	goto yy228;
	default:	goto yy49;
	}
yy141:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy229;
	default:	goto yy49;
	}
yy142:
	yych = *++context.cursor;
	switch (yych) {
	case 'V':	goto yy230;
	default:	goto yy49;
	}
yy143:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy232;
	default:	goto yy49;
	}
yy144:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy233;
	case 'I':	goto yy234;
	default:	goto yy49;
	}
yy145:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy235;
	default:	goto yy49;
	}
yy146:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy236;
	case 'L':	goto yy237;
	default:	goto yy49;
	}
yy147:
	yych = *++context.cursor;
	switch (yych) {
	case 'Q':	goto yy238;
	case 'T':	goto yy239;
	default:	goto yy49;
	}
yy148:
	yych = *++context.cursor;
	switch (yych) {
	case 'Z':	goto yy241;
	default:	goto yy49;
	}
yy149:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy242;
	default:	goto yy49;
	}
yy150:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy243;
	default:	goto yy49;
	}
yy151:
	yych = *++context.cursor;
	switch (yych) {
	case '1':	goto yy244;
	default:	goto yy49;
	}
yy152:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy245;
	default:	goto yy49;
	}
yy153:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy246;
	default:	goto yy49;
	}
yy154:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy247;
	default:	goto yy49;
	}
yy155:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy248;
	default:	goto yy49;
	}
yy156:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy249;
	default:	goto yy49;
	}
yy157:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy250;
	default:	goto yy49;
	}
yy158:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy251;
	case 'F':	goto yy252;
	default:	goto yy49;
	}
yy159:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy253;
	default:	goto yy49;
	}
yy160:
	yych = *++context.cursor;
	switch (yych) {
	case 'd':	goto yy254;
	case 's':	goto yy255;
	default:	goto yy49;
	}
yy161:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy256;
	default:	goto yy49;
	}
yy162:
	yych = *++context.cursor;
	switch (yych) {
	case '"':	goto yy162;
	case '\'':	goto yy78;
	case '\\':	goto yy79;
	default:	goto yy13;
	}
yy164:
	++context.cursor;
#line 9512 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_bstring(std::string(start + 1, context.cursor - 2), context.location); }
#line 10823 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy166:
	++context.cursor;
#line 9514 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_hstring(std::string(start, context.cursor), context.location); }
#line 10828 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy168:
	yych = *++context.cursor;
	switch (yych) {
	case 'H':	goto yy166;
	default:	goto yy77;
	}
yy169:
	yych = *++context.cursor;
	switch (yych) {
	case '\n':
	case '\r':	goto yy98;
	case '-':	goto yy257;
	default:	goto yy90;
	}
yy170:
	++context.cursor;
#line 9529 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ELIPSIS (context.location); }
#line 10847 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy172:
	yych = *++context.cursor;
	switch (yych) {
	case '/':	goto yy259;
	default:	goto yy95;
	}
yy173:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy173;
	default:	goto yy175;
	}
yy175:
#line 9507 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_realnumber(std::stod(std::string(start, context.cursor)), context.location); }
#line 10872 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy176:
	++context.cursor;
#line 9528 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DEFINED_AS (context.location); }
#line 10877 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy178:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy261;
	case 'T':	goto yy262;
	default:	goto yy49;
	}
yy179:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy180;
	}
yy180:
#line 9408 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ALL (context.location); }
#line 10957 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy181:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy182;
	}
yy182:
#line 9409 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ANY (context.location); }
#line 11030 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy183:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy263;
	default:	goto yy49;
	}
yy184:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy264;
	default:	goto yy49;
	}
yy185:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy265;
	default:	goto yy49;
	}
yy186:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy187;
	}
yy187:
#line 9413 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BIT (context.location); }
#line 11121 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy188:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy266;
	default:	goto yy49;
	}
yy189:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy267;
	default:	goto yy49;
	}
yy190:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy268;
	default:	goto yy49;
	}
yy191:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy269;
	default:	goto yy49;
	}
yy192:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy270;
	default:	goto yy49;
	}
yy193:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy271;
	default:	goto yy49;
	}
yy194:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy272;
	case 'T':	goto yy273;
	default:	goto yy49;
	}
yy195:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy274;
	default:	goto yy49;
	}
yy196:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy276;
	case 'I':	goto yy277;
	default:	goto yy49;
	}
yy197:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy278;
	default:	goto yy49;
	}
yy198:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy279;
	default:	goto yy49;
	}
yy199:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy280;
	default:	goto yy49;
	}
yy200:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy201;
	}
yy201:
#line 9432 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_END (context.location); }
#line 11268 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy202:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy281;
	default:	goto yy49;
	}
yy203:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy282;
	default:	goto yy49;
	}
yy204:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy283;
	case 'O':	goto yy284;
	default:	goto yy49;
	}
yy205:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy285;
	default:	goto yy49;
	}
yy206:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy286;
	default:	goto yy49;
	}
yy207:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy287;
	default:	goto yy49;
	}
yy208:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy289;
	default:	goto yy49;
	}
yy209:
	yych = *++context.cursor;
	switch (yych) {
	case 'p':	goto yy290;
	default:	goto yy49;
	}
yy210:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy291;
	default:	goto yy49;
	}
yy211:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy292;
	default:	goto yy49;
	}
yy212:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy293;
	case 'O':	goto yy294;
	default:	goto yy49;
	}
yy213:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy295;
	default:	goto yy49;
	}
yy214:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy296;
	default:	goto yy49;
	}
yy215:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy297;
	default:	goto yy49;
	}
yy216:
	yych = *++context.cursor;
	switch (yych) {
	case '6':	goto yy298;
	default:	goto yy49;
	}
yy217:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy218;
	}
yy218:
#line 9455 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_MAX (context.location); }
#line 11433 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy219:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	case 'U':	goto yy299;
	default:	goto yy220;
	}
yy220:
#line 9456 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_MIN (context.location); }
#line 11506 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy221:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy300;
	default:	goto yy49;
	}
yy222:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy301;
	default:	goto yy49;
	}
yy223:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy303;
	default:	goto yy49;
	}
yy224:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy304;
	default:	goto yy49;
	}
yy225:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy305;
	default:	goto yy49;
	}
yy226:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy306;
	default:	goto yy49;
	}
yy227:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy307;
	default:	goto yy49;
	}
yy228:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy308;
	default:	goto yy49;
	}
yy229:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy309;
	default:	goto yy49;
	}
yy230:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy231;
	}
yy231:
#line 9468 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PDV (context.location); }
#line 11633 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy232:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy310;
	default:	goto yy49;
	}
yy233:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy311;
	default:	goto yy49;
	}
yy234:
	yych = *++context.cursor;
	switch (yych) {
	case 'V':	goto yy312;
	default:	goto yy49;
	}
yy235:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy313;
	default:	goto yy49;
	}
yy236:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy314;
	default:	goto yy49;
	}
yy237:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy316;
	default:	goto yy49;
	}
yy238:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy317;
	default:	goto yy49;
	}
yy239:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	case 'T':	goto yy318;
	default:	goto yy240;
	}
yy240:
#line 9477 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SET (context.location); }
#line 11748 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy241:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy319;
	default:	goto yy49;
	}
yy242:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy321;
	default:	goto yy49;
	}
yy243:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy322;
	default:	goto yy49;
	}
yy244:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy323;
	default:	goto yy49;
	}
yy245:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy324;
	default:	goto yy49;
	}
yy246:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy326;
	default:	goto yy49;
	}
yy247:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy328;
	default:	goto yy49;
	}
yy248:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy330;
	default:	goto yy49;
	}
yy249:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy331;
	default:	goto yy49;
	}
yy250:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy332;
	case 'Q':	goto yy333;
	case 'V':	goto yy334;
	default:	goto yy49;
	}
yy251:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy335;
	default:	goto yy49;
	}
yy252:
	yych = *++context.cursor;
	switch (yych) {
	case '8':	goto yy336;
	default:	goto yy49;
	}
yy253:
	yych = *++context.cursor;
	switch (yych) {
	case 'v':	goto yy337;
	default:	goto yy49;
	}
yy254:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy338;
	default:	goto yy49;
	}
yy255:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy339;
	default:	goto yy49;
	}
yy256:
	yych = *++context.cursor;
	switch (yych) {
	case 'H':	goto yy340;
	default:	goto yy49;
	}
yy257:
	++context.cursor;
#line 9501 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return yylex(context); }
#line 11851 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy259:
	++context.cursor;
#line 9504 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return yylex(context); }
#line 11856 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy261:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy342;
	default:	goto yy49;
	}
yy262:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy343;
	default:	goto yy49;
	}
yy263:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy344;
	default:	goto yy49;
	}
yy264:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy345;
	default:	goto yy49;
	}
yy265:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy346;
	default:	goto yy49;
	}
yy266:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy348;
	default:	goto yy49;
	}
yy267:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy349;
	default:	goto yy49;
	}
yy268:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy350;
	default:	goto yy49;
	}
yy269:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy351;
	default:	goto yy49;
	}
yy270:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy352;
	default:	goto yy49;
	}
yy271:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy354;
	default:	goto yy49;
	}
yy272:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy355;
	default:	goto yy49;
	}
yy273:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy356;
	default:	goto yy49;
	}
yy274:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy357;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy275;
	}
yy275:
#line 9424 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DATE (context.location); }
#line 12007 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy276:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy358;
	default:	goto yy49;
	}
yy277:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy359;
	default:	goto yy49;
	}
yy278:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy360;
	default:	goto yy49;
	}
yy279:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy361;
	default:	goto yy49;
	}
yy280:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy362;
	default:	goto yy49;
	}
yy281:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy363;
	default:	goto yy49;
	}
yy282:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy364;
	default:	goto yy49;
	}
yy283:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy365;
	default:	goto yy49;
	}
yy284:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy366;
	default:	goto yy49;
	}
yy285:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy367;
	case 'R':	goto yy368;
	default:	goto yy49;
	}
yy286:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy369;
	default:	goto yy49;
	}
yy287:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy288;
	}
yy288:
#line 9440 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_FROM (context.location); }
#line 12147 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy289:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy371;
	default:	goto yy49;
	}
yy290:
	yych = *++context.cursor;
	switch (yych) {
	case 'h':	goto yy372;
	default:	goto yy49;
	}
yy291:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy373;
	default:	goto yy49;
	}
yy292:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy374;
	default:	goto yy49;
	}
yy293:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy375;
	default:	goto yy49;
	}
yy294:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy376;
	default:	goto yy49;
	}
yy295:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy377;
	default:	goto yy49;
	}
yy296:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy378;
	case 'R':	goto yy379;
	default:	goto yy49;
	}
yy297:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy380;
	case 'R':	goto yy381;
	default:	goto yy49;
	}
yy298:
	yych = *++context.cursor;
	switch (yych) {
	case '4':	goto yy382;
	default:	goto yy49;
	}
yy299:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy383;
	default:	goto yy49;
	}
yy300:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy384;
	default:	goto yy49;
	}
yy301:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy302;
	}
yy302:
#line 9459 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ASN_NULL (context.location); }
#line 12294 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy303:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy385;
	default:	goto yy49;
	}
yy304:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy386;
	default:	goto yy49;
	}
yy305:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy387;
	default:	goto yy49;
	}
yy306:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy389;
	default:	goto yy49;
	}
yy307:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy390;
	default:	goto yy49;
	}
yy308:
	yych = *++context.cursor;
	switch (yych) {
	case 'c':	goto yy391;
	default:	goto yy49;
	}
yy309:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy392;
	default:	goto yy49;
	}
yy310:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy393;
	default:	goto yy49;
	}
yy311:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy394;
	default:	goto yy49;
	}
yy312:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy395;
	default:	goto yy49;
	}
yy313:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy396;
	default:	goto yy49;
	}
yy314:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy315;
	}
yy315:
#line 9473 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_REAL (context.location); }
#line 12433 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy316:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy397;
	default:	goto yy49;
	}
yy317:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy398;
	default:	goto yy49;
	}
yy318:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy399;
	default:	goto yy49;
	}
yy319:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy320;
	}
yy320:
#line 9479 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SIZE (context.location); }
#line 12524 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy321:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy400;
	default:	goto yy49;
	}
yy322:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy401;
	default:	goto yy49;
	}
yy323:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy402;
	default:	goto yy49;
	}
yy324:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy325;
	}
yy325:
#line 9483 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TAGS (context.location); }
#line 12615 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy326:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy403;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy327;
	}
yy327:
#line 9485 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TIME (context.location); }
#line 12688 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy328:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy329;
	}
yy329:
#line 9487 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TRUE (context.location); }
#line 12761 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy330:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy404;
	default:	goto yy49;
	}
yy331:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy405;
	default:	goto yy49;
	}
yy332:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy406;
	default:	goto yy49;
	}
yy333:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy408;
	default:	goto yy49;
	}
yy334:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy409;
	default:	goto yy49;
	}
yy335:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy410;
	default:	goto yy49;
	}
yy336:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy411;
	default:	goto yy49;
	}
yy337:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy412;
	default:	goto yy49;
	}
yy338:
	yych = *++context.cursor;
	switch (yych) {
	case 'o':	goto yy413;
	default:	goto yy49;
	}
yy339:
	yych = *++context.cursor;
	switch (yych) {
	case 'b':	goto yy414;
	default:	goto yy49;
	}
yy340:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy341;
	}
yy341:
#line 9497 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_WITH (context.location); }
#line 12894 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy342:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy415;
	default:	goto yy49;
	}
yy343:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy417;
	default:	goto yy49;
	}
yy344:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy418;
	default:	goto yy49;
	}
yy345:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy419;
	default:	goto yy49;
	}
yy346:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy347;
	}
yy347:
#line 9412 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BEGIN (context.location); }
#line 12991 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy348:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy420;
	default:	goto yy49;
	}
yy349:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy421;
	default:	goto yy49;
	}
yy350:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy422;
	default:	goto yy49;
	}
yy351:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy423;
	default:	goto yy49;
	}
yy352:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy353;
	}
yy353:
#line 9419 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLASS (context.location); }
#line 13088 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy354:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy425;
	default:	goto yy49;
	}
yy355:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy426;
	default:	goto yy49;
	}
yy356:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy427;
	default:	goto yy49;
	}
yy357:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy428;
	default:	goto yy49;
	}
yy358:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy429;
	default:	goto yy49;
	}
yy359:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy430;
	default:	goto yy49;
	}
yy360:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy431;
	default:	goto yy49;
	}
yy361:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy432;
	default:	goto yy49;
	}
yy362:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy433;
	case 'I':	goto yy434;
	default:	goto yy49;
	}
yy363:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy435;
	default:	goto yy49;
	}
yy364:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy436;
	default:	goto yy49;
	}
yy365:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy438;
	default:	goto yy49;
	}
yy366:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy439;
	default:	goto yy49;
	}
yy367:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy440;
	default:	goto yy49;
	}
yy368:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy441;
	default:	goto yy49;
	}
yy369:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy370;
	}
yy370:
#line 9439 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_FALSE (context.location); }
#line 13252 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy371:
	yych = *++context.cursor;
	switch (yych) {
	case 'a':	goto yy442;
	default:	goto yy49;
	}
yy372:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy443;
	default:	goto yy49;
	}
yy373:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy444;
	default:	goto yy49;
	}
yy374:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy445;
	default:	goto yy49;
	}
yy375:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy446;
	case 'E':	goto yy447;
	default:	goto yy49;
	}
yy376:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy448;
	default:	goto yy49;
	}
yy377:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy449;
	default:	goto yy49;
	}
yy378:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy450;
	default:	goto yy49;
	}
yy379:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy451;
	default:	goto yy49;
	}
yy380:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy452;
	default:	goto yy49;
	}
yy381:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy453;
	default:	goto yy49;
	}
yy382:
	yych = *++context.cursor;
	switch (yych) {
	case '6':	goto yy454;
	default:	goto yy49;
	}
yy383:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy455;
	default:	goto yy49;
	}
yy384:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy456;
	default:	goto yy49;
	}
yy385:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy457;
	default:	goto yy49;
	}
yy386:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy458;
	default:	goto yy49;
	}
yy387:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy388;
	}
yy388:
#line 9463 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OCTET (context.location); }
#line 13422 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy389:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy460;
	default:	goto yy49;
	}
yy390:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy461;
	default:	goto yy49;
	}
yy391:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy462;
	default:	goto yy49;
	}
yy392:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy463;
	default:	goto yy49;
	}
yy393:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy464;
	default:	goto yy49;
	}
yy394:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy465;
	default:	goto yy49;
	}
yy395:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy466;
	default:	goto yy49;
	}
yy396:
	yych = *++context.cursor;
	switch (yych) {
	case 'a':	goto yy467;
	default:	goto yy49;
	}
yy397:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy468;
	default:	goto yy49;
	}
yy398:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy469;
	default:	goto yy49;
	}
yy399:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy470;
	default:	goto yy49;
	}
yy400:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy471;
	default:	goto yy49;
	}
yy401:
	yych = *++context.cursor;
	switch (yych) {
	case 'X':	goto yy473;
	default:	goto yy49;
	}
yy402:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy475;
	default:	goto yy49;
	}
yy403:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy476;
	default:	goto yy49;
	}
yy404:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy477;
	default:	goto yy49;
	}
yy405:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy478;
	default:	goto yy49;
	}
yy406:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy407;
	}
yy407:
#line 9489 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UNION (context.location); }
#line 13597 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy408:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy479;
	default:	goto yy49;
	}
yy409:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy481;
	default:	goto yy49;
	}
yy410:
	yych = *++context.cursor;
	switch (yych) {
	case 'm':	goto yy482;
	default:	goto yy49;
	}
yy411:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy483;
	default:	goto yy49;
	}
yy412:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy484;
	default:	goto yy49;
	}
yy413:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy485;
	default:	goto yy49;
	}
yy414:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy486;
	default:	goto yy49;
	}
yy415:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy416;
	}
yy416:
#line 9406 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ABSENT (context.location); }
#line 13712 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy417:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy487;
	default:	goto yy49;
	}
yy418:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy488;
	default:	goto yy49;
	}
yy419:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy489;
	default:	goto yy49;
	}
yy420:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy490;
	default:	goto yy49;
	}
yy421:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy491;
	default:	goto yy49;
	}
yy422:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy493;
	default:	goto yy49;
	}
yy423:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy424;
	}
yy424:
#line 9418 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CHOICE (context.location); }
#line 13821 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy425:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy494;
	default:	goto yy49;
	}
yy426:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy495;
	default:	goto yy49;
	}
yy427:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy496;
	default:	goto yy49;
	}
yy428:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy497;
	default:	goto yy49;
	}
yy429:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy498;
	default:	goto yy49;
	}
yy430:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy500;
	default:	goto yy49;
	}
yy431:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy501;
	default:	goto yy49;
	}
yy432:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy502;
	default:	goto yy49;
	}
yy433:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy503;
	default:	goto yy49;
	}
yy434:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy505;
	default:	goto yy49;
	}
yy435:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy506;
	default:	goto yy49;
	}
yy436:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy437;
	}
yy437:
#line 9434 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXCEPT (context.location); }
#line 13960 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy438:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy507;
	default:	goto yy49;
	}
yy439:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy508;
	default:	goto yy49;
	}
yy440:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy510;
	default:	goto yy49;
	}
yy441:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy511;
	default:	goto yy49;
	}
yy442:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy512;
	default:	goto yy49;
	}
yy443:
	yych = *++context.cursor;
	switch (yych) {
	case 'c':	goto yy513;
	default:	goto yy49;
	}
yy444:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy514;
	default:	goto yy49;
	}
yy445:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy515;
	default:	goto yy49;
	}
yy446:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy516;
	default:	goto yy49;
	}
yy447:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy517;
	default:	goto yy49;
	}
yy448:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy519;
	default:	goto yy49;
	}
yy449:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy521;
	default:	goto yy49;
	}
yy450:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy522;
	default:	goto yy49;
	}
yy451:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy523;
	default:	goto yy49;
	}
yy452:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy524;
	default:	goto yy49;
	}
yy453:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy526;
	default:	goto yy49;
	}
yy454:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy527;
	default:	goto yy49;
	}
yy455:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy528;
	default:	goto yy49;
	}
yy456:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy529;
	default:	goto yy49;
	}
yy457:
	yych = *++context.cursor;
	switch (yych) {
	case 'c':	goto yy530;
	default:	goto yy49;
	}
yy458:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy459;
	}
yy459:
#line 9461 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OBJECT (context.location); }
#line 14153 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy460:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy531;
	default:	goto yy49;
	}
yy461:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy533;
	default:	goto yy49;
	}
yy462:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy534;
	default:	goto yy49;
	}
yy463:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy535;
	default:	goto yy49;
	}
yy464:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy537;
	default:	goto yy49;
	}
yy465:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy538;
	default:	goto yy49;
	}
yy466:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy540;
	default:	goto yy49;
	}
yy467:
	yych = *++context.cursor;
	switch (yych) {
	case 'b':	goto yy542;
	default:	goto yy49;
	}
yy468:
	yych = *++context.cursor;
	switch (yych) {
	case 'V':	goto yy543;
	default:	goto yy49;
	}
yy469:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy544;
	default:	goto yy49;
	}
yy470:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy545;
	default:	goto yy49;
	}
yy471:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy472;
	}
yy472:
#line 9480 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_STRING (context.location); }
#line 14292 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy473:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy474;
	}
yy474:
#line 9481 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SYNTAX (context.location); }
#line 14365 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy475:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy546;
	default:	goto yy49;
	}
yy476:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy547;
	default:	goto yy49;
	}
yy477:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy548;
	default:	goto yy49;
	}
yy478:
	yych = *++context.cursor;
	switch (yych) {
	case 'x':	goto yy549;
	default:	goto yy49;
	}
yy479:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy480;
	}
yy480:
#line 9490 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UNIQUE (context.location); }
#line 14462 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy481:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy550;
	default:	goto yy49;
	}
yy482:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy551;
	default:	goto yy49;
	}
yy483:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy553;
	default:	goto yy49;
	}
yy484:
	yych = *++context.cursor;
	switch (yych) {
	case 's':	goto yy554;
	default:	goto yy49;
	}
yy485:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy555;
	default:	goto yy49;
	}
yy486:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy556;
	default:	goto yy49;
	}
yy487:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy557;
	default:	goto yy49;
	}
yy488:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy558;
	default:	goto yy49;
	}
yy489:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy559;
	default:	goto yy49;
	}
yy490:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy560;
	default:	goto yy49;
	}
yy491:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy492;
	}
yy492:
#line 9415 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BOOLEAN (context.location); }
#line 14595 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy493:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy561;
	default:	goto yy49;
	}
yy494:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy562;
	default:	goto yy49;
	}
yy495:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy563;
	default:	goto yy49;
	}
yy496:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy564;
	default:	goto yy49;
	}
yy497:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy565;
	default:	goto yy49;
	}
yy498:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy499;
	}
yy499:
#line 9426 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DEFAULT (context.location); }
#line 14698 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy500:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy566;
	default:	goto yy49;
	}
yy501:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy567;
	default:	goto yy49;
	}
yy502:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy569;
	default:	goto yy49;
	}
yy503:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy504;
	}
yy504:
#line 9430 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ENCODED (context.location); }
#line 14789 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy505:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy571;
	default:	goto yy49;
	}
yy506:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy572;
	default:	goto yy49;
	}
yy507:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy573;
	default:	goto yy49;
	}
yy508:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy509;
	}
yy509:
#line 9436 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXPORTS (context.location); }
#line 14880 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy510:
	yych = *++context.cursor;
	switch (yych) {
	case 'B':	goto yy575;
	default:	goto yy49;
	}
yy511:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy576;
	default:	goto yy49;
	}
yy512:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy578;
	case 'i':	goto yy579;
	default:	goto yy49;
	}
yy513:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy580;
	default:	goto yy49;
	}
yy514:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy581;
	default:	goto yy49;
	}
yy515:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy582;
	default:	goto yy49;
	}
yy516:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy583;
	default:	goto yy49;
	}
yy517:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy518;
	}
yy518:
#line 9447 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IMPLIED (context.location); }
#line 14996 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy519:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy520;
	}
yy520:
#line 9448 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IMPORTS (context.location); }
#line 15069 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy521:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy585;
	default:	goto yy49;
	}
yy522:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy587;
	default:	goto yy49;
	}
yy523:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy589;
	default:	goto yy49;
	}
yy524:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy525;
	}
yy525:
#line 9452 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INTEGER (context.location); }
#line 15160 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy526:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy590;
	default:	goto yy49;
	}
yy527:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy591;
	default:	goto yy49;
	}
yy528:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy592;
	default:	goto yy49;
	}
yy529:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy593;
	default:	goto yy49;
	}
yy530:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy594;
	default:	goto yy49;
	}
yy531:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy532;
	}
yy532:
#line 9465 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OID_IRI (context.location); }
#line 15263 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy533:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy595;
	default:	goto yy49;
	}
yy534:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy597;
	default:	goto yy49;
	}
yy535:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy536;
	}
yy536:
#line 9467 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PATTERN (context.location); }
#line 15348 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy537:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy598;
	default:	goto yy49;
	}
yy538:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy539;
	}
yy539:
#line 9470 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PRESENT (context.location); }
#line 15427 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy540:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy541;
	}
yy541:
#line 9472 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PRIVATE (context.location); }
#line 15500 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy542:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy599;
	default:	goto yy49;
	}
yy543:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy600;
	default:	goto yy49;
	}
yy544:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy601;
	default:	goto yy49;
	}
yy545:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy603;
	default:	goto yy49;
	}
yy546:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy605;
	default:	goto yy49;
	}
yy547:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy606;
	default:	goto yy49;
	}
yy548:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy607;
	default:	goto yy49;
	}
yy549:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy608;
	default:	goto yy49;
	}
yy550:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy609;
	default:	goto yy49;
	}
yy551:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy552;
	}
yy552:
#line 9493 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UTCTime (context.location); }
#line 15627 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy553:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy610;
	default:	goto yy49;
	}
yy554:
	yych = *++context.cursor;
	switch (yych) {
	case 'a':	goto yy611;
	default:	goto yy49;
	}
yy555:
	yych = *++context.cursor;
	switch (yych) {
	case 'x':	goto yy612;
	default:	goto yy49;
	}
yy556:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy613;
	default:	goto yy49;
	}
yy557:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy614;
	default:	goto yy49;
	}
yy558:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy615;
	default:	goto yy49;
	}
yy559:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy616;
	default:	goto yy49;
	}
yy560:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy618;
	default:	goto yy49;
	}
yy561:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy620;
	default:	goto yy49;
	}
yy562:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy622;
	default:	goto yy49;
	}
yy563:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy624;
	default:	goto yy49;
	}
yy564:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy625;
	default:	goto yy49;
	}
yy565:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy626;
	default:	goto yy49;
	}
yy566:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy628;
	default:	goto yy49;
	}
yy567:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy568;
	}
yy568:
#line 9428 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DURATION (context.location); }
#line 15784 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy569:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy570;
	}
yy570:
#line 9429 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EMBEDDED (context.location); }
#line 15857 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy571:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy629;
	default:	goto yy49;
	}
yy572:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy630;
	default:	goto yy49;
	}
yy573:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy574;
	}
yy574:
#line 9435 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXPLICIT (context.location); }
#line 15942 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy575:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy631;
	default:	goto yy49;
	}
yy576:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy577;
	}
yy577:
#line 9438 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXTERNAL (context.location); }
#line 16021 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy578:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy632;
	default:	goto yy49;
	}
yy579:
	yych = *++context.cursor;
	switch (yych) {
	case 'z':	goto yy633;
	default:	goto yy49;
	}
yy580:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy634;
	default:	goto yy49;
	}
yy581:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy635;
	default:	goto yy49;
	}
yy582:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy637;
	default:	goto yy49;
	}
yy583:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy584;
	}
yy584:
#line 9446 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IMPLICIT (context.location); }
#line 16124 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy585:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy586;
	}
yy586:
#line 9449 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INCLUDES (context.location); }
#line 16197 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy587:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy588;
	}
yy588:
#line 9450 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INSTANCE (context.location); }
#line 16270 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy589:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy638;
	default:	goto yy49;
	}
yy590:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy639;
	default:	goto yy49;
	}
yy591:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy640;
	default:	goto yy49;
	}
yy592:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy641;
	default:	goto yy49;
	}
yy593:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy642;
	default:	goto yy49;
	}
yy594:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy643;
	default:	goto yy49;
	}
yy595:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy596;
	}
yy596:
#line 9466 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPTIONAL (context.location); }
#line 16379 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy597:
	yych = *++context.cursor;
	switch (yych) {
	case 's':	goto yy644;
	default:	goto yy49;
	}
yy598:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy645;
	default:	goto yy49;
	}
yy599:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy646;
	default:	goto yy49;
	}
yy600:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy647;
	default:	goto yy49;
	}
yy601:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy602;
	}
yy602:
#line 9476 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SEQUENCE (context.location); }
#line 16476 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy603:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy604;
	}
yy604:
#line 9478 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SETTINGS (context.location); }
#line 16549 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy605:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy648;
	default:	goto yy49;
	}
yy606:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy650;
	default:	goto yy49;
	}
yy607:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy651;
	default:	goto yy49;
	}
yy608:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy652;
	default:	goto yy49;
	}
yy609:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy653;
	default:	goto yy49;
	}
yy610:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy655;
	default:	goto yy49;
	}
yy611:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy656;
	default:	goto yy49;
	}
yy612:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy657;
	default:	goto yy49;
	}
yy613:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy658;
	default:	goto yy49;
	}
yy614:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy659;
	default:	goto yy49;
	}
yy615:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy660;
	default:	goto yy49;
	}
yy616:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy617;
	}
yy617:
#line 9411 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_AUTOMATIC (context.location); }
#line 16688 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy618:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy619;
	}
yy619:
#line 9414 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BMPString (context.location); }
#line 16761 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy620:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy621;
	}
yy621:
#line 9417 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CHARACTER (context.location); }
#line 16834 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy622:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	case 'S':	goto yy661;
	default:	goto yy623;
	}
yy623:
#line 9420 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COMPONENT (context.location); }
#line 16907 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy624:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy663;
	default:	goto yy49;
	}
yy625:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy664;
	default:	goto yy49;
	}
yy626:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy627;
	}
yy627:
#line 9425 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DATE_TIME (context.location); }
#line 16992 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy628:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy666;
	default:	goto yy49;
	}
yy629:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy667;
	default:	goto yy49;
	}
yy630:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy668;
	default:	goto yy49;
	}
yy631:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy670;
	default:	goto yy49;
	}
yy632:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy671;
	default:	goto yy49;
	}
yy633:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy672;
	default:	goto yy49;
	}
yy634:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy673;
	default:	goto yy49;
	}
yy635:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy636;
	}
yy636:
#line 9444 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IA5String (context.location); }
#line 17107 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy637:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy674;
	default:	goto yy49;
	}
yy638:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy676;
	default:	goto yy49;
	}
yy639:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy677;
	default:	goto yy49;
	}
yy640:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy678;
	default:	goto yy49;
	}
yy641:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy679;
	default:	goto yy49;
	}
yy642:
	yych = *++context.cursor;
	switch (yych) {
	case 'B':	goto yy680;
	default:	goto yy49;
	}
yy643:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy681;
	default:	goto yy49;
	}
yy644:
	yych = *++context.cursor;
	switch (yych) {
	case 'c':	goto yy682;
	default:	goto yy49;
	}
yy645:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy683;
	default:	goto yy49;
	}
yy646:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy684;
	default:	goto yy49;
	}
yy647:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy685;
	default:	goto yy49;
	}
yy648:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy649;
	}
yy649:
#line 9482 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_T61String (context.location); }
#line 17246 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy650:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy686;
	default:	goto yy49;
	}
yy651:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy687;
	default:	goto yy49;
	}
yy652:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy688;
	default:	goto yy49;
	}
yy653:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy654;
	}
yy654:
#line 9491 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UNIVERSAL (context.location); }
#line 17337 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy655:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy689;
	default:	goto yy49;
	}
yy656:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy691;
	default:	goto yy49;
	}
yy657:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy692;
	default:	goto yy49;
	}
yy658:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy693;
	default:	goto yy49;
	}
yy659:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy694;
	default:	goto yy49;
	}
yy660:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy695;
	default:	goto yy49;
	}
yy661:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy662;
	}
yy662:
#line 9421 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COMPONENTS (context.location); }
#line 17446 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy663:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy697;
	default:	goto yy49;
	}
yy664:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy665;
	}
yy665:
#line 9423 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CONTAINING (context.location); }
#line 17525 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy666:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy699;
	default:	goto yy49;
	}
yy667:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy701;
	default:	goto yy49;
	}
yy668:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy669;
	}
yy669:
#line 9433 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ENUMERATED (context.location); }
#line 17610 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy670:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy702;
	default:	goto yy49;
	}
yy671:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy703;
	default:	goto yy49;
	}
yy672:
	yych = *++context.cursor;
	switch (yych) {
	case 'd':	goto yy704;
	default:	goto yy49;
	}
yy673:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy705;
	default:	goto yy49;
	}
yy674:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy675;
	}
yy675:
#line 9445 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IDENTIFIER (context.location); }
#line 17707 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy676:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy706;
	default:	goto yy49;
	}
yy677:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy707;
	default:	goto yy49;
	}
yy678:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy708;
	default:	goto yy49;
	}
yy679:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy709;
	default:	goto yy49;
	}
yy680:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy710;
	default:	goto yy49;
	}
yy681:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy711;
	default:	goto yy49;
	}
yy682:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy712;
	default:	goto yy49;
	}
yy683:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy713;
	default:	goto yy49;
	}
yy684:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy714;
	default:	goto yy49;
	}
yy685:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy715;
	default:	goto yy49;
	}
yy686:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy716;
	default:	goto yy49;
	}
yy687:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy718;
	default:	goto yy49;
	}
yy688:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy719;
	default:	goto yy49;
	}
yy689:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy690;
	}
yy690:
#line 9494 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UTF8String (context.location); }
#line 17858 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy691:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy720;
	default:	goto yy49;
	}
yy692:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy721;
	default:	goto yy49;
	}
yy693:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy722;
	default:	goto yy49;
	}
yy694:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy723;
	default:	goto yy49;
	}
yy695:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy696;
	}
yy696:
#line 9410 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_APPLICATION (context.location); }
#line 17955 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy697:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy698;
	}
yy698:
#line 9422 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CONSTRAINED (context.location); }
#line 18028 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy699:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy700;
	}
yy700:
#line 9427 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DEFINITIONS (context.location); }
#line 18101 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy701:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy724;
	default:	goto yy49;
	}
yy702:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy725;
	default:	goto yy49;
	}
yy703:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy726;
	default:	goto yy49;
	}
yy704:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy727;
	default:	goto yy49;
	}
yy705:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy728;
	default:	goto yy49;
	}
yy706:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy729;
	default:	goto yy49;
	}
yy707:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy731;
	default:	goto yy49;
	}
yy708:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy733;
	default:	goto yy49;
	}
yy709:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy735;
	default:	goto yy49;
	}
yy710:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy736;
	default:	goto yy49;
	}
yy711:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy738;
	default:	goto yy49;
	}
yy712:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy739;
	default:	goto yy49;
	}
yy713:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy740;
	default:	goto yy49;
	}
yy714:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy741;
	default:	goto yy49;
	}
yy715:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy742;
	default:	goto yy49;
	}
yy716:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy717;
	}
yy717:
#line 9486 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TIME_OF_DAY (context.location); }
#line 18264 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy718:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy744;
	default:	goto yy49;
	}
yy719:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy745;
	default:	goto yy49;
	}
yy720:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy746;
	default:	goto yy49;
	}
yy721:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy747;
	default:	goto yy49;
	}
yy722:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy748;
	default:	goto yy49;
	}
yy723:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy749;
	default:	goto yy49;
	}
yy724:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy750;
	default:	goto yy49;
	}
yy725:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy751;
	default:	goto yy49;
	}
yy726:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy753;
	default:	goto yy49;
	}
yy727:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy755;
	default:	goto yy49;
	}
yy728:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy756;
	default:	goto yy49;
	}
yy729:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy730;
	}
yy730:
#line 9451 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INSTRUCTIONS (context.location); }
#line 18403 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy731:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy732;
	}
yy732:
#line 9453 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INTERSECTION (context.location); }
#line 18476 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy733:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy734;
	}
yy734:
#line 9454 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ISO646String (context.location); }
#line 18549 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy735:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy758;
	default:	goto yy49;
	}
yy736:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy737;
	}
yy737:
#line 9458 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_NOT_A_NUMBER (context.location); }
#line 18628 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy738:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy759;
	default:	goto yy49;
	}
yy739:
	yych = *++context.cursor;
	switch (yych) {
	case 'p':	goto yy761;
	default:	goto yy49;
	}
yy740:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy762;
	default:	goto yy49;
	}
yy741:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy764;
	default:	goto yy49;
	}
yy742:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy765;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy743;
	}
yy743:
#line 9474 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_RELATIVE_OID (context.location); }
#line 18725 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy744:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy766;
	default:	goto yy49;
	}
yy745:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy767;
	default:	goto yy49;
	}
yy746:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy769;
	default:	goto yy49;
	}
yy747:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy770;
	default:	goto yy49;
	}
yy748:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy771;
	default:	goto yy49;
	}
yy749:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy773;
	default:	goto yy49;
	}
yy750:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy774;
	default:	goto yy49;
	}
yy751:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy752;
	}
yy752:
#line 9437 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXTENSIBILITY (context.location); }
#line 18840 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy753:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy754;
	}
yy754:
#line 9442 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GeneralString (context.location); }
#line 18913 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy755:
	yych = *++context.cursor;
	switch (yych) {
	case 'm':	goto yy775;
	default:	goto yy49;
	}
yy756:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy757;
	}
yy757:
#line 9443 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GraphicString (context.location); }
#line 18992 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy758:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy776;
	default:	goto yy49;
	}
yy759:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy760;
	}
yy760:
#line 9460 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_NumericString (context.location); }
#line 19071 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy761:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy778;
	default:	goto yy49;
	}
yy762:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy763;
	}
yy763:
#line 9469 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PLUS_INFINITY (context.location); }
#line 19150 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy764:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy779;
	default:	goto yy49;
	}
yy765:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy780;
	default:	goto yy49;
	}
yy766:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy781;
	default:	goto yy49;
	}
yy767:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy768;
	}
yy768:
#line 9484 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TeletexString (context.location); }
#line 19241 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy769:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy782;
	default:	goto yy49;
	}
yy770:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy783;
	default:	goto yy49;
	}
yy771:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy772;
	}
yy772:
#line 9496 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_VisibleString (context.location); }
#line 19326 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy773:
	yych = *++context.cursor;
	switch (yych) {
	case 'X':	goto yy785;
	default:	goto yy49;
	}
yy774:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy787;
	default:	goto yy49;
	}
yy775:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy788;
	default:	goto yy49;
	}
yy776:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy777;
	}
yy777:
#line 9457 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_MINUS_INFINITY (context.location); }
#line 19417 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy778:
	yych = *++context.cursor;
	switch (yych) {
	case 'o':	goto yy790;
	default:	goto yy49;
	}
yy779:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy791;
	default:	goto yy49;
	}
yy780:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy793;
	default:	goto yy49;
	}
yy781:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy794;
	default:	goto yy49;
	}
yy782:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy796;
	default:	goto yy49;
	}
yy783:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy784;
	}
yy784:
#line 9495 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_VideotexString (context.location); }
#line 19520 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy785:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy786;
	}
yy786:
#line 9407 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ABSTRACT_SYNTAX (context.location); }
#line 19593 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy787:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy798;
	default:	goto yy49;
	}
yy788:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy789;
	}
yy789:
#line 9441 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GeneralizedTime (context.location); }
#line 19672 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy790:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy800;
	default:	goto yy49;
	}
yy791:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy792;
	}
yy792:
#line 9471 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PrintableString (context.location); }
#line 19751 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy793:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy802;
	default:	goto yy49;
	}
yy794:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy795;
	}
yy795:
#line 9488 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TYPE_IDENTIFIER (context.location); }
#line 19830 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy796:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy797;
	}
yy797:
#line 9492 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UniversalString (context.location); }
#line 19903 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy798:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy799;
	}
yy799:
#line 9431 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ENCODING_CONTROL (context.location); }
#line 19976 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy800:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy801;
	}
yy801:
#line 9462 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ObjectDescriptor (context.location); }
#line 20049 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy802:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy803;
	}
yy803:
#line 9475 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_RELATIVE_OID_IRI (context.location); }
#line 20122 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
}
#line 9549 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"

    }
}
