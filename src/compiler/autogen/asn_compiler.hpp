/* Generated by re2c 1.1.1 */
#line 1 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
// A Bison parser, made by GNU Bison 3.0.4.

// Skeleton implementation for Bison LALR(1) parsers in C++

// Copyright (C) 2002-2015 Free Software Foundation, Inc.

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// As a special exception, you may create a larger work that contains
// part or all of the Bison parser skeleton and distribute that work
// under terms of your choice, so long as that work isn't itself a
// parser generator using the skeleton or a modified version thereof
// as a parser skeleton.  Alternatively, if you modify or redistribute
// the parser skeleton itself, you may (at your option) remove this
// special exception, which will cause the skeleton and the resulting
// Bison output files to be licensed under the GNU General Public
// License without this special exception.

// This special exception was added by the Free Software Foundation in
// version 2.2 of Bison.


// First part of user declarations.

#line 37 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:404

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

// //                    "%code requires" blocks.
#line 10 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:408

    #include "fast_ber/compiler/CompilerTypes.hpp"

#line 52 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:408

# include <cassert>
# include <cstdlib> // std::abort
# include <iostream>
# include <stdexcept>
# include <string>
# include <vector>
#include <typeinfo>
#ifndef YYASSERT
# include <cassert>
# define YYASSERT assert
#endif


#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif


namespace yy {
#line 127 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:408

  template <class T, class S = std::vector<T> >
  class stack
  {
  public:
    // Hide our reversed order.
    typedef typename S::reverse_iterator iterator;
    typedef typename S::const_reverse_iterator const_iterator;

    stack ()
      : seq_ ()
    {
      seq_.reserve (200);
    }

    stack (unsigned int n)
      : seq_ (n)
    {}

    inline
    T&
    operator[] (unsigned int i)
    {
      return seq_[seq_.size () - 1 - i];
    }

    inline
    const T&
    operator[] (unsigned int i) const
    {
      return seq_[seq_.size () - 1 - i];
    }

    /// Steal the contents of \a t.
    ///
    /// Close to move-semantics.
    inline
    void
    push (T& t)
    {
      seq_.push_back (T());
      operator[](0).move (t);
    }

    inline
    void
    pop (unsigned int n = 1)
    {
      for (; n; --n)
        seq_.pop_back ();
    }

    void
    clear ()
    {
      seq_.clear ();
    }

    inline
    typename S::size_type
    size () const
    {
      return seq_.size ();
    }

    inline
    const_iterator
    begin () const
    {
      return seq_.rbegin ();
    }

    inline
    const_iterator
    end () const
    {
      return seq_.rend ();
    }

  private:
    stack (const stack&);
    stack& operator= (const stack&);
    /// The wrapped container.
    S seq_;
  };

  /// Present a slice of the top of a stack.
  template <class T, class S = stack<T> >
  class slice
  {
  public:
    slice (const S& stack, unsigned int range)
      : stack_ (stack)
      , range_ (range)
    {}

    inline
    const T&
    operator [] (unsigned int i) const
    {
      return stack_[range_ - i];
    }

  private:
    const S& stack_;
    unsigned int range_;
  };

  /// Abstract a position.
  class position
  {
  public:
    /// Construct a position.
    explicit position (std::string* f = YY_NULLPTR,
                       unsigned int l = 1u,
                       unsigned int c = 1u)
      : filename (f)
      , line (l)
      , column (c)
    {
    }


    /// Initialization.
    void initialize (std::string* fn = YY_NULLPTR,
                     unsigned int l = 1u,
                     unsigned int c = 1u)
    {
      filename = fn;
      line = l;
      column = c;
    }

    /** \name Line and Column related manipulators
     ** \{ */
    /// (line related) Advance to the COUNT next lines.
    void lines (int count = 1)
    {
      if (count)
        {
          column = 1u;
          line = add_ (line, count, 1);
        }
    }

    /// (column related) Advance to the COUNT next columns.
    void columns (int count = 1)
    {
      column = add_ (column, count, 1);
    }
    /** \} */

    /// File name to which this position refers.
    std::string* filename;
    /// Current line number.
    unsigned int line;
    /// Current column number.
    unsigned int column;

  private:
    /// Compute max(min, lhs+rhs) (provided min <= lhs).
    static unsigned int add_ (unsigned int lhs, int rhs, unsigned int min)
    {
      return (0 < rhs || -static_cast<unsigned int>(rhs) < lhs
              ? rhs + lhs
              : min);
    }
  };

  /// Add \a width columns, in place.
  inline position&
  operator+= (position& res, int width)
  {
    res.columns (width);
    return res;
  }

  /// Add \a width columns.
  inline position
  operator+ (position res, int width)
  {
    return res += width;
  }

  /// Subtract \a width columns, in place.
  inline position&
  operator-= (position& res, int width)
  {
    return res += -width;
  }

  /// Subtract \a width columns.
  inline position
  operator- (position res, int width)
  {
    return res -= width;
  }

  /// Compare two position objects.
  inline bool
  operator== (const position& pos1, const position& pos2)
  {
    return (pos1.line == pos2.line
            && pos1.column == pos2.column
            && (pos1.filename == pos2.filename
                || (pos1.filename && pos2.filename
                    && *pos1.filename == *pos2.filename)));
  }

  /// Compare two position objects.
  inline bool
  operator!= (const position& pos1, const position& pos2)
  {
    return !(pos1 == pos2);
  }

  /** \brief Intercept output stream redirection.
   ** \param ostr the destination output stream
   ** \param pos a reference to the position to redirect
   */
  template <typename YYChar>
  inline std::basic_ostream<YYChar>&
  operator<< (std::basic_ostream<YYChar>& ostr, const position& pos)
  {
    if (pos.filename)
      ostr << *pos.filename << ':';
    return ostr << pos.line << '.' << pos.column;
  }

  /// Abstract a location.
  class location
  {
  public:

    /// Construct a location from \a b to \a e.
    location (const position& b, const position& e)
      : begin (b)
      , end (e)
    {
    }

    /// Construct a 0-width location in \a p.
    explicit location (const position& p = position ())
      : begin (p)
      , end (p)
    {
    }

    /// Construct a 0-width location in \a f, \a l, \a c.
    explicit location (std::string* f,
                       unsigned int l = 1u,
                       unsigned int c = 1u)
      : begin (f, l, c)
      , end (f, l, c)
    {
    }


    /// Initialization.
    void initialize (std::string* f = YY_NULLPTR,
                     unsigned int l = 1u,
                     unsigned int c = 1u)
    {
      begin.initialize (f, l, c);
      end = begin;
    }

    /** \name Line and Column related manipulators
     ** \{ */
  public:
    /// Reset initial location to final location.
    void step ()
    {
      begin = end;
    }

    /// Extend the current location to the COUNT next columns.
    void columns (int count = 1)
    {
      end += count;
    }

    /// Extend the current location to the COUNT next lines.
    void lines (int count = 1)
    {
      end.lines (count);
    }
    /** \} */


  public:
    /// Beginning of the located region.
    position begin;
    /// End of the located region.
    position end;
  };

  /// Join two locations, in place.
  inline location& operator+= (location& res, const location& end)
  {
    res.end = end.end;
    return res;
  }

  /// Join two locations.
  inline location operator+ (location res, const location& end)
  {
    return res += end;
  }

  /// Add \a width columns to the end position, in place.
  inline location& operator+= (location& res, int width)
  {
    res.columns (width);
    return res;
  }

  /// Add \a width columns to the end position.
  inline location operator+ (location res, int width)
  {
    return res += width;
  }

  /// Subtract \a width columns to the end position, in place.
  inline location& operator-= (location& res, int width)
  {
    return res += -width;
  }

  /// Subtract \a width columns to the end position.
  inline location operator- (location res, int width)
  {
    return res -= width;
  }

  /// Compare two location objects.
  inline bool
  operator== (const location& loc1, const location& loc2)
  {
    return loc1.begin == loc2.begin && loc1.end == loc2.end;
  }

  /// Compare two location objects.
  inline bool
  operator!= (const location& loc1, const location& loc2)
  {
    return !(loc1 == loc2);
  }

  /** \brief Intercept output stream redirection.
   ** \param ostr the destination output stream
   ** \param loc a reference to the location to redirect
   **
   ** Avoid duplicate information.
   */
  template <typename YYChar>
  inline std::basic_ostream<YYChar>&
  operator<< (std::basic_ostream<YYChar>& ostr, const location& loc)
  {
    unsigned int end_col = 0 < loc.end.column ? loc.end.column - 1 : 0;
    ostr << loc.begin;
    if (loc.end.filename
        && (!loc.begin.filename
            || *loc.begin.filename != *loc.end.filename))
      ostr << '-' << loc.end.filename << ':' << loc.end.line << '.' << end_col;
    else if (loc.begin.line < loc.end.line)
      ostr << '-' << loc.end.line << '.' << end_col;
    else if (loc.begin.column < end_col)
      ostr << '-' << end_col;
    return ostr;
  }


  /// A char[S] buffer to store and retrieve objects.
  ///
  /// Sort of a variant, but does not keep track of the nature
  /// of the stored data, since that knowledge is available
  /// via the current state.
  template <size_t S>
  struct variant
  {
    /// Type of *this.
    typedef variant<S> self_type;

    /// Empty construction.
    variant ()
      : yytypeid_ (YY_NULLPTR)
    {}

    /// Construct and fill.
    template <typename T>
    variant (const T& t)
      : yytypeid_ (&typeid (T))
    {
      YYASSERT (sizeof (T) <= S);
      new (yyas_<T> ()) T (t);
    }

    /// Destruction, allowed only if empty.
    ~variant ()
    {
      YYASSERT (!yytypeid_);
    }

    /// Instantiate an empty \a T in here.
    template <typename T>
    T&
    build ()
    {
      YYASSERT (!yytypeid_);
      YYASSERT (sizeof (T) <= S);
      yytypeid_ = & typeid (T);
      return *new (yyas_<T> ()) T;
    }

    /// Instantiate a \a T in here from \a t.
    template <typename T>
    T&
    build (const T& t)
    {
      YYASSERT (!yytypeid_);
      YYASSERT (sizeof (T) <= S);
      yytypeid_ = & typeid (T);
      return *new (yyas_<T> ()) T (t);
    }

    /// Accessor to a built \a T.
    template <typename T>
    T&
    as ()
    {
      YYASSERT (*yytypeid_ == typeid (T));
      YYASSERT (sizeof (T) <= S);
      return *yyas_<T> ();
    }

    /// Const accessor to a built \a T (for %printer).
    template <typename T>
    const T&
    as () const
    {
      YYASSERT (*yytypeid_ == typeid (T));
      YYASSERT (sizeof (T) <= S);
      return *yyas_<T> ();
    }

    /// Swap the content with \a other, of same type.
    ///
    /// Both variants must be built beforehand, because swapping the actual
    /// data requires reading it (with as()), and this is not possible on
    /// unconstructed variants: it would require some dynamic testing, which
    /// should not be the variant's responsability.
    /// Swapping between built and (possibly) non-built is done with
    /// variant::move ().
    template <typename T>
    void
    swap (self_type& other)
    {
      YYASSERT (yytypeid_);
      YYASSERT (*yytypeid_ == *other.yytypeid_);
      std::swap (as<T> (), other.as<T> ());
    }

    /// Move the content of \a other to this.
    ///
    /// Destroys \a other.
    template <typename T>
    void
    move (self_type& other)
    {
      build<T> ();
      swap<T> (other);
      other.destroy<T> ();
    }

    /// Copy the content of \a other to this.
    template <typename T>
    void
    copy (const self_type& other)
    {
      build<T> (other.as<T> ());
    }

    /// Destroy the stored \a T.
    template <typename T>
    void
    destroy ()
    {
      as<T> ().~T ();
      yytypeid_ = YY_NULLPTR;
    }

  private:
    /// Prohibit blind copies.
    self_type& operator=(const self_type&);
    variant (const self_type&);

    /// Accessor to raw memory as \a T.
    template <typename T>
    T*
    yyas_ ()
    {
      void *yyp = yybuffer_.yyraw;
      return static_cast<T*> (yyp);
     }

    /// Const accessor to raw memory as \a T.
    template <typename T>
    const T*
    yyas_ () const
    {
      const void *yyp = yybuffer_.yyraw;
      return static_cast<const T*> (yyp);
     }

    union
    {
      /// Strongest alignment constraints.
      long double yyalign_me;
      /// A buffer large enough to store any of the semantic values.
      char yyraw[S];
    } yybuffer_;

    /// Whether the content is built: if defined, the name of the stored type.
    const std::type_info *yytypeid_;
  };


  /// A Bison parser.
  class asn1_parser
  {
  public:
#ifndef YYSTYPE
    /// An auxiliary type to compute the largest semantic type.
    union union_type
    {
      // Assignment
      // TypeAssignment
      // ValueAssignment
      char dummy1[sizeof(Assignment)];

      // BuiltinType
      char dummy2[sizeof(BuiltinType)];

      // ChoiceType
      char dummy3[sizeof(ChoiceType)];

      // Class
      char dummy4[sizeof(Class)];

      // ComponentType
      char dummy5[sizeof(ComponentType)];

      // ComponentTypeLists
      // RootComponentTypeList
      // ComponentTypeList
      char dummy6[sizeof(ComponentTypeList)];

      // DefinedType
      char dummy7[sizeof(DefinedType)];

      // EnumeratedType
      // Enumerations
      // Enumeration
      char dummy8[sizeof(EnumeratedType)];

      // EnumerationItem
      char dummy9[sizeof(EnumerationValue)];

      // SymbolsFromModule
      char dummy10[sizeof(Import)];

      // ModuleBody
      char dummy11[sizeof(Module)];

      // NamedNumber
      char dummy12[sizeof(NamedNumber)];

      // NamedType
      char dummy13[sizeof(NamedType)];

      // ObjIdComponents
      // NameForm
      // NumberForm
      // NameAndNumberForm
      char dummy14[sizeof(ObjectIdComponentValue)];

      // PrefixedType
      char dummy15[sizeof(PrefixedType)];

      // SequenceOfType
      char dummy16[sizeof(SequenceOfType)];

      // SequenceType
      char dummy17[sizeof(SequenceType)];

      // SetOfType
      char dummy18[sizeof(SetOfType)];

      // SetType
      char dummy19[sizeof(SetType)];

      // Tag
      char dummy20[sizeof(Tag)];

      // TaggedType
      char dummy21[sizeof(TaggedType)];

      // TagDefault
      char dummy22[sizeof(TaggingMode)];

      // Type
      char dummy23[sizeof(Type)];

      // Value
      // BuiltinValue
      char dummy24[sizeof(Value)];

      // realnumber
      char dummy25[sizeof(double)];

      // ClassNumber
      char dummy26[sizeof(int)];

      // number
      // DefinedValue
      // SignedNumber
      char dummy27[sizeof(long long)];

      // GENERIC_IDENTIFIER_UPPERCASE
      // GENERIC_IDENTIFIER_LOWERCASE
      // ModuleIdentifier
      // GlobalModuleReference
      // Symbol
      // Reference
      // typereference
      // identifier
      // valuereference
      // modulereference
      char dummy28[sizeof(std::string)];

      // AssignmentList
      char dummy29[sizeof(std::vector<Assignment>)];

      // Exports
      char dummy30[sizeof(std::vector<Export>)];

      // Imports
      // SymbolsImported
      // SymbolsFromModuleList
      char dummy31[sizeof(std::vector<Import>)];

      // AlternativeTypeLists
      // RootAlternativeTypeList
      // AlternativeTypeList
      char dummy32[sizeof(std::vector<NamedType>)];

      // ObjectIdentifierValue
      // ObjIdComponentsList
      char dummy33[sizeof(std::vector<ObjectIdComponentValue>)];

      // SymbolList
      char dummy34[sizeof(std::vector<std::string>)];
};

    /// Symbol semantic values.
    typedef variant<sizeof(union_type)> semantic_type;
#else
    typedef YYSTYPE semantic_type;
#endif
    /// Symbol locations.
    typedef location location_type;

    /// Syntax errors thrown from user actions.
    struct syntax_error : std::runtime_error
    {
      syntax_error (const location_type& l, const std::string& m);
      location_type location;
    };

    /// Tokens.
    struct token
    {
      enum yytokentype
      {
        END_OF_FILE = 0,
        comment = 258,
        number = 259,
        realnumber = 260,
        bstring = 261,
        xmlbstring = 262,
        hstring = 263,
        xmlhstring = 264,
        cstring = 265,
        xmlcstring = 266,
        simplestring = 267,
        xmltstring = 268,
        psname = 269,
        encodingreference = 270,
        integerUnicodeLabel = 271,
        tstring = 274,
        objectclassreference = 276,
        objectreference = 277,
        objectsetreference = 278,
        typefieldreference = 279,
        valuefieldreference = 280,
        valuesetfieldreference = 281,
        objectfieldreference = 282,
        objectsetfieldreference = 283,
        word = 284,
        ABSENT = 285,
        ABSTRACT_SYNTAX = 286,
        ALL = 287,
        APPLICATION = 288,
        ASN_NULL = 289,
        AUTOMATIC = 290,
        BEGIN = 291,
        BIT = 292,
        BMPString = 293,
        BOOLEAN = 294,
        BY = 295,
        CHARACTER = 296,
        CHOICE = 297,
        CLASS = 298,
        COMPONENT = 299,
        COMPONENTS = 300,
        CONSTRAINED = 301,
        CONTAINING = 302,
        DATE = 303,
        DATE_TIME = 304,
        DEFAULT = 305,
        DEFINITIONS = 306,
        DURATION = 307,
        EMBEDDED = 308,
        ENCODED = 309,
        ENCODING_CONTROL = 310,
        END = 311,
        ENUMERATED = 312,
        EXCEPT = 313,
        EXPLICIT = 314,
        EXPORTS = 315,
        EXTENSIBILITY = 316,
        EXTERNAL = 317,
        FALSE = 318,
        FROM = 319,
        GeneralizedTime = 320,
        GeneralString = 321,
        GraphicString = 322,
        IA5String = 323,
        IDENTIFIER = 324,
        IMPLICIT = 325,
        IMPLIED = 326,
        IMPORTS = 327,
        INCLUDES = 328,
        INSTANCE = 329,
        INSTRUCTIONS = 330,
        INTEGER = 331,
        INTERSECTION = 332,
        ISO646String = 333,
        MAX = 334,
        MIN = 335,
        MINUS_INFINITY = 336,
        NOT_A_NUMBER = 337,
        NumericString = 338,
        OBJECT = 339,
        ObjectDescriptor = 340,
        OCTET = 341,
        OF = 342,
        OID_IRI = 343,
        OPTIONAL = 344,
        PATTERN = 345,
        PDV = 346,
        PLUS_INFINITY = 347,
        PRESENT = 348,
        PrintableString = 349,
        PRIVATE = 350,
        REAL = 351,
        RELATIVE_OID = 352,
        RELATIVE_OID_IRI = 353,
        SEQUENCE = 354,
        SET = 355,
        SETTINGS = 356,
        SIZE = 357,
        STRING = 358,
        SYNTAX = 359,
        T61String = 360,
        TAGS = 361,
        TeletexString = 362,
        TIME = 363,
        TIME_OF_DAY = 364,
        TRUE = 365,
        TYPE_IDENTIFIER = 366,
        UNION = 367,
        UNIQUE = 368,
        UNIVERSAL = 369,
        UniversalString = 370,
        UTCTime = 371,
        UTF8String = 372,
        VideotexString = 373,
        VisibleString = 374,
        WITH = 375,
        DEFINED_AS = 376,
        ELIPSIS = 377,
        RANGE = 378,
        OPEN_BRACE = 379,
        CLOSE_BRACE = 380,
        OPEN_PARENTHESIS = 381,
        CLOSE_PARENTHESIS = 382,
        OPEN_SQUARE_BRACKET = 383,
        CLOSE_SQUARE_BRACKET = 384,
        LESS_THAN = 385,
        GREATER_THAN = 386,
        EXCLAMATION_MARK = 387,
        QUOTATION_MARK = 388,
        AMPERSAND = 389,
        APOSTROPHE = 390,
        ASTERISK = 391,
        COMMA = 392,
        FULL_STOP = 393,
        HYPHEN_MINUS = 394,
        SOLIDUS = 395,
        COLON = 396,
        SEMICOLON = 397,
        EQUALS_SIGN = 398,
        AT = 399,
        VERTICAL_LINE = 400,
        ACCENT = 401,
        PLUS = 402,
        STAR = 403,
        QUESTION_MARK = 404,
        GENERIC_IDENTIFIER_UPPERCASE = 405,
        GENERIC_IDENTIFIER_LOWERCASE = 406,
        GENERIC_INTEGER = 407,
        xmlasn1typename = 408
      };
    };

    /// (External) token type, as returned by yylex.
    typedef token::yytokentype token_type;

    /// Symbol type: an internal symbol number.
    typedef int symbol_number_type;

    /// The symbol type number to denote an empty symbol.
    enum { empty_symbol = -2 };

    /// Internal symbol number for tokens (subsumed by symbol_number_type).
    typedef unsigned char token_number_type;

    /// A complete symbol.
    ///
    /// Expects its Base type to provide access to the symbol type
    /// via type_get().
    ///
    /// Provide access to semantic value and location.
    template <typename Base>
    struct basic_symbol : Base
    {
      /// Alias to Base.
      typedef Base super_type;

      /// Default constructor.
      basic_symbol ();

      /// Copy constructor.
      basic_symbol (const basic_symbol& other);

      /// Constructor for valueless symbols, and symbols from each type.

  basic_symbol (typename Base::kind_type t, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Assignment v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const BuiltinType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ChoiceType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Class v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ComponentType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ComponentTypeList v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const DefinedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const EnumeratedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const EnumerationValue v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Import v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Module v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const NamedNumber v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const NamedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ObjectIdComponentValue v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const PrefixedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const SequenceOfType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const SequenceType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const SetOfType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const SetType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Tag v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const TaggedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const TaggingMode v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Type v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Value v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const double v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const int v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const long long v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::string v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<Assignment> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<Export> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<Import> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<NamedType> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<ObjectIdComponentValue> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<std::string> v, const location_type& l);


      /// Constructor for symbols with semantic value.
      basic_symbol (typename Base::kind_type t,
                    const semantic_type& v,
                    const location_type& l);

      /// Destroy the symbol.
      ~basic_symbol ();

      /// Destroy contents, and record that is empty.
      void clear ();

      /// Whether empty.
      bool empty () const;

      /// Destructive move, \a s is emptied into this.
      void move (basic_symbol& s);

      /// The semantic value.
      semantic_type value;

      /// The location.
      location_type location;

    private:
      /// Assignment operator.
      basic_symbol& operator= (const basic_symbol& other);
    };

    /// Type access provider for token (enum) based symbols.
    struct by_type
    {
      /// Default constructor.
      by_type ();

      /// Copy constructor.
      by_type (const by_type& other);

      /// The symbol type as needed by the constructor.
      typedef token_type kind_type;

      /// Constructor from (external) token numbers.
      by_type (kind_type t);

      /// Record that this symbol is empty.
      void clear ();

      /// Steal the symbol type from \a that.
      void move (by_type& that);

      /// The (internal) type number (corresponding to \a type).
      /// \a empty when empty.
      symbol_number_type type_get () const;

      /// The token.
      token_type token () const;

      /// The symbol type.
      /// \a empty_symbol when empty.
      /// An int, not token_number_type, to be able to store empty_symbol.
      int type;
    };

    /// "External" symbols: returned by the scanner.
    typedef basic_symbol<by_type> symbol_type;

    // Symbol constructors declarations.
    static inline
    symbol_type
    make_END_OF_FILE (const location_type& l);

    static inline
    symbol_type
    make_comment (const location_type& l);

    static inline
    symbol_type
    make_number (const long long& v, const location_type& l);

    static inline
    symbol_type
    make_realnumber (const double& v, const location_type& l);

    static inline
    symbol_type
    make_bstring (const location_type& l);

    static inline
    symbol_type
    make_xmlbstring (const location_type& l);

    static inline
    symbol_type
    make_hstring (const location_type& l);

    static inline
    symbol_type
    make_xmlhstring (const location_type& l);

    static inline
    symbol_type
    make_cstring (const location_type& l);

    static inline
    symbol_type
    make_xmlcstring (const location_type& l);

    static inline
    symbol_type
    make_simplestring (const location_type& l);

    static inline
    symbol_type
    make_xmltstring (const location_type& l);

    static inline
    symbol_type
    make_psname (const location_type& l);

    static inline
    symbol_type
    make_encodingreference (const location_type& l);

    static inline
    symbol_type
    make_integerUnicodeLabel (const location_type& l);

    static inline
    symbol_type
    make_tstring (const location_type& l);

    static inline
    symbol_type
    make_objectclassreference (const location_type& l);

    static inline
    symbol_type
    make_objectreference (const location_type& l);

    static inline
    symbol_type
    make_objectsetreference (const location_type& l);

    static inline
    symbol_type
    make_typefieldreference (const location_type& l);

    static inline
    symbol_type
    make_valuefieldreference (const location_type& l);

    static inline
    symbol_type
    make_valuesetfieldreference (const location_type& l);

    static inline
    symbol_type
    make_objectfieldreference (const location_type& l);

    static inline
    symbol_type
    make_objectsetfieldreference (const location_type& l);

    static inline
    symbol_type
    make_word (const location_type& l);

    static inline
    symbol_type
    make_ABSENT (const location_type& l);

    static inline
    symbol_type
    make_ABSTRACT_SYNTAX (const location_type& l);

    static inline
    symbol_type
    make_ALL (const location_type& l);

    static inline
    symbol_type
    make_APPLICATION (const location_type& l);

    static inline
    symbol_type
    make_ASN_NULL (const location_type& l);

    static inline
    symbol_type
    make_AUTOMATIC (const location_type& l);

    static inline
    symbol_type
    make_BEGIN (const location_type& l);

    static inline
    symbol_type
    make_BIT (const location_type& l);

    static inline
    symbol_type
    make_BMPString (const location_type& l);

    static inline
    symbol_type
    make_BOOLEAN (const location_type& l);

    static inline
    symbol_type
    make_BY (const location_type& l);

    static inline
    symbol_type
    make_CHARACTER (const location_type& l);

    static inline
    symbol_type
    make_CHOICE (const location_type& l);

    static inline
    symbol_type
    make_CLASS (const location_type& l);

    static inline
    symbol_type
    make_COMPONENT (const location_type& l);

    static inline
    symbol_type
    make_COMPONENTS (const location_type& l);

    static inline
    symbol_type
    make_CONSTRAINED (const location_type& l);

    static inline
    symbol_type
    make_CONTAINING (const location_type& l);

    static inline
    symbol_type
    make_DATE (const location_type& l);

    static inline
    symbol_type
    make_DATE_TIME (const location_type& l);

    static inline
    symbol_type
    make_DEFAULT (const location_type& l);

    static inline
    symbol_type
    make_DEFINITIONS (const location_type& l);

    static inline
    symbol_type
    make_DURATION (const location_type& l);

    static inline
    symbol_type
    make_EMBEDDED (const location_type& l);

    static inline
    symbol_type
    make_ENCODED (const location_type& l);

    static inline
    symbol_type
    make_ENCODING_CONTROL (const location_type& l);

    static inline
    symbol_type
    make_END (const location_type& l);

    static inline
    symbol_type
    make_ENUMERATED (const location_type& l);

    static inline
    symbol_type
    make_EXCEPT (const location_type& l);

    static inline
    symbol_type
    make_EXPLICIT (const location_type& l);

    static inline
    symbol_type
    make_EXPORTS (const location_type& l);

    static inline
    symbol_type
    make_EXTENSIBILITY (const location_type& l);

    static inline
    symbol_type
    make_EXTERNAL (const location_type& l);

    static inline
    symbol_type
    make_FALSE (const location_type& l);

    static inline
    symbol_type
    make_FROM (const location_type& l);

    static inline
    symbol_type
    make_GeneralizedTime (const location_type& l);

    static inline
    symbol_type
    make_GeneralString (const location_type& l);

    static inline
    symbol_type
    make_GraphicString (const location_type& l);

    static inline
    symbol_type
    make_IA5String (const location_type& l);

    static inline
    symbol_type
    make_IDENTIFIER (const location_type& l);

    static inline
    symbol_type
    make_IMPLICIT (const location_type& l);

    static inline
    symbol_type
    make_IMPLIED (const location_type& l);

    static inline
    symbol_type
    make_IMPORTS (const location_type& l);

    static inline
    symbol_type
    make_INCLUDES (const location_type& l);

    static inline
    symbol_type
    make_INSTANCE (const location_type& l);

    static inline
    symbol_type
    make_INSTRUCTIONS (const location_type& l);

    static inline
    symbol_type
    make_INTEGER (const location_type& l);

    static inline
    symbol_type
    make_INTERSECTION (const location_type& l);

    static inline
    symbol_type
    make_ISO646String (const location_type& l);

    static inline
    symbol_type
    make_MAX (const location_type& l);

    static inline
    symbol_type
    make_MIN (const location_type& l);

    static inline
    symbol_type
    make_MINUS_INFINITY (const location_type& l);

    static inline
    symbol_type
    make_NOT_A_NUMBER (const location_type& l);

    static inline
    symbol_type
    make_NumericString (const location_type& l);

    static inline
    symbol_type
    make_OBJECT (const location_type& l);

    static inline
    symbol_type
    make_ObjectDescriptor (const location_type& l);

    static inline
    symbol_type
    make_OCTET (const location_type& l);

    static inline
    symbol_type
    make_OF (const location_type& l);

    static inline
    symbol_type
    make_OID_IRI (const location_type& l);

    static inline
    symbol_type
    make_OPTIONAL (const location_type& l);

    static inline
    symbol_type
    make_PATTERN (const location_type& l);

    static inline
    symbol_type
    make_PDV (const location_type& l);

    static inline
    symbol_type
    make_PLUS_INFINITY (const location_type& l);

    static inline
    symbol_type
    make_PRESENT (const location_type& l);

    static inline
    symbol_type
    make_PrintableString (const location_type& l);

    static inline
    symbol_type
    make_PRIVATE (const location_type& l);

    static inline
    symbol_type
    make_REAL (const location_type& l);

    static inline
    symbol_type
    make_RELATIVE_OID (const location_type& l);

    static inline
    symbol_type
    make_RELATIVE_OID_IRI (const location_type& l);

    static inline
    symbol_type
    make_SEQUENCE (const location_type& l);

    static inline
    symbol_type
    make_SET (const location_type& l);

    static inline
    symbol_type
    make_SETTINGS (const location_type& l);

    static inline
    symbol_type
    make_SIZE (const location_type& l);

    static inline
    symbol_type
    make_STRING (const location_type& l);

    static inline
    symbol_type
    make_SYNTAX (const location_type& l);

    static inline
    symbol_type
    make_T61String (const location_type& l);

    static inline
    symbol_type
    make_TAGS (const location_type& l);

    static inline
    symbol_type
    make_TeletexString (const location_type& l);

    static inline
    symbol_type
    make_TIME (const location_type& l);

    static inline
    symbol_type
    make_TIME_OF_DAY (const location_type& l);

    static inline
    symbol_type
    make_TRUE (const location_type& l);

    static inline
    symbol_type
    make_TYPE_IDENTIFIER (const location_type& l);

    static inline
    symbol_type
    make_UNION (const location_type& l);

    static inline
    symbol_type
    make_UNIQUE (const location_type& l);

    static inline
    symbol_type
    make_UNIVERSAL (const location_type& l);

    static inline
    symbol_type
    make_UniversalString (const location_type& l);

    static inline
    symbol_type
    make_UTCTime (const location_type& l);

    static inline
    symbol_type
    make_UTF8String (const location_type& l);

    static inline
    symbol_type
    make_VideotexString (const location_type& l);

    static inline
    symbol_type
    make_VisibleString (const location_type& l);

    static inline
    symbol_type
    make_WITH (const location_type& l);

    static inline
    symbol_type
    make_DEFINED_AS (const location_type& l);

    static inline
    symbol_type
    make_ELIPSIS (const location_type& l);

    static inline
    symbol_type
    make_RANGE (const location_type& l);

    static inline
    symbol_type
    make_OPEN_BRACE (const location_type& l);

    static inline
    symbol_type
    make_CLOSE_BRACE (const location_type& l);

    static inline
    symbol_type
    make_OPEN_PARENTHESIS (const location_type& l);

    static inline
    symbol_type
    make_CLOSE_PARENTHESIS (const location_type& l);

    static inline
    symbol_type
    make_OPEN_SQUARE_BRACKET (const location_type& l);

    static inline
    symbol_type
    make_CLOSE_SQUARE_BRACKET (const location_type& l);

    static inline
    symbol_type
    make_LESS_THAN (const location_type& l);

    static inline
    symbol_type
    make_GREATER_THAN (const location_type& l);

    static inline
    symbol_type
    make_EXCLAMATION_MARK (const location_type& l);

    static inline
    symbol_type
    make_QUOTATION_MARK (const location_type& l);

    static inline
    symbol_type
    make_AMPERSAND (const location_type& l);

    static inline
    symbol_type
    make_APOSTROPHE (const location_type& l);

    static inline
    symbol_type
    make_ASTERISK (const location_type& l);

    static inline
    symbol_type
    make_COMMA (const location_type& l);

    static inline
    symbol_type
    make_FULL_STOP (const location_type& l);

    static inline
    symbol_type
    make_HYPHEN_MINUS (const location_type& l);

    static inline
    symbol_type
    make_SOLIDUS (const location_type& l);

    static inline
    symbol_type
    make_COLON (const location_type& l);

    static inline
    symbol_type
    make_SEMICOLON (const location_type& l);

    static inline
    symbol_type
    make_EQUALS_SIGN (const location_type& l);

    static inline
    symbol_type
    make_AT (const location_type& l);

    static inline
    symbol_type
    make_VERTICAL_LINE (const location_type& l);

    static inline
    symbol_type
    make_ACCENT (const location_type& l);

    static inline
    symbol_type
    make_PLUS (const location_type& l);

    static inline
    symbol_type
    make_STAR (const location_type& l);

    static inline
    symbol_type
    make_QUESTION_MARK (const location_type& l);

    static inline
    symbol_type
    make_GENERIC_IDENTIFIER_UPPERCASE (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_GENERIC_IDENTIFIER_LOWERCASE (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_GENERIC_INTEGER (const location_type& l);

    static inline
    symbol_type
    make_xmlasn1typename (const location_type& l);


    /// Build a parser object.
    asn1_parser (Context& context_yyarg);
    virtual ~asn1_parser ();

    /// Parse.
    /// \returns  0 iff parsing succeeded.
    virtual int parse ();

#if YYDEBUG
    /// The current debugging stream.
    std::ostream& debug_stream () const YY_ATTRIBUTE_PURE;
    /// Set the current debugging stream.
    void set_debug_stream (std::ostream &);

    /// Type for debugging levels.
    typedef int debug_level_type;
    /// The current debugging level.
    debug_level_type debug_level () const YY_ATTRIBUTE_PURE;
    /// Set the current debugging level.
    void set_debug_level (debug_level_type l);
#endif

    /// Report a syntax error.
    /// \param loc    where the syntax error is found.
    /// \param msg    a description of the syntax error.
    virtual void error (const location_type& loc, const std::string& msg);

    /// Report a syntax error.
    void error (const syntax_error& err);

  private:
    /// This class is not copyable.
    asn1_parser (const asn1_parser&);
    asn1_parser& operator= (const asn1_parser&);

    /// State numbers.
    typedef int state_type;

    /// Generate an error message.
    /// \param yystate   the state where the error occurred.
    /// \param yyla      the lookahead token.
    virtual std::string yysyntax_error_ (state_type yystate,
                                         const symbol_type& yyla) const;

    /// Compute post-reduction state.
    /// \param yystate   the current state
    /// \param yysym     the nonterminal to push on the stack
    state_type yy_lr_goto_state_ (state_type yystate, int yysym);

    /// Whether the given \c yypact_ value indicates a defaulted state.
    /// \param yyvalue   the value to check
    static bool yy_pact_value_is_default_ (int yyvalue);

    /// Whether the given \c yytable_ value indicates a syntax error.
    /// \param yyvalue   the value to check
    static bool yy_table_value_is_error_ (int yyvalue);

    static const short int yypact_ninf_;
    static const short int yytable_ninf_;

    /// Convert a scanner token number \a t to a symbol number.
    static token_number_type yytranslate_ (token_type t);

    // Tables.
  // YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
  // STATE-NUM.
  static const short int yypact_[];

  // YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
  // Performed when YYTABLE does not specify something else to do.  Zero
  // means the default is an error.
  static const unsigned short int yydefact_[];

  // YYPGOTO[NTERM-NUM].
  static const short int yypgoto_[];

  // YYDEFGOTO[NTERM-NUM].
  static const short int yydefgoto_[];

  // YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
  // positive, shift that token.  If negative, reduce the rule whose
  // number is the opposite.  If YYTABLE_NINF, syntax error.
  static const short int yytable_[];

  static const short int yycheck_[];

  // YYSTOS[STATE-NUM] -- The (internal number of the) accessing
  // symbol of state STATE-NUM.
  static const unsigned short int yystos_[];

  // YYR1[YYN] -- Symbol number of symbol that rule YYN derives.
  static const unsigned short int yyr1_[];

  // YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.
  static const unsigned char yyr2_[];


    /// Convert the symbol name \a n to a form suitable for a diagnostic.
    static std::string yytnamerr_ (const char *n);


    /// For a symbol, its name in clear.
    static const char* const yytname_[];
#if YYDEBUG
  // YYRLINE[YYN] -- Source line where rule number YYN was defined.
  static const unsigned short int yyrline_[];
    /// Report on the debug stream that the rule \a r is going to be reduced.
    virtual void yy_reduce_print_ (int r);
    /// Print the state stack on the debug stream.
    virtual void yystack_print_ ();

    // Debugging.
    int yydebug_;
    std::ostream* yycdebug_;

    /// \brief Display a symbol type, value and location.
    /// \param yyo    The output stream.
    /// \param yysym  The symbol.
    template <typename Base>
    void yy_print_ (std::ostream& yyo, const basic_symbol<Base>& yysym) const;
#endif

    /// \brief Reclaim the memory associated to a symbol.
    /// \param yymsg     Why this token is reclaimed.
    ///                  If null, print nothing.
    /// \param yysym     The symbol.
    template <typename Base>
    void yy_destroy_ (const char* yymsg, basic_symbol<Base>& yysym) const;

  private:
    /// Type access provider for state based symbols.
    struct by_state
    {
      /// Default constructor.
      by_state ();

      /// The symbol type as needed by the constructor.
      typedef state_type kind_type;

      /// Constructor.
      by_state (kind_type s);

      /// Copy constructor.
      by_state (const by_state& other);

      /// Record that this symbol is empty.
      void clear ();

      /// Steal the symbol type from \a that.
      void move (by_state& that);

      /// The (internal) type number (corresponding to \a state).
      /// \a empty_symbol when empty.
      symbol_number_type type_get () const;

      /// The state number used to denote an empty symbol.
      enum { empty_state = -1 };

      /// The state.
      /// \a empty when empty.
      state_type state;
    };

    /// "Internal" symbol: element of the stack.
    struct stack_symbol_type : basic_symbol<by_state>
    {
      /// Superclass.
      typedef basic_symbol<by_state> super_type;
      /// Construct an empty symbol.
      stack_symbol_type ();
      /// Steal the contents from \a sym to build this.
      stack_symbol_type (state_type s, symbol_type& sym);
      /// Assignment, needed by push_back.
      stack_symbol_type& operator= (const stack_symbol_type& that);
    };

    /// Stack type.
    typedef stack<stack_symbol_type> stack_type;

    /// The stack.
    stack_type yystack_;

    /// Push a new state on the stack.
    /// \param m    a debug message to display
    ///             if null, no trace is output.
    /// \param s    the symbol
    /// \warning the contents of \a s.value is stolen.
    void yypush_ (const char* m, stack_symbol_type& s);

    /// Push a new look ahead token on the state on the stack.
    /// \param m    a debug message to display
    ///             if null, no trace is output.
    /// \param s    the state
    /// \param sym  the symbol (for its value and location).
    /// \warning the contents of \a s.value is stolen.
    void yypush_ (const char* m, state_type s, symbol_type& sym);

    /// Pop \a n symbols the three stacks.
    void yypop_ (unsigned int n = 1);

    /// Constants.
    enum
    {
      yyeof_ = 0,
      yylast_ = 1911,     ///< Last index in yytable_.
      yynnts_ = 178,  ///< Number of nonterminal symbols.
      yyfinal_ = 6, ///< Termination state number.
      yyterror_ = 1,
      yyerrcode_ = 256,
      yyntokens_ = 155  ///< Number of tokens.
    };


    // User arguments.
    Context& context;
  };

  // Symbol number corresponding to token number t.
  inline
  asn1_parser::token_number_type
  asn1_parser::yytranslate_ (token_type t)
  {
    static
    const token_number_type
    translate_table[] =
    {
     0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154
    };
    const unsigned int user_token_number_max_ = 409;
    const token_number_type undef_token_ = 2;

    if (static_cast<int>(t) <= yyeof_)
      return yyeof_;
    else if (static_cast<unsigned int> (t) <= user_token_number_max_)
      return translate_table[t];
    else
      return undef_token_;
  }

  inline
  asn1_parser::syntax_error::syntax_error (const location_type& l, const std::string& m)
    : std::runtime_error (m)
    , location (l)
  {}

  // basic_symbol.
  template <typename Base>
  inline
  asn1_parser::basic_symbol<Base>::basic_symbol ()
    : value ()
  {}

  template <typename Base>
  inline
  asn1_parser::basic_symbol<Base>::basic_symbol (const basic_symbol& other)
    : Base (other)
    , value ()
    , location (other.location)
  {
      switch (other.type_get ())
    {
      case 209: // Assignment
      case 213: // TypeAssignment
      case 214: // ValueAssignment
        value.copy< Assignment > (other.value);
        break;

      case 216: // BuiltinType
        value.copy< BuiltinType > (other.value);
        break;

      case 246: // ChoiceType
        value.copy< ChoiceType > (other.value);
        break;

      case 256: // Class
        value.copy< Class > (other.value);
        break;

      case 242: // ComponentType
        value.copy< ComponentType > (other.value);
        break;

      case 239: // ComponentTypeLists
      case 240: // RootComponentTypeList
      case 241: // ComponentTypeList
        value.copy< ComponentTypeList > (other.value);
        break;

      case 210: // DefinedType
        value.copy< DefinedType > (other.value);
        break;

      case 228: // EnumeratedType
      case 229: // Enumerations
      case 230: // Enumeration
        value.copy< EnumeratedType > (other.value);
        break;

      case 231: // EnumerationItem
        value.copy< EnumerationValue > (other.value);
        break;

      case 202: // SymbolsFromModule
        value.copy< Import > (other.value);
        break;

      case 196: // ModuleBody
        value.copy< Module > (other.value);
        break;

      case 225: // NamedNumber
        value.copy< NamedNumber > (other.value);
        break;

      case 217: // NamedType
        value.copy< NamedType > (other.value);
        break;

      case 260: // ObjIdComponents
      case 261: // NameForm
      case 262: // NumberForm
      case 263: // NameAndNumberForm
        value.copy< ObjectIdComponentValue > (other.value);
        break;

      case 251: // PrefixedType
        value.copy< PrefixedType > (other.value);
        break;

      case 243: // SequenceOfType
        value.copy< SequenceOfType > (other.value);
        break;

      case 238: // SequenceType
        value.copy< SequenceType > (other.value);
        break;

      case 245: // SetOfType
        value.copy< SetOfType > (other.value);
        break;

      case 244: // SetType
        value.copy< SetType > (other.value);
        break;

      case 253: // Tag
        value.copy< Tag > (other.value);
        break;

      case 252: // TaggedType
        value.copy< TaggedType > (other.value);
        break;

      case 194: // TagDefault
        value.copy< TaggingMode > (other.value);
        break;

      case 215: // Type
        value.copy< Type > (other.value);
        break;

      case 218: // Value
      case 219: // BuiltinValue
        value.copy< Value > (other.value);
        break;

      case 5: // realnumber
        value.copy< double > (other.value);
        break;

      case 255: // ClassNumber
        value.copy< int > (other.value);
        break;

      case 4: // number
      case 211: // DefinedValue
      case 226: // SignedNumber
        value.copy< long long > (other.value);
        break;

      case 150: // GENERIC_IDENTIFIER_UPPERCASE
      case 151: // GENERIC_IDENTIFIER_LOWERCASE
      case 185: // ModuleIdentifier
      case 203: // GlobalModuleReference
      case 206: // Symbol
      case 207: // Reference
      case 329: // typereference
      case 330: // identifier
      case 331: // valuereference
      case 332: // modulereference
        value.copy< std::string > (other.value);
        break;

      case 208: // AssignmentList
        value.copy< std::vector<Assignment> > (other.value);
        break;

      case 197: // Exports
        value.copy< std::vector<Export> > (other.value);
        break;

      case 199: // Imports
      case 200: // SymbolsImported
      case 201: // SymbolsFromModuleList
        value.copy< std::vector<Import> > (other.value);
        break;

      case 247: // AlternativeTypeLists
      case 248: // RootAlternativeTypeList
      case 249: // AlternativeTypeList
        value.copy< std::vector<NamedType> > (other.value);
        break;

      case 258: // ObjectIdentifierValue
      case 259: // ObjIdComponentsList
        value.copy< std::vector<ObjectIdComponentValue> > (other.value);
        break;

      case 205: // SymbolList
        value.copy< std::vector<std::string> > (other.value);
        break;

      default:
        break;
    }

  }


  template <typename Base>
  inline
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const semantic_type& v, const location_type& l)
    : Base (t)
    , value ()
    , location (l)
  {
    (void) v;
      switch (this->type_get ())
    {
      case 209: // Assignment
      case 213: // TypeAssignment
      case 214: // ValueAssignment
        value.copy< Assignment > (v);
        break;

      case 216: // BuiltinType
        value.copy< BuiltinType > (v);
        break;

      case 246: // ChoiceType
        value.copy< ChoiceType > (v);
        break;

      case 256: // Class
        value.copy< Class > (v);
        break;

      case 242: // ComponentType
        value.copy< ComponentType > (v);
        break;

      case 239: // ComponentTypeLists
      case 240: // RootComponentTypeList
      case 241: // ComponentTypeList
        value.copy< ComponentTypeList > (v);
        break;

      case 210: // DefinedType
        value.copy< DefinedType > (v);
        break;

      case 228: // EnumeratedType
      case 229: // Enumerations
      case 230: // Enumeration
        value.copy< EnumeratedType > (v);
        break;

      case 231: // EnumerationItem
        value.copy< EnumerationValue > (v);
        break;

      case 202: // SymbolsFromModule
        value.copy< Import > (v);
        break;

      case 196: // ModuleBody
        value.copy< Module > (v);
        break;

      case 225: // NamedNumber
        value.copy< NamedNumber > (v);
        break;

      case 217: // NamedType
        value.copy< NamedType > (v);
        break;

      case 260: // ObjIdComponents
      case 261: // NameForm
      case 262: // NumberForm
      case 263: // NameAndNumberForm
        value.copy< ObjectIdComponentValue > (v);
        break;

      case 251: // PrefixedType
        value.copy< PrefixedType > (v);
        break;

      case 243: // SequenceOfType
        value.copy< SequenceOfType > (v);
        break;

      case 238: // SequenceType
        value.copy< SequenceType > (v);
        break;

      case 245: // SetOfType
        value.copy< SetOfType > (v);
        break;

      case 244: // SetType
        value.copy< SetType > (v);
        break;

      case 253: // Tag
        value.copy< Tag > (v);
        break;

      case 252: // TaggedType
        value.copy< TaggedType > (v);
        break;

      case 194: // TagDefault
        value.copy< TaggingMode > (v);
        break;

      case 215: // Type
        value.copy< Type > (v);
        break;

      case 218: // Value
      case 219: // BuiltinValue
        value.copy< Value > (v);
        break;

      case 5: // realnumber
        value.copy< double > (v);
        break;

      case 255: // ClassNumber
        value.copy< int > (v);
        break;

      case 4: // number
      case 211: // DefinedValue
      case 226: // SignedNumber
        value.copy< long long > (v);
        break;

      case 150: // GENERIC_IDENTIFIER_UPPERCASE
      case 151: // GENERIC_IDENTIFIER_LOWERCASE
      case 185: // ModuleIdentifier
      case 203: // GlobalModuleReference
      case 206: // Symbol
      case 207: // Reference
      case 329: // typereference
      case 330: // identifier
      case 331: // valuereference
      case 332: // modulereference
        value.copy< std::string > (v);
        break;

      case 208: // AssignmentList
        value.copy< std::vector<Assignment> > (v);
        break;

      case 197: // Exports
        value.copy< std::vector<Export> > (v);
        break;

      case 199: // Imports
      case 200: // SymbolsImported
      case 201: // SymbolsFromModuleList
        value.copy< std::vector<Import> > (v);
        break;

      case 247: // AlternativeTypeLists
      case 248: // RootAlternativeTypeList
      case 249: // AlternativeTypeList
        value.copy< std::vector<NamedType> > (v);
        break;

      case 258: // ObjectIdentifierValue
      case 259: // ObjIdComponentsList
        value.copy< std::vector<ObjectIdComponentValue> > (v);
        break;

      case 205: // SymbolList
        value.copy< std::vector<std::string> > (v);
        break;

      default:
        break;
    }
}


  // Implementation of basic_symbol constructor for each type.

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const location_type& l)
    : Base (t)
    , value ()
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Assignment v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const BuiltinType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ChoiceType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Class v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ComponentType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ComponentTypeList v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const DefinedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const EnumeratedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const EnumerationValue v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Import v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Module v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const NamedNumber v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const NamedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ObjectIdComponentValue v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const PrefixedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const SequenceOfType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const SequenceType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const SetOfType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const SetType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Tag v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const TaggedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const TaggingMode v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Type v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Value v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const double v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const int v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const long long v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::string v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<Assignment> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<Export> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<Import> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<NamedType> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<ObjectIdComponentValue> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<std::string> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}


  template <typename Base>
  inline
  asn1_parser::basic_symbol<Base>::~basic_symbol ()
  {
    clear ();
  }

  template <typename Base>
  inline
  void
  asn1_parser::basic_symbol<Base>::clear ()
  {
    // User destructor.
    symbol_number_type yytype = this->type_get ();
    basic_symbol<Base>& yysym = *this;
    (void) yysym;
    switch (yytype)
    {
   default:
      break;
    }

    // Type destructor.
    switch (yytype)
    {
      case 209: // Assignment
      case 213: // TypeAssignment
      case 214: // ValueAssignment
        value.template destroy< Assignment > ();
        break;

      case 216: // BuiltinType
        value.template destroy< BuiltinType > ();
        break;

      case 246: // ChoiceType
        value.template destroy< ChoiceType > ();
        break;

      case 256: // Class
        value.template destroy< Class > ();
        break;

      case 242: // ComponentType
        value.template destroy< ComponentType > ();
        break;

      case 239: // ComponentTypeLists
      case 240: // RootComponentTypeList
      case 241: // ComponentTypeList
        value.template destroy< ComponentTypeList > ();
        break;

      case 210: // DefinedType
        value.template destroy< DefinedType > ();
        break;

      case 228: // EnumeratedType
      case 229: // Enumerations
      case 230: // Enumeration
        value.template destroy< EnumeratedType > ();
        break;

      case 231: // EnumerationItem
        value.template destroy< EnumerationValue > ();
        break;

      case 202: // SymbolsFromModule
        value.template destroy< Import > ();
        break;

      case 196: // ModuleBody
        value.template destroy< Module > ();
        break;

      case 225: // NamedNumber
        value.template destroy< NamedNumber > ();
        break;

      case 217: // NamedType
        value.template destroy< NamedType > ();
        break;

      case 260: // ObjIdComponents
      case 261: // NameForm
      case 262: // NumberForm
      case 263: // NameAndNumberForm
        value.template destroy< ObjectIdComponentValue > ();
        break;

      case 251: // PrefixedType
        value.template destroy< PrefixedType > ();
        break;

      case 243: // SequenceOfType
        value.template destroy< SequenceOfType > ();
        break;

      case 238: // SequenceType
        value.template destroy< SequenceType > ();
        break;

      case 245: // SetOfType
        value.template destroy< SetOfType > ();
        break;

      case 244: // SetType
        value.template destroy< SetType > ();
        break;

      case 253: // Tag
        value.template destroy< Tag > ();
        break;

      case 252: // TaggedType
        value.template destroy< TaggedType > ();
        break;

      case 194: // TagDefault
        value.template destroy< TaggingMode > ();
        break;

      case 215: // Type
        value.template destroy< Type > ();
        break;

      case 218: // Value
      case 219: // BuiltinValue
        value.template destroy< Value > ();
        break;

      case 5: // realnumber
        value.template destroy< double > ();
        break;

      case 255: // ClassNumber
        value.template destroy< int > ();
        break;

      case 4: // number
      case 211: // DefinedValue
      case 226: // SignedNumber
        value.template destroy< long long > ();
        break;

      case 150: // GENERIC_IDENTIFIER_UPPERCASE
      case 151: // GENERIC_IDENTIFIER_LOWERCASE
      case 185: // ModuleIdentifier
      case 203: // GlobalModuleReference
      case 206: // Symbol
      case 207: // Reference
      case 329: // typereference
      case 330: // identifier
      case 331: // valuereference
      case 332: // modulereference
        value.template destroy< std::string > ();
        break;

      case 208: // AssignmentList
        value.template destroy< std::vector<Assignment> > ();
        break;

      case 197: // Exports
        value.template destroy< std::vector<Export> > ();
        break;

      case 199: // Imports
      case 200: // SymbolsImported
      case 201: // SymbolsFromModuleList
        value.template destroy< std::vector<Import> > ();
        break;

      case 247: // AlternativeTypeLists
      case 248: // RootAlternativeTypeList
      case 249: // AlternativeTypeList
        value.template destroy< std::vector<NamedType> > ();
        break;

      case 258: // ObjectIdentifierValue
      case 259: // ObjIdComponentsList
        value.template destroy< std::vector<ObjectIdComponentValue> > ();
        break;

      case 205: // SymbolList
        value.template destroy< std::vector<std::string> > ();
        break;

      default:
        break;
    }

    Base::clear ();
  }

  template <typename Base>
  inline
  bool
  asn1_parser::basic_symbol<Base>::empty () const
  {
    return Base::type_get () == empty_symbol;
  }

  template <typename Base>
  inline
  void
  asn1_parser::basic_symbol<Base>::move (basic_symbol& s)
  {
    super_type::move(s);
      switch (this->type_get ())
    {
      case 209: // Assignment
      case 213: // TypeAssignment
      case 214: // ValueAssignment
        value.move< Assignment > (s.value);
        break;

      case 216: // BuiltinType
        value.move< BuiltinType > (s.value);
        break;

      case 246: // ChoiceType
        value.move< ChoiceType > (s.value);
        break;

      case 256: // Class
        value.move< Class > (s.value);
        break;

      case 242: // ComponentType
        value.move< ComponentType > (s.value);
        break;

      case 239: // ComponentTypeLists
      case 240: // RootComponentTypeList
      case 241: // ComponentTypeList
        value.move< ComponentTypeList > (s.value);
        break;

      case 210: // DefinedType
        value.move< DefinedType > (s.value);
        break;

      case 228: // EnumeratedType
      case 229: // Enumerations
      case 230: // Enumeration
        value.move< EnumeratedType > (s.value);
        break;

      case 231: // EnumerationItem
        value.move< EnumerationValue > (s.value);
        break;

      case 202: // SymbolsFromModule
        value.move< Import > (s.value);
        break;

      case 196: // ModuleBody
        value.move< Module > (s.value);
        break;

      case 225: // NamedNumber
        value.move< NamedNumber > (s.value);
        break;

      case 217: // NamedType
        value.move< NamedType > (s.value);
        break;

      case 260: // ObjIdComponents
      case 261: // NameForm
      case 262: // NumberForm
      case 263: // NameAndNumberForm
        value.move< ObjectIdComponentValue > (s.value);
        break;

      case 251: // PrefixedType
        value.move< PrefixedType > (s.value);
        break;

      case 243: // SequenceOfType
        value.move< SequenceOfType > (s.value);
        break;

      case 238: // SequenceType
        value.move< SequenceType > (s.value);
        break;

      case 245: // SetOfType
        value.move< SetOfType > (s.value);
        break;

      case 244: // SetType
        value.move< SetType > (s.value);
        break;

      case 253: // Tag
        value.move< Tag > (s.value);
        break;

      case 252: // TaggedType
        value.move< TaggedType > (s.value);
        break;

      case 194: // TagDefault
        value.move< TaggingMode > (s.value);
        break;

      case 215: // Type
        value.move< Type > (s.value);
        break;

      case 218: // Value
      case 219: // BuiltinValue
        value.move< Value > (s.value);
        break;

      case 5: // realnumber
        value.move< double > (s.value);
        break;

      case 255: // ClassNumber
        value.move< int > (s.value);
        break;

      case 4: // number
      case 211: // DefinedValue
      case 226: // SignedNumber
        value.move< long long > (s.value);
        break;

      case 150: // GENERIC_IDENTIFIER_UPPERCASE
      case 151: // GENERIC_IDENTIFIER_LOWERCASE
      case 185: // ModuleIdentifier
      case 203: // GlobalModuleReference
      case 206: // Symbol
      case 207: // Reference
      case 329: // typereference
      case 330: // identifier
      case 331: // valuereference
      case 332: // modulereference
        value.move< std::string > (s.value);
        break;

      case 208: // AssignmentList
        value.move< std::vector<Assignment> > (s.value);
        break;

      case 197: // Exports
        value.move< std::vector<Export> > (s.value);
        break;

      case 199: // Imports
      case 200: // SymbolsImported
      case 201: // SymbolsFromModuleList
        value.move< std::vector<Import> > (s.value);
        break;

      case 247: // AlternativeTypeLists
      case 248: // RootAlternativeTypeList
      case 249: // AlternativeTypeList
        value.move< std::vector<NamedType> > (s.value);
        break;

      case 258: // ObjectIdentifierValue
      case 259: // ObjIdComponentsList
        value.move< std::vector<ObjectIdComponentValue> > (s.value);
        break;

      case 205: // SymbolList
        value.move< std::vector<std::string> > (s.value);
        break;

      default:
        break;
    }

    location = s.location;
  }

  // by_type.
  inline
  asn1_parser::by_type::by_type ()
    : type (empty_symbol)
  {}

  inline
  asn1_parser::by_type::by_type (const by_type& other)
    : type (other.type)
  {}

  inline
  asn1_parser::by_type::by_type (token_type t)
    : type (yytranslate_ (t))
  {}

  inline
  void
  asn1_parser::by_type::clear ()
  {
    type = empty_symbol;
  }

  inline
  void
  asn1_parser::by_type::move (by_type& that)
  {
    type = that.type;
    that.clear ();
  }

  inline
  int
  asn1_parser::by_type::type_get () const
  {
    return type;
  }

  inline
  asn1_parser::token_type
  asn1_parser::by_type::token () const
  {
    // YYTOKNUM[NUM] -- (External) token number corresponding to the
    // (internal) symbol number NUM (which must be that of a token).  */
    static
    const unsigned short int
    yytoken_number_[] =
    {
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409
    };
    return static_cast<token_type> (yytoken_number_[type]);
  }
  // Implementation of make_symbol for each symbol type.
  asn1_parser::symbol_type
  asn1_parser::make_END_OF_FILE (const location_type& l)
  {
    return symbol_type (token::END_OF_FILE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_comment (const location_type& l)
  {
    return symbol_type (token::comment, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_number (const long long& v, const location_type& l)
  {
    return symbol_type (token::number, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_realnumber (const double& v, const location_type& l)
  {
    return symbol_type (token::realnumber, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_bstring (const location_type& l)
  {
    return symbol_type (token::bstring, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmlbstring (const location_type& l)
  {
    return symbol_type (token::xmlbstring, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_hstring (const location_type& l)
  {
    return symbol_type (token::hstring, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmlhstring (const location_type& l)
  {
    return symbol_type (token::xmlhstring, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_cstring (const location_type& l)
  {
    return symbol_type (token::cstring, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmlcstring (const location_type& l)
  {
    return symbol_type (token::xmlcstring, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_simplestring (const location_type& l)
  {
    return symbol_type (token::simplestring, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmltstring (const location_type& l)
  {
    return symbol_type (token::xmltstring, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_psname (const location_type& l)
  {
    return symbol_type (token::psname, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_encodingreference (const location_type& l)
  {
    return symbol_type (token::encodingreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_integerUnicodeLabel (const location_type& l)
  {
    return symbol_type (token::integerUnicodeLabel, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_tstring (const location_type& l)
  {
    return symbol_type (token::tstring, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_objectclassreference (const location_type& l)
  {
    return symbol_type (token::objectclassreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_objectreference (const location_type& l)
  {
    return symbol_type (token::objectreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_objectsetreference (const location_type& l)
  {
    return symbol_type (token::objectsetreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_typefieldreference (const location_type& l)
  {
    return symbol_type (token::typefieldreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_valuefieldreference (const location_type& l)
  {
    return symbol_type (token::valuefieldreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_valuesetfieldreference (const location_type& l)
  {
    return symbol_type (token::valuesetfieldreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_objectfieldreference (const location_type& l)
  {
    return symbol_type (token::objectfieldreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_objectsetfieldreference (const location_type& l)
  {
    return symbol_type (token::objectsetfieldreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_word (const location_type& l)
  {
    return symbol_type (token::word, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ABSENT (const location_type& l)
  {
    return symbol_type (token::ABSENT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ABSTRACT_SYNTAX (const location_type& l)
  {
    return symbol_type (token::ABSTRACT_SYNTAX, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ALL (const location_type& l)
  {
    return symbol_type (token::ALL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_APPLICATION (const location_type& l)
  {
    return symbol_type (token::APPLICATION, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ASN_NULL (const location_type& l)
  {
    return symbol_type (token::ASN_NULL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_AUTOMATIC (const location_type& l)
  {
    return symbol_type (token::AUTOMATIC, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BEGIN (const location_type& l)
  {
    return symbol_type (token::BEGIN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BIT (const location_type& l)
  {
    return symbol_type (token::BIT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BMPString (const location_type& l)
  {
    return symbol_type (token::BMPString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BOOLEAN (const location_type& l)
  {
    return symbol_type (token::BOOLEAN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BY (const location_type& l)
  {
    return symbol_type (token::BY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CHARACTER (const location_type& l)
  {
    return symbol_type (token::CHARACTER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CHOICE (const location_type& l)
  {
    return symbol_type (token::CHOICE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CLASS (const location_type& l)
  {
    return symbol_type (token::CLASS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_COMPONENT (const location_type& l)
  {
    return symbol_type (token::COMPONENT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_COMPONENTS (const location_type& l)
  {
    return symbol_type (token::COMPONENTS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CONSTRAINED (const location_type& l)
  {
    return symbol_type (token::CONSTRAINED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CONTAINING (const location_type& l)
  {
    return symbol_type (token::CONTAINING, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DATE (const location_type& l)
  {
    return symbol_type (token::DATE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DATE_TIME (const location_type& l)
  {
    return symbol_type (token::DATE_TIME, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DEFAULT (const location_type& l)
  {
    return symbol_type (token::DEFAULT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DEFINITIONS (const location_type& l)
  {
    return symbol_type (token::DEFINITIONS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DURATION (const location_type& l)
  {
    return symbol_type (token::DURATION, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EMBEDDED (const location_type& l)
  {
    return symbol_type (token::EMBEDDED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ENCODED (const location_type& l)
  {
    return symbol_type (token::ENCODED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ENCODING_CONTROL (const location_type& l)
  {
    return symbol_type (token::ENCODING_CONTROL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_END (const location_type& l)
  {
    return symbol_type (token::END, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ENUMERATED (const location_type& l)
  {
    return symbol_type (token::ENUMERATED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXCEPT (const location_type& l)
  {
    return symbol_type (token::EXCEPT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXPLICIT (const location_type& l)
  {
    return symbol_type (token::EXPLICIT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXPORTS (const location_type& l)
  {
    return symbol_type (token::EXPORTS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXTENSIBILITY (const location_type& l)
  {
    return symbol_type (token::EXTENSIBILITY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXTERNAL (const location_type& l)
  {
    return symbol_type (token::EXTERNAL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_FALSE (const location_type& l)
  {
    return symbol_type (token::FALSE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_FROM (const location_type& l)
  {
    return symbol_type (token::FROM, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GeneralizedTime (const location_type& l)
  {
    return symbol_type (token::GeneralizedTime, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GeneralString (const location_type& l)
  {
    return symbol_type (token::GeneralString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GraphicString (const location_type& l)
  {
    return symbol_type (token::GraphicString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IA5String (const location_type& l)
  {
    return symbol_type (token::IA5String, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IDENTIFIER (const location_type& l)
  {
    return symbol_type (token::IDENTIFIER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IMPLICIT (const location_type& l)
  {
    return symbol_type (token::IMPLICIT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IMPLIED (const location_type& l)
  {
    return symbol_type (token::IMPLIED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IMPORTS (const location_type& l)
  {
    return symbol_type (token::IMPORTS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INCLUDES (const location_type& l)
  {
    return symbol_type (token::INCLUDES, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INSTANCE (const location_type& l)
  {
    return symbol_type (token::INSTANCE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INSTRUCTIONS (const location_type& l)
  {
    return symbol_type (token::INSTRUCTIONS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INTEGER (const location_type& l)
  {
    return symbol_type (token::INTEGER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INTERSECTION (const location_type& l)
  {
    return symbol_type (token::INTERSECTION, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ISO646String (const location_type& l)
  {
    return symbol_type (token::ISO646String, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_MAX (const location_type& l)
  {
    return symbol_type (token::MAX, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_MIN (const location_type& l)
  {
    return symbol_type (token::MIN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_MINUS_INFINITY (const location_type& l)
  {
    return symbol_type (token::MINUS_INFINITY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_NOT_A_NUMBER (const location_type& l)
  {
    return symbol_type (token::NOT_A_NUMBER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_NumericString (const location_type& l)
  {
    return symbol_type (token::NumericString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OBJECT (const location_type& l)
  {
    return symbol_type (token::OBJECT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ObjectDescriptor (const location_type& l)
  {
    return symbol_type (token::ObjectDescriptor, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OCTET (const location_type& l)
  {
    return symbol_type (token::OCTET, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OF (const location_type& l)
  {
    return symbol_type (token::OF, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OID_IRI (const location_type& l)
  {
    return symbol_type (token::OID_IRI, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OPTIONAL (const location_type& l)
  {
    return symbol_type (token::OPTIONAL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PATTERN (const location_type& l)
  {
    return symbol_type (token::PATTERN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PDV (const location_type& l)
  {
    return symbol_type (token::PDV, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PLUS_INFINITY (const location_type& l)
  {
    return symbol_type (token::PLUS_INFINITY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PRESENT (const location_type& l)
  {
    return symbol_type (token::PRESENT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PrintableString (const location_type& l)
  {
    return symbol_type (token::PrintableString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PRIVATE (const location_type& l)
  {
    return symbol_type (token::PRIVATE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_REAL (const location_type& l)
  {
    return symbol_type (token::REAL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_RELATIVE_OID (const location_type& l)
  {
    return symbol_type (token::RELATIVE_OID, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_RELATIVE_OID_IRI (const location_type& l)
  {
    return symbol_type (token::RELATIVE_OID_IRI, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SEQUENCE (const location_type& l)
  {
    return symbol_type (token::SEQUENCE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SET (const location_type& l)
  {
    return symbol_type (token::SET, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SETTINGS (const location_type& l)
  {
    return symbol_type (token::SETTINGS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SIZE (const location_type& l)
  {
    return symbol_type (token::SIZE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_STRING (const location_type& l)
  {
    return symbol_type (token::STRING, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SYNTAX (const location_type& l)
  {
    return symbol_type (token::SYNTAX, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_T61String (const location_type& l)
  {
    return symbol_type (token::T61String, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TAGS (const location_type& l)
  {
    return symbol_type (token::TAGS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TeletexString (const location_type& l)
  {
    return symbol_type (token::TeletexString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TIME (const location_type& l)
  {
    return symbol_type (token::TIME, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TIME_OF_DAY (const location_type& l)
  {
    return symbol_type (token::TIME_OF_DAY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TRUE (const location_type& l)
  {
    return symbol_type (token::TRUE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TYPE_IDENTIFIER (const location_type& l)
  {
    return symbol_type (token::TYPE_IDENTIFIER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UNION (const location_type& l)
  {
    return symbol_type (token::UNION, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UNIQUE (const location_type& l)
  {
    return symbol_type (token::UNIQUE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UNIVERSAL (const location_type& l)
  {
    return symbol_type (token::UNIVERSAL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UniversalString (const location_type& l)
  {
    return symbol_type (token::UniversalString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UTCTime (const location_type& l)
  {
    return symbol_type (token::UTCTime, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UTF8String (const location_type& l)
  {
    return symbol_type (token::UTF8String, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_VideotexString (const location_type& l)
  {
    return symbol_type (token::VideotexString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_VisibleString (const location_type& l)
  {
    return symbol_type (token::VisibleString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_WITH (const location_type& l)
  {
    return symbol_type (token::WITH, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DEFINED_AS (const location_type& l)
  {
    return symbol_type (token::DEFINED_AS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ELIPSIS (const location_type& l)
  {
    return symbol_type (token::ELIPSIS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_RANGE (const location_type& l)
  {
    return symbol_type (token::RANGE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OPEN_BRACE (const location_type& l)
  {
    return symbol_type (token::OPEN_BRACE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CLOSE_BRACE (const location_type& l)
  {
    return symbol_type (token::CLOSE_BRACE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OPEN_PARENTHESIS (const location_type& l)
  {
    return symbol_type (token::OPEN_PARENTHESIS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CLOSE_PARENTHESIS (const location_type& l)
  {
    return symbol_type (token::CLOSE_PARENTHESIS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OPEN_SQUARE_BRACKET (const location_type& l)
  {
    return symbol_type (token::OPEN_SQUARE_BRACKET, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CLOSE_SQUARE_BRACKET (const location_type& l)
  {
    return symbol_type (token::CLOSE_SQUARE_BRACKET, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_LESS_THAN (const location_type& l)
  {
    return symbol_type (token::LESS_THAN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GREATER_THAN (const location_type& l)
  {
    return symbol_type (token::GREATER_THAN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXCLAMATION_MARK (const location_type& l)
  {
    return symbol_type (token::EXCLAMATION_MARK, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_QUOTATION_MARK (const location_type& l)
  {
    return symbol_type (token::QUOTATION_MARK, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_AMPERSAND (const location_type& l)
  {
    return symbol_type (token::AMPERSAND, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_APOSTROPHE (const location_type& l)
  {
    return symbol_type (token::APOSTROPHE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ASTERISK (const location_type& l)
  {
    return symbol_type (token::ASTERISK, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_COMMA (const location_type& l)
  {
    return symbol_type (token::COMMA, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_FULL_STOP (const location_type& l)
  {
    return symbol_type (token::FULL_STOP, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_HYPHEN_MINUS (const location_type& l)
  {
    return symbol_type (token::HYPHEN_MINUS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SOLIDUS (const location_type& l)
  {
    return symbol_type (token::SOLIDUS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_COLON (const location_type& l)
  {
    return symbol_type (token::COLON, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SEMICOLON (const location_type& l)
  {
    return symbol_type (token::SEMICOLON, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EQUALS_SIGN (const location_type& l)
  {
    return symbol_type (token::EQUALS_SIGN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_AT (const location_type& l)
  {
    return symbol_type (token::AT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_VERTICAL_LINE (const location_type& l)
  {
    return symbol_type (token::VERTICAL_LINE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ACCENT (const location_type& l)
  {
    return symbol_type (token::ACCENT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PLUS (const location_type& l)
  {
    return symbol_type (token::PLUS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_STAR (const location_type& l)
  {
    return symbol_type (token::STAR, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_QUESTION_MARK (const location_type& l)
  {
    return symbol_type (token::QUESTION_MARK, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GENERIC_IDENTIFIER_UPPERCASE (const std::string& v, const location_type& l)
  {
    return symbol_type (token::GENERIC_IDENTIFIER_UPPERCASE, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GENERIC_IDENTIFIER_LOWERCASE (const std::string& v, const location_type& l)
  {
    return symbol_type (token::GENERIC_IDENTIFIER_LOWERCASE, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GENERIC_INTEGER (const location_type& l)
  {
    return symbol_type (token::GENERIC_INTEGER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmlasn1typename (const location_type& l)
  {
    return symbol_type (token::xmlasn1typename, l);
  }



} // yy
#line 3971 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:408





// User implementation prologue.

#line 3979 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:412
// Unqualified %code blocks.
#line 15 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:413

    struct Context
    {
        const char* cursor;
        yy::location location;

        Asn1Tree asn1_tree;
    };
    void yy::asn1_parser::error(const location_type& l, const std::string& m)
    {
        std::cerr << (l.begin.filename ? l.begin.filename->c_str() : "(undefined)");
        std::cerr << ':' << l.begin.line << ':' << l.begin.column << '-' << l.end.column << ": " << m << '\n';
    }

    namespace yy { asn1_parser::symbol_type yylex(Context& c); }

#line 3998 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:413


#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> // FIXME: INFRINGES ON USER NAME SPACE.
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K].location)
/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

# ifndef YYLLOC_DEFAULT
#  define YYLLOC_DEFAULT(Current, Rhs, N)                               \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).begin  = YYRHSLOC (Rhs, 1).begin;                   \
          (Current).end    = YYRHSLOC (Rhs, N).end;                     \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).begin = (Current).end = YYRHSLOC (Rhs, 0).end;      \
        }                                                               \
    while (/*CONSTCOND*/ false)
# endif


// Suppress unused-variable warnings by "using" E.
#define YYUSE(E) ((void) (E))

// Enable debugging if requested.
#if YYDEBUG

// A pseudo ostream that takes yydebug_ into account.
# define YYCDEBUG if (yydebug_) (*yycdebug_)

# define YY_SYMBOL_PRINT(Title, Symbol)         \
  do {                                          \
    if (yydebug_)                               \
    {                                           \
      *yycdebug_ << Title << ' ';               \
      yy_print_ (*yycdebug_, Symbol);           \
      *yycdebug_ << std::endl;                  \
    }                                           \
  } while (false)

# define YY_REDUCE_PRINT(Rule)          \
  do {                                  \
    if (yydebug_)                       \
      yy_reduce_print_ (Rule);          \
  } while (false)

# define YY_STACK_PRINT()               \
  do {                                  \
    if (yydebug_)                       \
      yystack_print_ ();                \
  } while (false)

#else // !YYDEBUG

# define YYCDEBUG if (false) std::cerr
# define YY_SYMBOL_PRINT(Title, Symbol)  YYUSE(Symbol)
# define YY_REDUCE_PRINT(Rule)           static_cast<void>(0)
# define YY_STACK_PRINT()                static_cast<void>(0)

#endif // !YYDEBUG

#define yyerrok         (yyerrstatus_ = 0)
#define yyclearin       (yyla.clear ())

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYRECOVERING()  (!!yyerrstatus_)


namespace yy {
#line 4084 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:479

  /* Return YYSTR after stripping away unnecessary quotes and
     backslashes, so that it's suitable for yyerror.  The heuristic is
     that double-quoting is unnecessary unless the string contains an
     apostrophe, a comma, or backslash (other than backslash-backslash).
     YYSTR is taken from yytname.  */
  std::string
  asn1_parser::yytnamerr_ (const char *yystr)
  {
    if (*yystr == '"')
      {
        std::string yyr = "";
        char const *yyp = yystr;

        for (;;)
          switch (*++yyp)
            {
            case '\'':
            case ',':
              goto do_not_strip_quotes;

            case '\\':
              if (*++yyp != '\\')
                goto do_not_strip_quotes;
              // Fall through.
            default:
              yyr += *yyp;
              break;

            case '"':
              return yyr;
            }
      do_not_strip_quotes: ;
      }

    return yystr;
  }


  /// Build a parser object.
  asn1_parser::asn1_parser (Context& context_yyarg)
    :
#if YYDEBUG
      yydebug_ (false),
      yycdebug_ (&std::cerr),
#endif
      context (context_yyarg)
  {}

  asn1_parser::~asn1_parser ()
  {}


  /*---------------.
  | Symbol types.  |
  `---------------*/



  // by_state.
  inline
  asn1_parser::by_state::by_state ()
    : state (empty_state)
  {}

  inline
  asn1_parser::by_state::by_state (const by_state& other)
    : state (other.state)
  {}

  inline
  void
  asn1_parser::by_state::clear ()
  {
    state = empty_state;
  }

  inline
  void
  asn1_parser::by_state::move (by_state& that)
  {
    state = that.state;
    that.clear ();
  }

  inline
  asn1_parser::by_state::by_state (state_type s)
    : state (s)
  {}

  inline
  asn1_parser::symbol_number_type
  asn1_parser::by_state::type_get () const
  {
    if (state == empty_state)
      return empty_symbol;
    else
      return yystos_[state];
  }

  inline
  asn1_parser::stack_symbol_type::stack_symbol_type ()
  {}


  inline
  asn1_parser::stack_symbol_type::stack_symbol_type (state_type s, symbol_type& that)
    : super_type (s, that.location)
  {
      switch (that.type_get ())
    {
      case 209: // Assignment
      case 213: // TypeAssignment
      case 214: // ValueAssignment
        value.move< Assignment > (that.value);
        break;

      case 216: // BuiltinType
        value.move< BuiltinType > (that.value);
        break;

      case 246: // ChoiceType
        value.move< ChoiceType > (that.value);
        break;

      case 256: // Class
        value.move< Class > (that.value);
        break;

      case 242: // ComponentType
        value.move< ComponentType > (that.value);
        break;

      case 239: // ComponentTypeLists
      case 240: // RootComponentTypeList
      case 241: // ComponentTypeList
        value.move< ComponentTypeList > (that.value);
        break;

      case 210: // DefinedType
        value.move< DefinedType > (that.value);
        break;

      case 228: // EnumeratedType
      case 229: // Enumerations
      case 230: // Enumeration
        value.move< EnumeratedType > (that.value);
        break;

      case 231: // EnumerationItem
        value.move< EnumerationValue > (that.value);
        break;

      case 202: // SymbolsFromModule
        value.move< Import > (that.value);
        break;

      case 196: // ModuleBody
        value.move< Module > (that.value);
        break;

      case 225: // NamedNumber
        value.move< NamedNumber > (that.value);
        break;

      case 217: // NamedType
        value.move< NamedType > (that.value);
        break;

      case 260: // ObjIdComponents
      case 261: // NameForm
      case 262: // NumberForm
      case 263: // NameAndNumberForm
        value.move< ObjectIdComponentValue > (that.value);
        break;

      case 251: // PrefixedType
        value.move< PrefixedType > (that.value);
        break;

      case 243: // SequenceOfType
        value.move< SequenceOfType > (that.value);
        break;

      case 238: // SequenceType
        value.move< SequenceType > (that.value);
        break;

      case 245: // SetOfType
        value.move< SetOfType > (that.value);
        break;

      case 244: // SetType
        value.move< SetType > (that.value);
        break;

      case 253: // Tag
        value.move< Tag > (that.value);
        break;

      case 252: // TaggedType
        value.move< TaggedType > (that.value);
        break;

      case 194: // TagDefault
        value.move< TaggingMode > (that.value);
        break;

      case 215: // Type
        value.move< Type > (that.value);
        break;

      case 218: // Value
      case 219: // BuiltinValue
        value.move< Value > (that.value);
        break;

      case 5: // realnumber
        value.move< double > (that.value);
        break;

      case 255: // ClassNumber
        value.move< int > (that.value);
        break;

      case 4: // number
      case 211: // DefinedValue
      case 226: // SignedNumber
        value.move< long long > (that.value);
        break;

      case 150: // GENERIC_IDENTIFIER_UPPERCASE
      case 151: // GENERIC_IDENTIFIER_LOWERCASE
      case 185: // ModuleIdentifier
      case 203: // GlobalModuleReference
      case 206: // Symbol
      case 207: // Reference
      case 329: // typereference
      case 330: // identifier
      case 331: // valuereference
      case 332: // modulereference
        value.move< std::string > (that.value);
        break;

      case 208: // AssignmentList
        value.move< std::vector<Assignment> > (that.value);
        break;

      case 197: // Exports
        value.move< std::vector<Export> > (that.value);
        break;

      case 199: // Imports
      case 200: // SymbolsImported
      case 201: // SymbolsFromModuleList
        value.move< std::vector<Import> > (that.value);
        break;

      case 247: // AlternativeTypeLists
      case 248: // RootAlternativeTypeList
      case 249: // AlternativeTypeList
        value.move< std::vector<NamedType> > (that.value);
        break;

      case 258: // ObjectIdentifierValue
      case 259: // ObjIdComponentsList
        value.move< std::vector<ObjectIdComponentValue> > (that.value);
        break;

      case 205: // SymbolList
        value.move< std::vector<std::string> > (that.value);
        break;

      default:
        break;
    }

    // that is emptied.
    that.type = empty_symbol;
  }

  inline
  asn1_parser::stack_symbol_type&
  asn1_parser::stack_symbol_type::operator= (const stack_symbol_type& that)
  {
    state = that.state;
      switch (that.type_get ())
    {
      case 209: // Assignment
      case 213: // TypeAssignment
      case 214: // ValueAssignment
        value.copy< Assignment > (that.value);
        break;

      case 216: // BuiltinType
        value.copy< BuiltinType > (that.value);
        break;

      case 246: // ChoiceType
        value.copy< ChoiceType > (that.value);
        break;

      case 256: // Class
        value.copy< Class > (that.value);
        break;

      case 242: // ComponentType
        value.copy< ComponentType > (that.value);
        break;

      case 239: // ComponentTypeLists
      case 240: // RootComponentTypeList
      case 241: // ComponentTypeList
        value.copy< ComponentTypeList > (that.value);
        break;

      case 210: // DefinedType
        value.copy< DefinedType > (that.value);
        break;

      case 228: // EnumeratedType
      case 229: // Enumerations
      case 230: // Enumeration
        value.copy< EnumeratedType > (that.value);
        break;

      case 231: // EnumerationItem
        value.copy< EnumerationValue > (that.value);
        break;

      case 202: // SymbolsFromModule
        value.copy< Import > (that.value);
        break;

      case 196: // ModuleBody
        value.copy< Module > (that.value);
        break;

      case 225: // NamedNumber
        value.copy< NamedNumber > (that.value);
        break;

      case 217: // NamedType
        value.copy< NamedType > (that.value);
        break;

      case 260: // ObjIdComponents
      case 261: // NameForm
      case 262: // NumberForm
      case 263: // NameAndNumberForm
        value.copy< ObjectIdComponentValue > (that.value);
        break;

      case 251: // PrefixedType
        value.copy< PrefixedType > (that.value);
        break;

      case 243: // SequenceOfType
        value.copy< SequenceOfType > (that.value);
        break;

      case 238: // SequenceType
        value.copy< SequenceType > (that.value);
        break;

      case 245: // SetOfType
        value.copy< SetOfType > (that.value);
        break;

      case 244: // SetType
        value.copy< SetType > (that.value);
        break;

      case 253: // Tag
        value.copy< Tag > (that.value);
        break;

      case 252: // TaggedType
        value.copy< TaggedType > (that.value);
        break;

      case 194: // TagDefault
        value.copy< TaggingMode > (that.value);
        break;

      case 215: // Type
        value.copy< Type > (that.value);
        break;

      case 218: // Value
      case 219: // BuiltinValue
        value.copy< Value > (that.value);
        break;

      case 5: // realnumber
        value.copy< double > (that.value);
        break;

      case 255: // ClassNumber
        value.copy< int > (that.value);
        break;

      case 4: // number
      case 211: // DefinedValue
      case 226: // SignedNumber
        value.copy< long long > (that.value);
        break;

      case 150: // GENERIC_IDENTIFIER_UPPERCASE
      case 151: // GENERIC_IDENTIFIER_LOWERCASE
      case 185: // ModuleIdentifier
      case 203: // GlobalModuleReference
      case 206: // Symbol
      case 207: // Reference
      case 329: // typereference
      case 330: // identifier
      case 331: // valuereference
      case 332: // modulereference
        value.copy< std::string > (that.value);
        break;

      case 208: // AssignmentList
        value.copy< std::vector<Assignment> > (that.value);
        break;

      case 197: // Exports
        value.copy< std::vector<Export> > (that.value);
        break;

      case 199: // Imports
      case 200: // SymbolsImported
      case 201: // SymbolsFromModuleList
        value.copy< std::vector<Import> > (that.value);
        break;

      case 247: // AlternativeTypeLists
      case 248: // RootAlternativeTypeList
      case 249: // AlternativeTypeList
        value.copy< std::vector<NamedType> > (that.value);
        break;

      case 258: // ObjectIdentifierValue
      case 259: // ObjIdComponentsList
        value.copy< std::vector<ObjectIdComponentValue> > (that.value);
        break;

      case 205: // SymbolList
        value.copy< std::vector<std::string> > (that.value);
        break;

      default:
        break;
    }

    location = that.location;
    return *this;
  }


  template <typename Base>
  inline
  void
  asn1_parser::yy_destroy_ (const char* yymsg, basic_symbol<Base>& yysym) const
  {
    if (yymsg)
      YY_SYMBOL_PRINT (yymsg, yysym);
  }

#if YYDEBUG
  template <typename Base>
  void
  asn1_parser::yy_print_ (std::ostream& yyo,
                                     const basic_symbol<Base>& yysym) const
  {
    std::ostream& yyoutput = yyo;
    YYUSE (yyoutput);
    symbol_number_type yytype = yysym.type_get ();
    // Avoid a (spurious) G++ 4.8 warning about "array subscript is
    // below array bounds".
    if (yysym.empty ())
      std::abort ();
    yyo << (yytype < yyntokens_ ? "token" : "nterm")
        << ' ' << yytname_[yytype] << " ("
        << yysym.location << ": ";
    YYUSE (yytype);
    yyo << ')';
  }
#endif

  inline
  void
  asn1_parser::yypush_ (const char* m, state_type s, symbol_type& sym)
  {
    stack_symbol_type t (s, sym);
    yypush_ (m, t);
  }

  inline
  void
  asn1_parser::yypush_ (const char* m, stack_symbol_type& s)
  {
    if (m)
      YY_SYMBOL_PRINT (m, s);
    yystack_.push (s);
  }

  inline
  void
  asn1_parser::yypop_ (unsigned int n)
  {
    yystack_.pop (n);
  }

#if YYDEBUG
  std::ostream&
  asn1_parser::debug_stream () const
  {
    return *yycdebug_;
  }

  void
  asn1_parser::set_debug_stream (std::ostream& o)
  {
    yycdebug_ = &o;
  }


  asn1_parser::debug_level_type
  asn1_parser::debug_level () const
  {
    return yydebug_;
  }

  void
  asn1_parser::set_debug_level (debug_level_type l)
  {
    yydebug_ = l;
  }
#endif // YYDEBUG

  inline asn1_parser::state_type
  asn1_parser::yy_lr_goto_state_ (state_type yystate, int yysym)
  {
    int yyr = yypgoto_[yysym - yyntokens_] + yystate;
    if (0 <= yyr && yyr <= yylast_ && yycheck_[yyr] == yystate)
      return yytable_[yyr];
    else
      return yydefgoto_[yysym - yyntokens_];
  }

  inline bool
  asn1_parser::yy_pact_value_is_default_ (int yyvalue)
  {
    return yyvalue == yypact_ninf_;
  }

  inline bool
  asn1_parser::yy_table_value_is_error_ (int yyvalue)
  {
    return yyvalue == yytable_ninf_;
  }

  int
  asn1_parser::parse ()
  {
    // State.
    int yyn;
    /// Length of the RHS of the rule being reduced.
    int yylen = 0;

    // Error handling.
    int yynerrs_ = 0;
    int yyerrstatus_ = 0;

    /// The lookahead symbol.
    symbol_type yyla;

    /// The locations where the error started and ended.
    stack_symbol_type yyerror_range[3];

    /// The return value of parse ().
    int yyresult;

    // FIXME: This shoud be completely indented.  It is not yet to
    // avoid gratuitous conflicts when merging into the master branch.
    try
      {
    YYCDEBUG << "Starting parse" << std::endl;


    /* Initialize the stack.  The initial state will be set in
       yynewstate, since the latter expects the semantical and the
       location values to have been already stored, initialize these
       stacks with a primary value.  */
    yystack_.clear ();
    yypush_ (YY_NULLPTR, 0, yyla);

    // A new symbol was pushed on the stack.
  yynewstate:
    YYCDEBUG << "Entering state " << yystack_[0].state << std::endl;

    // Accept?
    if (yystack_[0].state == yyfinal_)
      goto yyacceptlab;

    goto yybackup;

    // Backup.
  yybackup:

    // Try to take a decision without lookahead.
    yyn = yypact_[yystack_[0].state];
    if (yy_pact_value_is_default_ (yyn))
      goto yydefault;

    // Read a lookahead token.
    if (yyla.empty ())
      {
        YYCDEBUG << "Reading a token: ";
        try
          {
            symbol_type yylookahead (yylex (context));
            yyla.move (yylookahead);
          }
        catch (const syntax_error& yyexc)
          {
            error (yyexc);
            goto yyerrlab1;
          }
      }
    YY_SYMBOL_PRINT ("Next token is", yyla);

    /* If the proper action on seeing token YYLA.TYPE is to reduce or
       to detect an error, take that action.  */
    yyn += yyla.type_get ();
    if (yyn < 0 || yylast_ < yyn || yycheck_[yyn] != yyla.type_get ())
      goto yydefault;

    // Reduce or error.
    yyn = yytable_[yyn];
    if (yyn <= 0)
      {
        if (yy_table_value_is_error_ (yyn))
          goto yyerrlab;
        yyn = -yyn;
        goto yyreduce;
      }

    // Count tokens shifted since error; after three, turn off error status.
    if (yyerrstatus_)
      --yyerrstatus_;

    // Shift the lookahead token.
    yypush_ ("Shifting", yyn, yyla);
    goto yynewstate;

  /*-----------------------------------------------------------.
  | yydefault -- do the default action for the current state.  |
  `-----------------------------------------------------------*/
  yydefault:
    yyn = yydefact_[yystack_[0].state];
    if (yyn == 0)
      goto yyerrlab;
    goto yyreduce;

  /*-----------------------------.
  | yyreduce -- Do a reduction.  |
  `-----------------------------*/
  yyreduce:
    yylen = yyr2_[yyn];
    {
      stack_symbol_type yylhs;
      yylhs.state = yy_lr_goto_state_(yystack_[yylen].state, yyr1_[yyn]);
      /* Variants are always initialized to an empty instance of the
         correct type. The default '$$ = $1' action is NOT applied
         when using variants.  */
        switch (yyr1_[yyn])
    {
      case 209: // Assignment
      case 213: // TypeAssignment
      case 214: // ValueAssignment
        yylhs.value.build< Assignment > ();
        break;

      case 216: // BuiltinType
        yylhs.value.build< BuiltinType > ();
        break;

      case 246: // ChoiceType
        yylhs.value.build< ChoiceType > ();
        break;

      case 256: // Class
        yylhs.value.build< Class > ();
        break;

      case 242: // ComponentType
        yylhs.value.build< ComponentType > ();
        break;

      case 239: // ComponentTypeLists
      case 240: // RootComponentTypeList
      case 241: // ComponentTypeList
        yylhs.value.build< ComponentTypeList > ();
        break;

      case 210: // DefinedType
        yylhs.value.build< DefinedType > ();
        break;

      case 228: // EnumeratedType
      case 229: // Enumerations
      case 230: // Enumeration
        yylhs.value.build< EnumeratedType > ();
        break;

      case 231: // EnumerationItem
        yylhs.value.build< EnumerationValue > ();
        break;

      case 202: // SymbolsFromModule
        yylhs.value.build< Import > ();
        break;

      case 196: // ModuleBody
        yylhs.value.build< Module > ();
        break;

      case 225: // NamedNumber
        yylhs.value.build< NamedNumber > ();
        break;

      case 217: // NamedType
        yylhs.value.build< NamedType > ();
        break;

      case 260: // ObjIdComponents
      case 261: // NameForm
      case 262: // NumberForm
      case 263: // NameAndNumberForm
        yylhs.value.build< ObjectIdComponentValue > ();
        break;

      case 251: // PrefixedType
        yylhs.value.build< PrefixedType > ();
        break;

      case 243: // SequenceOfType
        yylhs.value.build< SequenceOfType > ();
        break;

      case 238: // SequenceType
        yylhs.value.build< SequenceType > ();
        break;

      case 245: // SetOfType
        yylhs.value.build< SetOfType > ();
        break;

      case 244: // SetType
        yylhs.value.build< SetType > ();
        break;

      case 253: // Tag
        yylhs.value.build< Tag > ();
        break;

      case 252: // TaggedType
        yylhs.value.build< TaggedType > ();
        break;

      case 194: // TagDefault
        yylhs.value.build< TaggingMode > ();
        break;

      case 215: // Type
        yylhs.value.build< Type > ();
        break;

      case 218: // Value
      case 219: // BuiltinValue
        yylhs.value.build< Value > ();
        break;

      case 5: // realnumber
        yylhs.value.build< double > ();
        break;

      case 255: // ClassNumber
        yylhs.value.build< int > ();
        break;

      case 4: // number
      case 211: // DefinedValue
      case 226: // SignedNumber
        yylhs.value.build< long long > ();
        break;

      case 150: // GENERIC_IDENTIFIER_UPPERCASE
      case 151: // GENERIC_IDENTIFIER_LOWERCASE
      case 185: // ModuleIdentifier
      case 203: // GlobalModuleReference
      case 206: // Symbol
      case 207: // Reference
      case 329: // typereference
      case 330: // identifier
      case 331: // valuereference
      case 332: // modulereference
        yylhs.value.build< std::string > ();
        break;

      case 208: // AssignmentList
        yylhs.value.build< std::vector<Assignment> > ();
        break;

      case 197: // Exports
        yylhs.value.build< std::vector<Export> > ();
        break;

      case 199: // Imports
      case 200: // SymbolsImported
      case 201: // SymbolsFromModuleList
        yylhs.value.build< std::vector<Import> > ();
        break;

      case 247: // AlternativeTypeLists
      case 248: // RootAlternativeTypeList
      case 249: // AlternativeTypeList
        yylhs.value.build< std::vector<NamedType> > ();
        break;

      case 258: // ObjectIdentifierValue
      case 259: // ObjIdComponentsList
        yylhs.value.build< std::vector<ObjectIdComponentValue> > ();
        break;

      case 205: // SymbolList
        yylhs.value.build< std::vector<std::string> > ();
        break;

      default:
        break;
    }


      // Compute the default @$.
      {
        slice<stack_symbol_type, stack_type> slice (yystack_, yylen);
        YYLLOC_DEFAULT (yylhs.location, slice, yylen);
      }

      // Perform the reduction.
      YY_REDUCE_PRINT (yyn);
      try
        {
          switch (yyn)
            {
  case 4:
#line 272 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yystack_[2].value.as< Module > ().module_reference = yystack_[9].value.as< std::string > ();
      yystack_[2].value.as< Module > ().tagging_default = yystack_[6].value.as< TaggingMode > ();
      context.asn1_tree.modules.push_back(yystack_[2].value.as< Module > ()); }
#line 4947 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 50:
#line 547 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    {
    yylhs.value.as< std::string > () = yystack_[1].value.as< std::string > ();
}
#line 4955 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 65:
#line 586 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggingMode > () = TaggingMode::explicit_; }
#line 4961 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 66:
#line 588 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggingMode > () = TaggingMode::implicit; }
#line 4967 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 67:
#line 590 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggingMode > () = TaggingMode::automatic; }
#line 4973 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 68:
#line 592 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggingMode > () = TaggingMode::explicit_; }
#line 4979 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 71:
#line 600 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Module > () = Module{ {}, TaggingMode(), yystack_[2].value.as< std::vector<Export> > (), yystack_[1].value.as< std::vector<Import> > (), yystack_[0].value.as< std::vector<Assignment> > ()}; }
#line 4985 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 72:
#line 602 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { }
#line 4991 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 78:
#line 615 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Import> > () = yystack_[1].value.as< std::vector<Import> > (); }
#line 4997 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 80:
#line 620 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Import> > () = yystack_[0].value.as< std::vector<Import> > (); }
#line 5003 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 82:
#line 625 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Import> > ().push_back(yystack_[0].value.as< Import > ()); }
#line 5009 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 83:
#line 627 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Import> > () = yystack_[1].value.as< std::vector<Import> > (); yylhs.value.as< std::vector<Import> > ().push_back(yystack_[0].value.as< Import > ()); }
#line 5015 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 84:
#line 631 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Import > () = Import{ yystack_[0].value.as< std::string > (), yystack_[2].value.as< std::vector<std::string> > () }; }
#line 5021 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 85:
#line 635 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[1].value.as< std::string > (); }
#line 5027 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 89:
#line 644 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<std::string> > ().push_back(yystack_[0].value.as< std::string > ()); }
#line 5033 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 90:
#line 646 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<std::string> > () = yystack_[2].value.as< std::vector<std::string> > (); yylhs.value.as< std::vector<std::string> > ().push_back(yystack_[0].value.as< std::string > ()); }
#line 5039 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 91:
#line 650 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 5045 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 92:
#line 654 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 5051 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 93:
#line 656 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 5057 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 97:
#line 663 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Assignment> > ().push_back(yystack_[0].value.as< Assignment > ());}
#line 5063 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 98:
#line 665 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<Assignment> > () = yystack_[1].value.as< std::vector<Assignment> > (); yylhs.value.as< std::vector<Assignment> > ().push_back(yystack_[0].value.as< Assignment > ()); }
#line 5069 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 99:
#line 669 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 5075 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 100:
#line 671 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = yystack_[0].value.as< Assignment > (); }
#line 5081 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 102:
#line 681 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< DefinedType > () = DefinedType{yystack_[0].value.as< std::string > ()}; }
#line 5087 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 105:
#line 729 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[2].value.as< std::string > (), yystack_[0].value.as< Type > (), absl::nullopt, {} }; }
#line 5093 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 106:
#line 736 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[3].value.as< std::string > (), yystack_[2].value.as< Type > (), yystack_[0].value.as< Value > (), {} }; }
#line 5099 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 107:
#line 740 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = yystack_[0].value.as< BuiltinType > (); }
#line 5105 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 108:
#line 742 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = Type(); }
#line 5111 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 109:
#line 744 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = yystack_[0].value.as< DefinedType > (); }
#line 5117 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 110:
#line 746 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { throw std::runtime_error("Not handled - SelectionType"); }
#line 5123 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 111:
#line 748 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { throw std::runtime_error("Not handled - TypeFromObject"); }
#line 5129 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 112:
#line 752 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = BitStringType(); }
#line 5135 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 113:
#line 753 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = BooleanType(); }
#line 5141 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 114:
#line 754 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = CharacterStringType(); }
#line 5147 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 115:
#line 755 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< ChoiceType > (); }
#line 5153 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 116:
#line 756 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = DateType(); }
#line 5159 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 117:
#line 757 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = DateTimeType(); }
#line 5165 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 118:
#line 758 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = DurationType(); }
#line 5171 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 119:
#line 759 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = EmbeddedPDVType(); }
#line 5177 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 120:
#line 760 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< EnumeratedType > (); }
#line 5183 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 121:
#line 761 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = ExternalType(); }
#line 5189 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 122:
#line 762 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = GeneralizedTimeType(); }
#line 5195 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 123:
#line 763 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = InstanceOfType(); }
#line 5201 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 124:
#line 764 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = IntegerType(); }
#line 5207 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 125:
#line 765 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = IRIType(); }
#line 5213 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 126:
#line 766 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = NullType(); }
#line 5219 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 127:
#line 767 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = ObjectClassFieldType(); }
#line 5225 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 128:
#line 768 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = ObjectDescriptorType(); }
#line 5231 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 129:
#line 769 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = ObjectIdentifierType(); }
#line 5237 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 130:
#line 770 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = OctetStringType(); }
#line 5243 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 131:
#line 771 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = RealType(); }
#line 5249 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 132:
#line 772 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = RelativeIRIType(); }
#line 5255 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 133:
#line 773 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = RelativeOIDType(); }
#line 5261 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 134:
#line 774 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< SequenceType > (); }
#line 5267 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 135:
#line 775 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< SequenceOfType > (); }
#line 5273 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 136:
#line 776 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< SetType > (); }
#line 5279 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 137:
#line 777 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< SetOfType > (); }
#line 5285 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 138:
#line 778 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< PrefixedType > (); }
#line 5291 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 139:
#line 779 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = TimeType(); }
#line 5297 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 140:
#line 780 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = TimeOfDayType(); }
#line 5303 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 141:
#line 781 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = UTCTimeType(); }
#line 5309 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 142:
#line 785 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< NamedType > () = NamedType{ yystack_[1].value.as< std::string > (), yystack_[0].value.as< Type > () }; }
#line 5315 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 143:
#line 789 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > () = yystack_[0].value.as< Value > (); }
#line 5321 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 144:
#line 791 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { throw std::runtime_error("Unhandled field: ReferencedValue"); }
#line 5327 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 145:
#line 793 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { throw std::runtime_error("Unhandled field: ObjectClassFieldValue"); }
#line 5333 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 150:
#line 807 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = yystack_[0].value.as< std::vector<ObjectIdComponentValue> > (); }
#line 5339 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 163:
#line 839 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< NamedNumber > () = NamedNumber{ yystack_[3].value.as< std::string > (), yystack_[1].value.as< long long > () }; }
#line 5345 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 164:
#line 841 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< NamedNumber > () = NamedNumber{ yystack_[3].value.as< std::string > (), yystack_[1].value.as< long long > () }; }
#line 5351 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 165:
#line 845 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< long long > () = yystack_[0].value.as< long long > (); }
#line 5357 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 166:
#line 847 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< long long > () = -yystack_[0].value.as< long long > (); }
#line 5363 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 169:
#line 855 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[1].value.as< EnumeratedType > (); }
#line 5369 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 170:
#line 859 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[0].value.as< EnumeratedType > ();
      yylhs.value.as< EnumeratedType > ().accept_anything = false; }
#line 5376 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 171:
#line 862 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[3].value.as< EnumeratedType > ();
      yylhs.value.as< EnumeratedType > ().accept_anything = true; }
#line 5383 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 172:
#line 865 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[5].value.as< EnumeratedType > ();
      yylhs.value.as< EnumeratedType > ().accept_anything = true;
      yylhs.value.as< EnumeratedType > ().enum_values.insert(yylhs.value.as< EnumeratedType > ().enum_values.end(), yystack_[0].value.as< EnumeratedType > ().enum_values.begin(), yystack_[0].value.as< EnumeratedType > ().enum_values.end()); }
#line 5391 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 173:
#line 871 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > ().enum_values.push_back(yystack_[0].value.as< EnumerationValue > ()); }
#line 5397 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 174:
#line 873 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[2].value.as< EnumeratedType > (); yylhs.value.as< EnumeratedType > ().enum_values.push_back(yystack_[0].value.as< EnumerationValue > ()); }
#line 5403 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 175:
#line 877 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumerationValue > ().name  = yystack_[0].value.as< std::string > (); }
#line 5409 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 176:
#line 879 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumerationValue > ().name  = yystack_[0].value.as< NamedNumber > ().name;
      yylhs.value.as< EnumerationValue > ().value = yystack_[0].value.as< NamedNumber > ().number; }
#line 5416 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 186:
#line 919 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SequenceType > () = SequenceType(); }
#line 5422 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 187:
#line 921 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SequenceType > () = SequenceType{yystack_[1].value.as< ComponentTypeList > ()}; }
#line 5428 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 188:
#line 929 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[0].value.as< ComponentTypeList > (); }
#line 5434 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 189:
#line 933 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[0].value.as< ComponentTypeList > (); }
#line 5440 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 190:
#line 935 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[2].value.as< ComponentTypeList > (); }
#line 5446 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 191:
#line 937 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[4].value.as< ComponentTypeList > (); yylhs.value.as< ComponentTypeList > ().insert(yylhs.value.as< ComponentTypeList > ().end(), yystack_[0].value.as< ComponentTypeList > ().begin(), yystack_[0].value.as< ComponentTypeList > ().end()); }
#line 5452 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 192:
#line 939 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[0].value.as< ComponentTypeList > (); }
#line 5458 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 193:
#line 943 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = ComponentTypeList{yystack_[0].value.as< ComponentType > ()}; }
#line 5464 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 194:
#line 945 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yystack_[2].value.as< ComponentTypeList > ().push_back(yystack_[0].value.as< ComponentType > ()); yylhs.value.as< ComponentTypeList > () = yystack_[2].value.as< ComponentTypeList > (); }
#line 5470 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 195:
#line 949 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentType > () = ComponentType{yystack_[0].value.as< NamedType > (), false, absl::nullopt}; }
#line 5476 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 196:
#line 951 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentType > () = ComponentType{yystack_[1].value.as< NamedType > (), true, absl::nullopt}; }
#line 5482 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 197:
#line 953 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentType > () = ComponentType{yystack_[2].value.as< NamedType > (), false, yystack_[0].value.as< Value > ()}; }
#line 5488 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 199:
#line 966 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SequenceOfType > () = SequenceOfType{ false, nullptr, std::make_shared<Type>(yystack_[0].value.as< Type > ()) }; }
#line 5494 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 200:
#line 968 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SequenceOfType > () = SequenceOfType{ true, std::make_shared<NamedType>(yystack_[0].value.as< NamedType > ()), nullptr }; }
#line 5500 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 201:
#line 972 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SetType > () = SetType{}; }
#line 5506 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 202:
#line 974 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SetType > () = SetType{yystack_[1].value.as< ComponentTypeList > ()}; }
#line 5512 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 203:
#line 978 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SetOfType > () = SetOfType{ false, nullptr, std::make_shared<Type>(yystack_[0].value.as< Type > ()) }; }
#line 5518 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 204:
#line 980 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SetOfType > () = SetOfType{ true, std::make_shared<NamedType>(yystack_[0].value.as< NamedType > ()), nullptr }; }
#line 5524 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 205:
#line 984 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ChoiceType > () = ChoiceType{ yystack_[1].value.as< std::vector<NamedType> > () }; }
#line 5530 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 206:
#line 988 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedType> > () = yystack_[0].value.as< std::vector<NamedType> > (); }
#line 5536 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 207:
#line 992 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedType> > () = yystack_[0].value.as< std::vector<NamedType> > (); }
#line 5542 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 208:
#line 994 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedType> > () = yystack_[2].value.as< std::vector<NamedType> > (); }
#line 5548 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 209:
#line 998 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedType> > () = std::vector<NamedType> { yystack_[0].value.as< NamedType > () }; }
#line 5554 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 210:
#line 1000 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yystack_[2].value.as< std::vector<NamedType> > ().push_back( yystack_[0].value.as< NamedType > () ); yylhs.value.as< std::vector<NamedType> > () = yystack_[2].value.as< std::vector<NamedType> > (); }
#line 5560 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 212:
#line 1010 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< PrefixedType > () = PrefixedType(yystack_[0].value.as< TaggedType > ()); }
#line 5566 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 213:
#line 1014 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggedType > () = TaggedType{ yystack_[1].value.as< Tag > (), TaggingMode::automatic, yystack_[0].value.as< Type > () }; }
#line 5572 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 214:
#line 1016 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggedType > () = TaggedType{ yystack_[2].value.as< Tag > (), TaggingMode::implicit, yystack_[0].value.as< Type > () }; }
#line 5578 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 215:
#line 1018 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggedType > () = TaggedType{ yystack_[2].value.as< Tag > (), TaggingMode::explicit_, yystack_[0].value.as< Type > () }; }
#line 5584 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 216:
#line 1022 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Tag > () = Tag{ yystack_[2].value.as< Class > (), yystack_[1].value.as< int > () }; }
#line 5590 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 219:
#line 1030 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< int > () = yystack_[0].value.as< long long > (); }
#line 5596 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 221:
#line 1035 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Class > () = Class::universal; }
#line 5602 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 222:
#line 1037 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Class > () = Class::application; }
#line 5608 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 223:
#line 1039 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Class > () = Class::private_; }
#line 5614 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 224:
#line 1041 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Class > () = Class::context_specific; }
#line 5620 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 226:
#line 1054 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<ObjectIdComponentValue> > () = yystack_[1].value.as< std::vector<ObjectIdComponentValue> > (); std::reverse(yylhs.value.as< std::vector<ObjectIdComponentValue> > ().begin(), yylhs.value.as< std::vector<ObjectIdComponentValue> > ().end()); }
#line 5626 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 227:
#line 1056 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<ObjectIdComponentValue> > () = yystack_[1].value.as< std::vector<ObjectIdComponentValue> > (); std::reverse(yylhs.value.as< std::vector<ObjectIdComponentValue> > ().begin(), yylhs.value.as< std::vector<ObjectIdComponentValue> > ().end()); }
#line 5632 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 228:
#line 1060 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<ObjectIdComponentValue> > ().push_back(yystack_[0].value.as< ObjectIdComponentValue > ()); }
#line 5638 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 229:
#line 1062 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<ObjectIdComponentValue> > () = yystack_[0].value.as< std::vector<ObjectIdComponentValue> > (); yylhs.value.as< std::vector<ObjectIdComponentValue> > ().push_back(yystack_[1].value.as< ObjectIdComponentValue > ()); }
#line 5644 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 230:
#line 1066 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > () = yystack_[0].value.as< ObjectIdComponentValue > (); }
#line 5650 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 231:
#line 1068 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > () = yystack_[0].value.as< ObjectIdComponentValue > (); }
#line 5656 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 232:
#line 1070 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > () = yystack_[0].value.as< ObjectIdComponentValue > (); }
#line 5662 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 233:
#line 1074 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > ().name = yystack_[0].value.as< std::string > (); }
#line 5668 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 234:
#line 1078 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > ().value = yystack_[0].value.as< long long > (); }
#line 5674 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 236:
#line 1083 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > () = yystack_[1].value.as< ObjectIdComponentValue > (); yylhs.value.as< ObjectIdComponentValue > ().name = yystack_[3].value.as< std::string > (); }
#line 5680 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 358:
#line 1367 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 5686 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 359:
#line 1371 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 5692 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 360:
#line 1375 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 5698 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 361:
#line 1379 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 5704 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;


#line 5708 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:859
            default:
              break;
            }
        }
      catch (const syntax_error& yyexc)
        {
          error (yyexc);
          YYERROR;
        }
      YY_SYMBOL_PRINT ("-> $$ =", yylhs);
      yypop_ (yylen);
      yylen = 0;
      YY_STACK_PRINT ();

      // Shift the result of the reduction.
      yypush_ (YY_NULLPTR, yylhs);
    }
    goto yynewstate;

  /*--------------------------------------.
  | yyerrlab -- here on detecting error.  |
  `--------------------------------------*/
  yyerrlab:
    // If not already recovering from an error, report this error.
    if (!yyerrstatus_)
      {
        ++yynerrs_;
        error (yyla.location, yysyntax_error_ (yystack_[0].state, yyla));
      }


    yyerror_range[1].location = yyla.location;
    if (yyerrstatus_ == 3)
      {
        /* If just tried and failed to reuse lookahead token after an
           error, discard it.  */

        // Return failure if at end of input.
        if (yyla.type_get () == yyeof_)
          YYABORT;
        else if (!yyla.empty ())
          {
            yy_destroy_ ("Error: discarding", yyla);
            yyla.clear ();
          }
      }

    // Else will try to reuse lookahead token after shifting the error token.
    goto yyerrlab1;


  /*---------------------------------------------------.
  | yyerrorlab -- error raised explicitly by YYERROR.  |
  `---------------------------------------------------*/
  yyerrorlab:

    /* Pacify compilers like GCC when the user code never invokes
       YYERROR and the label yyerrorlab therefore never appears in user
       code.  */
    if (false)
      goto yyerrorlab;
    yyerror_range[1].location = yystack_[yylen - 1].location;
    /* Do not reclaim the symbols of the rule whose action triggered
       this YYERROR.  */
    yypop_ (yylen);
    yylen = 0;
    goto yyerrlab1;

  /*-------------------------------------------------------------.
  | yyerrlab1 -- common code for both syntax error and YYERROR.  |
  `-------------------------------------------------------------*/
  yyerrlab1:
    yyerrstatus_ = 3;   // Each real token shifted decrements this.
    {
      stack_symbol_type error_token;
      for (;;)
        {
          yyn = yypact_[yystack_[0].state];
          if (!yy_pact_value_is_default_ (yyn))
            {
              yyn += yyterror_;
              if (0 <= yyn && yyn <= yylast_ && yycheck_[yyn] == yyterror_)
                {
                  yyn = yytable_[yyn];
                  if (0 < yyn)
                    break;
                }
            }

          // Pop the current state because it cannot handle the error token.
          if (yystack_.size () == 1)
            YYABORT;

          yyerror_range[1].location = yystack_[0].location;
          yy_destroy_ ("Error: popping", yystack_[0]);
          yypop_ ();
          YY_STACK_PRINT ();
        }

      yyerror_range[2].location = yyla.location;
      YYLLOC_DEFAULT (error_token.location, yyerror_range, 2);

      // Shift the error token.
      error_token.state = yyn;
      yypush_ ("Shifting", error_token);
    }
    goto yynewstate;

    // Accept.
  yyacceptlab:
    yyresult = 0;
    goto yyreturn;

    // Abort.
  yyabortlab:
    yyresult = 1;
    goto yyreturn;

  yyreturn:
    if (!yyla.empty ())
      yy_destroy_ ("Cleanup: discarding lookahead", yyla);

    /* Do not reclaim the symbols of the rule whose action triggered
       this YYABORT or YYACCEPT.  */
    yypop_ (yylen);
    while (1 < yystack_.size ())
      {
        yy_destroy_ ("Cleanup: popping", yystack_[0]);
        yypop_ ();
      }

    return yyresult;
  }
    catch (...)
      {
        YYCDEBUG << "Exception caught: cleaning lookahead and stack"
                 << std::endl;
        // Do not try to display the values of the reclaimed symbols,
        // as their printer might throw an exception.
        if (!yyla.empty ())
          yy_destroy_ (YY_NULLPTR, yyla);

        while (1 < yystack_.size ())
          {
            yy_destroy_ (YY_NULLPTR, yystack_[0]);
            yypop_ ();
          }
        throw;
      }
  }

  void
  asn1_parser::error (const syntax_error& yyexc)
  {
    error (yyexc.location, yyexc.what());
  }

  // Generate an error message.
  std::string
  asn1_parser::yysyntax_error_ (state_type yystate, const symbol_type& yyla) const
  {
    // Number of reported tokens (one for the "unexpected", one per
    // "expected").
    size_t yycount = 0;
    // Its maximum.
    enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
    // Arguments of yyformat.
    char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];

    /* There are many possibilities here to consider:
       - If this state is a consistent state with a default action, then
         the only way this function was invoked is if the default action
         is an error action.  In that case, don't check for expected
         tokens because there are none.
       - The only way there can be no lookahead present (in yyla) is
         if this state is a consistent state with a default action.
         Thus, detecting the absence of a lookahead is sufficient to
         determine that there is no unexpected or expected token to
         report.  In that case, just report a simple "syntax error".
       - Don't assume there isn't a lookahead just because this state is
         a consistent state with a default action.  There might have
         been a previous inconsistent state, consistent state with a
         non-default action, or user semantic action that manipulated
         yyla.  (However, yyla is currently not documented for users.)
       - Of course, the expected token list depends on states to have
         correct lookahead information, and it depends on the parser not
         to perform extra reductions after fetching a lookahead from the
         scanner and before detecting a syntax error.  Thus, state
         merging (from LALR or IELR) and default reductions corrupt the
         expected token list.  However, the list is correct for
         canonical LR with one exception: it will still contain any
         token that will not be accepted due to an error action in a
         later state.
    */
    if (!yyla.empty ())
      {
        int yytoken = yyla.type_get ();
        yyarg[yycount++] = yytname_[yytoken];
        int yyn = yypact_[yystate];
        if (!yy_pact_value_is_default_ (yyn))
          {
            /* Start YYX at -YYN if negative to avoid negative indexes in
               YYCHECK.  In other words, skip the first -YYN actions for
               this state because they are default actions.  */
            int yyxbegin = yyn < 0 ? -yyn : 0;
            // Stay within bounds of both yycheck and yytname.
            int yychecklim = yylast_ - yyn + 1;
            int yyxend = yychecklim < yyntokens_ ? yychecklim : yyntokens_;
            for (int yyx = yyxbegin; yyx < yyxend; ++yyx)
              if (yycheck_[yyx + yyn] == yyx && yyx != yyterror_
                  && !yy_table_value_is_error_ (yytable_[yyx + yyn]))
                {
                  if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                    {
                      yycount = 1;
                      break;
                    }
                  else
                    yyarg[yycount++] = yytname_[yyx];
                }
          }
      }

    char const* yyformat = YY_NULLPTR;
    switch (yycount)
      {
#define YYCASE_(N, S)                         \
        case N:                               \
          yyformat = S;                       \
        break
        YYCASE_(0, YY_("syntax error"));
        YYCASE_(1, YY_("syntax error, unexpected %s"));
        YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
        YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
        YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
        YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
#undef YYCASE_
      }

    std::string yyres;
    // Argument number.
    size_t yyi = 0;
    for (char const* yyp = yyformat; *yyp; ++yyp)
      if (yyp[0] == '%' && yyp[1] == 's' && yyi < yycount)
        {
          yyres += yytnamerr_ (yyarg[yyi++]);
          ++yyp;
        }
      else
        yyres += *yyp;
    return yyres;
  }


  const short int asn1_parser::yypact_ninf_ = -414;

  const short int asn1_parser::yytable_ninf_ = -362;

  const short int
  asn1_parser::yypact_[] =
  {
     -87,  -414,    83,   -87,    54,   -16,  -414,  -414,    98,    11,
    -414,    46,  -414,    69,    29,  -414,  -414,    67,    11,  -414,
    -414,  -414,    75,    79,  -414,  -414,   101,   118,   122,   171,
    -414,  -414,   229,    50,    94,  -414,  -414,  -414,   164,   116,
     111,  -414,  -414,  -414,    50,   107,  -414,   207,  -414,    94,
    -414,    76,  -414,    15,  -414,   173,  -414,  -414,  -414,   104,
    -414,  -414,   108,   112,  -414,  -414,  -414,  -414,   195,    21,
      47,  -414,  -414,    21,  -414,   110,    21,  -414,   -18,    47,
    -414,  -414,  -414,   134,  1760,  -414,  -414,  -414,   -87,  -414,
    1760,  -414,  -414,  -414,  -414,   153,  -414,  -414,   154,   135,
    -414,  -414,  -414,   169,   138,  -414,  -414,  -414,  -414,  -414,
     176,   140,  -414,  -414,   197,  -414,   165,  -414,  -414,  -414,
    -414,  -414,   -34,   -26,  -414,  -414,  -414,  -414,  -414,  -414,
    -414,  -414,  -414,  -414,   252,   132,   141,  -414,  -414,  -414,
    -414,  -414,   142,  -414,  -414,  -414,  -414,    33,  -414,  -414,
    -414,  -414,  -414,  -414,  -414,  -414,  -414,  -414,  -414,  -414,
    -414,  -414,  -414,  -414,  1568,  -414,  -414,  -414,  -414,  -414,
    -414,  -414,  -414,  -414,  -414,  -414,  -414,  -414,  -414,  -414,
    -414,  -414,   148,   143,  -414,   -44,   156,   159,  -414,   133,
    -414,   133,    -1,   133,  -414,  -414,  1760,   156,   -13,   483,
     198,   199,  1760,     0,   200,   201,   149,     7,   248,   248,
    1222,  -414,  1760,  1760,   156,  1760,    13,    18,  -414,  -414,
    -414,  -414,   133,  -414,   168,  -414,   152,  1760,  -414,   174,
     157,  -414,   172,  -414,   158,   -21,  -414,   172,   156,  -414,
    1660,  -414,   213,   166,  -414,     5,   179,  -414,   175,  -414,
    -414,  -414,  -414,  -414,  -414,  -414,   243,  1222,   265,  -414,
     156,  -414,  -414,  1222,   294,  -414,   170,   859,   604,   303,
    -414,   178,  -414,  -414,  -414,  -414,  -414,  -414,  -414,  -414,
    -414,  -414,  -414,  -414,   -67,    51,  -414,  -414,  -414,  -414,
    -414,  -414,  -414,  -414,  -414,  -414,   177,  -414,  -414,   181,
    -414,   -56,   -42,   -19,   -17,  -414,   243,   250,  -414,  -414,
    -414,  1760,  -414,   188,   183,  -414,  -414,  -414,  -414,  -414,
    -414,   148,   184,  1760,  1760,   156,  -414,  -414,   194,  1760,
    1760,  -414,  -414,  -414,  -414,    19,  -414,  -414,  -414,  -414,
    -414,   186,  -414,  -414,  1222,   -67,  -414,   156,   156,   156,
    -414,  -414,  -414,  -414,    18,   202,    18,  -414,  -414,  -414,
     203,    74,  -414,   204,  -414,   -50,   156,  -414,   -45,     9,
     304,  -414,   133,  1760,     6,  1222,  -414,  -414,    17,   725,
    -414,   -15,  -414,  1222,  -414,  -414,  -414,   156,   208,   185,
    -414,  -414,  1343,  -414,  -414,   189,   187,  -414,    10,   -67,
    -414,   -61,   210,  -414,  1222,  1464,   211,   212,  -414,  -414,
     725,  -414,  -414,   725,  -414,   156,   980,  -414,    27,   156,
    -414,   156,  -414,  -414,   156,  -414,   156,  -414,  -414,  -414,
     214,   192,  -414,   215,  -414,  -414,    22,  -414,   133,    25,
    -414,  -414,   177,  -414,   217,   219,  -414,   156,   205,  -414,
     218,  -414,  -414,   301,  -414,  -414,  -414,   -36,  -414,  -414,
    -414,  -414,   206,   223,  -414,  -414,  -414,    57,  -414,  -414,
    -414,   220,   -19,  -414,  -414,  1101,  -414,  -414,  -414,  -414,
    -414,  -414,  -414,   222,  -414,   224,   225,   221,  -414,  -414,
       6,     6,  1222,   230,   236,   231,   156,   237,  -414,  1222,
     604,  -414,  -414,  -414,  -414,   133,   205,  -414,   133,  -414,
     133,  -414,  -414,    48,  -414,  -414,  -414,  -414,   233,   246,
    -414,  -414,  -414,  -414,  -414,   133,  -414
  };

  const unsigned short int
  asn1_parser::yydefact_[] =
  {
       0,   361,     0,     2,     0,    53,     1,     3,    64,     0,
      50,    51,    52,     0,    68,    61,   359,     0,    56,    59,
      60,    58,   233,     0,    55,    63,     0,     0,     0,    70,
      54,    57,     0,     0,   242,    67,    65,    66,     0,     0,
       0,   243,   244,   240,     0,     0,    69,     0,    62,   242,
     239,    75,   241,    77,    49,    79,    94,    95,    96,     0,
     358,   360,     0,    76,    89,    91,    92,    93,     0,    81,
       0,    74,    73,     0,     4,     0,    80,    82,     0,    71,
      97,    99,   100,     0,     0,    90,    78,    83,     0,    98,
       0,     6,    20,    10,   185,     0,   257,   156,     0,     0,
     250,   252,   253,     0,     0,   247,   122,   258,   259,   260,
       0,   159,   261,   262,     0,   128,     0,   238,   263,   177,
     237,   245,     0,     0,   265,   264,   248,   251,     9,   266,
     141,   267,   268,   269,   218,   358,     0,     5,     7,    42,
      19,   127,     0,   111,   123,   109,   101,     0,   107,   113,
     124,   120,   131,   112,   130,   126,   134,   135,   136,   137,
     115,   110,   138,   212,     0,   129,   133,   125,   132,   119,
     121,   139,   116,   140,   117,   118,   114,   254,   255,   108,
     273,   102,     0,     0,    84,    88,   105,   178,   271,     0,
     246,     0,     0,     0,   225,   184,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   224,     0,     0,
       0,   272,     0,     0,   213,     0,     0,     0,    85,    87,
      86,   103,     0,   209,     0,   206,   207,     0,   176,     0,
     170,   173,   175,    44,     0,     0,   161,     0,   199,   200,
       0,   331,     0,     0,   186,   195,     0,   188,   189,   193,
     165,   152,   153,   270,   249,    35,     0,     0,     0,   158,
       0,   321,   328,     0,     0,   157,     0,     0,     0,     0,
     359,    22,    37,    23,    24,    25,    38,    34,   308,   145,
      40,   284,    45,   155,   332,   319,   143,   144,   146,   167,
     148,   150,   149,   151,   147,   256,   354,   283,   285,   286,
     289,   291,     0,   293,     0,   296,     0,   299,   307,   310,
     311,     0,   312,     0,   323,   314,   315,   313,   316,   317,
     318,   168,     0,     0,     0,   203,   204,   201,     0,     0,
       0,   217,   222,   223,   221,     0,    11,    12,    13,    14,
      15,     0,    39,    43,     0,     0,   106,   215,   214,   211,
       8,    21,   104,   234,   235,     0,   228,   230,   231,   232,
     233,     0,   180,     0,   205,     0,   142,   169,     0,     0,
       0,   160,     0,     0,     0,     0,   196,   187,     0,     0,
     292,    46,   154,     0,   333,   351,   352,     0,     0,   234,
      17,    18,     0,    29,    33,     0,     0,    30,   155,    31,
      32,   233,     0,   166,     0,     0,     0,     0,   304,   303,
       0,   306,   305,     0,   300,   320,     0,   324,     0,   276,
     280,   277,   281,   202,   274,   278,   275,   279,   219,   220,
       0,     0,   235,     0,   226,   229,     0,   179,     0,     0,
     208,   210,   354,   174,     0,     0,   162,   198,   192,   197,
     190,   194,   302,     0,    47,   336,   334,     0,   335,   337,
     338,    27,     0,     0,   309,    41,   356,     0,   355,   353,
     282,   287,   294,   297,   330,     0,   329,   322,   325,    36,
     216,    16,   227,     0,   181,     0,     0,   171,   164,   163,
       0,     0,     0,     0,     0,   341,   346,     0,    28,     0,
       0,   326,   236,   182,   183,     0,   191,    48,     0,   339,
       0,   345,   343,   350,    26,   357,   288,   290,   172,     0,
     342,   348,   349,   347,   344,     0,   340
  };

  const short int
  asn1_parser::yypgoto_[] =
  {
    -414,   347,  -414,   180,  -414,  -414,   106,   167,  -414,  -183,
    -414,  -236,  -414,  -414,  -414,  -414,  -414,   -12,  -414,  -414,
    -414,  -414,  -414,  -414,  -414,  -414,  -414,  -414,  -414,  -414,
    -414,  -414,  -414,  -414,   356,  -414,   343,  -414,  -414,  -414,
    -414,  -414,  -414,  -414,  -414,  -414,  -414,   305,  -414,  -414,
     324,   306,  -414,  -414,   307,  -414,  -144,  -414,  -414,  -414,
     -82,  -414,  -177,  -139,  -414,  -414,  -414,  -414,  -414,  -414,
    -182,  -312,  -414,  -414,  -414,  -122,  -358,  -414,  -414,  -414,
     -54,  -414,  -414,  -414,   182,  -414,  -341,  -350,  -414,  -414,
    -414,  -414,  -414,  -414,  -414,  -414,  -414,  -414,  -414,  -414,
    -414,  -414,  -414,   209,  -302,  -414,   125,   -49,  -414,  -414,
    -414,   377,  -414,   341,   348,  -414,  -414,  -414,  -414,  -414,
    -414,  -414,  -414,  -414,  -414,  -414,  -414,  -414,  -414,  -414,
    -414,  -118,  -414,  -414,  -414,  -414,  -414,  -261,  -414,  -414,
     -11,  -414,   -22,  -414,    87,  -414,  -414,    16,  -414,  -414,
    -414,  -414,  -414,  -414,  -414,  -414,   -78,    99,  -414,  -414,
    -414,  -414,  -414,  -414,  -414,  -413,  -414,  -414,  -414,  -414,
    -414,  -414,   -41,  -414,   -52,    -9,   147,     3
  };

  const short int
  asn1_parser::yydefgoto_[] =
  {
      -1,     2,     3,   136,   137,   138,   341,   342,   393,   139,
     140,   272,   273,   274,   395,   275,   396,   397,   276,   277,
     278,   141,   279,   280,   142,   143,   144,   281,   282,    68,
       4,    10,    11,    12,    17,    18,    19,    20,    14,    29,
      39,    54,    55,    62,    70,    75,    76,    77,   184,   218,
      78,    64,    65,    79,    80,   145,   283,   146,    81,    82,
     345,   148,   245,   285,   286,   287,   149,   288,   150,   235,
     228,   289,   290,   151,   229,   230,   231,   152,   153,   361,
     362,   154,   155,   156,   246,   247,   248,   249,   157,   158,
     159,   160,   224,   225,   226,   161,   162,   163,   164,   207,
     430,   335,   165,   291,   355,   356,   357,   358,   359,   166,
     167,   292,    34,    45,    43,   168,   169,   170,   171,   293,
     172,   173,   174,   175,   176,   294,   177,   295,   178,   179,
     180,   211,   296,   297,   298,   299,   516,   300,   301,   302,
     303,   304,   305,   306,   380,   410,   413,   307,   308,   309,
     310,   311,   312,   313,   477,   314,   478,   315,   316,   317,
     318,   456,   458,   459,   460,   494,   495,   512,   513,   524,
     319,   320,   406,   469,   181,   321,   221,   183
  };

  const short int
  asn1_parser::yytable_[] =
  {
      22,    66,   147,     5,   200,   204,     5,   402,   186,    22,
     443,   236,   223,   250,   353,    15,   271,    66,    83,   239,
      91,    66,   353,   428,    66,   326,   353,    83,   451,   485,
      93,   394,   242,   448,   350,   351,    56,    57,    58,   453,
     332,   219,    56,    57,    58,   242,    88,    59,   350,   351,
     479,   242,   433,   196,   435,   375,  -295,   445,  -298,   199,
     411,   202,   242,     1,    26,   436,    41,    42,   197,   215,
     408,   346,   440,   354,   404,   182,   197,   442,   521,   241,
     217,   182,   214,     6,   271,   271,   493,  -168,    27,  -295,
     198,   185,   199,   468,   376,   519,   433,   520,   203,    28,
     199,    16,   333,   409,   371,     8,    16,    61,     9,   243,
     128,   199,   244,    13,   238,    16,   372,   284,   382,    73,
     325,   334,   243,   398,   385,   327,   404,  -298,   400,   412,
     347,   348,   -72,   349,    21,  -235,    53,   522,    16,   450,
     451,   523,   384,    21,    25,   366,   420,   422,   269,     1,
     506,    16,   425,   427,   210,   182,   394,    16,   366,   199,
      61,   270,    16,    60,   352,    60,    61,   443,    16,   270,
      61,    60,    61,    61,  -327,   381,    61,    60,   499,    23,
     227,  -327,   232,   199,   237,   399,   284,   240,   441,   227,
     446,   429,    30,   240,   227,   234,   271,    60,    61,   437,
      67,    32,   322,   182,   182,   382,   182,    35,   360,   271,
     432,   438,   432,   363,   387,   388,    67,    84,   182,    33,
      67,   201,   205,    67,    36,   444,    84,   271,    37,   415,
     271,   182,    38,    15,    44,    46,   449,    47,    48,   517,
      50,   419,   421,    51,   454,    69,    71,   424,   426,    73,
      72,    74,    86,   400,   432,    90,   187,   188,   401,   189,
     190,   466,   191,   192,   193,   465,   194,   206,   195,   455,
    -361,   322,   336,   337,   338,   339,   340,   476,   215,   208,
     209,   216,   199,   222,    16,   323,   324,   329,   330,   365,
     331,   447,   432,   364,   368,   486,   370,   284,   369,   367,
     373,   379,   182,   374,   377,   383,   386,   403,  -301,   405,
     399,   416,   378,   417,   240,   240,   -42,   271,   407,   423,
     240,   240,   418,   467,   431,   350,   462,   434,   284,   436,
     439,   284,   457,  -165,   471,   463,   476,   464,   470,   481,
     482,   492,   490,   480,   488,   360,   489,   360,   498,   502,
       7,   503,   504,   507,   497,   491,   227,   500,   505,   232,
     515,   509,   514,   237,   182,   227,   352,   508,   510,   227,
     525,   526,   233,   392,    31,    40,   343,    63,   511,    85,
     461,    87,   322,   518,   484,   328,    89,   483,    24,   360,
      52,   473,    49,   414,   220,   452,   182,   501,     0,   472,
       0,   487,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   322,     0,     0,   322,     0,   284,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   363,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   496,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   227,   227,     0,     0,     0,     0,   250,     0,   251,
       0,   252,     0,   253,     0,     0,   232,     0,     0,   496,
       0,   496,   254,   322,    91,    92,   255,     0,     0,     0,
       0,     0,     0,     0,    93,   256,   232,    94,     0,     0,
      95,    96,    97,     0,    98,    99,     0,     0,     0,     0,
     257,   100,   101,     0,     0,   102,   103,   258,     0,     0,
     104,     0,     0,     0,     0,   105,   259,   260,   106,   107,
     108,   109,     0,     0,     0,     0,   261,   110,     0,   111,
       0,   112,     0,   262,     0,     0,   113,   114,   115,   116,
       0,   117,     0,   263,     0,     0,     0,   118,     0,   119,
     120,   121,   122,   123,   264,   197,     0,     0,   124,     0,
     125,   126,   127,   265,   128,     0,     0,     0,   129,   130,
     131,   132,   133,   266,     0,     0,     0,   267,   250,   268,
     251,   134,   252,     0,   253,     0,    23,     0,     0,     0,
       0,     0,   269,   254,     0,    91,    92,   255,     0,     0,
       0,     0,     0,   135,   270,    93,   256,     0,    94,     0,
       0,    95,    96,    97,     0,    98,    99,     0,     0,     0,
       0,   344,   100,   101,     0,     0,   102,   103,     0,     0,
       0,   104,     0,     0,     0,     0,   105,   259,   260,   106,
     107,   108,   109,     0,     0,     0,     0,   261,   110,     0,
     111,     0,   112,     0,   262,     0,     0,   113,   114,   115,
     116,     0,   117,     0,   263,     0,     0,     0,   118,     0,
     119,   120,   121,   122,   123,   264,   197,     0,     0,   124,
       0,   125,   126,   127,   265,   128,     0,     0,     0,   129,
     130,   131,   132,   133,   266,     0,     0,     0,   267,   250,
     268,   251,   134,   252,     0,   253,     0,    23,     0,     0,
       0,     0,     0,   269,   254,     0,    91,    92,   255,     0,
       0,     0,     0,     0,   135,   270,    93,     0,     0,    94,
       0,     0,    95,    96,    97,     0,    98,    99,     0,     0,
       0,     0,   344,   100,   101,     0,     0,   102,   103,     0,
       0,     0,   104,     0,     0,     0,     0,   105,   259,   260,
     106,   107,   108,   109,     0,     0,     0,     0,   261,   110,
       0,   111,     0,   112,     0,   262,     0,     0,   113,   114,
     115,   116,     0,   117,     0,   263,     0,     0,     0,   118,
       0,   119,   120,   121,   122,   123,   264,   197,     0,     0,
     124,     0,   125,   126,   127,   265,   128,     0,     0,     0,
     129,   130,   131,   132,   133,   266,     0,     0,     0,   267,
       0,   268,     0,   134,     0,     0,     0,     0,    23,     0,
       0,     0,     0,   389,   269,   251,     0,   252,     0,   253,
       0,     0,     0,     0,     0,   135,   270,     0,   254,     0,
      91,    92,     0,   336,   337,   338,   339,   340,   390,     0,
      93,     0,     0,    94,     0,     0,    95,    96,    97,     0,
      98,    99,     0,     0,     0,     0,   344,   100,   101,     0,
       0,   102,   103,     0,     0,     0,   104,     0,     0,     0,
       0,   105,   259,     0,   106,   107,   108,   109,     0,     0,
       0,     0,     0,   110,     0,   111,     0,   112,     0,     0,
       0,     0,   113,   114,   115,   116,     0,   117,     0,     0,
       0,     0,     0,   118,     0,   119,   120,   121,   122,   123,
       0,     0,     0,     0,   124,     0,   125,   126,   127,   265,
     128,     0,     0,     0,   129,   130,   131,   132,   133,     0,
       0,     0,     0,   267,   250,     0,   251,   134,   252,     0,
     253,     0,    23,     0,     0,     0,   391,     0,   269,   254,
       0,    91,    92,     0,     0,     0,     0,     0,     0,   135,
     270,    93,     0,     0,    94,     0,     0,    95,    96,    97,
       0,    98,    99,     0,     0,     0,     0,   344,   100,   101,
       0,     0,   102,   103,     0,     0,     0,   104,     0,     0,
       0,     0,   105,   259,     0,   106,   107,   108,   109,     0,
       0,     0,     0,     0,   110,     0,   111,     0,   112,   474,
       0,     0,     0,   113,   114,   115,   116,     0,   117,     0,
       0,     0,     0,     0,   118,     0,   119,   120,   121,   122,
     123,     0,     0,     0,     0,   124,     0,   125,   126,   127,
     265,   128,     0,     0,     0,   129,   130,   131,   132,   133,
       0,     0,     0,     0,   217,   250,     0,   251,   134,   252,
     475,   253,     0,    23,     0,     0,     0,     0,     0,   269,
     254,     0,    91,    92,     0,     0,     0,     0,     0,     0,
     135,   270,    93,     0,     0,    94,     0,     0,    95,    96,
      97,     0,    98,    99,     0,     0,     0,     0,   344,   100,
     101,     0,     0,   102,   103,     0,     0,     0,   104,     0,
       0,     0,     0,   105,   259,     0,   106,   107,   108,   109,
       0,     0,     0,     0,     0,   110,     0,   111,     0,   112,
     474,     0,     0,     0,   113,   114,   115,   116,     0,   117,
       0,     0,     0,     0,     0,   118,     0,   119,   120,   121,
     122,   123,     0,     0,     0,     0,   124,     0,   125,   126,
     127,   265,   128,     0,     0,     0,   129,   130,   131,   132,
     133,     0,     0,     0,     0,   217,   250,     0,   251,   134,
     252,     0,   253,     0,    23,     0,     0,     0,     0,     0,
     269,   254,     0,    91,    92,     0,     0,     0,     0,     0,
       0,   135,   270,    93,     0,     0,    94,     0,     0,    95,
      96,    97,     0,    98,    99,     0,     0,     0,     0,   344,
     100,   101,     0,     0,   102,   103,     0,     0,     0,   104,
       0,     0,     0,     0,   105,   259,     0,   106,   107,   108,
     109,     0,     0,     0,     0,     0,   110,     0,   111,     0,
     112,     0,     0,     0,     0,   113,   114,   115,   116,     0,
     117,     0,     0,     0,     0,     0,   118,     0,   119,   120,
     121,   122,   123,     0,     0,     0,     0,   124,     0,   125,
     126,   127,   265,   128,     0,     0,     0,   129,   130,   131,
     132,   133,     0,     0,     0,     0,   217,   250,     0,   251,
     134,   252,     0,   253,     0,    23,     0,     0,     0,     0,
       0,   269,   254,     0,    91,    92,     0,     0,     0,     0,
       0,     0,   135,   270,    93,     0,     0,    94,     0,     0,
      95,    96,    97,     0,    98,    99,     0,     0,     0,     0,
     344,   100,   101,     0,     0,   102,   103,     0,     0,     0,
     104,     0,     0,     0,     0,   105,   259,     0,   106,   107,
     108,   109,     0,     0,     0,     0,     0,   110,     0,   111,
       0,   112,     0,     0,     0,     0,   113,   114,   115,   116,
       0,   117,     0,     0,     0,     0,     0,   118,     0,   119,
     120,   121,   122,   123,     0,     0,     0,     0,   124,     0,
     125,   126,   127,   265,   128,     0,     0,     0,   129,   130,
     131,   132,   133,     0,     0,     0,     0,   267,   250,     0,
       0,   134,     0,     0,     0,     0,    23,     0,     0,     0,
       0,     0,   269,     0,     0,    91,    92,     0,     0,     0,
       0,     0,     0,   135,   270,    93,     0,     0,    94,     0,
       0,    95,    96,    97,     0,    98,    99,     0,     0,     0,
       0,     0,   100,   101,     0,     0,   102,   103,     0,     0,
       0,   104,     0,     0,     0,     0,   105,     0,     0,   106,
     107,   108,   109,     0,     0,     0,     0,     0,   110,     0,
     111,     0,   112,     0,     0,     0,     0,   113,   114,   115,
     116,     0,   117,     0,     0,     0,     0,     0,   118,     0,
     119,   120,   121,   122,   123,     0,     0,     0,     0,   124,
       0,   125,   126,   127,     0,   128,     0,     0,     0,   129,
     130,   131,   132,   133,     0,     0,     0,     0,     0,    91,
      92,     0,   134,     0,     0,     0,     0,     0,     0,    93,
       0,     0,    94,   269,     0,    95,    96,    97,     0,    98,
      99,     0,     0,     0,   135,   270,   100,   101,     0,     0,
     102,   103,     0,     0,     0,   104,     0,   212,     0,     0,
     105,     0,     0,   106,   107,   108,   109,     0,   213,     0,
       0,     0,   110,     0,   111,     0,   112,     0,     0,     0,
       0,   113,   114,   115,   116,     0,   117,     0,     0,     0,
       0,     0,   118,     0,   119,   120,   121,   122,   123,     0,
       0,     0,     0,   124,     0,   125,   126,   127,     0,   128,
       0,    91,    92,   129,   130,   131,   132,   133,     0,     0,
       0,    93,     0,     0,    94,     0,   134,    95,    96,    97,
       0,    98,    99,     0,     0,     0,     0,     0,   100,   101,
       0,     0,   102,   103,     0,     0,     0,   104,   135,    16,
       0,     0,   105,     0,     0,   106,   107,   108,   109,     0,
       0,     0,     0,     0,   110,     0,   111,     0,   112,     0,
       0,     0,     0,   113,   114,   115,   116,     0,   117,     0,
       0,     0,     0,     0,   118,     0,   119,   120,   121,   122,
     123,     0,     0,     0,     0,   124,     0,   125,   126,   127,
       0,   128,     0,     0,     0,   129,   130,   131,   132,   133,
       0,    91,    92,     0,     0,     0,     0,     0,   134,     0,
     215,    93,     0,     0,    94,     0,     0,    95,    96,    97,
       0,    98,    99,     0,     0,     0,     0,     0,   100,   101,
     135,    16,   102,   103,     0,     0,     0,   104,     0,     0,
       0,     0,   105,     0,     0,   106,   107,   108,   109,     0,
       0,     0,     0,     0,   110,     0,   111,     0,   112,     0,
       0,     0,     0,   113,   114,   115,   116,     0,   117,     0,
       0,     0,     0,     0,   118,     0,   119,   120,   121,   122,
     123,     0,     0,     0,     0,   124,     0,   125,   126,   127,
       0,   128,     0,     0,     0,   129,   130,   131,   132,   133,
       0,     0,     0,     0,     0,     0,     0,     0,   134,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     135,    16
  };

  const short int
  asn1_parser::yycheck_[] =
  {
       9,    53,    84,     0,   122,   123,     3,   268,    90,    18,
     368,   193,   189,     4,     4,     4,   199,    69,    70,   196,
      21,    73,     4,     4,    76,   202,     4,    79,   378,     4,
      31,   267,    45,   374,    21,    22,    21,    22,    23,    54,
      33,   185,    21,    22,    23,    45,    64,    32,    21,    22,
      23,    45,   354,    87,   356,    50,   112,   369,    77,   126,
      77,    87,    45,   150,    35,   126,    16,    17,   102,   130,
     112,   210,   122,   217,   141,    84,   102,   122,    30,   197,
     124,    90,   164,     0,   267,   268,   122,   148,    59,   145,
     124,    88,   126,   405,    89,   508,   398,   510,   124,    70,
     126,   151,    95,   145,   125,    51,   151,   151,   124,   122,
     111,   126,   125,    15,   196,   151,   137,   199,   257,   137,
     202,   114,   122,   267,   263,   125,   141,   146,   267,   146,
     212,   213,    56,   215,     9,   125,    60,    89,   151,   122,
     490,    93,   260,    18,    75,   227,   323,   324,   139,   150,
     491,   151,   329,   330,   121,   164,   392,   151,   240,   126,
     151,   151,   151,   150,   216,   150,   151,   525,   151,   151,
     151,   150,   151,   151,   123,   257,   151,   150,   121,   133,
     189,   130,   191,   126,   193,   267,   268,   196,   365,   198,
     372,   335,   125,   202,   203,   192,   379,   150,   151,   125,
      53,   126,   199,   212,   213,   344,   215,   106,   217,   392,
     354,   137,   356,   222,    44,    45,    69,    70,   227,   140,
      73,   122,   123,    76,   106,   369,    79,   410,   106,   311,
     413,   240,    61,     4,   140,    71,   375,   121,   127,   500,
     133,   323,   324,    36,   383,    72,   142,   329,   330,   137,
     142,    56,   142,   392,   398,   121,   103,   103,   267,   124,
      91,   405,   124,    87,   124,   404,    69,    15,   103,   387,
     138,   268,    24,    25,    26,    27,    28,   416,   130,   138,
     138,   138,   126,   124,   151,    87,    87,    87,    87,   137,
     141,   373,   436,   125,   137,   439,   138,   379,   126,   125,
      87,    58,   311,   137,   125,    40,    12,     4,    58,   132,
     392,   123,   137,   130,   323,   324,   138,   500,   137,   125,
     329,   330,   138,   405,   138,    21,   137,   125,   410,   126,
     126,   413,   124,   148,   122,   148,   475,   127,   127,   147,
     125,    40,   137,   129,   127,   354,   127,   356,   125,   127,
       3,   127,   127,   492,   148,   137,   365,   137,   137,   368,
     499,   125,   125,   372,   373,   374,   418,   137,   137,   378,
     137,   125,   192,   267,    18,    32,   209,    53,   496,    73,
     392,    76,   379,   505,   438,   203,    79,   436,    11,   398,
      49,   413,    44,   306,   185,   379,   405,   475,    -1,   410,
      -1,   442,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   410,    -1,    -1,   413,    -1,   500,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   438,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   457,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   490,   491,    -1,    -1,    -1,    -1,     4,    -1,     6,
      -1,     8,    -1,    10,    -1,    -1,   505,    -1,    -1,   508,
      -1,   510,    19,   500,    21,    22,    23,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    31,    32,   525,    34,    -1,    -1,
      37,    38,    39,    -1,    41,    42,    -1,    -1,    -1,    -1,
      47,    48,    49,    -1,    -1,    52,    53,    54,    -1,    -1,
      57,    -1,    -1,    -1,    -1,    62,    63,    64,    65,    66,
      67,    68,    -1,    -1,    -1,    -1,    73,    74,    -1,    76,
      -1,    78,    -1,    80,    -1,    -1,    83,    84,    85,    86,
      -1,    88,    -1,    90,    -1,    -1,    -1,    94,    -1,    96,
      97,    98,    99,   100,   101,   102,    -1,    -1,   105,    -1,
     107,   108,   109,   110,   111,    -1,    -1,    -1,   115,   116,
     117,   118,   119,   120,    -1,    -1,    -1,   124,     4,   126,
       6,   128,     8,    -1,    10,    -1,   133,    -1,    -1,    -1,
      -1,    -1,   139,    19,    -1,    21,    22,    23,    -1,    -1,
      -1,    -1,    -1,   150,   151,    31,    32,    -1,    34,    -1,
      -1,    37,    38,    39,    -1,    41,    42,    -1,    -1,    -1,
      -1,    47,    48,    49,    -1,    -1,    52,    53,    -1,    -1,
      -1,    57,    -1,    -1,    -1,    -1,    62,    63,    64,    65,
      66,    67,    68,    -1,    -1,    -1,    -1,    73,    74,    -1,
      76,    -1,    78,    -1,    80,    -1,    -1,    83,    84,    85,
      86,    -1,    88,    -1,    90,    -1,    -1,    -1,    94,    -1,
      96,    97,    98,    99,   100,   101,   102,    -1,    -1,   105,
      -1,   107,   108,   109,   110,   111,    -1,    -1,    -1,   115,
     116,   117,   118,   119,   120,    -1,    -1,    -1,   124,     4,
     126,     6,   128,     8,    -1,    10,    -1,   133,    -1,    -1,
      -1,    -1,    -1,   139,    19,    -1,    21,    22,    23,    -1,
      -1,    -1,    -1,    -1,   150,   151,    31,    -1,    -1,    34,
      -1,    -1,    37,    38,    39,    -1,    41,    42,    -1,    -1,
      -1,    -1,    47,    48,    49,    -1,    -1,    52,    53,    -1,
      -1,    -1,    57,    -1,    -1,    -1,    -1,    62,    63,    64,
      65,    66,    67,    68,    -1,    -1,    -1,    -1,    73,    74,
      -1,    76,    -1,    78,    -1,    80,    -1,    -1,    83,    84,
      85,    86,    -1,    88,    -1,    90,    -1,    -1,    -1,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,    -1,    -1,
     105,    -1,   107,   108,   109,   110,   111,    -1,    -1,    -1,
     115,   116,   117,   118,   119,   120,    -1,    -1,    -1,   124,
      -1,   126,    -1,   128,    -1,    -1,    -1,    -1,   133,    -1,
      -1,    -1,    -1,     4,   139,     6,    -1,     8,    -1,    10,
      -1,    -1,    -1,    -1,    -1,   150,   151,    -1,    19,    -1,
      21,    22,    -1,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    34,    -1,    -1,    37,    38,    39,    -1,
      41,    42,    -1,    -1,    -1,    -1,    47,    48,    49,    -1,
      -1,    52,    53,    -1,    -1,    -1,    57,    -1,    -1,    -1,
      -1,    62,    63,    -1,    65,    66,    67,    68,    -1,    -1,
      -1,    -1,    -1,    74,    -1,    76,    -1,    78,    -1,    -1,
      -1,    -1,    83,    84,    85,    86,    -1,    88,    -1,    -1,
      -1,    -1,    -1,    94,    -1,    96,    97,    98,    99,   100,
      -1,    -1,    -1,    -1,   105,    -1,   107,   108,   109,   110,
     111,    -1,    -1,    -1,   115,   116,   117,   118,   119,    -1,
      -1,    -1,    -1,   124,     4,    -1,     6,   128,     8,    -1,
      10,    -1,   133,    -1,    -1,    -1,   137,    -1,   139,    19,
      -1,    21,    22,    -1,    -1,    -1,    -1,    -1,    -1,   150,
     151,    31,    -1,    -1,    34,    -1,    -1,    37,    38,    39,
      -1,    41,    42,    -1,    -1,    -1,    -1,    47,    48,    49,
      -1,    -1,    52,    53,    -1,    -1,    -1,    57,    -1,    -1,
      -1,    -1,    62,    63,    -1,    65,    66,    67,    68,    -1,
      -1,    -1,    -1,    -1,    74,    -1,    76,    -1,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    -1,    88,    -1,
      -1,    -1,    -1,    -1,    94,    -1,    96,    97,    98,    99,
     100,    -1,    -1,    -1,    -1,   105,    -1,   107,   108,   109,
     110,   111,    -1,    -1,    -1,   115,   116,   117,   118,   119,
      -1,    -1,    -1,    -1,   124,     4,    -1,     6,   128,     8,
     130,    10,    -1,   133,    -1,    -1,    -1,    -1,    -1,   139,
      19,    -1,    21,    22,    -1,    -1,    -1,    -1,    -1,    -1,
     150,   151,    31,    -1,    -1,    34,    -1,    -1,    37,    38,
      39,    -1,    41,    42,    -1,    -1,    -1,    -1,    47,    48,
      49,    -1,    -1,    52,    53,    -1,    -1,    -1,    57,    -1,
      -1,    -1,    -1,    62,    63,    -1,    65,    66,    67,    68,
      -1,    -1,    -1,    -1,    -1,    74,    -1,    76,    -1,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    -1,    88,
      -1,    -1,    -1,    -1,    -1,    94,    -1,    96,    97,    98,
      99,   100,    -1,    -1,    -1,    -1,   105,    -1,   107,   108,
     109,   110,   111,    -1,    -1,    -1,   115,   116,   117,   118,
     119,    -1,    -1,    -1,    -1,   124,     4,    -1,     6,   128,
       8,    -1,    10,    -1,   133,    -1,    -1,    -1,    -1,    -1,
     139,    19,    -1,    21,    22,    -1,    -1,    -1,    -1,    -1,
      -1,   150,   151,    31,    -1,    -1,    34,    -1,    -1,    37,
      38,    39,    -1,    41,    42,    -1,    -1,    -1,    -1,    47,
      48,    49,    -1,    -1,    52,    53,    -1,    -1,    -1,    57,
      -1,    -1,    -1,    -1,    62,    63,    -1,    65,    66,    67,
      68,    -1,    -1,    -1,    -1,    -1,    74,    -1,    76,    -1,
      78,    -1,    -1,    -1,    -1,    83,    84,    85,    86,    -1,
      88,    -1,    -1,    -1,    -1,    -1,    94,    -1,    96,    97,
      98,    99,   100,    -1,    -1,    -1,    -1,   105,    -1,   107,
     108,   109,   110,   111,    -1,    -1,    -1,   115,   116,   117,
     118,   119,    -1,    -1,    -1,    -1,   124,     4,    -1,     6,
     128,     8,    -1,    10,    -1,   133,    -1,    -1,    -1,    -1,
      -1,   139,    19,    -1,    21,    22,    -1,    -1,    -1,    -1,
      -1,    -1,   150,   151,    31,    -1,    -1,    34,    -1,    -1,
      37,    38,    39,    -1,    41,    42,    -1,    -1,    -1,    -1,
      47,    48,    49,    -1,    -1,    52,    53,    -1,    -1,    -1,
      57,    -1,    -1,    -1,    -1,    62,    63,    -1,    65,    66,
      67,    68,    -1,    -1,    -1,    -1,    -1,    74,    -1,    76,
      -1,    78,    -1,    -1,    -1,    -1,    83,    84,    85,    86,
      -1,    88,    -1,    -1,    -1,    -1,    -1,    94,    -1,    96,
      97,    98,    99,   100,    -1,    -1,    -1,    -1,   105,    -1,
     107,   108,   109,   110,   111,    -1,    -1,    -1,   115,   116,
     117,   118,   119,    -1,    -1,    -1,    -1,   124,     4,    -1,
      -1,   128,    -1,    -1,    -1,    -1,   133,    -1,    -1,    -1,
      -1,    -1,   139,    -1,    -1,    21,    22,    -1,    -1,    -1,
      -1,    -1,    -1,   150,   151,    31,    -1,    -1,    34,    -1,
      -1,    37,    38,    39,    -1,    41,    42,    -1,    -1,    -1,
      -1,    -1,    48,    49,    -1,    -1,    52,    53,    -1,    -1,
      -1,    57,    -1,    -1,    -1,    -1,    62,    -1,    -1,    65,
      66,    67,    68,    -1,    -1,    -1,    -1,    -1,    74,    -1,
      76,    -1,    78,    -1,    -1,    -1,    -1,    83,    84,    85,
      86,    -1,    88,    -1,    -1,    -1,    -1,    -1,    94,    -1,
      96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,   105,
      -1,   107,   108,   109,    -1,   111,    -1,    -1,    -1,   115,
     116,   117,   118,   119,    -1,    -1,    -1,    -1,    -1,    21,
      22,    -1,   128,    -1,    -1,    -1,    -1,    -1,    -1,    31,
      -1,    -1,    34,   139,    -1,    37,    38,    39,    -1,    41,
      42,    -1,    -1,    -1,   150,   151,    48,    49,    -1,    -1,
      52,    53,    -1,    -1,    -1,    57,    -1,    59,    -1,    -1,
      62,    -1,    -1,    65,    66,    67,    68,    -1,    70,    -1,
      -1,    -1,    74,    -1,    76,    -1,    78,    -1,    -1,    -1,
      -1,    83,    84,    85,    86,    -1,    88,    -1,    -1,    -1,
      -1,    -1,    94,    -1,    96,    97,    98,    99,   100,    -1,
      -1,    -1,    -1,   105,    -1,   107,   108,   109,    -1,   111,
      -1,    21,    22,   115,   116,   117,   118,   119,    -1,    -1,
      -1,    31,    -1,    -1,    34,    -1,   128,    37,    38,    39,
      -1,    41,    42,    -1,    -1,    -1,    -1,    -1,    48,    49,
      -1,    -1,    52,    53,    -1,    -1,    -1,    57,   150,   151,
      -1,    -1,    62,    -1,    -1,    65,    66,    67,    68,    -1,
      -1,    -1,    -1,    -1,    74,    -1,    76,    -1,    78,    -1,
      -1,    -1,    -1,    83,    84,    85,    86,    -1,    88,    -1,
      -1,    -1,    -1,    -1,    94,    -1,    96,    97,    98,    99,
     100,    -1,    -1,    -1,    -1,   105,    -1,   107,   108,   109,
      -1,   111,    -1,    -1,    -1,   115,   116,   117,   118,   119,
      -1,    21,    22,    -1,    -1,    -1,    -1,    -1,   128,    -1,
     130,    31,    -1,    -1,    34,    -1,    -1,    37,    38,    39,
      -1,    41,    42,    -1,    -1,    -1,    -1,    -1,    48,    49,
     150,   151,    52,    53,    -1,    -1,    -1,    57,    -1,    -1,
      -1,    -1,    62,    -1,    -1,    65,    66,    67,    68,    -1,
      -1,    -1,    -1,    -1,    74,    -1,    76,    -1,    78,    -1,
      -1,    -1,    -1,    83,    84,    85,    86,    -1,    88,    -1,
      -1,    -1,    -1,    -1,    94,    -1,    96,    97,    98,    99,
     100,    -1,    -1,    -1,    -1,   105,    -1,   107,   108,   109,
      -1,   111,    -1,    -1,    -1,   115,   116,   117,   118,   119,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     150,   151
  };

  const unsigned short int
  asn1_parser::yystos_[] =
  {
       0,   150,   156,   157,   185,   332,     0,   156,    51,   124,
     186,   187,   188,    15,   193,     4,   151,   189,   190,   191,
     192,   261,   330,   133,   266,    75,    35,    59,    70,   194,
     125,   189,   126,   140,   267,   106,   106,   106,    61,   195,
     191,    16,    17,   269,   140,   268,    71,   121,   127,   269,
     133,    36,   268,    60,   196,   197,    21,    22,    23,    32,
     150,   151,   198,   205,   206,   207,   329,   331,   184,    72,
     199,   142,   142,   137,    56,   200,   201,   202,   205,   208,
     209,   213,   214,   329,   331,   206,   142,   202,    64,   209,
     121,    21,    22,    31,    34,    37,    38,    39,    41,    42,
      48,    49,    52,    53,    57,    62,    65,    66,    67,    68,
      74,    76,    78,    83,    84,    85,    86,    88,    94,    96,
      97,    98,    99,   100,   105,   107,   108,   109,   111,   115,
     116,   117,   118,   119,   128,   150,   158,   159,   160,   164,
     165,   176,   179,   180,   181,   210,   212,   215,   216,   221,
     223,   228,   232,   233,   236,   237,   238,   243,   244,   245,
     246,   250,   251,   252,   253,   257,   264,   265,   270,   271,
     272,   273,   275,   276,   277,   278,   279,   281,   283,   284,
     285,   329,   330,   332,   203,   332,   215,   103,   103,   124,
      91,   124,    87,   124,    69,   103,    87,   102,   124,   126,
     286,   312,    87,   124,   286,   312,    15,   254,   138,   138,
     121,   286,    59,    70,   215,   130,   138,   124,   204,   211,
     258,   331,   124,   217,   247,   248,   249,   330,   225,   229,
     230,   231,   330,   158,   332,   224,   225,   330,   215,   217,
     330,   286,    45,   122,   125,   217,   239,   240,   241,   242,
       4,     6,     8,    10,    19,    23,    32,    47,    54,    63,
      64,    73,    80,    90,   101,   110,   120,   124,   126,   139,
     151,   164,   166,   167,   168,   170,   173,   174,   175,   177,
     178,   182,   183,   211,   215,   218,   219,   220,   222,   226,
     227,   258,   266,   274,   280,   282,   287,   288,   289,   290,
     292,   293,   294,   295,   296,   297,   298,   302,   303,   304,
     305,   306,   307,   308,   310,   312,   313,   314,   315,   325,
     326,   330,   332,    87,    87,   215,   217,   125,   239,    87,
      87,   141,    33,    95,   114,   256,    24,    25,    26,    27,
      28,   161,   162,   162,    47,   215,   218,   215,   215,   215,
      21,    22,   329,     4,   211,   259,   260,   261,   262,   263,
     330,   234,   235,   330,   125,   137,   215,   125,   137,   126,
     138,   125,   137,    87,   137,    50,    89,   125,   137,    58,
     299,   215,   218,    40,   286,   218,    12,    44,    45,     4,
      29,   137,   161,   163,   166,   169,   171,   172,   211,   215,
     218,   330,   292,     4,   141,   132,   327,   137,   112,   145,
     300,    77,   146,   301,   299,   215,   123,   130,   138,   215,
     217,   215,   217,   125,   215,   217,   215,   217,     4,   211,
     255,   138,   211,   259,   125,   259,   126,   125,   137,   126,
     122,   217,   122,   231,   211,   226,   225,   215,   241,   218,
     122,   242,   302,    54,   218,   286,   316,   124,   317,   318,
     319,   172,   137,   148,   127,   218,   211,   215,   226,   328,
     127,   122,   295,   297,    79,   130,   218,   309,   311,    23,
     129,   147,   125,   262,   235,     4,   211,   327,   127,   127,
     137,   137,    40,   122,   320,   321,   330,   148,   125,   121,
     137,   311,   127,   127,   127,   137,   241,   218,   137,   125,
     137,   286,   322,   323,   125,   218,   291,   292,   230,   320,
     320,    30,    89,    93,   324,   137,   125
  };

  const unsigned short int
  asn1_parser::yyr1_[] =
  {
       0,   155,   156,   156,   157,   158,   158,   158,   159,   160,
     160,   161,   161,   161,   161,   161,   162,   163,   163,   164,
     164,   165,   166,   166,   167,   167,   168,   169,   170,   171,
     171,   172,   172,   172,   173,   173,   174,   175,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   183,   183,   184,
     185,   186,   186,   186,   187,   188,   189,   189,   190,   190,
     190,   191,   192,   193,   193,   194,   194,   194,   194,   195,
     195,   196,   196,   197,   197,   197,   198,   198,   199,   199,
     200,   200,   201,   201,   202,   203,   204,   204,   204,   205,
     205,   206,   207,   207,   207,   207,   207,   208,   208,   209,
     209,   210,   210,   211,   212,   213,   214,   215,   215,   215,
     215,   215,   216,   216,   216,   216,   216,   216,   216,   216,
     216,   216,   216,   216,   216,   216,   216,   216,   216,   216,
     216,   216,   216,   216,   216,   216,   216,   216,   216,   216,
     216,   216,   217,   218,   218,   218,   219,   219,   219,   219,
     219,   219,   219,   219,   219,   220,   221,   222,   222,   223,
     223,   224,   224,   225,   225,   226,   226,   227,   227,   228,
     229,   229,   229,   230,   230,   231,   231,   232,   233,   233,
     234,   234,   235,   235,   236,   237,   238,   238,   239,   240,
     240,   240,   240,   241,   241,   242,   242,   242,   242,   243,
     243,   244,   244,   245,   245,   246,   247,   248,   248,   249,
     249,   250,   251,   252,   252,   252,   253,   254,   254,   255,
     255,   256,   256,   256,   256,   257,   258,   258,   259,   259,
     260,   260,   260,   261,   262,   262,   263,   264,   265,   266,
     267,   268,   268,   269,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   279,   280,   281,   281,   281,
     281,   281,   281,   281,   281,   281,   281,   281,   281,   281,
     282,   283,   284,   284,   285,   285,   285,   285,   285,   285,
     285,   285,   286,   287,   287,   288,   289,   289,   289,   290,
     291,   292,   292,   293,   293,   294,   295,   295,   296,   297,
     297,   298,   299,   300,   300,   301,   301,   302,   302,   302,
     303,   303,   303,   303,   303,   303,   303,   303,   303,   304,
     305,   306,   307,   308,   308,   309,   309,   310,   310,   311,
     311,   312,   313,   314,   315,   315,   316,   317,   317,   318,
     319,   320,   320,   321,   322,   323,   323,   324,   324,   324,
     324,   325,   326,   327,   327,   328,   328,   328,   329,   330,
     331,   332
  };

  const unsigned char
  asn1_parser::yyr2_[] =
  {
       0,     2,     1,     2,    10,     1,     1,     1,     3,     1,
       1,     1,     1,     1,     1,     1,     3,     1,     1,     1,
       1,     3,     1,     1,     1,     1,     5,     2,     4,     1,
       1,     1,     1,     1,     1,     1,     3,     1,     1,     3,
       1,     3,     1,     3,     3,     1,     2,     3,     5,     0,
       2,     1,     1,     0,     3,     2,     1,     2,     1,     1,
       1,     1,     4,     2,     0,     2,     2,     2,     0,     2,
       0,     3,     0,     3,     3,     0,     1,     0,     3,     0,
       1,     0,     1,     2,     3,     2,     1,     1,     0,     1,
       3,     1,     1,     1,     1,     1,     1,     1,     2,     1,
       1,     1,     1,     1,     3,     3,     4,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     1,     1,     1,     1,     1,
       4,     1,     3,     4,     4,     1,     2,     1,     1,     4,
       1,     4,     6,     1,     3,     1,     1,     1,     2,     5,
       1,     3,     4,     4,     2,     1,     3,     4,     1,     1,
       3,     5,     3,     1,     3,     1,     2,     3,     3,     3,
       3,     3,     4,     3,     3,     4,     1,     1,     3,     1,
       3,     3,     1,     2,     3,     3,     5,     2,     0,     1,
       1,     1,     1,     1,     0,     2,     3,     4,     1,     2,
       1,     1,     1,     1,     1,     1,     4,     1,     1,     4,
       2,     3,     0,     1,     1,     1,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     1,     4,     4,     4,     4,     4,     4,
       4,     4,     4,     1,     1,     1,     1,     3,     5,     1,
       1,     1,     2,     1,     3,     1,     1,     3,     1,     1,
       2,     1,     2,     1,     1,     1,     1,     1,     1,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     1,     3,     1,     2,     1,     2,     1,     1,     1,
       1,     2,     1,     2,     3,     3,     1,     1,     1,     3,
       5,     1,     3,     2,     2,     1,     0,     1,     1,     1,
       0,     2,     2,     2,     0,     1,     1,     3,     1,     1,
       1,     1
  };



  // YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
  // First, the terminals, then, starting at \a yyntokens_, nonterminals.
  const char*
  const asn1_parser::yytname_[] =
  {
  "END_OF_FILE", "error", "$undefined", "comment", "number", "realnumber",
  "bstring", "xmlbstring", "hstring", "xmlhstring", "cstring",
  "xmlcstring", "simplestring", "xmltstring", "psname",
  "encodingreference", "integerUnicodeLabel", "non-integerUnicodeLabel",
  "extended-true", "tstring", "extended-false", "objectclassreference",
  "objectreference", "objectsetreference", "typefieldreference",
  "valuefieldreference", "valuesetfieldreference", "objectfieldreference",
  "objectsetfieldreference", "word", "ABSENT", "ABSTRACT_SYNTAX", "ALL",
  "APPLICATION", "ASN_NULL", "AUTOMATIC", "BEGIN", "BIT", "BMPString",
  "BOOLEAN", "BY", "CHARACTER", "CHOICE", "CLASS", "COMPONENT",
  "COMPONENTS", "CONSTRAINED", "CONTAINING", "DATE", "DATE_TIME",
  "DEFAULT", "DEFINITIONS", "DURATION", "EMBEDDED", "ENCODED",
  "ENCODING_CONTROL", "END", "ENUMERATED", "EXCEPT", "EXPLICIT", "EXPORTS",
  "EXTENSIBILITY", "EXTERNAL", "FALSE", "FROM", "GeneralizedTime",
  "GeneralString", "GraphicString", "IA5String", "IDENTIFIER", "IMPLICIT",
  "IMPLIED", "IMPORTS", "\"INCLUDES\"", "INSTANCE", "INSTRUCTIONS",
  "INTEGER", "INTERSECTION", "ISO646String", "MAX", "MIN",
  "MINUS_INFINITY", "NOT_A_NUMBER", "NumericString", "OBJECT",
  "ObjectDescriptor", "OCTET", "OF", "OID_IRI", "OPTIONAL", "PATTERN",
  "PDV", "PLUS_INFINITY", "PRESENT", "PrintableString", "PRIVATE", "REAL",
  "RELATIVE_OID", "RELATIVE_OID_IRI", "SEQUENCE", "SET", "SETTINGS",
  "SIZE", "STRING", "SYNTAX", "T61String", "TAGS", "TeletexString", "TIME",
  "TIME_OF_DAY", "TRUE", "TYPE_IDENTIFIER", "UNION", "UNIQUE", "UNIVERSAL",
  "UniversalString", "UTCTime", "UTF8String", "VideotexString",
  "VisibleString", "WITH", "\"::=\"", "\"...\"", "\"..\"", "\"{\"",
  "\"}\"", "\"(\"", "\")\"", "\"[\"", "\"]\"", "\"<\"", "\">\"", "\"!\"",
  "\"\\\"\"", "\"&\"", "\"'\"", "\"*\"", "\",\"", "\".\"", "\"-\"",
  "\"/\"", "\":\"", "\";\"", "\"=\"", "\"@\"", "\"|\"", "\"^\"", "PLUS",
  "STAR", "QUESTION_MARK", "GENERIC_IDENTIFIER_UPPERCASE",
  "GENERIC_IDENTIFIER_LOWERCASE", "GENERIC_INTEGER", "xmlasn1typename",
  "\"@.\"", "$accept", "ModuleDefinitionList", "ModuleDefinition",
  "DefinedObjectClass", "ExternalObjectClassReference",
  "UsefulObjectClassReference", "PrimitiveFieldName", "FieldName",
  "Literal", "DefinedObject", "ExternalObjectReference", "Object",
  "ObjectDefn", "DefaultSyntax", "FieldSetting", "DefinedSyntax",
  "DefinedSyntaxToken", "Setting", "DefinedObjectSet",
  "ExternalObjectSetReference", "ObjectSetElements",
  "ObjectClassFieldType", "ObjectClassFieldValue", "OpenTypeFieldVal",
  "ReferencedObjects", "TypeFromObject", "InstanceOfType",
  "GeneralConstraint", "ContentsConstraint", "EncodingControlSections",
  "ModuleIdentifier", "DefinitiveIdentification", "DefinitiveOID",
  "DefinitiveOIDandIRI", "DefinitiveObjIdComponentList",
  "DefinitiveObjIdComponent", "DefinitiveNumberForm",
  "DefinitiveNameAndNumberForm", "EncodingReferenceDefault", "TagDefault",
  "ExtensionDefault", "ModuleBody", "Exports", "SymbolsExported",
  "Imports", "SymbolsImported", "SymbolsFromModuleList",
  "SymbolsFromModule", "GlobalModuleReference", "AssignedIdentifier",
  "SymbolList", "Symbol", "Reference", "AssignmentList", "Assignment",
  "DefinedType", "DefinedValue", "ExternalTypeReference", "TypeAssignment",
  "ValueAssignment", "Type", "BuiltinType", "NamedType", "Value",
  "BuiltinValue", "ReferencedValue", "BooleanType", "BooleanValue",
  "IntegerType", "NamedNumberList", "NamedNumber", "SignedNumber",
  "IntegerValue", "EnumeratedType", "Enumerations", "Enumeration",
  "EnumerationItem", "RealType", "BitStringType", "NamedBitList",
  "NamedBit", "OctetStringType", "NullType", "SequenceType",
  "ComponentTypeLists", "RootComponentTypeList", "ComponentTypeList",
  "ComponentType", "SequenceOfType", "SetType", "SetOfType", "ChoiceType",
  "AlternativeTypeLists", "RootAlternativeTypeList", "AlternativeTypeList",
  "SelectionType", "PrefixedType", "TaggedType", "Tag",
  "EncodingReference", "ClassNumber", "Class", "ObjectIdentifierType",
  "ObjectIdentifierValue", "ObjIdComponentsList", "ObjIdComponents",
  "NameForm", "NumberForm", "NameAndNumberForm", "RelativeOIDType",
  "IRIType", "IRIValue", "FirstArcIdentifier", "SubsequentArcIdentifier",
  "ArcIdentifier", "RelativeIRIType", "EmbeddedPDVType", "ExternalType",
  "TimeType", "TimeValue", "DateType", "TimeOfDayType", "DateTimeType",
  "DurationType", "CharacterStringType", "CharacterStringValue",
  "RestrictedCharacterStringType", "RestrictedCharacterStringValue",
  "UnrestrictedCharacterStringType", "ConstrainedType",
  "TypeWithConstraint", "Constraint", "ConstraintSpec",
  "SubtypeConstraint", "ElementSetSpecs", "RootElementSetSpec",
  "AdditionalElementSetSpec", "ElementSetSpec", "Unions", "UElems",
  "Intersections", "IElems", "IntersectionElements", "Elems", "Exclusions",
  "UnionMark", "IntersectionMark", "Elements", "SubtypeElements",
  "SingleValue", "ContainedSubtype", "Includes", "ValueRange",
  "LowerEndpoint", "UpperEndpoint", "LowerEndValue", "UpperEndValue",
  "SizeConstraint", "TypeConstraint", "PermittedAlphabet",
  "InnerTypeConstraints", "SingleTypeConstraint",
  "MultipleTypeConstraints", "FullSpecification", "PartialSpecification",
  "TypeConstraints", "NamedConstraint", "ComponentConstraint",
  "ValueConstraint", "PresenceConstraint", "PatternConstraint",
  "PropertySettings", "ExceptionSpec", "ExceptionIdentification",
  "typereference", "identifier", "valuereference", "modulereference", YY_NULLPTR
  };

#if YYDEBUG
  const unsigned short int
  asn1_parser::yyrline_[] =
  {
       0,   258,   258,   259,   262,   289,   290,   291,   294,   297,
     298,   319,   320,   321,   322,   323,   326,   377,   378,   381,
     382,   385,   391,   392,   397,   398,   401,   404,   407,   410,
     411,   414,   415,   416,   419,   420,   423,   439,   440,   445,
     448,   451,   462,   474,   483,   500,   524,   525,   526,   537,
     545,   552,   553,   554,   557,   560,   564,   565,   569,   570,
     571,   574,   577,   581,   582,   585,   587,   589,   591,   595,
     596,   599,   601,   605,   606,   607,   610,   611,   614,   616,
     619,   621,   624,   626,   630,   634,   638,   639,   640,   643,
     645,   649,   653,   655,   657,   658,   659,   662,   664,   668,
     670,   679,   680,   687,   696,   726,   732,   739,   741,   743,
     745,   747,   752,   753,   754,   755,   756,   757,   758,   759,
     760,   761,   762,   763,   764,   765,   766,   767,   768,   769,
     770,   771,   772,   773,   774,   775,   776,   777,   778,   779,
     780,   781,   784,   788,   790,   792,   797,   798,   803,   804,
     806,   809,   810,   811,   812,   815,   823,   826,   827,   830,
     831,   834,   835,   838,   840,   844,   846,   850,   851,   854,
     858,   861,   864,   870,   872,   876,   878,   886,   889,   890,
     893,   894,   897,   898,   912,   915,   918,   920,   928,   932,
     934,   936,   938,   942,   944,   948,   950,   952,   954,   965,
     967,   971,   973,   977,   979,   983,   987,   991,   993,   997,
     999,  1006,  1009,  1013,  1015,  1017,  1021,  1025,  1026,  1029,
    1031,  1034,  1036,  1038,  1040,  1050,  1053,  1055,  1059,  1061,
    1065,  1067,  1069,  1073,  1077,  1079,  1082,  1086,  1098,  1101,
    1107,  1110,  1111,  1114,  1115,  1118,  1124,  1131,  1137,  1140,
    1143,  1146,  1149,  1152,  1155,  1156,  1159,  1163,  1164,  1165,
    1166,  1167,  1168,  1169,  1170,  1171,  1172,  1173,  1174,  1175,
    1178,  1181,  1187,  1188,  1191,  1192,  1193,  1194,  1195,  1196,
    1197,  1198,  1201,  1204,  1205,  1208,  1211,  1212,  1213,  1216,
    1219,  1222,  1223,  1226,  1227,  1230,  1233,  1234,  1237,  1240,
    1241,  1244,  1247,  1250,  1251,  1254,  1255,  1258,  1259,  1260,
    1263,  1264,  1265,  1266,  1267,  1268,  1269,  1270,  1271,  1277,
    1280,  1283,  1286,  1289,  1290,  1293,  1294,  1297,  1298,  1301,
    1302,  1305,  1308,  1311,  1314,  1315,  1318,  1321,  1322,  1325,
    1328,  1331,  1332,  1335,  1338,  1341,  1342,  1345,  1346,  1347,
    1348,  1351,  1354,  1357,  1358,  1361,  1362,  1363,  1366,  1370,
    1374,  1378
  };

  // Print the state stack on the debug stream.
  void
  asn1_parser::yystack_print_ ()
  {
    *yycdebug_ << "Stack now";
    for (stack_type::const_iterator
           i = yystack_.begin (),
           i_end = yystack_.end ();
         i != i_end; ++i)
      *yycdebug_ << ' ' << i->state;
    *yycdebug_ << std::endl;
  }

  // Report on the debug stream that the rule \a yyrule is going to be reduced.
  void
  asn1_parser::yy_reduce_print_ (int yyrule)
  {
    unsigned int yylno = yyrline_[yyrule];
    int yynrhs = yyr2_[yyrule];
    // Print the symbols being reduced, and their result.
    *yycdebug_ << "Reducing stack by rule " << yyrule - 1
               << " (line " << yylno << "):" << std::endl;
    // The symbols being reduced.
    for (int yyi = 0; yyi < yynrhs; yyi++)
      YY_SYMBOL_PRINT ("   $" << yyi + 1 << " =",
                       yystack_[(yynrhs) - (yyi + 1)]);
  }
#endif // YYDEBUG



} // yy
#line 6831 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:1167
#line 1381 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:1168



namespace yy {

    asn1_parser::symbol_type yylex(Context& context)
    {
        const char* start = context.cursor;
        const char* YYMARKER = nullptr;
        context.location.step();
        // Lexer

#line 6847 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
{
	char yych;
	unsigned int yyaccept = 0;
	yych = *context.cursor;
	switch (yych) {
	case 0x00:	goto yy2;
	case 0x08:
	case '\t':
	case '\v':
	case '\f':
	case ' ':	goto yy6;
	case '\n':	goto yy8;
	case '\r':	goto yy10;
	case '(':	goto yy11;
	case ')':	goto yy13;
	case ',':	goto yy15;
	case '-':	goto yy17;
	case '.':	goto yy19;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy21;
	case ':':	goto yy24;
	case ';':	goto yy26;
	case 'A':	goto yy28;
	case 'B':	goto yy29;
	case 'C':	goto yy30;
	case 'D':	goto yy31;
	case 'E':	goto yy32;
	case 'F':	goto yy33;
	case 'G':	goto yy34;
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'Q':
	case 'X':
	case 'Y':
	case 'Z':	goto yy35;
	case 'I':	goto yy36;
	case 'M':	goto yy37;
	case 'N':	goto yy38;
	case 'O':	goto yy39;
	case 'P':	goto yy40;
	case 'R':	goto yy41;
	case 'S':	goto yy42;
	case 'T':	goto yy43;
	case 'U':	goto yy44;
	case 'V':	goto yy45;
	case 'W':	goto yy46;
	case '[':	goto yy47;
	case ']':	goto yy49;
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy51;
	case '{':	goto yy52;
	case '}':	goto yy54;
	default:	goto yy4;
	}
yy2:
	++context.cursor;
#line 6953 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_END_OF_FILE(context.location); }
#line 6940 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy4:
	++context.cursor;
yy5:
#line 6974 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ throw(std::runtime_error(std::string("Unknown symbol!") + *start)); context.location.columns(context.cursor - start); return asn1_parser::symbol_type(asn1_parser::token_type(*start), context.location); }
#line 6946 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy6:
	++context.cursor;
#line 6957 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); context.location.columns(); return yylex(context); }
#line 6951 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy8:
	++context.cursor;
#line 6956 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); context.location.lines();   return yylex(context); }
#line 6956 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy10:
	yych = *++context.cursor;
	switch (yych) {
	case '\n':	goto yy8;
	default:	goto yy5;
	}
yy11:
	++context.cursor;
#line 6965 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPEN_PARENTHESIS (context.location); }
#line 6967 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy13:
	++context.cursor;
#line 6966 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLOSE_PARENTHESIS (context.location); }
#line 6972 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy15:
	++context.cursor;
#line 6971 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COMMA (context.location); }
#line 6977 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy17:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy56;
	default:	goto yy18;
	}
yy18:
#line 6972 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_HYPHEN_MINUS (context.location); }
#line 6987 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy19:
	yych = *++context.cursor;
	switch (yych) {
	case '.':	goto yy59;
	default:	goto yy20;
	}
yy20:
#line 6973 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_FULL_STOP (context.location); }
#line 6997 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy21:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy21;
	default:	goto yy23;
	}
yy23:
#line 6948 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_number(std::stoll(std::string(start, context.cursor)), context.location); }
#line 7016 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy24:
	yyaccept = 0;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case ':':	goto yy61;
	default:	goto yy25;
	}
yy25:
#line 6969 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COLON (context.location); }
#line 7027 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy26:
	++context.cursor;
#line 6970 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SEMICOLON (context.location); }
#line 7032 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy28:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'M':
	case 'N':
	case 'O':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'B':	goto yy66;
	case 'L':	goto yy67;
	case 'P':	goto yy68;
	case 'U':	goto yy69;
	default:	goto yy5;
	}
yy29:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'F':
	case 'G':
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'N':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'E':	goto yy70;
	case 'I':	goto yy71;
	case 'M':	goto yy72;
	case 'O':	goto yy73;
	case 'Y':	goto yy74;
	default:	goto yy5;
	}
yy30:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'I':
	case 'J':
	case 'K':
	case 'M':
	case 'N':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'H':	goto yy76;
	case 'L':	goto yy77;
	case 'O':	goto yy78;
	default:	goto yy5;
	}
yy31:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'B':
	case 'C':
	case 'D':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'A':	goto yy79;
	case 'E':	goto yy80;
	case 'U':	goto yy81;
	default:	goto yy5;
	}
yy32:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'M':	goto yy82;
	case 'N':	goto yy83;
	case 'X':	goto yy84;
	default:	goto yy5;
	}
yy33:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'A':	goto yy85;
	case 'R':	goto yy86;
	default:	goto yy5;
	}
yy34:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'e':	goto yy87;
	case 'r':	goto yy88;
	default:	goto yy5;
	}
yy35:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy5;
	}
yy36:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'B':
	case 'C':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'A':	goto yy89;
	case 'D':	goto yy90;
	case 'M':	goto yy91;
	case 'N':	goto yy92;
	case 'S':	goto yy93;
	default:	goto yy5;
	}
yy37:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'A':	goto yy94;
	case 'I':	goto yy95;
	default:	goto yy5;
	}
yy38:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'O':	goto yy96;
	case 'U':	goto yy97;
	case 'u':	goto yy98;
	default:	goto yy5;
	}
yy39:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'D':
	case 'E':
	case 'G':
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'B':	goto yy99;
	case 'C':	goto yy100;
	case 'F':	goto yy101;
	case 'I':	goto yy103;
	case 'P':	goto yy104;
	case 'b':	goto yy105;
	default:	goto yy5;
	}
yy40:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'B':
	case 'C':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'A':	goto yy106;
	case 'D':	goto yy107;
	case 'L':	goto yy108;
	case 'R':	goto yy109;
	case 'r':	goto yy110;
	default:	goto yy5;
	}
yy41:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'E':	goto yy111;
	default:	goto yy5;
	}
yy42:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'F':
	case 'G':
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'E':	goto yy112;
	case 'I':	goto yy113;
	case 'T':	goto yy114;
	case 'Y':	goto yy115;
	default:	goto yy5;
	}
yy43:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '7':
	case '8':
	case '9':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case '6':	goto yy116;
	case 'A':	goto yy117;
	case 'I':	goto yy118;
	case 'R':	goto yy119;
	case 'Y':	goto yy120;
	case 'e':	goto yy121;
	default:	goto yy5;
	}
yy44:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'N':	goto yy122;
	case 'T':	goto yy123;
	case 'n':	goto yy124;
	default:	goto yy5;
	}
yy45:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'i':	goto yy125;
	default:	goto yy5;
	}
yy46:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'I':	goto yy126;
	default:	goto yy5;
	}
yy47:
	++context.cursor;
#line 6967 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPEN_SQUARE_BRACKET (context.location); }
#line 8348 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy49:
	++context.cursor;
#line 6968 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLOSE_SQUARE_BRACKET (context.location); }
#line 8353 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy51:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy127;
	default:	goto yy5;
	}
yy52:
	++context.cursor;
#line 6963 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPEN_BRACE (context.location); }
#line 8427 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy54:
	++context.cursor;
#line 6964 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLOSE_BRACE (context.location); }
#line 8432 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy56:
	yyaccept = 1;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '\n':
	case '\r':	goto yy58;
	case '-':	goto yy130;
	default:	goto yy56;
	}
yy58:
#line 6944 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return yylex(context); }
#line 8445 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy59:
	yych = *++context.cursor;
	switch (yych) {
	case '.':	goto yy131;
	default:	goto yy60;
	}
yy60:
#line 6962 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_RANGE (context.location); }
#line 8455 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy61:
	yych = *++context.cursor;
	switch (yych) {
	case '=':	goto yy133;
	default:	goto yy62;
	}
yy62:
	context.cursor = YYMARKER;
	if (yyaccept == 0) {
		goto yy25;
	} else {
		goto yy58;
	}
yy63:
	yych = *++context.cursor;
yy64:
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy65;
	}
yy65:
#line 6949 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GENERIC_IDENTIFIER_UPPERCASE(santize_name(std::string(start, context.cursor)), context.location); }
#line 8542 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy66:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy135;
	default:	goto yy64;
	}
yy67:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy136;
	default:	goto yy64;
	}
yy68:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy138;
	default:	goto yy64;
	}
yy69:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy139;
	default:	goto yy64;
	}
yy70:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy140;
	default:	goto yy64;
	}
yy71:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy141;
	default:	goto yy64;
	}
yy72:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy143;
	default:	goto yy64;
	}
yy73:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy144;
	default:	goto yy64;
	}
yy74:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy75;
	}
yy75:
#line 6858 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BY (context.location); }
#line 8663 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy76:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy145;
	case 'O':	goto yy146;
	default:	goto yy64;
	}
yy77:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy147;
	default:	goto yy64;
	}
yy78:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy148;
	case 'N':	goto yy149;
	default:	goto yy64;
	}
yy79:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy150;
	default:	goto yy64;
	}
yy80:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy151;
	default:	goto yy64;
	}
yy81:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy152;
	default:	goto yy64;
	}
yy82:
	yych = *++context.cursor;
	switch (yych) {
	case 'B':	goto yy153;
	default:	goto yy64;
	}
yy83:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy154;
	case 'D':	goto yy155;
	case 'U':	goto yy157;
	default:	goto yy64;
	}
yy84:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy158;
	case 'P':	goto yy159;
	case 'T':	goto yy160;
	default:	goto yy64;
	}
yy85:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy161;
	default:	goto yy64;
	}
yy86:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy162;
	default:	goto yy64;
	}
yy87:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy163;
	default:	goto yy64;
	}
yy88:
	yych = *++context.cursor;
	switch (yych) {
	case 'a':	goto yy164;
	default:	goto yy64;
	}
yy89:
	yych = *++context.cursor;
	switch (yych) {
	case '5':	goto yy165;
	default:	goto yy64;
	}
yy90:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy166;
	default:	goto yy64;
	}
yy91:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy167;
	default:	goto yy64;
	}
yy92:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy168;
	case 'S':	goto yy169;
	case 'T':	goto yy170;
	default:	goto yy64;
	}
yy93:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy171;
	default:	goto yy64;
	}
yy94:
	yych = *++context.cursor;
	switch (yych) {
	case 'X':	goto yy172;
	default:	goto yy64;
	}
yy95:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy174;
	default:	goto yy64;
	}
yy96:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy176;
	default:	goto yy64;
	}
yy97:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy177;
	default:	goto yy64;
	}
yy98:
	yych = *++context.cursor;
	switch (yych) {
	case 'm':	goto yy178;
	default:	goto yy64;
	}
yy99:
	yych = *++context.cursor;
	switch (yych) {
	case 'J':	goto yy179;
	default:	goto yy64;
	}
yy100:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy180;
	default:	goto yy64;
	}
yy101:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy102;
	}
yy102:
#line 6906 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OF (context.location); }
#line 8894 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy103:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy181;
	default:	goto yy64;
	}
yy104:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy182;
	default:	goto yy64;
	}
yy105:
	yych = *++context.cursor;
	switch (yych) {
	case 'j':	goto yy183;
	default:	goto yy64;
	}
yy106:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy184;
	default:	goto yy64;
	}
yy107:
	yych = *++context.cursor;
	switch (yych) {
	case 'V':	goto yy185;
	default:	goto yy64;
	}
yy108:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy187;
	default:	goto yy64;
	}
yy109:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy188;
	case 'I':	goto yy189;
	default:	goto yy64;
	}
yy110:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy190;
	default:	goto yy64;
	}
yy111:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy191;
	case 'L':	goto yy192;
	default:	goto yy64;
	}
yy112:
	yych = *++context.cursor;
	switch (yych) {
	case 'Q':	goto yy193;
	case 'T':	goto yy194;
	default:	goto yy64;
	}
yy113:
	yych = *++context.cursor;
	switch (yych) {
	case 'Z':	goto yy196;
	default:	goto yy64;
	}
yy114:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy197;
	default:	goto yy64;
	}
yy115:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy198;
	default:	goto yy64;
	}
yy116:
	yych = *++context.cursor;
	switch (yych) {
	case '1':	goto yy199;
	default:	goto yy64;
	}
yy117:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy200;
	default:	goto yy64;
	}
yy118:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy201;
	default:	goto yy64;
	}
yy119:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy202;
	default:	goto yy64;
	}
yy120:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy203;
	default:	goto yy64;
	}
yy121:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy204;
	default:	goto yy64;
	}
yy122:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy205;
	default:	goto yy64;
	}
yy123:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy206;
	case 'F':	goto yy207;
	default:	goto yy64;
	}
yy124:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy208;
	default:	goto yy64;
	}
yy125:
	yych = *++context.cursor;
	switch (yych) {
	case 'd':	goto yy209;
	case 's':	goto yy210;
	default:	goto yy64;
	}
yy126:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy211;
	default:	goto yy64;
	}
yy127:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy127;
	default:	goto yy129;
	}
yy129:
#line 6950 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GENERIC_IDENTIFIER_LOWERCASE(santize_name(std::string(start, context.cursor)), context.location); }
#line 9116 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy130:
	yych = *++context.cursor;
	switch (yych) {
	case '\n':
	case '\r':	goto yy62;
	case '-':	goto yy212;
	default:	goto yy56;
	}
yy131:
	++context.cursor;
#line 6961 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ELIPSIS (context.location); }
#line 9129 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy133:
	++context.cursor;
#line 6960 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DEFINED_AS (context.location); }
#line 9134 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy135:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy214;
	case 'T':	goto yy215;
	default:	goto yy64;
	}
yy136:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy137;
	}
yy137:
#line 6851 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ALL (context.location); }
#line 9214 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy138:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy216;
	default:	goto yy64;
	}
yy139:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy217;
	default:	goto yy64;
	}
yy140:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy218;
	default:	goto yy64;
	}
yy141:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy142;
	}
yy142:
#line 6855 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BIT (context.location); }
#line 9305 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy143:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy219;
	default:	goto yy64;
	}
yy144:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy220;
	default:	goto yy64;
	}
yy145:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy221;
	default:	goto yy64;
	}
yy146:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy222;
	default:	goto yy64;
	}
yy147:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy223;
	default:	goto yy64;
	}
yy148:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy224;
	default:	goto yy64;
	}
yy149:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy225;
	case 'T':	goto yy226;
	default:	goto yy64;
	}
yy150:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy227;
	default:	goto yy64;
	}
yy151:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy229;
	case 'I':	goto yy230;
	default:	goto yy64;
	}
yy152:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy231;
	default:	goto yy64;
	}
yy153:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy232;
	default:	goto yy64;
	}
yy154:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy233;
	default:	goto yy64;
	}
yy155:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy156;
	}
yy156:
#line 6874 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_END (context.location); }
#line 9452 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy157:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy234;
	default:	goto yy64;
	}
yy158:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy235;
	default:	goto yy64;
	}
yy159:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy236;
	case 'O':	goto yy237;
	default:	goto yy64;
	}
yy160:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy238;
	default:	goto yy64;
	}
yy161:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy239;
	default:	goto yy64;
	}
yy162:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy240;
	default:	goto yy64;
	}
yy163:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy242;
	default:	goto yy64;
	}
yy164:
	yych = *++context.cursor;
	switch (yych) {
	case 'p':	goto yy243;
	default:	goto yy64;
	}
yy165:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy244;
	default:	goto yy64;
	}
yy166:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy245;
	default:	goto yy64;
	}
yy167:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy246;
	case 'O':	goto yy247;
	default:	goto yy64;
	}
yy168:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy248;
	default:	goto yy64;
	}
yy169:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy249;
	default:	goto yy64;
	}
yy170:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy250;
	default:	goto yy64;
	}
yy171:
	yych = *++context.cursor;
	switch (yych) {
	case '6':	goto yy251;
	default:	goto yy64;
	}
yy172:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy173;
	}
yy173:
#line 6897 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_MAX (context.location); }
#line 9617 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy174:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'U':	goto yy252;
	default:	goto yy175;
	}
yy175:
#line 6898 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_MIN (context.location); }
#line 9690 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy176:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy253;
	default:	goto yy64;
	}
yy177:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy254;
	default:	goto yy64;
	}
yy178:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy256;
	default:	goto yy64;
	}
yy179:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy257;
	default:	goto yy64;
	}
yy180:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy258;
	default:	goto yy64;
	}
yy181:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy259;
	default:	goto yy64;
	}
yy182:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy260;
	default:	goto yy64;
	}
yy183:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy261;
	default:	goto yy64;
	}
yy184:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy262;
	default:	goto yy64;
	}
yy185:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy186;
	}
yy186:
#line 6910 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PDV (context.location); }
#line 9817 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy187:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy263;
	default:	goto yy64;
	}
yy188:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy264;
	default:	goto yy64;
	}
yy189:
	yych = *++context.cursor;
	switch (yych) {
	case 'V':	goto yy265;
	default:	goto yy64;
	}
yy190:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy266;
	default:	goto yy64;
	}
yy191:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy267;
	default:	goto yy64;
	}
yy192:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy269;
	default:	goto yy64;
	}
yy193:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy270;
	default:	goto yy64;
	}
yy194:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'T':	goto yy271;
	default:	goto yy195;
	}
yy195:
#line 6919 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SET (context.location); }
#line 9932 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy196:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy272;
	default:	goto yy64;
	}
yy197:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy274;
	default:	goto yy64;
	}
yy198:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy275;
	default:	goto yy64;
	}
yy199:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy276;
	default:	goto yy64;
	}
yy200:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy277;
	default:	goto yy64;
	}
yy201:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy279;
	default:	goto yy64;
	}
yy202:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy281;
	default:	goto yy64;
	}
yy203:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy283;
	default:	goto yy64;
	}
yy204:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy284;
	default:	goto yy64;
	}
yy205:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy285;
	case 'Q':	goto yy286;
	case 'V':	goto yy287;
	default:	goto yy64;
	}
yy206:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy288;
	default:	goto yy64;
	}
yy207:
	yych = *++context.cursor;
	switch (yych) {
	case '8':	goto yy289;
	default:	goto yy64;
	}
yy208:
	yych = *++context.cursor;
	switch (yych) {
	case 'v':	goto yy290;
	default:	goto yy64;
	}
yy209:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy291;
	default:	goto yy64;
	}
yy210:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy292;
	default:	goto yy64;
	}
yy211:
	yych = *++context.cursor;
	switch (yych) {
	case 'H':	goto yy293;
	default:	goto yy64;
	}
yy212:
	++context.cursor;
#line 6943 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return yylex(context); }
#line 10035 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy214:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy295;
	default:	goto yy64;
	}
yy215:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy296;
	default:	goto yy64;
	}
yy216:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy297;
	default:	goto yy64;
	}
yy217:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy298;
	default:	goto yy64;
	}
yy218:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy299;
	default:	goto yy64;
	}
yy219:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy301;
	default:	goto yy64;
	}
yy220:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy302;
	default:	goto yy64;
	}
yy221:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy303;
	default:	goto yy64;
	}
yy222:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy304;
	default:	goto yy64;
	}
yy223:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy305;
	default:	goto yy64;
	}
yy224:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy307;
	default:	goto yy64;
	}
yy225:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy308;
	default:	goto yy64;
	}
yy226:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy309;
	default:	goto yy64;
	}
yy227:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case '_':	goto yy310;
	default:	goto yy228;
	}
yy228:
#line 6866 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DATE (context.location); }
#line 10186 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy229:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy311;
	default:	goto yy64;
	}
yy230:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy312;
	default:	goto yy64;
	}
yy231:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy313;
	default:	goto yy64;
	}
yy232:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy314;
	default:	goto yy64;
	}
yy233:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy315;
	default:	goto yy64;
	}
yy234:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy316;
	default:	goto yy64;
	}
yy235:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy317;
	default:	goto yy64;
	}
yy236:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy318;
	default:	goto yy64;
	}
yy237:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy319;
	default:	goto yy64;
	}
yy238:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy320;
	case 'R':	goto yy321;
	default:	goto yy64;
	}
yy239:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy322;
	default:	goto yy64;
	}
yy240:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy241;
	}
yy241:
#line 6882 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_FROM (context.location); }
#line 10326 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy242:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy324;
	default:	goto yy64;
	}
yy243:
	yych = *++context.cursor;
	switch (yych) {
	case 'h':	goto yy325;
	default:	goto yy64;
	}
yy244:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy326;
	default:	goto yy64;
	}
yy245:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy327;
	default:	goto yy64;
	}
yy246:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy328;
	default:	goto yy64;
	}
yy247:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy329;
	default:	goto yy64;
	}
yy248:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy330;
	default:	goto yy64;
	}
yy249:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy331;
	case 'R':	goto yy332;
	default:	goto yy64;
	}
yy250:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy333;
	case 'R':	goto yy334;
	default:	goto yy64;
	}
yy251:
	yych = *++context.cursor;
	switch (yych) {
	case '4':	goto yy335;
	default:	goto yy64;
	}
yy252:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy336;
	default:	goto yy64;
	}
yy253:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy337;
	default:	goto yy64;
	}
yy254:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy255;
	}
yy255:
#line 6901 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ASN_NULL (context.location); }
#line 10473 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy256:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy338;
	default:	goto yy64;
	}
yy257:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy339;
	default:	goto yy64;
	}
yy258:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy340;
	default:	goto yy64;
	}
yy259:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy342;
	default:	goto yy64;
	}
yy260:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy343;
	default:	goto yy64;
	}
yy261:
	yych = *++context.cursor;
	switch (yych) {
	case 'c':	goto yy344;
	default:	goto yy64;
	}
yy262:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy345;
	default:	goto yy64;
	}
yy263:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy346;
	default:	goto yy64;
	}
yy264:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy347;
	default:	goto yy64;
	}
yy265:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy348;
	default:	goto yy64;
	}
yy266:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy349;
	default:	goto yy64;
	}
yy267:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy268;
	}
yy268:
#line 6915 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_REAL (context.location); }
#line 10612 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy269:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy350;
	default:	goto yy64;
	}
yy270:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy351;
	default:	goto yy64;
	}
yy271:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy352;
	default:	goto yy64;
	}
yy272:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy273;
	}
yy273:
#line 6921 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SIZE (context.location); }
#line 10703 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy274:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy353;
	default:	goto yy64;
	}
yy275:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy354;
	default:	goto yy64;
	}
yy276:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy355;
	default:	goto yy64;
	}
yy277:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy278;
	}
yy278:
#line 6925 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TAGS (context.location); }
#line 10794 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy279:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case '_':	goto yy356;
	default:	goto yy280;
	}
yy280:
#line 6927 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TIME (context.location); }
#line 10867 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy281:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy282;
	}
yy282:
#line 6929 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TRUE (context.location); }
#line 10940 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy283:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy357;
	default:	goto yy64;
	}
yy284:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy358;
	default:	goto yy64;
	}
yy285:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy359;
	default:	goto yy64;
	}
yy286:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy361;
	default:	goto yy64;
	}
yy287:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy362;
	default:	goto yy64;
	}
yy288:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy363;
	default:	goto yy64;
	}
yy289:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy364;
	default:	goto yy64;
	}
yy290:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy365;
	default:	goto yy64;
	}
yy291:
	yych = *++context.cursor;
	switch (yych) {
	case 'o':	goto yy366;
	default:	goto yy64;
	}
yy292:
	yych = *++context.cursor;
	switch (yych) {
	case 'b':	goto yy367;
	default:	goto yy64;
	}
yy293:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy294;
	}
yy294:
#line 6939 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_WITH (context.location); }
#line 11073 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy295:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy368;
	default:	goto yy64;
	}
yy296:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy370;
	default:	goto yy64;
	}
yy297:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy371;
	default:	goto yy64;
	}
yy298:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy372;
	default:	goto yy64;
	}
yy299:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy300;
	}
yy300:
#line 6854 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BEGIN (context.location); }
#line 11170 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy301:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy373;
	default:	goto yy64;
	}
yy302:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy374;
	default:	goto yy64;
	}
yy303:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy375;
	default:	goto yy64;
	}
yy304:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy376;
	default:	goto yy64;
	}
yy305:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy306;
	}
yy306:
#line 6861 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLASS (context.location); }
#line 11267 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy307:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy378;
	default:	goto yy64;
	}
yy308:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy379;
	default:	goto yy64;
	}
yy309:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy380;
	default:	goto yy64;
	}
yy310:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy381;
	default:	goto yy64;
	}
yy311:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy382;
	default:	goto yy64;
	}
yy312:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy383;
	default:	goto yy64;
	}
yy313:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy384;
	default:	goto yy64;
	}
yy314:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy385;
	default:	goto yy64;
	}
yy315:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy386;
	case 'I':	goto yy387;
	default:	goto yy64;
	}
yy316:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy388;
	default:	goto yy64;
	}
yy317:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy389;
	default:	goto yy64;
	}
yy318:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy391;
	default:	goto yy64;
	}
yy319:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy392;
	default:	goto yy64;
	}
yy320:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy393;
	default:	goto yy64;
	}
yy321:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy394;
	default:	goto yy64;
	}
yy322:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy323;
	}
yy323:
#line 6881 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_FALSE (context.location); }
#line 11431 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy324:
	yych = *++context.cursor;
	switch (yych) {
	case 'a':	goto yy395;
	default:	goto yy64;
	}
yy325:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy396;
	default:	goto yy64;
	}
yy326:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy397;
	default:	goto yy64;
	}
yy327:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy398;
	default:	goto yy64;
	}
yy328:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy399;
	case 'E':	goto yy400;
	default:	goto yy64;
	}
yy329:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy401;
	default:	goto yy64;
	}
yy330:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy402;
	default:	goto yy64;
	}
yy331:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy403;
	default:	goto yy64;
	}
yy332:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy404;
	default:	goto yy64;
	}
yy333:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy405;
	default:	goto yy64;
	}
yy334:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy406;
	default:	goto yy64;
	}
yy335:
	yych = *++context.cursor;
	switch (yych) {
	case '6':	goto yy407;
	default:	goto yy64;
	}
yy336:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy408;
	default:	goto yy64;
	}
yy337:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy409;
	default:	goto yy64;
	}
yy338:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy410;
	default:	goto yy64;
	}
yy339:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy411;
	default:	goto yy64;
	}
yy340:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy341;
	}
yy341:
#line 6905 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OCTET (context.location); }
#line 11601 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy342:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy413;
	default:	goto yy64;
	}
yy343:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy414;
	default:	goto yy64;
	}
yy344:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy415;
	default:	goto yy64;
	}
yy345:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy416;
	default:	goto yy64;
	}
yy346:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy417;
	default:	goto yy64;
	}
yy347:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy418;
	default:	goto yy64;
	}
yy348:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy419;
	default:	goto yy64;
	}
yy349:
	yych = *++context.cursor;
	switch (yych) {
	case 'a':	goto yy420;
	default:	goto yy64;
	}
yy350:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy421;
	default:	goto yy64;
	}
yy351:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy422;
	default:	goto yy64;
	}
yy352:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy423;
	default:	goto yy64;
	}
yy353:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy424;
	default:	goto yy64;
	}
yy354:
	yych = *++context.cursor;
	switch (yych) {
	case 'X':	goto yy426;
	default:	goto yy64;
	}
yy355:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy428;
	default:	goto yy64;
	}
yy356:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy429;
	default:	goto yy64;
	}
yy357:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy430;
	default:	goto yy64;
	}
yy358:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy431;
	default:	goto yy64;
	}
yy359:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy360;
	}
yy360:
#line 6931 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UNION (context.location); }
#line 11776 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy361:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy432;
	default:	goto yy64;
	}
yy362:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy434;
	default:	goto yy64;
	}
yy363:
	yych = *++context.cursor;
	switch (yych) {
	case 'm':	goto yy435;
	default:	goto yy64;
	}
yy364:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy436;
	default:	goto yy64;
	}
yy365:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy437;
	default:	goto yy64;
	}
yy366:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy438;
	default:	goto yy64;
	}
yy367:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy439;
	default:	goto yy64;
	}
yy368:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy369;
	}
yy369:
#line 6849 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ABSENT (context.location); }
#line 11891 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy370:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy440;
	default:	goto yy64;
	}
yy371:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy441;
	default:	goto yy64;
	}
yy372:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy442;
	default:	goto yy64;
	}
yy373:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy443;
	default:	goto yy64;
	}
yy374:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy444;
	default:	goto yy64;
	}
yy375:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy446;
	default:	goto yy64;
	}
yy376:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy377;
	}
yy377:
#line 6860 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CHOICE (context.location); }
#line 12000 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy378:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy447;
	default:	goto yy64;
	}
yy379:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy448;
	default:	goto yy64;
	}
yy380:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy449;
	default:	goto yy64;
	}
yy381:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy450;
	default:	goto yy64;
	}
yy382:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy451;
	default:	goto yy64;
	}
yy383:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy453;
	default:	goto yy64;
	}
yy384:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy454;
	default:	goto yy64;
	}
yy385:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy455;
	default:	goto yy64;
	}
yy386:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy456;
	default:	goto yy64;
	}
yy387:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy458;
	default:	goto yy64;
	}
yy388:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy459;
	default:	goto yy64;
	}
yy389:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy390;
	}
yy390:
#line 6876 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXCEPT (context.location); }
#line 12139 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy391:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy460;
	default:	goto yy64;
	}
yy392:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy461;
	default:	goto yy64;
	}
yy393:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy463;
	default:	goto yy64;
	}
yy394:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy464;
	default:	goto yy64;
	}
yy395:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy465;
	default:	goto yy64;
	}
yy396:
	yych = *++context.cursor;
	switch (yych) {
	case 'c':	goto yy466;
	default:	goto yy64;
	}
yy397:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy467;
	default:	goto yy64;
	}
yy398:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy468;
	default:	goto yy64;
	}
yy399:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy469;
	default:	goto yy64;
	}
yy400:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy470;
	default:	goto yy64;
	}
yy401:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy472;
	default:	goto yy64;
	}
yy402:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy474;
	default:	goto yy64;
	}
yy403:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy475;
	default:	goto yy64;
	}
yy404:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy476;
	default:	goto yy64;
	}
yy405:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy477;
	default:	goto yy64;
	}
yy406:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy479;
	default:	goto yy64;
	}
yy407:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy480;
	default:	goto yy64;
	}
yy408:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy481;
	default:	goto yy64;
	}
yy409:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy482;
	default:	goto yy64;
	}
yy410:
	yych = *++context.cursor;
	switch (yych) {
	case 'c':	goto yy483;
	default:	goto yy64;
	}
yy411:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy412;
	}
yy412:
#line 6903 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OBJECT (context.location); }
#line 12332 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy413:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy484;
	default:	goto yy64;
	}
yy414:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy486;
	default:	goto yy64;
	}
yy415:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy487;
	default:	goto yy64;
	}
yy416:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy488;
	default:	goto yy64;
	}
yy417:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy490;
	default:	goto yy64;
	}
yy418:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy491;
	default:	goto yy64;
	}
yy419:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy493;
	default:	goto yy64;
	}
yy420:
	yych = *++context.cursor;
	switch (yych) {
	case 'b':	goto yy495;
	default:	goto yy64;
	}
yy421:
	yych = *++context.cursor;
	switch (yych) {
	case 'V':	goto yy496;
	default:	goto yy64;
	}
yy422:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy497;
	default:	goto yy64;
	}
yy423:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy498;
	default:	goto yy64;
	}
yy424:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy425;
	}
yy425:
#line 6922 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_STRING (context.location); }
#line 12471 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy426:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy427;
	}
yy427:
#line 6923 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SYNTAX (context.location); }
#line 12544 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy428:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy499;
	default:	goto yy64;
	}
yy429:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy500;
	default:	goto yy64;
	}
yy430:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy501;
	default:	goto yy64;
	}
yy431:
	yych = *++context.cursor;
	switch (yych) {
	case 'x':	goto yy502;
	default:	goto yy64;
	}
yy432:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy433;
	}
yy433:
#line 6932 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UNIQUE (context.location); }
#line 12641 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy434:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy503;
	default:	goto yy64;
	}
yy435:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy504;
	default:	goto yy64;
	}
yy436:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy506;
	default:	goto yy64;
	}
yy437:
	yych = *++context.cursor;
	switch (yych) {
	case 's':	goto yy507;
	default:	goto yy64;
	}
yy438:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy508;
	default:	goto yy64;
	}
yy439:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy509;
	default:	goto yy64;
	}
yy440:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy510;
	default:	goto yy64;
	}
yy441:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy511;
	default:	goto yy64;
	}
yy442:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy512;
	default:	goto yy64;
	}
yy443:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy513;
	default:	goto yy64;
	}
yy444:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy445;
	}
yy445:
#line 6857 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BOOLEAN (context.location); }
#line 12774 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy446:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy514;
	default:	goto yy64;
	}
yy447:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy515;
	default:	goto yy64;
	}
yy448:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy516;
	default:	goto yy64;
	}
yy449:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy517;
	default:	goto yy64;
	}
yy450:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy518;
	default:	goto yy64;
	}
yy451:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy452;
	}
yy452:
#line 6868 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DEFAULT (context.location); }
#line 12877 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy453:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy519;
	default:	goto yy64;
	}
yy454:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy520;
	default:	goto yy64;
	}
yy455:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy522;
	default:	goto yy64;
	}
yy456:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy457;
	}
yy457:
#line 6872 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ENCODED (context.location); }
#line 12968 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy458:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy524;
	default:	goto yy64;
	}
yy459:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy525;
	default:	goto yy64;
	}
yy460:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy526;
	default:	goto yy64;
	}
yy461:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy462;
	}
yy462:
#line 6878 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXPORTS (context.location); }
#line 13059 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy463:
	yych = *++context.cursor;
	switch (yych) {
	case 'B':	goto yy528;
	default:	goto yy64;
	}
yy464:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy529;
	default:	goto yy64;
	}
yy465:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy531;
	case 'i':	goto yy532;
	default:	goto yy64;
	}
yy466:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy533;
	default:	goto yy64;
	}
yy467:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy534;
	default:	goto yy64;
	}
yy468:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy535;
	default:	goto yy64;
	}
yy469:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy536;
	default:	goto yy64;
	}
yy470:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy471;
	}
yy471:
#line 6889 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IMPLIED (context.location); }
#line 13175 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy472:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy473;
	}
yy473:
#line 6890 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IMPORTS (context.location); }
#line 13248 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy474:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy538;
	default:	goto yy64;
	}
yy475:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy540;
	default:	goto yy64;
	}
yy476:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy542;
	default:	goto yy64;
	}
yy477:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy478;
	}
yy478:
#line 6894 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INTEGER (context.location); }
#line 13339 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy479:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy543;
	default:	goto yy64;
	}
yy480:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy544;
	default:	goto yy64;
	}
yy481:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy545;
	default:	goto yy64;
	}
yy482:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy546;
	default:	goto yy64;
	}
yy483:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy547;
	default:	goto yy64;
	}
yy484:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy485;
	}
yy485:
#line 6907 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OID_IRI (context.location); }
#line 13442 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy486:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy548;
	default:	goto yy64;
	}
yy487:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy550;
	default:	goto yy64;
	}
yy488:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy489;
	}
yy489:
#line 6909 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PATTERN (context.location); }
#line 13527 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy490:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy551;
	default:	goto yy64;
	}
yy491:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy492;
	}
yy492:
#line 6912 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PRESENT (context.location); }
#line 13606 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy493:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy494;
	}
yy494:
#line 6914 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PRIVATE (context.location); }
#line 13679 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy495:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy552;
	default:	goto yy64;
	}
yy496:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy553;
	default:	goto yy64;
	}
yy497:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy554;
	default:	goto yy64;
	}
yy498:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy556;
	default:	goto yy64;
	}
yy499:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy558;
	default:	goto yy64;
	}
yy500:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy559;
	default:	goto yy64;
	}
yy501:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy560;
	default:	goto yy64;
	}
yy502:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy561;
	default:	goto yy64;
	}
yy503:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy562;
	default:	goto yy64;
	}
yy504:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy505;
	}
yy505:
#line 6935 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UTCTime (context.location); }
#line 13806 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy506:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy563;
	default:	goto yy64;
	}
yy507:
	yych = *++context.cursor;
	switch (yych) {
	case 'a':	goto yy564;
	default:	goto yy64;
	}
yy508:
	yych = *++context.cursor;
	switch (yych) {
	case 'x':	goto yy565;
	default:	goto yy64;
	}
yy509:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy566;
	default:	goto yy64;
	}
yy510:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy567;
	default:	goto yy64;
	}
yy511:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy568;
	default:	goto yy64;
	}
yy512:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy569;
	default:	goto yy64;
	}
yy513:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy571;
	default:	goto yy64;
	}
yy514:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy573;
	default:	goto yy64;
	}
yy515:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy575;
	default:	goto yy64;
	}
yy516:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy577;
	default:	goto yy64;
	}
yy517:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy578;
	default:	goto yy64;
	}
yy518:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy579;
	default:	goto yy64;
	}
yy519:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy581;
	default:	goto yy64;
	}
yy520:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy521;
	}
yy521:
#line 6870 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DURATION (context.location); }
#line 13963 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy522:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy523;
	}
yy523:
#line 6871 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EMBEDDED (context.location); }
#line 14036 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy524:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy582;
	default:	goto yy64;
	}
yy525:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy583;
	default:	goto yy64;
	}
yy526:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy527;
	}
yy527:
#line 6877 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXPLICIT (context.location); }
#line 14121 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy528:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy584;
	default:	goto yy64;
	}
yy529:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy530;
	}
yy530:
#line 6880 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXTERNAL (context.location); }
#line 14200 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy531:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy585;
	default:	goto yy64;
	}
yy532:
	yych = *++context.cursor;
	switch (yych) {
	case 'z':	goto yy586;
	default:	goto yy64;
	}
yy533:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy587;
	default:	goto yy64;
	}
yy534:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy588;
	default:	goto yy64;
	}
yy535:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy590;
	default:	goto yy64;
	}
yy536:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy537;
	}
yy537:
#line 6888 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IMPLICIT (context.location); }
#line 14303 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy538:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy539;
	}
yy539:
#line 6891 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INCLUDES (context.location); }
#line 14376 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy540:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy541;
	}
yy541:
#line 6892 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INSTANCE (context.location); }
#line 14449 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy542:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy591;
	default:	goto yy64;
	}
yy543:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy592;
	default:	goto yy64;
	}
yy544:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy593;
	default:	goto yy64;
	}
yy545:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy594;
	default:	goto yy64;
	}
yy546:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy595;
	default:	goto yy64;
	}
yy547:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy596;
	default:	goto yy64;
	}
yy548:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy549;
	}
yy549:
#line 6908 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPTIONAL (context.location); }
#line 14558 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy550:
	yych = *++context.cursor;
	switch (yych) {
	case 's':	goto yy597;
	default:	goto yy64;
	}
yy551:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy598;
	default:	goto yy64;
	}
yy552:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy599;
	default:	goto yy64;
	}
yy553:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy600;
	default:	goto yy64;
	}
yy554:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy555;
	}
yy555:
#line 6918 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SEQUENCE (context.location); }
#line 14655 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy556:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy557;
	}
yy557:
#line 6920 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SETTINGS (context.location); }
#line 14728 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy558:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy601;
	default:	goto yy64;
	}
yy559:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy603;
	default:	goto yy64;
	}
yy560:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy604;
	default:	goto yy64;
	}
yy561:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy605;
	default:	goto yy64;
	}
yy562:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy606;
	default:	goto yy64;
	}
yy563:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy608;
	default:	goto yy64;
	}
yy564:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy609;
	default:	goto yy64;
	}
yy565:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy610;
	default:	goto yy64;
	}
yy566:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy611;
	default:	goto yy64;
	}
yy567:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy612;
	default:	goto yy64;
	}
yy568:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy613;
	default:	goto yy64;
	}
yy569:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy570;
	}
yy570:
#line 6853 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_AUTOMATIC (context.location); }
#line 14867 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy571:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy572;
	}
yy572:
#line 6856 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BMPString (context.location); }
#line 14940 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy573:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy574;
	}
yy574:
#line 6859 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CHARACTER (context.location); }
#line 15013 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy575:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'S':	goto yy614;
	default:	goto yy576;
	}
yy576:
#line 6862 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COMPONENT (context.location); }
#line 15086 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy577:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy616;
	default:	goto yy64;
	}
yy578:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy617;
	default:	goto yy64;
	}
yy579:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy580;
	}
yy580:
#line 6867 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DATE_TIME (context.location); }
#line 15171 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy581:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy619;
	default:	goto yy64;
	}
yy582:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy620;
	default:	goto yy64;
	}
yy583:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy621;
	default:	goto yy64;
	}
yy584:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy623;
	default:	goto yy64;
	}
yy585:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy624;
	default:	goto yy64;
	}
yy586:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy625;
	default:	goto yy64;
	}
yy587:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy626;
	default:	goto yy64;
	}
yy588:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy589;
	}
yy589:
#line 6886 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IA5String (context.location); }
#line 15286 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy590:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy627;
	default:	goto yy64;
	}
yy591:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy629;
	default:	goto yy64;
	}
yy592:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy630;
	default:	goto yy64;
	}
yy593:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy631;
	default:	goto yy64;
	}
yy594:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy632;
	default:	goto yy64;
	}
yy595:
	yych = *++context.cursor;
	switch (yych) {
	case 'B':	goto yy633;
	default:	goto yy64;
	}
yy596:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy634;
	default:	goto yy64;
	}
yy597:
	yych = *++context.cursor;
	switch (yych) {
	case 'c':	goto yy635;
	default:	goto yy64;
	}
yy598:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy636;
	default:	goto yy64;
	}
yy599:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy637;
	default:	goto yy64;
	}
yy600:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy638;
	default:	goto yy64;
	}
yy601:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy602;
	}
yy602:
#line 6924 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_T61String (context.location); }
#line 15425 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy603:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy639;
	default:	goto yy64;
	}
yy604:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy640;
	default:	goto yy64;
	}
yy605:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy641;
	default:	goto yy64;
	}
yy606:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy607;
	}
yy607:
#line 6933 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UNIVERSAL (context.location); }
#line 15516 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy608:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy642;
	default:	goto yy64;
	}
yy609:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy644;
	default:	goto yy64;
	}
yy610:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy645;
	default:	goto yy64;
	}
yy611:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy646;
	default:	goto yy64;
	}
yy612:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy647;
	default:	goto yy64;
	}
yy613:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy648;
	default:	goto yy64;
	}
yy614:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy615;
	}
yy615:
#line 6863 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COMPONENTS (context.location); }
#line 15625 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy616:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy650;
	default:	goto yy64;
	}
yy617:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy618;
	}
yy618:
#line 6865 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CONTAINING (context.location); }
#line 15704 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy619:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy652;
	default:	goto yy64;
	}
yy620:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy654;
	default:	goto yy64;
	}
yy621:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy622;
	}
yy622:
#line 6875 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ENUMERATED (context.location); }
#line 15789 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy623:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy655;
	default:	goto yy64;
	}
yy624:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy656;
	default:	goto yy64;
	}
yy625:
	yych = *++context.cursor;
	switch (yych) {
	case 'd':	goto yy657;
	default:	goto yy64;
	}
yy626:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy658;
	default:	goto yy64;
	}
yy627:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy628;
	}
yy628:
#line 6887 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IDENTIFIER (context.location); }
#line 15886 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy629:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy659;
	default:	goto yy64;
	}
yy630:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy660;
	default:	goto yy64;
	}
yy631:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy661;
	default:	goto yy64;
	}
yy632:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy662;
	default:	goto yy64;
	}
yy633:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy663;
	default:	goto yy64;
	}
yy634:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy664;
	default:	goto yy64;
	}
yy635:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy665;
	default:	goto yy64;
	}
yy636:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy666;
	default:	goto yy64;
	}
yy637:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy667;
	default:	goto yy64;
	}
yy638:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy668;
	default:	goto yy64;
	}
yy639:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy669;
	default:	goto yy64;
	}
yy640:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy671;
	default:	goto yy64;
	}
yy641:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy672;
	default:	goto yy64;
	}
yy642:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy643;
	}
yy643:
#line 6936 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UTF8String (context.location); }
#line 16037 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy644:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy673;
	default:	goto yy64;
	}
yy645:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy674;
	default:	goto yy64;
	}
yy646:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy675;
	default:	goto yy64;
	}
yy647:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy676;
	default:	goto yy64;
	}
yy648:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy649;
	}
yy649:
#line 6852 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_APPLICATION (context.location); }
#line 16134 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy650:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy651;
	}
yy651:
#line 6864 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CONSTRAINED (context.location); }
#line 16207 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy652:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy653;
	}
yy653:
#line 6869 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DEFINITIONS (context.location); }
#line 16280 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy654:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy677;
	default:	goto yy64;
	}
yy655:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy678;
	default:	goto yy64;
	}
yy656:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy679;
	default:	goto yy64;
	}
yy657:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy680;
	default:	goto yy64;
	}
yy658:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy681;
	default:	goto yy64;
	}
yy659:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy682;
	default:	goto yy64;
	}
yy660:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy684;
	default:	goto yy64;
	}
yy661:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy686;
	default:	goto yy64;
	}
yy662:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy688;
	default:	goto yy64;
	}
yy663:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy689;
	default:	goto yy64;
	}
yy664:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy691;
	default:	goto yy64;
	}
yy665:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy692;
	default:	goto yy64;
	}
yy666:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy693;
	default:	goto yy64;
	}
yy667:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy694;
	default:	goto yy64;
	}
yy668:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy695;
	default:	goto yy64;
	}
yy669:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy670;
	}
yy670:
#line 6928 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TIME_OF_DAY (context.location); }
#line 16443 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy671:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy697;
	default:	goto yy64;
	}
yy672:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy698;
	default:	goto yy64;
	}
yy673:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy699;
	default:	goto yy64;
	}
yy674:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy700;
	default:	goto yy64;
	}
yy675:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy701;
	default:	goto yy64;
	}
yy676:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy702;
	default:	goto yy64;
	}
yy677:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy703;
	default:	goto yy64;
	}
yy678:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy704;
	default:	goto yy64;
	}
yy679:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy706;
	default:	goto yy64;
	}
yy680:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy708;
	default:	goto yy64;
	}
yy681:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy709;
	default:	goto yy64;
	}
yy682:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy683;
	}
yy683:
#line 6893 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INSTRUCTIONS (context.location); }
#line 16582 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy684:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy685;
	}
yy685:
#line 6895 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INTERSECTION (context.location); }
#line 16655 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy686:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy687;
	}
yy687:
#line 6896 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ISO646String (context.location); }
#line 16728 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy688:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy711;
	default:	goto yy64;
	}
yy689:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy690;
	}
yy690:
#line 6900 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_NOT_A_NUMBER (context.location); }
#line 16807 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy691:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy712;
	default:	goto yy64;
	}
yy692:
	yych = *++context.cursor;
	switch (yych) {
	case 'p':	goto yy714;
	default:	goto yy64;
	}
yy693:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy715;
	default:	goto yy64;
	}
yy694:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy717;
	default:	goto yy64;
	}
yy695:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case '_':	goto yy718;
	default:	goto yy696;
	}
yy696:
#line 6916 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_RELATIVE_OID (context.location); }
#line 16904 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy697:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy719;
	default:	goto yy64;
	}
yy698:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy720;
	default:	goto yy64;
	}
yy699:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy722;
	default:	goto yy64;
	}
yy700:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy723;
	default:	goto yy64;
	}
yy701:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy724;
	default:	goto yy64;
	}
yy702:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy726;
	default:	goto yy64;
	}
yy703:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy727;
	default:	goto yy64;
	}
yy704:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy705;
	}
yy705:
#line 6879 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXTENSIBILITY (context.location); }
#line 17019 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy706:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy707;
	}
yy707:
#line 6884 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GeneralString (context.location); }
#line 17092 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy708:
	yych = *++context.cursor;
	switch (yych) {
	case 'm':	goto yy728;
	default:	goto yy64;
	}
yy709:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy710;
	}
yy710:
#line 6885 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GraphicString (context.location); }
#line 17171 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy711:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy729;
	default:	goto yy64;
	}
yy712:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy713;
	}
yy713:
#line 6902 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_NumericString (context.location); }
#line 17250 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy714:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy731;
	default:	goto yy64;
	}
yy715:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy716;
	}
yy716:
#line 6911 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PLUS_INFINITY (context.location); }
#line 17329 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy717:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy732;
	default:	goto yy64;
	}
yy718:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy733;
	default:	goto yy64;
	}
yy719:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy734;
	default:	goto yy64;
	}
yy720:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy721;
	}
yy721:
#line 6926 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TeletexString (context.location); }
#line 17420 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy722:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy735;
	default:	goto yy64;
	}
yy723:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy736;
	default:	goto yy64;
	}
yy724:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy725;
	}
yy725:
#line 6938 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_VisibleString (context.location); }
#line 17505 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy726:
	yych = *++context.cursor;
	switch (yych) {
	case 'X':	goto yy738;
	default:	goto yy64;
	}
yy727:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy740;
	default:	goto yy64;
	}
yy728:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy741;
	default:	goto yy64;
	}
yy729:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy730;
	}
yy730:
#line 6899 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_MINUS_INFINITY (context.location); }
#line 17596 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy731:
	yych = *++context.cursor;
	switch (yych) {
	case 'o':	goto yy743;
	default:	goto yy64;
	}
yy732:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy744;
	default:	goto yy64;
	}
yy733:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy746;
	default:	goto yy64;
	}
yy734:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy747;
	default:	goto yy64;
	}
yy735:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy749;
	default:	goto yy64;
	}
yy736:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy737;
	}
yy737:
#line 6937 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_VideotexString (context.location); }
#line 17699 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy738:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy739;
	}
yy739:
#line 6850 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ABSTRACT_SYNTAX (context.location); }
#line 17772 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy740:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy751;
	default:	goto yy64;
	}
yy741:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy742;
	}
yy742:
#line 6883 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GeneralizedTime (context.location); }
#line 17851 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy743:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy753;
	default:	goto yy64;
	}
yy744:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy745;
	}
yy745:
#line 6913 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PrintableString (context.location); }
#line 17930 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy746:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy755;
	default:	goto yy64;
	}
yy747:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy748;
	}
yy748:
#line 6930 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TYPE_IDENTIFIER (context.location); }
#line 18009 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy749:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy750;
	}
yy750:
#line 6934 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UniversalString (context.location); }
#line 18082 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy751:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy752;
	}
yy752:
#line 6873 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ENCODING_CONTROL (context.location); }
#line 18155 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy753:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy754;
	}
yy754:
#line 6904 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ObjectDescriptor (context.location); }
#line 18228 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy755:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy756;
	}
yy756:
#line 6917 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_RELATIVE_OID_IRI (context.location); }
#line 18301 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
}
#line 6975 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"

    }
}
