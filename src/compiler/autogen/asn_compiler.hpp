/* Generated by re2c 1.0.1 */
#line 1 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
// A Bison parser, made by GNU Bison 3.0.4.

// Skeleton implementation for Bison LALR(1) parsers in C++

// Copyright (C) 2002-2015 Free Software Foundation, Inc.

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// As a special exception, you may create a larger work that contains
// part or all of the Bison parser skeleton and distribute that work
// under terms of your choice, so long as that work isn't itself a
// parser generator using the skeleton or a modified version thereof
// as a parser skeleton.  Alternatively, if you modify or redistribute
// the parser skeleton itself, you may (at your option) remove this
// special exception, which will cause the skeleton and the resulting
// Bison output files to be licensed under the GNU General Public
// License without this special exception.

// This special exception was added by the Free Software Foundation in
// version 2.2 of Bison.


// First part of user declarations.

#line 37 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:404

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

// //                    "%code requires" blocks.
#line 10 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:408

    #include "fast_ber/compiler/CompilerTypes.hpp"

#line 52 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:408

# include <cassert>
# include <cstdlib> // std::abort
# include <iostream>
# include <stdexcept>
# include <string>
# include <vector>
#include <typeinfo>
#ifndef YYASSERT
# include <cassert>
# define YYASSERT assert
#endif


#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif


namespace yy {
#line 127 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:408

  template <class T, class S = std::vector<T> >
  class stack
  {
  public:
    // Hide our reversed order.
    typedef typename S::reverse_iterator iterator;
    typedef typename S::const_reverse_iterator const_iterator;

    stack ()
      : seq_ ()
    {
      seq_.reserve (200);
    }

    stack (unsigned int n)
      : seq_ (n)
    {}

    inline
    T&
    operator[] (unsigned int i)
    {
      return seq_[seq_.size () - 1 - i];
    }

    inline
    const T&
    operator[] (unsigned int i) const
    {
      return seq_[seq_.size () - 1 - i];
    }

    /// Steal the contents of \a t.
    ///
    /// Close to move-semantics.
    inline
    void
    push (T& t)
    {
      seq_.push_back (T());
      operator[](0).move (t);
    }

    inline
    void
    pop (unsigned int n = 1)
    {
      for (; n; --n)
        seq_.pop_back ();
    }

    void
    clear ()
    {
      seq_.clear ();
    }

    inline
    typename S::size_type
    size () const
    {
      return seq_.size ();
    }

    inline
    const_iterator
    begin () const
    {
      return seq_.rbegin ();
    }

    inline
    const_iterator
    end () const
    {
      return seq_.rend ();
    }

  private:
    stack (const stack&);
    stack& operator= (const stack&);
    /// The wrapped container.
    S seq_;
  };

  /// Present a slice of the top of a stack.
  template <class T, class S = stack<T> >
  class slice
  {
  public:
    slice (const S& stack, unsigned int range)
      : stack_ (stack)
      , range_ (range)
    {}

    inline
    const T&
    operator [] (unsigned int i) const
    {
      return stack_[range_ - i];
    }

  private:
    const S& stack_;
    unsigned int range_;
  };

  /// Abstract a position.
  class position
  {
  public:
    /// Construct a position.
    explicit position (std::string* f = YY_NULLPTR,
                       unsigned int l = 1u,
                       unsigned int c = 1u)
      : filename (f)
      , line (l)
      , column (c)
    {
    }


    /// Initialization.
    void initialize (std::string* fn = YY_NULLPTR,
                     unsigned int l = 1u,
                     unsigned int c = 1u)
    {
      filename = fn;
      line = l;
      column = c;
    }

    /** \name Line and Column related manipulators
     ** \{ */
    /// (line related) Advance to the COUNT next lines.
    void lines (int count = 1)
    {
      if (count)
        {
          column = 1u;
          line = add_ (line, count, 1);
        }
    }

    /// (column related) Advance to the COUNT next columns.
    void columns (int count = 1)
    {
      column = add_ (column, count, 1);
    }
    /** \} */

    /// File name to which this position refers.
    std::string* filename;
    /// Current line number.
    unsigned int line;
    /// Current column number.
    unsigned int column;

  private:
    /// Compute max(min, lhs+rhs) (provided min <= lhs).
    static unsigned int add_ (unsigned int lhs, int rhs, unsigned int min)
    {
      return (0 < rhs || -static_cast<unsigned int>(rhs) < lhs
              ? rhs + lhs
              : min);
    }
  };

  /// Add \a width columns, in place.
  inline position&
  operator+= (position& res, int width)
  {
    res.columns (width);
    return res;
  }

  /// Add \a width columns.
  inline position
  operator+ (position res, int width)
  {
    return res += width;
  }

  /// Subtract \a width columns, in place.
  inline position&
  operator-= (position& res, int width)
  {
    return res += -width;
  }

  /// Subtract \a width columns.
  inline position
  operator- (position res, int width)
  {
    return res -= width;
  }

  /// Compare two position objects.
  inline bool
  operator== (const position& pos1, const position& pos2)
  {
    return (pos1.line == pos2.line
            && pos1.column == pos2.column
            && (pos1.filename == pos2.filename
                || (pos1.filename && pos2.filename
                    && *pos1.filename == *pos2.filename)));
  }

  /// Compare two position objects.
  inline bool
  operator!= (const position& pos1, const position& pos2)
  {
    return !(pos1 == pos2);
  }

  /** \brief Intercept output stream redirection.
   ** \param ostr the destination output stream
   ** \param pos a reference to the position to redirect
   */
  template <typename YYChar>
  inline std::basic_ostream<YYChar>&
  operator<< (std::basic_ostream<YYChar>& ostr, const position& pos)
  {
    if (pos.filename)
      ostr << *pos.filename << ':';
    return ostr << pos.line << '.' << pos.column;
  }

  /// Abstract a location.
  class location
  {
  public:

    /// Construct a location from \a b to \a e.
    location (const position& b, const position& e)
      : begin (b)
      , end (e)
    {
    }

    /// Construct a 0-width location in \a p.
    explicit location (const position& p = position ())
      : begin (p)
      , end (p)
    {
    }

    /// Construct a 0-width location in \a f, \a l, \a c.
    explicit location (std::string* f,
                       unsigned int l = 1u,
                       unsigned int c = 1u)
      : begin (f, l, c)
      , end (f, l, c)
    {
    }


    /// Initialization.
    void initialize (std::string* f = YY_NULLPTR,
                     unsigned int l = 1u,
                     unsigned int c = 1u)
    {
      begin.initialize (f, l, c);
      end = begin;
    }

    /** \name Line and Column related manipulators
     ** \{ */
  public:
    /// Reset initial location to final location.
    void step ()
    {
      begin = end;
    }

    /// Extend the current location to the COUNT next columns.
    void columns (int count = 1)
    {
      end += count;
    }

    /// Extend the current location to the COUNT next lines.
    void lines (int count = 1)
    {
      end.lines (count);
    }
    /** \} */


  public:
    /// Beginning of the located region.
    position begin;
    /// End of the located region.
    position end;
  };

  /// Join two locations, in place.
  inline location& operator+= (location& res, const location& end)
  {
    res.end = end.end;
    return res;
  }

  /// Join two locations.
  inline location operator+ (location res, const location& end)
  {
    return res += end;
  }

  /// Add \a width columns to the end position, in place.
  inline location& operator+= (location& res, int width)
  {
    res.columns (width);
    return res;
  }

  /// Add \a width columns to the end position.
  inline location operator+ (location res, int width)
  {
    return res += width;
  }

  /// Subtract \a width columns to the end position, in place.
  inline location& operator-= (location& res, int width)
  {
    return res += -width;
  }

  /// Subtract \a width columns to the end position.
  inline location operator- (location res, int width)
  {
    return res -= width;
  }

  /// Compare two location objects.
  inline bool
  operator== (const location& loc1, const location& loc2)
  {
    return loc1.begin == loc2.begin && loc1.end == loc2.end;
  }

  /// Compare two location objects.
  inline bool
  operator!= (const location& loc1, const location& loc2)
  {
    return !(loc1 == loc2);
  }

  /** \brief Intercept output stream redirection.
   ** \param ostr the destination output stream
   ** \param loc a reference to the location to redirect
   **
   ** Avoid duplicate information.
   */
  template <typename YYChar>
  inline std::basic_ostream<YYChar>&
  operator<< (std::basic_ostream<YYChar>& ostr, const location& loc)
  {
    unsigned int end_col = 0 < loc.end.column ? loc.end.column - 1 : 0;
    ostr << loc.begin;
    if (loc.end.filename
        && (!loc.begin.filename
            || *loc.begin.filename != *loc.end.filename))
      ostr << '-' << loc.end.filename << ':' << loc.end.line << '.' << end_col;
    else if (loc.begin.line < loc.end.line)
      ostr << '-' << loc.end.line << '.' << end_col;
    else if (loc.begin.column < end_col)
      ostr << '-' << end_col;
    return ostr;
  }


  /// A char[S] buffer to store and retrieve objects.
  ///
  /// Sort of a variant, but does not keep track of the nature
  /// of the stored data, since that knowledge is available
  /// via the current state.
  template <size_t S>
  struct variant
  {
    /// Type of *this.
    typedef variant<S> self_type;

    /// Empty construction.
    variant ()
      : yytypeid_ (YY_NULLPTR)
    {}

    /// Construct and fill.
    template <typename T>
    variant (const T& t)
      : yytypeid_ (&typeid (T))
    {
      YYASSERT (sizeof (T) <= S);
      new (yyas_<T> ()) T (t);
    }

    /// Destruction, allowed only if empty.
    ~variant ()
    {
      YYASSERT (!yytypeid_);
    }

    /// Instantiate an empty \a T in here.
    template <typename T>
    T&
    build ()
    {
      YYASSERT (!yytypeid_);
      YYASSERT (sizeof (T) <= S);
      yytypeid_ = & typeid (T);
      return *new (yyas_<T> ()) T;
    }

    /// Instantiate a \a T in here from \a t.
    template <typename T>
    T&
    build (const T& t)
    {
      YYASSERT (!yytypeid_);
      YYASSERT (sizeof (T) <= S);
      yytypeid_ = & typeid (T);
      return *new (yyas_<T> ()) T (t);
    }

    /// Accessor to a built \a T.
    template <typename T>
    T&
    as ()
    {
      YYASSERT (*yytypeid_ == typeid (T));
      YYASSERT (sizeof (T) <= S);
      return *yyas_<T> ();
    }

    /// Const accessor to a built \a T (for %printer).
    template <typename T>
    const T&
    as () const
    {
      YYASSERT (*yytypeid_ == typeid (T));
      YYASSERT (sizeof (T) <= S);
      return *yyas_<T> ();
    }

    /// Swap the content with \a other, of same type.
    ///
    /// Both variants must be built beforehand, because swapping the actual
    /// data requires reading it (with as()), and this is not possible on
    /// unconstructed variants: it would require some dynamic testing, which
    /// should not be the variant's responsability.
    /// Swapping between built and (possibly) non-built is done with
    /// variant::move ().
    template <typename T>
    void
    swap (self_type& other)
    {
      YYASSERT (yytypeid_);
      YYASSERT (*yytypeid_ == *other.yytypeid_);
      std::swap (as<T> (), other.as<T> ());
    }

    /// Move the content of \a other to this.
    ///
    /// Destroys \a other.
    template <typename T>
    void
    move (self_type& other)
    {
      build<T> ();
      swap<T> (other);
      other.destroy<T> ();
    }

    /// Copy the content of \a other to this.
    template <typename T>
    void
    copy (const self_type& other)
    {
      build<T> (other.as<T> ());
    }

    /// Destroy the stored \a T.
    template <typename T>
    void
    destroy ()
    {
      as<T> ().~T ();
      yytypeid_ = YY_NULLPTR;
    }

  private:
    /// Prohibit blind copies.
    self_type& operator=(const self_type&);
    variant (const self_type&);

    /// Accessor to raw memory as \a T.
    template <typename T>
    T*
    yyas_ ()
    {
      void *yyp = yybuffer_.yyraw;
      return static_cast<T*> (yyp);
     }

    /// Const accessor to raw memory as \a T.
    template <typename T>
    const T*
    yyas_ () const
    {
      const void *yyp = yybuffer_.yyraw;
      return static_cast<const T*> (yyp);
     }

    union
    {
      /// Strongest alignment constraints.
      long double yyalign_me;
      /// A buffer large enough to store any of the semantic values.
      char yyraw[S];
    } yybuffer_;

    /// Whether the content is built: if defined, the name of the stored type.
    const std::type_info *yytypeid_;
  };


  /// A Bison parser.
  class asn1_parser
  {
  public:
#ifndef YYSTYPE
    /// An auxiliary type to compute the largest semantic type.
    union union_type
    {
      // TypeAssignment
      // ValueAssignment
      char dummy1[sizeof(Assignment)];

      // BuiltinType
      char dummy2[sizeof(BuiltinType)];

      // ChoiceType
      char dummy3[sizeof(ChoiceType)];

      // Class
      char dummy4[sizeof(Class)];

      // ComponentType
      char dummy5[sizeof(ComponentType)];

      // ComponentTypeLists
      // RootComponentTypeList
      // ComponentTypeList
      char dummy6[sizeof(ComponentTypeList)];

      // DefinedType
      // ReferencedType
      char dummy7[sizeof(DefinedType)];

      // EnumeratedType
      // Enumerations
      // Enumeration
      char dummy8[sizeof(EnumeratedType)];

      // EnumerationItem
      char dummy9[sizeof(EnumerationValue)];

      // NamedNumber
      char dummy10[sizeof(NamedNumber)];

      // NamedType
      char dummy11[sizeof(NamedType)];

      // ObjIdComponents
      // NameForm
      // NumberForm
      // NameAndNumberForm
      char dummy12[sizeof(ObjectIdComponentValue)];

      // PrefixedType
      char dummy13[sizeof(PrefixedType)];

      // SequenceOfType
      char dummy14[sizeof(SequenceOfType)];

      // SequenceType
      char dummy15[sizeof(SequenceType)];

      // SetOfType
      char dummy16[sizeof(SetOfType)];

      // SetType
      char dummy17[sizeof(SetType)];

      // Tag
      char dummy18[sizeof(Tag)];

      // TaggedType
      char dummy19[sizeof(TaggedType)];

      // TagDefault
      char dummy20[sizeof(TaggingMode)];

      // Type
      char dummy21[sizeof(Type)];

      // Value
      // BuiltinValue
      char dummy22[sizeof(Value)];

      // realnumber
      char dummy23[sizeof(double)];

      // ClassNumber
      char dummy24[sizeof(int)];

      // number
      // DefinedValue
      // SignedNumber
      char dummy25[sizeof(long long)];

      // GENERIC_IDENTIFIER_UPPERCASE
      // GENERIC_IDENTIFIER_LOWERCASE
      // typereference
      // identifier
      // valuereference
      // modulereference
      char dummy26[sizeof(std::string)];

      // AlternativeTypeLists
      // RootAlternativeTypeList
      // AlternativeTypeList
      char dummy27[sizeof(std::vector<NamedType>)];

      // ObjectIdentifierValue
      // ObjIdComponentsList
      char dummy28[sizeof(std::vector<ObjectIdComponentValue>)];
};

    /// Symbol semantic values.
    typedef variant<sizeof(union_type)> semantic_type;
#else
    typedef YYSTYPE semantic_type;
#endif
    /// Symbol locations.
    typedef location location_type;

    /// Syntax errors thrown from user actions.
    struct syntax_error : std::runtime_error
    {
      syntax_error (const location_type& l, const std::string& m);
      location_type location;
    };

    /// Tokens.
    struct token
    {
      enum yytokentype
      {
        END_OF_FILE = 0,
        comment = 258,
        number = 259,
        realnumber = 260,
        bstring = 261,
        xmlbstring = 262,
        hstring = 263,
        xmlhstring = 264,
        cstring = 265,
        xmlcstring = 266,
        simplestring = 267,
        xmltstring = 268,
        psname = 269,
        encodingreference = 270,
        integerUnicodeLabel = 271,
        tstring = 274,
        objectclassreference = 276,
        objectreference = 277,
        objectsetreference = 278,
        typefieldreference = 279,
        valuefieldreference = 280,
        valuesetfieldreference = 281,
        objectfieldreference = 282,
        objectsetfieldreference = 283,
        word = 284,
        ABSENT = 285,
        ABSTRACT_SYNTAX = 286,
        ALL = 287,
        APPLICATION = 288,
        ASN_NULL = 289,
        AUTOMATIC = 290,
        BEGIN = 291,
        BIT = 292,
        BMPString = 293,
        BOOLEAN = 294,
        BY = 295,
        CHARACTER = 296,
        CHOICE = 297,
        CLASS = 298,
        COMPONENT = 299,
        COMPONENTS = 300,
        CONSTRAINED = 301,
        CONTAINING = 302,
        DATE = 303,
        DATE_TIME = 304,
        DEFAULT = 305,
        DEFINITIONS = 306,
        DURATION = 307,
        EMBEDDED = 308,
        ENCODED = 309,
        ENCODING_CONTROL = 310,
        END = 311,
        ENUMERATED = 312,
        EXCEPT = 313,
        EXPLICIT = 314,
        EXPORTS = 315,
        EXTENSIBILITY = 316,
        EXTERNAL = 317,
        FALSE = 318,
        FROM = 319,
        GeneralizedTime = 320,
        GeneralString = 321,
        GraphicString = 322,
        IA5String = 323,
        IDENTIFIER = 324,
        IMPLICIT = 325,
        IMPLIED = 326,
        IMPORTS = 327,
        INCLUDES = 328,
        INSTANCE = 329,
        INSTRUCTIONS = 330,
        INTEGER = 331,
        INTERSECTION = 332,
        ISO646String = 333,
        MAX = 334,
        MIN = 335,
        MINUS_INFINITY = 336,
        NOT_A_NUMBER = 337,
        NumericString = 338,
        OBJECT = 339,
        ObjectDescriptor = 340,
        OCTET = 341,
        OF = 342,
        OID_IRI = 343,
        OPTIONAL = 344,
        PATTERN = 345,
        PDV = 346,
        PLUS_INFINITY = 347,
        PRESENT = 348,
        PrintableString = 349,
        PRIVATE = 350,
        REAL = 351,
        RELATIVE_OID = 352,
        RELATIVE_OID_IRI = 353,
        SEQUENCE = 354,
        SET = 355,
        SETTINGS = 356,
        SIZE = 357,
        STRING = 358,
        SYNTAX = 359,
        T61String = 360,
        TAGS = 361,
        TeletexString = 362,
        TIME = 363,
        TIME_OF_DAY = 364,
        TRUE = 365,
        TYPE_IDENTIFIER = 366,
        UNION = 367,
        UNIQUE = 368,
        UNIVERSAL = 369,
        UniversalString = 370,
        UTCTime = 371,
        UTF8String = 372,
        VideotexString = 373,
        VisibleString = 374,
        WITH = 375,
        DEFINED_AS = 376,
        ELIPSIS = 377,
        RANGE = 378,
        OPEN_BRACE = 379,
        CLOSE_BRACE = 380,
        OPEN_PARENTHESIS = 381,
        CLOSE_PARENTHESIS = 382,
        OPEN_SQUARE_BRACKET = 383,
        CLOSE_SQUARE_BRACKET = 384,
        LESS_THAN = 385,
        GREATER_THAN = 386,
        EXCLAMATION_MARK = 387,
        QUOTATION_MARK = 388,
        AMPERSAND = 389,
        APOSTROPHE = 390,
        ASTERISK = 391,
        COMMA = 392,
        FULL_STOP = 393,
        HYPHEN_MINUS = 394,
        SOLIDUS = 395,
        COLON = 396,
        SEMICOLON = 397,
        EQUALS_SIGN = 398,
        AT = 399,
        VERTICAL_LINE = 400,
        ACCENT = 401,
        PLUS = 402,
        STAR = 403,
        QUESTION_MARK = 404,
        GENERIC_IDENTIFIER_UPPERCASE = 405,
        GENERIC_IDENTIFIER_LOWERCASE = 406,
        GENERIC_INTEGER = 407,
        xmlasn1typename = 408
      };
    };

    /// (External) token type, as returned by yylex.
    typedef token::yytokentype token_type;

    /// Symbol type: an internal symbol number.
    typedef int symbol_number_type;

    /// The symbol type number to denote an empty symbol.
    enum { empty_symbol = -2 };

    /// Internal symbol number for tokens (subsumed by symbol_number_type).
    typedef unsigned char token_number_type;

    /// A complete symbol.
    ///
    /// Expects its Base type to provide access to the symbol type
    /// via type_get().
    ///
    /// Provide access to semantic value and location.
    template <typename Base>
    struct basic_symbol : Base
    {
      /// Alias to Base.
      typedef Base super_type;

      /// Default constructor.
      basic_symbol ();

      /// Copy constructor.
      basic_symbol (const basic_symbol& other);

      /// Constructor for valueless symbols, and symbols from each type.

  basic_symbol (typename Base::kind_type t, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Assignment v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const BuiltinType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ChoiceType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Class v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ComponentType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ComponentTypeList v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const DefinedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const EnumeratedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const EnumerationValue v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const NamedNumber v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const NamedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const ObjectIdComponentValue v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const PrefixedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const SequenceOfType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const SequenceType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const SetOfType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const SetType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Tag v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const TaggedType v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const TaggingMode v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Type v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const Value v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const double v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const int v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const long long v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::string v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<NamedType> v, const location_type& l);

  basic_symbol (typename Base::kind_type t, const std::vector<ObjectIdComponentValue> v, const location_type& l);


      /// Constructor for symbols with semantic value.
      basic_symbol (typename Base::kind_type t,
                    const semantic_type& v,
                    const location_type& l);

      /// Destroy the symbol.
      ~basic_symbol ();

      /// Destroy contents, and record that is empty.
      void clear ();

      /// Whether empty.
      bool empty () const;

      /// Destructive move, \a s is emptied into this.
      void move (basic_symbol& s);

      /// The semantic value.
      semantic_type value;

      /// The location.
      location_type location;

    private:
      /// Assignment operator.
      basic_symbol& operator= (const basic_symbol& other);
    };

    /// Type access provider for token (enum) based symbols.
    struct by_type
    {
      /// Default constructor.
      by_type ();

      /// Copy constructor.
      by_type (const by_type& other);

      /// The symbol type as needed by the constructor.
      typedef token_type kind_type;

      /// Constructor from (external) token numbers.
      by_type (kind_type t);

      /// Record that this symbol is empty.
      void clear ();

      /// Steal the symbol type from \a that.
      void move (by_type& that);

      /// The (internal) type number (corresponding to \a type).
      /// \a empty when empty.
      symbol_number_type type_get () const;

      /// The token.
      token_type token () const;

      /// The symbol type.
      /// \a empty_symbol when empty.
      /// An int, not token_number_type, to be able to store empty_symbol.
      int type;
    };

    /// "External" symbols: returned by the scanner.
    typedef basic_symbol<by_type> symbol_type;

    // Symbol constructors declarations.
    static inline
    symbol_type
    make_END_OF_FILE (const location_type& l);

    static inline
    symbol_type
    make_comment (const location_type& l);

    static inline
    symbol_type
    make_number (const long long& v, const location_type& l);

    static inline
    symbol_type
    make_realnumber (const double& v, const location_type& l);

    static inline
    symbol_type
    make_bstring (const location_type& l);

    static inline
    symbol_type
    make_xmlbstring (const location_type& l);

    static inline
    symbol_type
    make_hstring (const location_type& l);

    static inline
    symbol_type
    make_xmlhstring (const location_type& l);

    static inline
    symbol_type
    make_cstring (const location_type& l);

    static inline
    symbol_type
    make_xmlcstring (const location_type& l);

    static inline
    symbol_type
    make_simplestring (const location_type& l);

    static inline
    symbol_type
    make_xmltstring (const location_type& l);

    static inline
    symbol_type
    make_psname (const location_type& l);

    static inline
    symbol_type
    make_encodingreference (const location_type& l);

    static inline
    symbol_type
    make_integerUnicodeLabel (const location_type& l);

    static inline
    symbol_type
    make_tstring (const location_type& l);

    static inline
    symbol_type
    make_objectclassreference (const location_type& l);

    static inline
    symbol_type
    make_objectreference (const location_type& l);

    static inline
    symbol_type
    make_objectsetreference (const location_type& l);

    static inline
    symbol_type
    make_typefieldreference (const location_type& l);

    static inline
    symbol_type
    make_valuefieldreference (const location_type& l);

    static inline
    symbol_type
    make_valuesetfieldreference (const location_type& l);

    static inline
    symbol_type
    make_objectfieldreference (const location_type& l);

    static inline
    symbol_type
    make_objectsetfieldreference (const location_type& l);

    static inline
    symbol_type
    make_word (const location_type& l);

    static inline
    symbol_type
    make_ABSENT (const location_type& l);

    static inline
    symbol_type
    make_ABSTRACT_SYNTAX (const location_type& l);

    static inline
    symbol_type
    make_ALL (const location_type& l);

    static inline
    symbol_type
    make_APPLICATION (const location_type& l);

    static inline
    symbol_type
    make_ASN_NULL (const location_type& l);

    static inline
    symbol_type
    make_AUTOMATIC (const location_type& l);

    static inline
    symbol_type
    make_BEGIN (const location_type& l);

    static inline
    symbol_type
    make_BIT (const location_type& l);

    static inline
    symbol_type
    make_BMPString (const location_type& l);

    static inline
    symbol_type
    make_BOOLEAN (const location_type& l);

    static inline
    symbol_type
    make_BY (const location_type& l);

    static inline
    symbol_type
    make_CHARACTER (const location_type& l);

    static inline
    symbol_type
    make_CHOICE (const location_type& l);

    static inline
    symbol_type
    make_CLASS (const location_type& l);

    static inline
    symbol_type
    make_COMPONENT (const location_type& l);

    static inline
    symbol_type
    make_COMPONENTS (const location_type& l);

    static inline
    symbol_type
    make_CONSTRAINED (const location_type& l);

    static inline
    symbol_type
    make_CONTAINING (const location_type& l);

    static inline
    symbol_type
    make_DATE (const location_type& l);

    static inline
    symbol_type
    make_DATE_TIME (const location_type& l);

    static inline
    symbol_type
    make_DEFAULT (const location_type& l);

    static inline
    symbol_type
    make_DEFINITIONS (const location_type& l);

    static inline
    symbol_type
    make_DURATION (const location_type& l);

    static inline
    symbol_type
    make_EMBEDDED (const location_type& l);

    static inline
    symbol_type
    make_ENCODED (const location_type& l);

    static inline
    symbol_type
    make_ENCODING_CONTROL (const location_type& l);

    static inline
    symbol_type
    make_END (const location_type& l);

    static inline
    symbol_type
    make_ENUMERATED (const location_type& l);

    static inline
    symbol_type
    make_EXCEPT (const location_type& l);

    static inline
    symbol_type
    make_EXPLICIT (const location_type& l);

    static inline
    symbol_type
    make_EXPORTS (const location_type& l);

    static inline
    symbol_type
    make_EXTENSIBILITY (const location_type& l);

    static inline
    symbol_type
    make_EXTERNAL (const location_type& l);

    static inline
    symbol_type
    make_FALSE (const location_type& l);

    static inline
    symbol_type
    make_FROM (const location_type& l);

    static inline
    symbol_type
    make_GeneralizedTime (const location_type& l);

    static inline
    symbol_type
    make_GeneralString (const location_type& l);

    static inline
    symbol_type
    make_GraphicString (const location_type& l);

    static inline
    symbol_type
    make_IA5String (const location_type& l);

    static inline
    symbol_type
    make_IDENTIFIER (const location_type& l);

    static inline
    symbol_type
    make_IMPLICIT (const location_type& l);

    static inline
    symbol_type
    make_IMPLIED (const location_type& l);

    static inline
    symbol_type
    make_IMPORTS (const location_type& l);

    static inline
    symbol_type
    make_INCLUDES (const location_type& l);

    static inline
    symbol_type
    make_INSTANCE (const location_type& l);

    static inline
    symbol_type
    make_INSTRUCTIONS (const location_type& l);

    static inline
    symbol_type
    make_INTEGER (const location_type& l);

    static inline
    symbol_type
    make_INTERSECTION (const location_type& l);

    static inline
    symbol_type
    make_ISO646String (const location_type& l);

    static inline
    symbol_type
    make_MAX (const location_type& l);

    static inline
    symbol_type
    make_MIN (const location_type& l);

    static inline
    symbol_type
    make_MINUS_INFINITY (const location_type& l);

    static inline
    symbol_type
    make_NOT_A_NUMBER (const location_type& l);

    static inline
    symbol_type
    make_NumericString (const location_type& l);

    static inline
    symbol_type
    make_OBJECT (const location_type& l);

    static inline
    symbol_type
    make_ObjectDescriptor (const location_type& l);

    static inline
    symbol_type
    make_OCTET (const location_type& l);

    static inline
    symbol_type
    make_OF (const location_type& l);

    static inline
    symbol_type
    make_OID_IRI (const location_type& l);

    static inline
    symbol_type
    make_OPTIONAL (const location_type& l);

    static inline
    symbol_type
    make_PATTERN (const location_type& l);

    static inline
    symbol_type
    make_PDV (const location_type& l);

    static inline
    symbol_type
    make_PLUS_INFINITY (const location_type& l);

    static inline
    symbol_type
    make_PRESENT (const location_type& l);

    static inline
    symbol_type
    make_PrintableString (const location_type& l);

    static inline
    symbol_type
    make_PRIVATE (const location_type& l);

    static inline
    symbol_type
    make_REAL (const location_type& l);

    static inline
    symbol_type
    make_RELATIVE_OID (const location_type& l);

    static inline
    symbol_type
    make_RELATIVE_OID_IRI (const location_type& l);

    static inline
    symbol_type
    make_SEQUENCE (const location_type& l);

    static inline
    symbol_type
    make_SET (const location_type& l);

    static inline
    symbol_type
    make_SETTINGS (const location_type& l);

    static inline
    symbol_type
    make_SIZE (const location_type& l);

    static inline
    symbol_type
    make_STRING (const location_type& l);

    static inline
    symbol_type
    make_SYNTAX (const location_type& l);

    static inline
    symbol_type
    make_T61String (const location_type& l);

    static inline
    symbol_type
    make_TAGS (const location_type& l);

    static inline
    symbol_type
    make_TeletexString (const location_type& l);

    static inline
    symbol_type
    make_TIME (const location_type& l);

    static inline
    symbol_type
    make_TIME_OF_DAY (const location_type& l);

    static inline
    symbol_type
    make_TRUE (const location_type& l);

    static inline
    symbol_type
    make_TYPE_IDENTIFIER (const location_type& l);

    static inline
    symbol_type
    make_UNION (const location_type& l);

    static inline
    symbol_type
    make_UNIQUE (const location_type& l);

    static inline
    symbol_type
    make_UNIVERSAL (const location_type& l);

    static inline
    symbol_type
    make_UniversalString (const location_type& l);

    static inline
    symbol_type
    make_UTCTime (const location_type& l);

    static inline
    symbol_type
    make_UTF8String (const location_type& l);

    static inline
    symbol_type
    make_VideotexString (const location_type& l);

    static inline
    symbol_type
    make_VisibleString (const location_type& l);

    static inline
    symbol_type
    make_WITH (const location_type& l);

    static inline
    symbol_type
    make_DEFINED_AS (const location_type& l);

    static inline
    symbol_type
    make_ELIPSIS (const location_type& l);

    static inline
    symbol_type
    make_RANGE (const location_type& l);

    static inline
    symbol_type
    make_OPEN_BRACE (const location_type& l);

    static inline
    symbol_type
    make_CLOSE_BRACE (const location_type& l);

    static inline
    symbol_type
    make_OPEN_PARENTHESIS (const location_type& l);

    static inline
    symbol_type
    make_CLOSE_PARENTHESIS (const location_type& l);

    static inline
    symbol_type
    make_OPEN_SQUARE_BRACKET (const location_type& l);

    static inline
    symbol_type
    make_CLOSE_SQUARE_BRACKET (const location_type& l);

    static inline
    symbol_type
    make_LESS_THAN (const location_type& l);

    static inline
    symbol_type
    make_GREATER_THAN (const location_type& l);

    static inline
    symbol_type
    make_EXCLAMATION_MARK (const location_type& l);

    static inline
    symbol_type
    make_QUOTATION_MARK (const location_type& l);

    static inline
    symbol_type
    make_AMPERSAND (const location_type& l);

    static inline
    symbol_type
    make_APOSTROPHE (const location_type& l);

    static inline
    symbol_type
    make_ASTERISK (const location_type& l);

    static inline
    symbol_type
    make_COMMA (const location_type& l);

    static inline
    symbol_type
    make_FULL_STOP (const location_type& l);

    static inline
    symbol_type
    make_HYPHEN_MINUS (const location_type& l);

    static inline
    symbol_type
    make_SOLIDUS (const location_type& l);

    static inline
    symbol_type
    make_COLON (const location_type& l);

    static inline
    symbol_type
    make_SEMICOLON (const location_type& l);

    static inline
    symbol_type
    make_EQUALS_SIGN (const location_type& l);

    static inline
    symbol_type
    make_AT (const location_type& l);

    static inline
    symbol_type
    make_VERTICAL_LINE (const location_type& l);

    static inline
    symbol_type
    make_ACCENT (const location_type& l);

    static inline
    symbol_type
    make_PLUS (const location_type& l);

    static inline
    symbol_type
    make_STAR (const location_type& l);

    static inline
    symbol_type
    make_QUESTION_MARK (const location_type& l);

    static inline
    symbol_type
    make_GENERIC_IDENTIFIER_UPPERCASE (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_GENERIC_IDENTIFIER_LOWERCASE (const std::string& v, const location_type& l);

    static inline
    symbol_type
    make_GENERIC_INTEGER (const location_type& l);

    static inline
    symbol_type
    make_xmlasn1typename (const location_type& l);


    /// Build a parser object.
    asn1_parser (Context& context_yyarg);
    virtual ~asn1_parser ();

    /// Parse.
    /// \returns  0 iff parsing succeeded.
    virtual int parse ();

#if YYDEBUG
    /// The current debugging stream.
    std::ostream& debug_stream () const YY_ATTRIBUTE_PURE;
    /// Set the current debugging stream.
    void set_debug_stream (std::ostream &);

    /// Type for debugging levels.
    typedef int debug_level_type;
    /// The current debugging level.
    debug_level_type debug_level () const YY_ATTRIBUTE_PURE;
    /// Set the current debugging level.
    void set_debug_level (debug_level_type l);
#endif

    /// Report a syntax error.
    /// \param loc    where the syntax error is found.
    /// \param msg    a description of the syntax error.
    virtual void error (const location_type& loc, const std::string& msg);

    /// Report a syntax error.
    void error (const syntax_error& err);

  private:
    /// This class is not copyable.
    asn1_parser (const asn1_parser&);
    asn1_parser& operator= (const asn1_parser&);

    /// State numbers.
    typedef int state_type;

    /// Generate an error message.
    /// \param yystate   the state where the error occurred.
    /// \param yyla      the lookahead token.
    virtual std::string yysyntax_error_ (state_type yystate,
                                         const symbol_type& yyla) const;

    /// Compute post-reduction state.
    /// \param yystate   the current state
    /// \param yysym     the nonterminal to push on the stack
    state_type yy_lr_goto_state_ (state_type yystate, int yysym);

    /// Whether the given \c yypact_ value indicates a defaulted state.
    /// \param yyvalue   the value to check
    static bool yy_pact_value_is_default_ (int yyvalue);

    /// Whether the given \c yytable_ value indicates a syntax error.
    /// \param yyvalue   the value to check
    static bool yy_table_value_is_error_ (int yyvalue);

    static const short int yypact_ninf_;
    static const short int yytable_ninf_;

    /// Convert a scanner token number \a t to a symbol number.
    static token_number_type yytranslate_ (token_type t);

    // Tables.
  // YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
  // STATE-NUM.
  static const short int yypact_[];

  // YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
  // Performed when YYTABLE does not specify something else to do.  Zero
  // means the default is an error.
  static const unsigned short int yydefact_[];

  // YYPGOTO[NTERM-NUM].
  static const short int yypgoto_[];

  // YYDEFGOTO[NTERM-NUM].
  static const short int yydefgoto_[];

  // YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
  // positive, shift that token.  If negative, reduce the rule whose
  // number is the opposite.  If YYTABLE_NINF, syntax error.
  static const short int yytable_[];

  static const short int yycheck_[];

  // YYSTOS[STATE-NUM] -- The (internal number of the) accessing
  // symbol of state STATE-NUM.
  static const unsigned short int yystos_[];

  // YYR1[YYN] -- Symbol number of symbol that rule YYN derives.
  static const unsigned short int yyr1_[];

  // YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.
  static const unsigned char yyr2_[];


    /// Convert the symbol name \a n to a form suitable for a diagnostic.
    static std::string yytnamerr_ (const char *n);


    /// For a symbol, its name in clear.
    static const char* const yytname_[];
#if YYDEBUG
  // YYRLINE[YYN] -- Source line where rule number YYN was defined.
  static const unsigned short int yyrline_[];
    /// Report on the debug stream that the rule \a r is going to be reduced.
    virtual void yy_reduce_print_ (int r);
    /// Print the state stack on the debug stream.
    virtual void yystack_print_ ();

    // Debugging.
    int yydebug_;
    std::ostream* yycdebug_;

    /// \brief Display a symbol type, value and location.
    /// \param yyo    The output stream.
    /// \param yysym  The symbol.
    template <typename Base>
    void yy_print_ (std::ostream& yyo, const basic_symbol<Base>& yysym) const;
#endif

    /// \brief Reclaim the memory associated to a symbol.
    /// \param yymsg     Why this token is reclaimed.
    ///                  If null, print nothing.
    /// \param yysym     The symbol.
    template <typename Base>
    void yy_destroy_ (const char* yymsg, basic_symbol<Base>& yysym) const;

  private:
    /// Type access provider for state based symbols.
    struct by_state
    {
      /// Default constructor.
      by_state ();

      /// The symbol type as needed by the constructor.
      typedef state_type kind_type;

      /// Constructor.
      by_state (kind_type s);

      /// Copy constructor.
      by_state (const by_state& other);

      /// Record that this symbol is empty.
      void clear ();

      /// Steal the symbol type from \a that.
      void move (by_state& that);

      /// The (internal) type number (corresponding to \a state).
      /// \a empty_symbol when empty.
      symbol_number_type type_get () const;

      /// The state number used to denote an empty symbol.
      enum { empty_state = -1 };

      /// The state.
      /// \a empty when empty.
      state_type state;
    };

    /// "Internal" symbol: element of the stack.
    struct stack_symbol_type : basic_symbol<by_state>
    {
      /// Superclass.
      typedef basic_symbol<by_state> super_type;
      /// Construct an empty symbol.
      stack_symbol_type ();
      /// Steal the contents from \a sym to build this.
      stack_symbol_type (state_type s, symbol_type& sym);
      /// Assignment, needed by push_back.
      stack_symbol_type& operator= (const stack_symbol_type& that);
    };

    /// Stack type.
    typedef stack<stack_symbol_type> stack_type;

    /// The stack.
    stack_type yystack_;

    /// Push a new state on the stack.
    /// \param m    a debug message to display
    ///             if null, no trace is output.
    /// \param s    the symbol
    /// \warning the contents of \a s.value is stolen.
    void yypush_ (const char* m, stack_symbol_type& s);

    /// Push a new look ahead token on the state on the stack.
    /// \param m    a debug message to display
    ///             if null, no trace is output.
    /// \param s    the state
    /// \param sym  the symbol (for its value and location).
    /// \warning the contents of \a s.value is stolen.
    void yypush_ (const char* m, state_type s, symbol_type& sym);

    /// Pop \a n symbols the three stacks.
    void yypop_ (unsigned int n = 1);

    /// Constants.
    enum
    {
      yyeof_ = 0,
      yylast_ = 1923,     ///< Last index in yytable_.
      yynnts_ = 179,  ///< Number of nonterminal symbols.
      yyfinal_ = 5, ///< Termination state number.
      yyterror_ = 1,
      yyerrcode_ = 256,
      yyntokens_ = 155  ///< Number of tokens.
    };


    // User arguments.
    Context& context;
  };

  // Symbol number corresponding to token number t.
  inline
  asn1_parser::token_number_type
  asn1_parser::yytranslate_ (token_type t)
  {
    static
    const token_number_type
    translate_table[] =
    {
     0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154
    };
    const unsigned int user_token_number_max_ = 409;
    const token_number_type undef_token_ = 2;

    if (static_cast<int>(t) <= yyeof_)
      return yyeof_;
    else if (static_cast<unsigned int> (t) <= user_token_number_max_)
      return translate_table[t];
    else
      return undef_token_;
  }

  inline
  asn1_parser::syntax_error::syntax_error (const location_type& l, const std::string& m)
    : std::runtime_error (m)
    , location (l)
  {}

  // basic_symbol.
  template <typename Base>
  inline
  asn1_parser::basic_symbol<Base>::basic_symbol ()
    : value ()
  {}

  template <typename Base>
  inline
  asn1_parser::basic_symbol<Base>::basic_symbol (const basic_symbol& other)
    : Base (other)
    , value ()
    , location (other.location)
  {
      switch (other.type_get ())
    {
      case 215: // TypeAssignment
      case 216: // ValueAssignment
        value.copy< Assignment > (other.value);
        break;

      case 218: // BuiltinType
        value.copy< BuiltinType > (other.value);
        break;

      case 249: // ChoiceType
        value.copy< ChoiceType > (other.value);
        break;

      case 259: // Class
        value.copy< Class > (other.value);
        break;

      case 245: // ComponentType
        value.copy< ComponentType > (other.value);
        break;

      case 242: // ComponentTypeLists
      case 243: // RootComponentTypeList
      case 244: // ComponentTypeList
        value.copy< ComponentTypeList > (other.value);
        break;

      case 211: // DefinedType
      case 219: // ReferencedType
        value.copy< DefinedType > (other.value);
        break;

      case 231: // EnumeratedType
      case 232: // Enumerations
      case 233: // Enumeration
        value.copy< EnumeratedType > (other.value);
        break;

      case 234: // EnumerationItem
        value.copy< EnumerationValue > (other.value);
        break;

      case 228: // NamedNumber
        value.copy< NamedNumber > (other.value);
        break;

      case 220: // NamedType
        value.copy< NamedType > (other.value);
        break;

      case 263: // ObjIdComponents
      case 264: // NameForm
      case 265: // NumberForm
      case 266: // NameAndNumberForm
        value.copy< ObjectIdComponentValue > (other.value);
        break;

      case 254: // PrefixedType
        value.copy< PrefixedType > (other.value);
        break;

      case 246: // SequenceOfType
        value.copy< SequenceOfType > (other.value);
        break;

      case 241: // SequenceType
        value.copy< SequenceType > (other.value);
        break;

      case 248: // SetOfType
        value.copy< SetOfType > (other.value);
        break;

      case 247: // SetType
        value.copy< SetType > (other.value);
        break;

      case 256: // Tag
        value.copy< Tag > (other.value);
        break;

      case 255: // TaggedType
        value.copy< TaggedType > (other.value);
        break;

      case 195: // TagDefault
        value.copy< TaggingMode > (other.value);
        break;

      case 217: // Type
        value.copy< Type > (other.value);
        break;

      case 221: // Value
      case 222: // BuiltinValue
        value.copy< Value > (other.value);
        break;

      case 5: // realnumber
        value.copy< double > (other.value);
        break;

      case 258: // ClassNumber
        value.copy< int > (other.value);
        break;

      case 4: // number
      case 212: // DefinedValue
      case 229: // SignedNumber
        value.copy< long long > (other.value);
        break;

      case 150: // GENERIC_IDENTIFIER_UPPERCASE
      case 151: // GENERIC_IDENTIFIER_LOWERCASE
      case 330: // typereference
      case 331: // identifier
      case 332: // valuereference
      case 333: // modulereference
        value.copy< std::string > (other.value);
        break;

      case 250: // AlternativeTypeLists
      case 251: // RootAlternativeTypeList
      case 252: // AlternativeTypeList
        value.copy< std::vector<NamedType> > (other.value);
        break;

      case 261: // ObjectIdentifierValue
      case 262: // ObjIdComponentsList
        value.copy< std::vector<ObjectIdComponentValue> > (other.value);
        break;

      default:
        break;
    }

  }


  template <typename Base>
  inline
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const semantic_type& v, const location_type& l)
    : Base (t)
    , value ()
    , location (l)
  {
    (void) v;
      switch (this->type_get ())
    {
      case 215: // TypeAssignment
      case 216: // ValueAssignment
        value.copy< Assignment > (v);
        break;

      case 218: // BuiltinType
        value.copy< BuiltinType > (v);
        break;

      case 249: // ChoiceType
        value.copy< ChoiceType > (v);
        break;

      case 259: // Class
        value.copy< Class > (v);
        break;

      case 245: // ComponentType
        value.copy< ComponentType > (v);
        break;

      case 242: // ComponentTypeLists
      case 243: // RootComponentTypeList
      case 244: // ComponentTypeList
        value.copy< ComponentTypeList > (v);
        break;

      case 211: // DefinedType
      case 219: // ReferencedType
        value.copy< DefinedType > (v);
        break;

      case 231: // EnumeratedType
      case 232: // Enumerations
      case 233: // Enumeration
        value.copy< EnumeratedType > (v);
        break;

      case 234: // EnumerationItem
        value.copy< EnumerationValue > (v);
        break;

      case 228: // NamedNumber
        value.copy< NamedNumber > (v);
        break;

      case 220: // NamedType
        value.copy< NamedType > (v);
        break;

      case 263: // ObjIdComponents
      case 264: // NameForm
      case 265: // NumberForm
      case 266: // NameAndNumberForm
        value.copy< ObjectIdComponentValue > (v);
        break;

      case 254: // PrefixedType
        value.copy< PrefixedType > (v);
        break;

      case 246: // SequenceOfType
        value.copy< SequenceOfType > (v);
        break;

      case 241: // SequenceType
        value.copy< SequenceType > (v);
        break;

      case 248: // SetOfType
        value.copy< SetOfType > (v);
        break;

      case 247: // SetType
        value.copy< SetType > (v);
        break;

      case 256: // Tag
        value.copy< Tag > (v);
        break;

      case 255: // TaggedType
        value.copy< TaggedType > (v);
        break;

      case 195: // TagDefault
        value.copy< TaggingMode > (v);
        break;

      case 217: // Type
        value.copy< Type > (v);
        break;

      case 221: // Value
      case 222: // BuiltinValue
        value.copy< Value > (v);
        break;

      case 5: // realnumber
        value.copy< double > (v);
        break;

      case 258: // ClassNumber
        value.copy< int > (v);
        break;

      case 4: // number
      case 212: // DefinedValue
      case 229: // SignedNumber
        value.copy< long long > (v);
        break;

      case 150: // GENERIC_IDENTIFIER_UPPERCASE
      case 151: // GENERIC_IDENTIFIER_LOWERCASE
      case 330: // typereference
      case 331: // identifier
      case 332: // valuereference
      case 333: // modulereference
        value.copy< std::string > (v);
        break;

      case 250: // AlternativeTypeLists
      case 251: // RootAlternativeTypeList
      case 252: // AlternativeTypeList
        value.copy< std::vector<NamedType> > (v);
        break;

      case 261: // ObjectIdentifierValue
      case 262: // ObjIdComponentsList
        value.copy< std::vector<ObjectIdComponentValue> > (v);
        break;

      default:
        break;
    }
}


  // Implementation of basic_symbol constructor for each type.

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const location_type& l)
    : Base (t)
    , value ()
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Assignment v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const BuiltinType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ChoiceType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Class v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ComponentType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ComponentTypeList v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const DefinedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const EnumeratedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const EnumerationValue v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const NamedNumber v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const NamedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const ObjectIdComponentValue v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const PrefixedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const SequenceOfType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const SequenceType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const SetOfType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const SetType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Tag v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const TaggedType v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const TaggingMode v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Type v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const Value v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const double v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const int v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const long long v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::string v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<NamedType> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, const std::vector<ObjectIdComponentValue> v, const location_type& l)
    : Base (t)
    , value (v)
    , location (l)
  {}


  template <typename Base>
  inline
  asn1_parser::basic_symbol<Base>::~basic_symbol ()
  {
    clear ();
  }

  template <typename Base>
  inline
  void
  asn1_parser::basic_symbol<Base>::clear ()
  {
    // User destructor.
    symbol_number_type yytype = this->type_get ();
    basic_symbol<Base>& yysym = *this;
    (void) yysym;
    switch (yytype)
    {
   default:
      break;
    }

    // Type destructor.
    switch (yytype)
    {
      case 215: // TypeAssignment
      case 216: // ValueAssignment
        value.template destroy< Assignment > ();
        break;

      case 218: // BuiltinType
        value.template destroy< BuiltinType > ();
        break;

      case 249: // ChoiceType
        value.template destroy< ChoiceType > ();
        break;

      case 259: // Class
        value.template destroy< Class > ();
        break;

      case 245: // ComponentType
        value.template destroy< ComponentType > ();
        break;

      case 242: // ComponentTypeLists
      case 243: // RootComponentTypeList
      case 244: // ComponentTypeList
        value.template destroy< ComponentTypeList > ();
        break;

      case 211: // DefinedType
      case 219: // ReferencedType
        value.template destroy< DefinedType > ();
        break;

      case 231: // EnumeratedType
      case 232: // Enumerations
      case 233: // Enumeration
        value.template destroy< EnumeratedType > ();
        break;

      case 234: // EnumerationItem
        value.template destroy< EnumerationValue > ();
        break;

      case 228: // NamedNumber
        value.template destroy< NamedNumber > ();
        break;

      case 220: // NamedType
        value.template destroy< NamedType > ();
        break;

      case 263: // ObjIdComponents
      case 264: // NameForm
      case 265: // NumberForm
      case 266: // NameAndNumberForm
        value.template destroy< ObjectIdComponentValue > ();
        break;

      case 254: // PrefixedType
        value.template destroy< PrefixedType > ();
        break;

      case 246: // SequenceOfType
        value.template destroy< SequenceOfType > ();
        break;

      case 241: // SequenceType
        value.template destroy< SequenceType > ();
        break;

      case 248: // SetOfType
        value.template destroy< SetOfType > ();
        break;

      case 247: // SetType
        value.template destroy< SetType > ();
        break;

      case 256: // Tag
        value.template destroy< Tag > ();
        break;

      case 255: // TaggedType
        value.template destroy< TaggedType > ();
        break;

      case 195: // TagDefault
        value.template destroy< TaggingMode > ();
        break;

      case 217: // Type
        value.template destroy< Type > ();
        break;

      case 221: // Value
      case 222: // BuiltinValue
        value.template destroy< Value > ();
        break;

      case 5: // realnumber
        value.template destroy< double > ();
        break;

      case 258: // ClassNumber
        value.template destroy< int > ();
        break;

      case 4: // number
      case 212: // DefinedValue
      case 229: // SignedNumber
        value.template destroy< long long > ();
        break;

      case 150: // GENERIC_IDENTIFIER_UPPERCASE
      case 151: // GENERIC_IDENTIFIER_LOWERCASE
      case 330: // typereference
      case 331: // identifier
      case 332: // valuereference
      case 333: // modulereference
        value.template destroy< std::string > ();
        break;

      case 250: // AlternativeTypeLists
      case 251: // RootAlternativeTypeList
      case 252: // AlternativeTypeList
        value.template destroy< std::vector<NamedType> > ();
        break;

      case 261: // ObjectIdentifierValue
      case 262: // ObjIdComponentsList
        value.template destroy< std::vector<ObjectIdComponentValue> > ();
        break;

      default:
        break;
    }

    Base::clear ();
  }

  template <typename Base>
  inline
  bool
  asn1_parser::basic_symbol<Base>::empty () const
  {
    return Base::type_get () == empty_symbol;
  }

  template <typename Base>
  inline
  void
  asn1_parser::basic_symbol<Base>::move (basic_symbol& s)
  {
    super_type::move(s);
      switch (this->type_get ())
    {
      case 215: // TypeAssignment
      case 216: // ValueAssignment
        value.move< Assignment > (s.value);
        break;

      case 218: // BuiltinType
        value.move< BuiltinType > (s.value);
        break;

      case 249: // ChoiceType
        value.move< ChoiceType > (s.value);
        break;

      case 259: // Class
        value.move< Class > (s.value);
        break;

      case 245: // ComponentType
        value.move< ComponentType > (s.value);
        break;

      case 242: // ComponentTypeLists
      case 243: // RootComponentTypeList
      case 244: // ComponentTypeList
        value.move< ComponentTypeList > (s.value);
        break;

      case 211: // DefinedType
      case 219: // ReferencedType
        value.move< DefinedType > (s.value);
        break;

      case 231: // EnumeratedType
      case 232: // Enumerations
      case 233: // Enumeration
        value.move< EnumeratedType > (s.value);
        break;

      case 234: // EnumerationItem
        value.move< EnumerationValue > (s.value);
        break;

      case 228: // NamedNumber
        value.move< NamedNumber > (s.value);
        break;

      case 220: // NamedType
        value.move< NamedType > (s.value);
        break;

      case 263: // ObjIdComponents
      case 264: // NameForm
      case 265: // NumberForm
      case 266: // NameAndNumberForm
        value.move< ObjectIdComponentValue > (s.value);
        break;

      case 254: // PrefixedType
        value.move< PrefixedType > (s.value);
        break;

      case 246: // SequenceOfType
        value.move< SequenceOfType > (s.value);
        break;

      case 241: // SequenceType
        value.move< SequenceType > (s.value);
        break;

      case 248: // SetOfType
        value.move< SetOfType > (s.value);
        break;

      case 247: // SetType
        value.move< SetType > (s.value);
        break;

      case 256: // Tag
        value.move< Tag > (s.value);
        break;

      case 255: // TaggedType
        value.move< TaggedType > (s.value);
        break;

      case 195: // TagDefault
        value.move< TaggingMode > (s.value);
        break;

      case 217: // Type
        value.move< Type > (s.value);
        break;

      case 221: // Value
      case 222: // BuiltinValue
        value.move< Value > (s.value);
        break;

      case 5: // realnumber
        value.move< double > (s.value);
        break;

      case 258: // ClassNumber
        value.move< int > (s.value);
        break;

      case 4: // number
      case 212: // DefinedValue
      case 229: // SignedNumber
        value.move< long long > (s.value);
        break;

      case 150: // GENERIC_IDENTIFIER_UPPERCASE
      case 151: // GENERIC_IDENTIFIER_LOWERCASE
      case 330: // typereference
      case 331: // identifier
      case 332: // valuereference
      case 333: // modulereference
        value.move< std::string > (s.value);
        break;

      case 250: // AlternativeTypeLists
      case 251: // RootAlternativeTypeList
      case 252: // AlternativeTypeList
        value.move< std::vector<NamedType> > (s.value);
        break;

      case 261: // ObjectIdentifierValue
      case 262: // ObjIdComponentsList
        value.move< std::vector<ObjectIdComponentValue> > (s.value);
        break;

      default:
        break;
    }

    location = s.location;
  }

  // by_type.
  inline
  asn1_parser::by_type::by_type ()
    : type (empty_symbol)
  {}

  inline
  asn1_parser::by_type::by_type (const by_type& other)
    : type (other.type)
  {}

  inline
  asn1_parser::by_type::by_type (token_type t)
    : type (yytranslate_ (t))
  {}

  inline
  void
  asn1_parser::by_type::clear ()
  {
    type = empty_symbol;
  }

  inline
  void
  asn1_parser::by_type::move (by_type& that)
  {
    type = that.type;
    that.clear ();
  }

  inline
  int
  asn1_parser::by_type::type_get () const
  {
    return type;
  }

  inline
  asn1_parser::token_type
  asn1_parser::by_type::token () const
  {
    // YYTOKNUM[NUM] -- (External) token number corresponding to the
    // (internal) symbol number NUM (which must be that of a token).  */
    static
    const unsigned short int
    yytoken_number_[] =
    {
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409
    };
    return static_cast<token_type> (yytoken_number_[type]);
  }
  // Implementation of make_symbol for each symbol type.
  asn1_parser::symbol_type
  asn1_parser::make_END_OF_FILE (const location_type& l)
  {
    return symbol_type (token::END_OF_FILE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_comment (const location_type& l)
  {
    return symbol_type (token::comment, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_number (const long long& v, const location_type& l)
  {
    return symbol_type (token::number, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_realnumber (const double& v, const location_type& l)
  {
    return symbol_type (token::realnumber, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_bstring (const location_type& l)
  {
    return symbol_type (token::bstring, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmlbstring (const location_type& l)
  {
    return symbol_type (token::xmlbstring, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_hstring (const location_type& l)
  {
    return symbol_type (token::hstring, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmlhstring (const location_type& l)
  {
    return symbol_type (token::xmlhstring, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_cstring (const location_type& l)
  {
    return symbol_type (token::cstring, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmlcstring (const location_type& l)
  {
    return symbol_type (token::xmlcstring, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_simplestring (const location_type& l)
  {
    return symbol_type (token::simplestring, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmltstring (const location_type& l)
  {
    return symbol_type (token::xmltstring, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_psname (const location_type& l)
  {
    return symbol_type (token::psname, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_encodingreference (const location_type& l)
  {
    return symbol_type (token::encodingreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_integerUnicodeLabel (const location_type& l)
  {
    return symbol_type (token::integerUnicodeLabel, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_tstring (const location_type& l)
  {
    return symbol_type (token::tstring, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_objectclassreference (const location_type& l)
  {
    return symbol_type (token::objectclassreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_objectreference (const location_type& l)
  {
    return symbol_type (token::objectreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_objectsetreference (const location_type& l)
  {
    return symbol_type (token::objectsetreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_typefieldreference (const location_type& l)
  {
    return symbol_type (token::typefieldreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_valuefieldreference (const location_type& l)
  {
    return symbol_type (token::valuefieldreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_valuesetfieldreference (const location_type& l)
  {
    return symbol_type (token::valuesetfieldreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_objectfieldreference (const location_type& l)
  {
    return symbol_type (token::objectfieldreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_objectsetfieldreference (const location_type& l)
  {
    return symbol_type (token::objectsetfieldreference, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_word (const location_type& l)
  {
    return symbol_type (token::word, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ABSENT (const location_type& l)
  {
    return symbol_type (token::ABSENT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ABSTRACT_SYNTAX (const location_type& l)
  {
    return symbol_type (token::ABSTRACT_SYNTAX, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ALL (const location_type& l)
  {
    return symbol_type (token::ALL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_APPLICATION (const location_type& l)
  {
    return symbol_type (token::APPLICATION, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ASN_NULL (const location_type& l)
  {
    return symbol_type (token::ASN_NULL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_AUTOMATIC (const location_type& l)
  {
    return symbol_type (token::AUTOMATIC, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BEGIN (const location_type& l)
  {
    return symbol_type (token::BEGIN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BIT (const location_type& l)
  {
    return symbol_type (token::BIT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BMPString (const location_type& l)
  {
    return symbol_type (token::BMPString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BOOLEAN (const location_type& l)
  {
    return symbol_type (token::BOOLEAN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_BY (const location_type& l)
  {
    return symbol_type (token::BY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CHARACTER (const location_type& l)
  {
    return symbol_type (token::CHARACTER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CHOICE (const location_type& l)
  {
    return symbol_type (token::CHOICE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CLASS (const location_type& l)
  {
    return symbol_type (token::CLASS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_COMPONENT (const location_type& l)
  {
    return symbol_type (token::COMPONENT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_COMPONENTS (const location_type& l)
  {
    return symbol_type (token::COMPONENTS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CONSTRAINED (const location_type& l)
  {
    return symbol_type (token::CONSTRAINED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CONTAINING (const location_type& l)
  {
    return symbol_type (token::CONTAINING, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DATE (const location_type& l)
  {
    return symbol_type (token::DATE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DATE_TIME (const location_type& l)
  {
    return symbol_type (token::DATE_TIME, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DEFAULT (const location_type& l)
  {
    return symbol_type (token::DEFAULT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DEFINITIONS (const location_type& l)
  {
    return symbol_type (token::DEFINITIONS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DURATION (const location_type& l)
  {
    return symbol_type (token::DURATION, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EMBEDDED (const location_type& l)
  {
    return symbol_type (token::EMBEDDED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ENCODED (const location_type& l)
  {
    return symbol_type (token::ENCODED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ENCODING_CONTROL (const location_type& l)
  {
    return symbol_type (token::ENCODING_CONTROL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_END (const location_type& l)
  {
    return symbol_type (token::END, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ENUMERATED (const location_type& l)
  {
    return symbol_type (token::ENUMERATED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXCEPT (const location_type& l)
  {
    return symbol_type (token::EXCEPT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXPLICIT (const location_type& l)
  {
    return symbol_type (token::EXPLICIT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXPORTS (const location_type& l)
  {
    return symbol_type (token::EXPORTS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXTENSIBILITY (const location_type& l)
  {
    return symbol_type (token::EXTENSIBILITY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXTERNAL (const location_type& l)
  {
    return symbol_type (token::EXTERNAL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_FALSE (const location_type& l)
  {
    return symbol_type (token::FALSE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_FROM (const location_type& l)
  {
    return symbol_type (token::FROM, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GeneralizedTime (const location_type& l)
  {
    return symbol_type (token::GeneralizedTime, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GeneralString (const location_type& l)
  {
    return symbol_type (token::GeneralString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GraphicString (const location_type& l)
  {
    return symbol_type (token::GraphicString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IA5String (const location_type& l)
  {
    return symbol_type (token::IA5String, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IDENTIFIER (const location_type& l)
  {
    return symbol_type (token::IDENTIFIER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IMPLICIT (const location_type& l)
  {
    return symbol_type (token::IMPLICIT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IMPLIED (const location_type& l)
  {
    return symbol_type (token::IMPLIED, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_IMPORTS (const location_type& l)
  {
    return symbol_type (token::IMPORTS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INCLUDES (const location_type& l)
  {
    return symbol_type (token::INCLUDES, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INSTANCE (const location_type& l)
  {
    return symbol_type (token::INSTANCE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INSTRUCTIONS (const location_type& l)
  {
    return symbol_type (token::INSTRUCTIONS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INTEGER (const location_type& l)
  {
    return symbol_type (token::INTEGER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_INTERSECTION (const location_type& l)
  {
    return symbol_type (token::INTERSECTION, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ISO646String (const location_type& l)
  {
    return symbol_type (token::ISO646String, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_MAX (const location_type& l)
  {
    return symbol_type (token::MAX, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_MIN (const location_type& l)
  {
    return symbol_type (token::MIN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_MINUS_INFINITY (const location_type& l)
  {
    return symbol_type (token::MINUS_INFINITY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_NOT_A_NUMBER (const location_type& l)
  {
    return symbol_type (token::NOT_A_NUMBER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_NumericString (const location_type& l)
  {
    return symbol_type (token::NumericString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OBJECT (const location_type& l)
  {
    return symbol_type (token::OBJECT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ObjectDescriptor (const location_type& l)
  {
    return symbol_type (token::ObjectDescriptor, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OCTET (const location_type& l)
  {
    return symbol_type (token::OCTET, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OF (const location_type& l)
  {
    return symbol_type (token::OF, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OID_IRI (const location_type& l)
  {
    return symbol_type (token::OID_IRI, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OPTIONAL (const location_type& l)
  {
    return symbol_type (token::OPTIONAL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PATTERN (const location_type& l)
  {
    return symbol_type (token::PATTERN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PDV (const location_type& l)
  {
    return symbol_type (token::PDV, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PLUS_INFINITY (const location_type& l)
  {
    return symbol_type (token::PLUS_INFINITY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PRESENT (const location_type& l)
  {
    return symbol_type (token::PRESENT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PrintableString (const location_type& l)
  {
    return symbol_type (token::PrintableString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PRIVATE (const location_type& l)
  {
    return symbol_type (token::PRIVATE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_REAL (const location_type& l)
  {
    return symbol_type (token::REAL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_RELATIVE_OID (const location_type& l)
  {
    return symbol_type (token::RELATIVE_OID, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_RELATIVE_OID_IRI (const location_type& l)
  {
    return symbol_type (token::RELATIVE_OID_IRI, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SEQUENCE (const location_type& l)
  {
    return symbol_type (token::SEQUENCE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SET (const location_type& l)
  {
    return symbol_type (token::SET, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SETTINGS (const location_type& l)
  {
    return symbol_type (token::SETTINGS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SIZE (const location_type& l)
  {
    return symbol_type (token::SIZE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_STRING (const location_type& l)
  {
    return symbol_type (token::STRING, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SYNTAX (const location_type& l)
  {
    return symbol_type (token::SYNTAX, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_T61String (const location_type& l)
  {
    return symbol_type (token::T61String, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TAGS (const location_type& l)
  {
    return symbol_type (token::TAGS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TeletexString (const location_type& l)
  {
    return symbol_type (token::TeletexString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TIME (const location_type& l)
  {
    return symbol_type (token::TIME, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TIME_OF_DAY (const location_type& l)
  {
    return symbol_type (token::TIME_OF_DAY, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TRUE (const location_type& l)
  {
    return symbol_type (token::TRUE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_TYPE_IDENTIFIER (const location_type& l)
  {
    return symbol_type (token::TYPE_IDENTIFIER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UNION (const location_type& l)
  {
    return symbol_type (token::UNION, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UNIQUE (const location_type& l)
  {
    return symbol_type (token::UNIQUE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UNIVERSAL (const location_type& l)
  {
    return symbol_type (token::UNIVERSAL, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UniversalString (const location_type& l)
  {
    return symbol_type (token::UniversalString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UTCTime (const location_type& l)
  {
    return symbol_type (token::UTCTime, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_UTF8String (const location_type& l)
  {
    return symbol_type (token::UTF8String, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_VideotexString (const location_type& l)
  {
    return symbol_type (token::VideotexString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_VisibleString (const location_type& l)
  {
    return symbol_type (token::VisibleString, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_WITH (const location_type& l)
  {
    return symbol_type (token::WITH, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_DEFINED_AS (const location_type& l)
  {
    return symbol_type (token::DEFINED_AS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ELIPSIS (const location_type& l)
  {
    return symbol_type (token::ELIPSIS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_RANGE (const location_type& l)
  {
    return symbol_type (token::RANGE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OPEN_BRACE (const location_type& l)
  {
    return symbol_type (token::OPEN_BRACE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CLOSE_BRACE (const location_type& l)
  {
    return symbol_type (token::CLOSE_BRACE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OPEN_PARENTHESIS (const location_type& l)
  {
    return symbol_type (token::OPEN_PARENTHESIS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CLOSE_PARENTHESIS (const location_type& l)
  {
    return symbol_type (token::CLOSE_PARENTHESIS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_OPEN_SQUARE_BRACKET (const location_type& l)
  {
    return symbol_type (token::OPEN_SQUARE_BRACKET, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_CLOSE_SQUARE_BRACKET (const location_type& l)
  {
    return symbol_type (token::CLOSE_SQUARE_BRACKET, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_LESS_THAN (const location_type& l)
  {
    return symbol_type (token::LESS_THAN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GREATER_THAN (const location_type& l)
  {
    return symbol_type (token::GREATER_THAN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EXCLAMATION_MARK (const location_type& l)
  {
    return symbol_type (token::EXCLAMATION_MARK, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_QUOTATION_MARK (const location_type& l)
  {
    return symbol_type (token::QUOTATION_MARK, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_AMPERSAND (const location_type& l)
  {
    return symbol_type (token::AMPERSAND, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_APOSTROPHE (const location_type& l)
  {
    return symbol_type (token::APOSTROPHE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ASTERISK (const location_type& l)
  {
    return symbol_type (token::ASTERISK, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_COMMA (const location_type& l)
  {
    return symbol_type (token::COMMA, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_FULL_STOP (const location_type& l)
  {
    return symbol_type (token::FULL_STOP, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_HYPHEN_MINUS (const location_type& l)
  {
    return symbol_type (token::HYPHEN_MINUS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SOLIDUS (const location_type& l)
  {
    return symbol_type (token::SOLIDUS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_COLON (const location_type& l)
  {
    return symbol_type (token::COLON, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_SEMICOLON (const location_type& l)
  {
    return symbol_type (token::SEMICOLON, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_EQUALS_SIGN (const location_type& l)
  {
    return symbol_type (token::EQUALS_SIGN, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_AT (const location_type& l)
  {
    return symbol_type (token::AT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_VERTICAL_LINE (const location_type& l)
  {
    return symbol_type (token::VERTICAL_LINE, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_ACCENT (const location_type& l)
  {
    return symbol_type (token::ACCENT, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_PLUS (const location_type& l)
  {
    return symbol_type (token::PLUS, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_STAR (const location_type& l)
  {
    return symbol_type (token::STAR, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_QUESTION_MARK (const location_type& l)
  {
    return symbol_type (token::QUESTION_MARK, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GENERIC_IDENTIFIER_UPPERCASE (const std::string& v, const location_type& l)
  {
    return symbol_type (token::GENERIC_IDENTIFIER_UPPERCASE, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GENERIC_IDENTIFIER_LOWERCASE (const std::string& v, const location_type& l)
  {
    return symbol_type (token::GENERIC_IDENTIFIER_LOWERCASE, v, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_GENERIC_INTEGER (const location_type& l)
  {
    return symbol_type (token::GENERIC_INTEGER, l);
  }

  asn1_parser::symbol_type
  asn1_parser::make_xmlasn1typename (const location_type& l)
  {
    return symbol_type (token::xmlasn1typename, l);
  }



} // yy
#line 3773 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:408





// User implementation prologue.

#line 3781 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:412
// Unqualified %code blocks.
#line 15 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:413

    struct Context
    {
        const char* cursor;
        yy::location location;

        Asn1Tree asn1_tree;
    };
    void yy::asn1_parser::error(const location_type& l, const std::string& m)
    {
        std::cerr << (l.begin.filename ? l.begin.filename->c_str() : "(undefined)");
        std::cerr << ':' << l.begin.line << ':' << l.begin.column << '-' << l.end.column << ": " << m << '\n';
    }

    namespace yy { asn1_parser::symbol_type yylex(Context& c); }

#line 3800 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:413


#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> // FIXME: INFRINGES ON USER NAME SPACE.
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K].location)
/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

# ifndef YYLLOC_DEFAULT
#  define YYLLOC_DEFAULT(Current, Rhs, N)                               \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).begin  = YYRHSLOC (Rhs, 1).begin;                   \
          (Current).end    = YYRHSLOC (Rhs, N).end;                     \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).begin = (Current).end = YYRHSLOC (Rhs, 0).end;      \
        }                                                               \
    while (/*CONSTCOND*/ false)
# endif


// Suppress unused-variable warnings by "using" E.
#define YYUSE(E) ((void) (E))

// Enable debugging if requested.
#if YYDEBUG

// A pseudo ostream that takes yydebug_ into account.
# define YYCDEBUG if (yydebug_) (*yycdebug_)

# define YY_SYMBOL_PRINT(Title, Symbol)         \
  do {                                          \
    if (yydebug_)                               \
    {                                           \
      *yycdebug_ << Title << ' ';               \
      yy_print_ (*yycdebug_, Symbol);           \
      *yycdebug_ << std::endl;                  \
    }                                           \
  } while (false)

# define YY_REDUCE_PRINT(Rule)          \
  do {                                  \
    if (yydebug_)                       \
      yy_reduce_print_ (Rule);          \
  } while (false)

# define YY_STACK_PRINT()               \
  do {                                  \
    if (yydebug_)                       \
      yystack_print_ ();                \
  } while (false)

#else // !YYDEBUG

# define YYCDEBUG if (false) std::cerr
# define YY_SYMBOL_PRINT(Title, Symbol)  YYUSE(Symbol)
# define YY_REDUCE_PRINT(Rule)           static_cast<void>(0)
# define YY_STACK_PRINT()                static_cast<void>(0)

#endif // !YYDEBUG

#define yyerrok         (yyerrstatus_ = 0)
#define yyclearin       (yyla.clear ())

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYRECOVERING()  (!!yyerrstatus_)


namespace yy {
#line 3886 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:479

  /* Return YYSTR after stripping away unnecessary quotes and
     backslashes, so that it's suitable for yyerror.  The heuristic is
     that double-quoting is unnecessary unless the string contains an
     apostrophe, a comma, or backslash (other than backslash-backslash).
     YYSTR is taken from yytname.  */
  std::string
  asn1_parser::yytnamerr_ (const char *yystr)
  {
    if (*yystr == '"')
      {
        std::string yyr = "";
        char const *yyp = yystr;

        for (;;)
          switch (*++yyp)
            {
            case '\'':
            case ',':
              goto do_not_strip_quotes;

            case '\\':
              if (*++yyp != '\\')
                goto do_not_strip_quotes;
              // Fall through.
            default:
              yyr += *yyp;
              break;

            case '"':
              return yyr;
            }
      do_not_strip_quotes: ;
      }

    return yystr;
  }


  /// Build a parser object.
  asn1_parser::asn1_parser (Context& context_yyarg)
    :
#if YYDEBUG
      yydebug_ (false),
      yycdebug_ (&std::cerr),
#endif
      context (context_yyarg)
  {}

  asn1_parser::~asn1_parser ()
  {}


  /*---------------.
  | Symbol types.  |
  `---------------*/



  // by_state.
  inline
  asn1_parser::by_state::by_state ()
    : state (empty_state)
  {}

  inline
  asn1_parser::by_state::by_state (const by_state& other)
    : state (other.state)
  {}

  inline
  void
  asn1_parser::by_state::clear ()
  {
    state = empty_state;
  }

  inline
  void
  asn1_parser::by_state::move (by_state& that)
  {
    state = that.state;
    that.clear ();
  }

  inline
  asn1_parser::by_state::by_state (state_type s)
    : state (s)
  {}

  inline
  asn1_parser::symbol_number_type
  asn1_parser::by_state::type_get () const
  {
    if (state == empty_state)
      return empty_symbol;
    else
      return yystos_[state];
  }

  inline
  asn1_parser::stack_symbol_type::stack_symbol_type ()
  {}


  inline
  asn1_parser::stack_symbol_type::stack_symbol_type (state_type s, symbol_type& that)
    : super_type (s, that.location)
  {
      switch (that.type_get ())
    {
      case 215: // TypeAssignment
      case 216: // ValueAssignment
        value.move< Assignment > (that.value);
        break;

      case 218: // BuiltinType
        value.move< BuiltinType > (that.value);
        break;

      case 249: // ChoiceType
        value.move< ChoiceType > (that.value);
        break;

      case 259: // Class
        value.move< Class > (that.value);
        break;

      case 245: // ComponentType
        value.move< ComponentType > (that.value);
        break;

      case 242: // ComponentTypeLists
      case 243: // RootComponentTypeList
      case 244: // ComponentTypeList
        value.move< ComponentTypeList > (that.value);
        break;

      case 211: // DefinedType
      case 219: // ReferencedType
        value.move< DefinedType > (that.value);
        break;

      case 231: // EnumeratedType
      case 232: // Enumerations
      case 233: // Enumeration
        value.move< EnumeratedType > (that.value);
        break;

      case 234: // EnumerationItem
        value.move< EnumerationValue > (that.value);
        break;

      case 228: // NamedNumber
        value.move< NamedNumber > (that.value);
        break;

      case 220: // NamedType
        value.move< NamedType > (that.value);
        break;

      case 263: // ObjIdComponents
      case 264: // NameForm
      case 265: // NumberForm
      case 266: // NameAndNumberForm
        value.move< ObjectIdComponentValue > (that.value);
        break;

      case 254: // PrefixedType
        value.move< PrefixedType > (that.value);
        break;

      case 246: // SequenceOfType
        value.move< SequenceOfType > (that.value);
        break;

      case 241: // SequenceType
        value.move< SequenceType > (that.value);
        break;

      case 248: // SetOfType
        value.move< SetOfType > (that.value);
        break;

      case 247: // SetType
        value.move< SetType > (that.value);
        break;

      case 256: // Tag
        value.move< Tag > (that.value);
        break;

      case 255: // TaggedType
        value.move< TaggedType > (that.value);
        break;

      case 195: // TagDefault
        value.move< TaggingMode > (that.value);
        break;

      case 217: // Type
        value.move< Type > (that.value);
        break;

      case 221: // Value
      case 222: // BuiltinValue
        value.move< Value > (that.value);
        break;

      case 5: // realnumber
        value.move< double > (that.value);
        break;

      case 258: // ClassNumber
        value.move< int > (that.value);
        break;

      case 4: // number
      case 212: // DefinedValue
      case 229: // SignedNumber
        value.move< long long > (that.value);
        break;

      case 150: // GENERIC_IDENTIFIER_UPPERCASE
      case 151: // GENERIC_IDENTIFIER_LOWERCASE
      case 330: // typereference
      case 331: // identifier
      case 332: // valuereference
      case 333: // modulereference
        value.move< std::string > (that.value);
        break;

      case 250: // AlternativeTypeLists
      case 251: // RootAlternativeTypeList
      case 252: // AlternativeTypeList
        value.move< std::vector<NamedType> > (that.value);
        break;

      case 261: // ObjectIdentifierValue
      case 262: // ObjIdComponentsList
        value.move< std::vector<ObjectIdComponentValue> > (that.value);
        break;

      default:
        break;
    }

    // that is emptied.
    that.type = empty_symbol;
  }

  inline
  asn1_parser::stack_symbol_type&
  asn1_parser::stack_symbol_type::operator= (const stack_symbol_type& that)
  {
    state = that.state;
      switch (that.type_get ())
    {
      case 215: // TypeAssignment
      case 216: // ValueAssignment
        value.copy< Assignment > (that.value);
        break;

      case 218: // BuiltinType
        value.copy< BuiltinType > (that.value);
        break;

      case 249: // ChoiceType
        value.copy< ChoiceType > (that.value);
        break;

      case 259: // Class
        value.copy< Class > (that.value);
        break;

      case 245: // ComponentType
        value.copy< ComponentType > (that.value);
        break;

      case 242: // ComponentTypeLists
      case 243: // RootComponentTypeList
      case 244: // ComponentTypeList
        value.copy< ComponentTypeList > (that.value);
        break;

      case 211: // DefinedType
      case 219: // ReferencedType
        value.copy< DefinedType > (that.value);
        break;

      case 231: // EnumeratedType
      case 232: // Enumerations
      case 233: // Enumeration
        value.copy< EnumeratedType > (that.value);
        break;

      case 234: // EnumerationItem
        value.copy< EnumerationValue > (that.value);
        break;

      case 228: // NamedNumber
        value.copy< NamedNumber > (that.value);
        break;

      case 220: // NamedType
        value.copy< NamedType > (that.value);
        break;

      case 263: // ObjIdComponents
      case 264: // NameForm
      case 265: // NumberForm
      case 266: // NameAndNumberForm
        value.copy< ObjectIdComponentValue > (that.value);
        break;

      case 254: // PrefixedType
        value.copy< PrefixedType > (that.value);
        break;

      case 246: // SequenceOfType
        value.copy< SequenceOfType > (that.value);
        break;

      case 241: // SequenceType
        value.copy< SequenceType > (that.value);
        break;

      case 248: // SetOfType
        value.copy< SetOfType > (that.value);
        break;

      case 247: // SetType
        value.copy< SetType > (that.value);
        break;

      case 256: // Tag
        value.copy< Tag > (that.value);
        break;

      case 255: // TaggedType
        value.copy< TaggedType > (that.value);
        break;

      case 195: // TagDefault
        value.copy< TaggingMode > (that.value);
        break;

      case 217: // Type
        value.copy< Type > (that.value);
        break;

      case 221: // Value
      case 222: // BuiltinValue
        value.copy< Value > (that.value);
        break;

      case 5: // realnumber
        value.copy< double > (that.value);
        break;

      case 258: // ClassNumber
        value.copy< int > (that.value);
        break;

      case 4: // number
      case 212: // DefinedValue
      case 229: // SignedNumber
        value.copy< long long > (that.value);
        break;

      case 150: // GENERIC_IDENTIFIER_UPPERCASE
      case 151: // GENERIC_IDENTIFIER_LOWERCASE
      case 330: // typereference
      case 331: // identifier
      case 332: // valuereference
      case 333: // modulereference
        value.copy< std::string > (that.value);
        break;

      case 250: // AlternativeTypeLists
      case 251: // RootAlternativeTypeList
      case 252: // AlternativeTypeList
        value.copy< std::vector<NamedType> > (that.value);
        break;

      case 261: // ObjectIdentifierValue
      case 262: // ObjIdComponentsList
        value.copy< std::vector<ObjectIdComponentValue> > (that.value);
        break;

      default:
        break;
    }

    location = that.location;
    return *this;
  }


  template <typename Base>
  inline
  void
  asn1_parser::yy_destroy_ (const char* yymsg, basic_symbol<Base>& yysym) const
  {
    if (yymsg)
      YY_SYMBOL_PRINT (yymsg, yysym);
  }

#if YYDEBUG
  template <typename Base>
  void
  asn1_parser::yy_print_ (std::ostream& yyo,
                                     const basic_symbol<Base>& yysym) const
  {
    std::ostream& yyoutput = yyo;
    YYUSE (yyoutput);
    symbol_number_type yytype = yysym.type_get ();
    // Avoid a (spurious) G++ 4.8 warning about "array subscript is
    // below array bounds".
    if (yysym.empty ())
      std::abort ();
    yyo << (yytype < yyntokens_ ? "token" : "nterm")
        << ' ' << yytname_[yytype] << " ("
        << yysym.location << ": ";
    YYUSE (yytype);
    yyo << ')';
  }
#endif

  inline
  void
  asn1_parser::yypush_ (const char* m, state_type s, symbol_type& sym)
  {
    stack_symbol_type t (s, sym);
    yypush_ (m, t);
  }

  inline
  void
  asn1_parser::yypush_ (const char* m, stack_symbol_type& s)
  {
    if (m)
      YY_SYMBOL_PRINT (m, s);
    yystack_.push (s);
  }

  inline
  void
  asn1_parser::yypop_ (unsigned int n)
  {
    yystack_.pop (n);
  }

#if YYDEBUG
  std::ostream&
  asn1_parser::debug_stream () const
  {
    return *yycdebug_;
  }

  void
  asn1_parser::set_debug_stream (std::ostream& o)
  {
    yycdebug_ = &o;
  }


  asn1_parser::debug_level_type
  asn1_parser::debug_level () const
  {
    return yydebug_;
  }

  void
  asn1_parser::set_debug_level (debug_level_type l)
  {
    yydebug_ = l;
  }
#endif // YYDEBUG

  inline asn1_parser::state_type
  asn1_parser::yy_lr_goto_state_ (state_type yystate, int yysym)
  {
    int yyr = yypgoto_[yysym - yyntokens_] + yystate;
    if (0 <= yyr && yyr <= yylast_ && yycheck_[yyr] == yystate)
      return yytable_[yyr];
    else
      return yydefgoto_[yysym - yyntokens_];
  }

  inline bool
  asn1_parser::yy_pact_value_is_default_ (int yyvalue)
  {
    return yyvalue == yypact_ninf_;
  }

  inline bool
  asn1_parser::yy_table_value_is_error_ (int yyvalue)
  {
    return yyvalue == yytable_ninf_;
  }

  int
  asn1_parser::parse ()
  {
    // State.
    int yyn;
    /// Length of the RHS of the rule being reduced.
    int yylen = 0;

    // Error handling.
    int yynerrs_ = 0;
    int yyerrstatus_ = 0;

    /// The lookahead symbol.
    symbol_type yyla;

    /// The locations where the error started and ended.
    stack_symbol_type yyerror_range[3];

    /// The return value of parse ().
    int yyresult;

    // FIXME: This shoud be completely indented.  It is not yet to
    // avoid gratuitous conflicts when merging into the master branch.
    try
      {
    YYCDEBUG << "Starting parse" << std::endl;


    /* Initialize the stack.  The initial state will be set in
       yynewstate, since the latter expects the semantical and the
       location values to have been already stored, initialize these
       stacks with a primary value.  */
    yystack_.clear ();
    yypush_ (YY_NULLPTR, 0, yyla);

    // A new symbol was pushed on the stack.
  yynewstate:
    YYCDEBUG << "Entering state " << yystack_[0].state << std::endl;

    // Accept?
    if (yystack_[0].state == yyfinal_)
      goto yyacceptlab;

    goto yybackup;

    // Backup.
  yybackup:

    // Try to take a decision without lookahead.
    yyn = yypact_[yystack_[0].state];
    if (yy_pact_value_is_default_ (yyn))
      goto yydefault;

    // Read a lookahead token.
    if (yyla.empty ())
      {
        YYCDEBUG << "Reading a token: ";
        try
          {
            symbol_type yylookahead (yylex (context));
            yyla.move (yylookahead);
          }
        catch (const syntax_error& yyexc)
          {
            error (yyexc);
            goto yyerrlab1;
          }
      }
    YY_SYMBOL_PRINT ("Next token is", yyla);

    /* If the proper action on seeing token YYLA.TYPE is to reduce or
       to detect an error, take that action.  */
    yyn += yyla.type_get ();
    if (yyn < 0 || yylast_ < yyn || yycheck_[yyn] != yyla.type_get ())
      goto yydefault;

    // Reduce or error.
    yyn = yytable_[yyn];
    if (yyn <= 0)
      {
        if (yy_table_value_is_error_ (yyn))
          goto yyerrlab;
        yyn = -yyn;
        goto yyreduce;
      }

    // Count tokens shifted since error; after three, turn off error status.
    if (yyerrstatus_)
      --yyerrstatus_;

    // Shift the lookahead token.
    yypush_ ("Shifting", yyn, yyla);
    goto yynewstate;

  /*-----------------------------------------------------------.
  | yydefault -- do the default action for the current state.  |
  `-----------------------------------------------------------*/
  yydefault:
    yyn = yydefact_[yystack_[0].state];
    if (yyn == 0)
      goto yyerrlab;
    goto yyreduce;

  /*-----------------------------.
  | yyreduce -- Do a reduction.  |
  `-----------------------------*/
  yyreduce:
    yylen = yyr2_[yyn];
    {
      stack_symbol_type yylhs;
      yylhs.state = yy_lr_goto_state_(yystack_[yylen].state, yyr1_[yyn]);
      /* Variants are always initialized to an empty instance of the
         correct type. The default '$$ = $1' action is NOT applied
         when using variants.  */
        switch (yyr1_[yyn])
    {
      case 215: // TypeAssignment
      case 216: // ValueAssignment
        yylhs.value.build< Assignment > ();
        break;

      case 218: // BuiltinType
        yylhs.value.build< BuiltinType > ();
        break;

      case 249: // ChoiceType
        yylhs.value.build< ChoiceType > ();
        break;

      case 259: // Class
        yylhs.value.build< Class > ();
        break;

      case 245: // ComponentType
        yylhs.value.build< ComponentType > ();
        break;

      case 242: // ComponentTypeLists
      case 243: // RootComponentTypeList
      case 244: // ComponentTypeList
        yylhs.value.build< ComponentTypeList > ();
        break;

      case 211: // DefinedType
      case 219: // ReferencedType
        yylhs.value.build< DefinedType > ();
        break;

      case 231: // EnumeratedType
      case 232: // Enumerations
      case 233: // Enumeration
        yylhs.value.build< EnumeratedType > ();
        break;

      case 234: // EnumerationItem
        yylhs.value.build< EnumerationValue > ();
        break;

      case 228: // NamedNumber
        yylhs.value.build< NamedNumber > ();
        break;

      case 220: // NamedType
        yylhs.value.build< NamedType > ();
        break;

      case 263: // ObjIdComponents
      case 264: // NameForm
      case 265: // NumberForm
      case 266: // NameAndNumberForm
        yylhs.value.build< ObjectIdComponentValue > ();
        break;

      case 254: // PrefixedType
        yylhs.value.build< PrefixedType > ();
        break;

      case 246: // SequenceOfType
        yylhs.value.build< SequenceOfType > ();
        break;

      case 241: // SequenceType
        yylhs.value.build< SequenceType > ();
        break;

      case 248: // SetOfType
        yylhs.value.build< SetOfType > ();
        break;

      case 247: // SetType
        yylhs.value.build< SetType > ();
        break;

      case 256: // Tag
        yylhs.value.build< Tag > ();
        break;

      case 255: // TaggedType
        yylhs.value.build< TaggedType > ();
        break;

      case 195: // TagDefault
        yylhs.value.build< TaggingMode > ();
        break;

      case 217: // Type
        yylhs.value.build< Type > ();
        break;

      case 221: // Value
      case 222: // BuiltinValue
        yylhs.value.build< Value > ();
        break;

      case 5: // realnumber
        yylhs.value.build< double > ();
        break;

      case 258: // ClassNumber
        yylhs.value.build< int > ();
        break;

      case 4: // number
      case 212: // DefinedValue
      case 229: // SignedNumber
        yylhs.value.build< long long > ();
        break;

      case 150: // GENERIC_IDENTIFIER_UPPERCASE
      case 151: // GENERIC_IDENTIFIER_LOWERCASE
      case 330: // typereference
      case 331: // identifier
      case 332: // valuereference
      case 333: // modulereference
        yylhs.value.build< std::string > ();
        break;

      case 250: // AlternativeTypeLists
      case 251: // RootAlternativeTypeList
      case 252: // AlternativeTypeList
        yylhs.value.build< std::vector<NamedType> > ();
        break;

      case 261: // ObjectIdentifierValue
      case 262: // ObjIdComponentsList
        yylhs.value.build< std::vector<ObjectIdComponentValue> > ();
        break;

      default:
        break;
    }


      // Compute the default @$.
      {
        slice<stack_symbol_type, stack_type> slice (yystack_, yylen);
        YYLLOC_DEFAULT (yylhs.location, slice, yylen);
      }

      // Perform the reduction.
      YY_REDUCE_PRINT (yyn);
      try
        {
          switch (yyn)
            {
  case 2:
#line 257 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { context.asn1_tree.tagging_default = yystack_[6].value.as< TaggingMode > (); }
#line 4657 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 51:
#line 529 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    {
    context.asn1_tree.module_reference = yystack_[1].value.as< std::string > ();
}
#line 4665 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 66:
#line 568 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggingMode > () = TaggingMode::explicit_; }
#line 4671 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 67:
#line 570 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggingMode > () = TaggingMode::implicit; }
#line 4677 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 68:
#line 572 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggingMode > () = TaggingMode::automatic; }
#line 4683 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 69:
#line 574 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggingMode > () = TaggingMode::explicit_; }
#line 4689 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 100:
#line 642 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { context.asn1_tree.assignments.push_back(yystack_[0].value.as< Assignment > ()); }
#line 4695 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 101:
#line 644 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { context.asn1_tree.assignments.push_back(yystack_[0].value.as< Assignment > ()); }
#line 4701 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 103:
#line 654 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< DefinedType > () = DefinedType{yystack_[0].value.as< std::string > ()}; }
#line 4707 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 108:
#line 702 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[2].value.as< std::string > (), yystack_[0].value.as< Type > (), absl::nullopt, {} }; }
#line 4713 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 109:
#line 709 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Assignment > () = Assignment{ yystack_[3].value.as< std::string > (), yystack_[2].value.as< Type > (), yystack_[0].value.as< Value > (), {} }; }
#line 4719 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 110:
#line 713 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = yystack_[0].value.as< BuiltinType > (); }
#line 4725 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 111:
#line 715 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = yystack_[0].value.as< DefinedType > (); }
#line 4731 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 112:
#line 717 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Type > () = Type(); }
#line 4737 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 113:
#line 720 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = BitStringType(); }
#line 4743 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 114:
#line 721 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = BooleanType(); }
#line 4749 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 115:
#line 722 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = CharacterStringType(); }
#line 4755 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 116:
#line 723 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< ChoiceType > (); }
#line 4761 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 117:
#line 724 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = DateType(); }
#line 4767 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 118:
#line 725 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = DateTimeType(); }
#line 4773 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 119:
#line 726 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = DurationType(); }
#line 4779 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 120:
#line 727 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = EmbeddedPDVType(); }
#line 4785 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 121:
#line 728 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< EnumeratedType > (); }
#line 4791 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 122:
#line 729 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = ExternalType(); }
#line 4797 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 123:
#line 730 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = InstanceOfType(); }
#line 4803 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 124:
#line 731 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = IntegerType(); }
#line 4809 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 125:
#line 732 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = IRIType(); }
#line 4815 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 126:
#line 733 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = NullType(); }
#line 4821 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 127:
#line 734 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = ObjectClassFieldType(); }
#line 4827 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 128:
#line 735 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = ObjectIdentifierType(); }
#line 4833 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 129:
#line 736 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = OctetStringType(); }
#line 4839 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 130:
#line 737 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = RealType(); }
#line 4845 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 131:
#line 738 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = RelativeIRIType(); }
#line 4851 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 132:
#line 739 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = RelativeOIDType(); }
#line 4857 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 133:
#line 740 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< SequenceType > (); }
#line 4863 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 134:
#line 741 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< SequenceOfType > (); }
#line 4869 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 135:
#line 742 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< SetType > (); }
#line 4875 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 136:
#line 743 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< SetOfType > (); }
#line 4881 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 137:
#line 744 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = yystack_[0].value.as< PrefixedType > (); }
#line 4887 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 138:
#line 745 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = TimeType(); }
#line 4893 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 139:
#line 746 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< BuiltinType > () = TimeOfDayType(); }
#line 4899 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 140:
#line 749 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< DefinedType > () = yystack_[0].value.as< DefinedType > (); }
#line 4905 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 141:
#line 750 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { throw std::runtime_error("Not handled - UsefulType"); }
#line 4911 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 142:
#line 751 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { throw std::runtime_error("Not handled - SelectionType"); }
#line 4917 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 143:
#line 752 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { throw std::runtime_error("Not handled - TypeFromObject"); }
#line 4923 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 144:
#line 757 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< NamedType > () = NamedType{ yystack_[1].value.as< std::string > (), yystack_[0].value.as< Type > () }; }
#line 4929 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 145:
#line 761 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > () = yystack_[0].value.as< Value > (); }
#line 4935 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 146:
#line 763 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { throw std::runtime_error("Unhandled field: ReferencedValue"); }
#line 4941 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 147:
#line 765 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { throw std::runtime_error("Unhandled field: ObjectClassFieldValue"); }
#line 4947 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 150:
#line 779 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Value > ().value_selection = yystack_[0].value.as< std::vector<ObjectIdComponentValue> > (); }
#line 4953 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 159:
#line 816 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< NamedNumber > () = NamedNumber{ yystack_[3].value.as< std::string > (), yystack_[1].value.as< long long > () }; }
#line 4959 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 160:
#line 818 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< NamedNumber > () = NamedNumber{ yystack_[3].value.as< std::string > (), yystack_[1].value.as< long long > () }; }
#line 4965 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 161:
#line 822 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< long long > () = yystack_[0].value.as< long long > (); }
#line 4971 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 162:
#line 824 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< long long > () = -yystack_[0].value.as< long long > (); }
#line 4977 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 165:
#line 832 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[1].value.as< EnumeratedType > (); }
#line 4983 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 166:
#line 836 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[0].value.as< EnumeratedType > ();
      yylhs.value.as< EnumeratedType > ().accept_anything = false; }
#line 4990 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 167:
#line 839 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[3].value.as< EnumeratedType > ();
      yylhs.value.as< EnumeratedType > ().accept_anything = true; }
#line 4997 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 168:
#line 842 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[5].value.as< EnumeratedType > ();
      yylhs.value.as< EnumeratedType > ().accept_anything = true;
      yylhs.value.as< EnumeratedType > ().enum_values.insert(yylhs.value.as< EnumeratedType > ().enum_values.end(), yystack_[0].value.as< EnumeratedType > ().enum_values.begin(), yystack_[0].value.as< EnumeratedType > ().enum_values.end()); }
#line 5005 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 169:
#line 848 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > ().enum_values.push_back(yystack_[0].value.as< EnumerationValue > ()); }
#line 5011 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 170:
#line 850 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumeratedType > () = yystack_[2].value.as< EnumeratedType > (); yylhs.value.as< EnumeratedType > ().enum_values.push_back(yystack_[0].value.as< EnumerationValue > ()); }
#line 5017 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 171:
#line 854 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumerationValue > ().name  = yystack_[0].value.as< std::string > (); }
#line 5023 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 172:
#line 856 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< EnumerationValue > ().name  = yystack_[0].value.as< NamedNumber > ().name;
      yylhs.value.as< EnumerationValue > ().value = yystack_[0].value.as< NamedNumber > ().number; }
#line 5030 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 182:
#line 901 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SequenceType > () = SequenceType(); }
#line 5036 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 183:
#line 903 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SequenceType > () = SequenceType{yystack_[1].value.as< ComponentTypeList > ()}; }
#line 5042 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 184:
#line 911 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[0].value.as< ComponentTypeList > (); }
#line 5048 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 185:
#line 915 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[0].value.as< ComponentTypeList > (); }
#line 5054 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 186:
#line 917 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[2].value.as< ComponentTypeList > (); }
#line 5060 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 187:
#line 919 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[4].value.as< ComponentTypeList > (); yylhs.value.as< ComponentTypeList > ().insert(yylhs.value.as< ComponentTypeList > ().end(), yystack_[0].value.as< ComponentTypeList > ().begin(), yystack_[0].value.as< ComponentTypeList > ().end()); }
#line 5066 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 188:
#line 921 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = yystack_[0].value.as< ComponentTypeList > (); }
#line 5072 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 189:
#line 925 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentTypeList > () = ComponentTypeList{yystack_[0].value.as< ComponentType > ()}; }
#line 5078 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 190:
#line 927 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yystack_[2].value.as< ComponentTypeList > ().push_back(yystack_[0].value.as< ComponentType > ()); yylhs.value.as< ComponentTypeList > () = yystack_[2].value.as< ComponentTypeList > (); }
#line 5084 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 191:
#line 931 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentType > () = ComponentType{yystack_[0].value.as< NamedType > (), false, absl::nullopt}; }
#line 5090 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 192:
#line 933 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentType > () = ComponentType{yystack_[1].value.as< NamedType > (), true, absl::nullopt}; }
#line 5096 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 193:
#line 935 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ComponentType > () = ComponentType{yystack_[2].value.as< NamedType > (), false, yystack_[0].value.as< Value > ()}; }
#line 5102 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 195:
#line 948 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SequenceOfType > () = SequenceOfType{ false, nullptr, std::make_shared<Type>(yystack_[0].value.as< Type > ()) }; }
#line 5108 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 196:
#line 950 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SequenceOfType > () = SequenceOfType{ true, std::make_shared<NamedType>(yystack_[0].value.as< NamedType > ()), nullptr }; }
#line 5114 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 197:
#line 954 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SetType > () = SetType{}; }
#line 5120 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 198:
#line 956 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SetType > () = SetType{yystack_[1].value.as< ComponentTypeList > ()}; }
#line 5126 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 199:
#line 960 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SetOfType > () = SetOfType{ false, nullptr, std::make_shared<Type>(yystack_[0].value.as< Type > ()) }; }
#line 5132 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 200:
#line 962 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< SetOfType > () = SetOfType{ true, std::make_shared<NamedType>(yystack_[0].value.as< NamedType > ()), nullptr }; }
#line 5138 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 201:
#line 966 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ChoiceType > () = ChoiceType{ yystack_[1].value.as< std::vector<NamedType> > () }; }
#line 5144 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 202:
#line 970 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedType> > () = yystack_[0].value.as< std::vector<NamedType> > (); }
#line 5150 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 203:
#line 974 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedType> > () = yystack_[0].value.as< std::vector<NamedType> > (); }
#line 5156 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 204:
#line 976 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedType> > () = yystack_[2].value.as< std::vector<NamedType> > (); }
#line 5162 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 205:
#line 980 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<NamedType> > () = std::vector<NamedType> { yystack_[0].value.as< NamedType > () }; }
#line 5168 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 206:
#line 982 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yystack_[2].value.as< std::vector<NamedType> > ().push_back( yystack_[0].value.as< NamedType > () ); yylhs.value.as< std::vector<NamedType> > () = yystack_[2].value.as< std::vector<NamedType> > (); }
#line 5174 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 208:
#line 992 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< PrefixedType > () = PrefixedType(yystack_[0].value.as< TaggedType > ()); }
#line 5180 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 209:
#line 999 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggedType > () = TaggedType{ yystack_[1].value.as< Tag > (), TaggingMode::automatic, yystack_[0].value.as< Type > () }; }
#line 5186 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 210:
#line 1001 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggedType > () = TaggedType{ yystack_[2].value.as< Tag > (), TaggingMode::implicit, yystack_[0].value.as< Type > () }; }
#line 5192 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 211:
#line 1003 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< TaggedType > () = TaggedType{ yystack_[2].value.as< Tag > (), TaggingMode::explicit_, yystack_[0].value.as< Type > () }; }
#line 5198 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 212:
#line 1007 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Tag > () = Tag{ yystack_[2].value.as< Class > (), yystack_[1].value.as< int > () }; }
#line 5204 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 215:
#line 1015 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< int > () = yystack_[0].value.as< long long > (); }
#line 5210 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 217:
#line 1020 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Class > () = Class::universal; }
#line 5216 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 218:
#line 1022 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Class > () = Class::application; }
#line 5222 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 219:
#line 1024 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Class > () = Class::private_; }
#line 5228 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 220:
#line 1026 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< Class > () = Class::context_specific; }
#line 5234 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 222:
#line 1039 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<ObjectIdComponentValue> > () = yystack_[1].value.as< std::vector<ObjectIdComponentValue> > (); std::reverse(yylhs.value.as< std::vector<ObjectIdComponentValue> > ().begin(), yylhs.value.as< std::vector<ObjectIdComponentValue> > ().end()); }
#line 5240 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 223:
#line 1041 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<ObjectIdComponentValue> > () = yystack_[1].value.as< std::vector<ObjectIdComponentValue> > (); std::reverse(yylhs.value.as< std::vector<ObjectIdComponentValue> > ().begin(), yylhs.value.as< std::vector<ObjectIdComponentValue> > ().end()); }
#line 5246 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 224:
#line 1045 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<ObjectIdComponentValue> > ().push_back(yystack_[0].value.as< ObjectIdComponentValue > ()); }
#line 5252 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 225:
#line 1047 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::vector<ObjectIdComponentValue> > () = yystack_[0].value.as< std::vector<ObjectIdComponentValue> > (); yylhs.value.as< std::vector<ObjectIdComponentValue> > ().push_back(yystack_[1].value.as< ObjectIdComponentValue > ()); }
#line 5258 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 226:
#line 1051 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > () = yystack_[0].value.as< ObjectIdComponentValue > (); }
#line 5264 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 227:
#line 1053 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > () = yystack_[0].value.as< ObjectIdComponentValue > (); }
#line 5270 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 228:
#line 1055 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > () = yystack_[0].value.as< ObjectIdComponentValue > (); }
#line 5276 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 229:
#line 1059 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > ().name = yystack_[0].value.as< std::string > (); }
#line 5282 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 230:
#line 1063 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > ().value = yystack_[0].value.as< long long > (); }
#line 5288 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 232:
#line 1068 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< ObjectIdComponentValue > () = yystack_[1].value.as< ObjectIdComponentValue > (); yylhs.value.as< ObjectIdComponentValue > ().name = yystack_[3].value.as< std::string > (); }
#line 5294 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 352:
#line 1380 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 5300 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 353:
#line 1384 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 5306 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 354:
#line 1388 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 5312 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;

  case 355:
#line 1392 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:859
    { yylhs.value.as< std::string > () = yystack_[0].value.as< std::string > (); }
#line 5318 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
    break;


#line 5322 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:859
            default:
              break;
            }
        }
      catch (const syntax_error& yyexc)
        {
          error (yyexc);
          YYERROR;
        }
      YY_SYMBOL_PRINT ("-> $$ =", yylhs);
      yypop_ (yylen);
      yylen = 0;
      YY_STACK_PRINT ();

      // Shift the result of the reduction.
      yypush_ (YY_NULLPTR, yylhs);
    }
    goto yynewstate;

  /*--------------------------------------.
  | yyerrlab -- here on detecting error.  |
  `--------------------------------------*/
  yyerrlab:
    // If not already recovering from an error, report this error.
    if (!yyerrstatus_)
      {
        ++yynerrs_;
        error (yyla.location, yysyntax_error_ (yystack_[0].state, yyla));
      }


    yyerror_range[1].location = yyla.location;
    if (yyerrstatus_ == 3)
      {
        /* If just tried and failed to reuse lookahead token after an
           error, discard it.  */

        // Return failure if at end of input.
        if (yyla.type_get () == yyeof_)
          YYABORT;
        else if (!yyla.empty ())
          {
            yy_destroy_ ("Error: discarding", yyla);
            yyla.clear ();
          }
      }

    // Else will try to reuse lookahead token after shifting the error token.
    goto yyerrlab1;


  /*---------------------------------------------------.
  | yyerrorlab -- error raised explicitly by YYERROR.  |
  `---------------------------------------------------*/
  yyerrorlab:

    /* Pacify compilers like GCC when the user code never invokes
       YYERROR and the label yyerrorlab therefore never appears in user
       code.  */
    if (false)
      goto yyerrorlab;
    yyerror_range[1].location = yystack_[yylen - 1].location;
    /* Do not reclaim the symbols of the rule whose action triggered
       this YYERROR.  */
    yypop_ (yylen);
    yylen = 0;
    goto yyerrlab1;

  /*-------------------------------------------------------------.
  | yyerrlab1 -- common code for both syntax error and YYERROR.  |
  `-------------------------------------------------------------*/
  yyerrlab1:
    yyerrstatus_ = 3;   // Each real token shifted decrements this.
    {
      stack_symbol_type error_token;
      for (;;)
        {
          yyn = yypact_[yystack_[0].state];
          if (!yy_pact_value_is_default_ (yyn))
            {
              yyn += yyterror_;
              if (0 <= yyn && yyn <= yylast_ && yycheck_[yyn] == yyterror_)
                {
                  yyn = yytable_[yyn];
                  if (0 < yyn)
                    break;
                }
            }

          // Pop the current state because it cannot handle the error token.
          if (yystack_.size () == 1)
            YYABORT;

          yyerror_range[1].location = yystack_[0].location;
          yy_destroy_ ("Error: popping", yystack_[0]);
          yypop_ ();
          YY_STACK_PRINT ();
        }

      yyerror_range[2].location = yyla.location;
      YYLLOC_DEFAULT (error_token.location, yyerror_range, 2);

      // Shift the error token.
      error_token.state = yyn;
      yypush_ ("Shifting", error_token);
    }
    goto yynewstate;

    // Accept.
  yyacceptlab:
    yyresult = 0;
    goto yyreturn;

    // Abort.
  yyabortlab:
    yyresult = 1;
    goto yyreturn;

  yyreturn:
    if (!yyla.empty ())
      yy_destroy_ ("Cleanup: discarding lookahead", yyla);

    /* Do not reclaim the symbols of the rule whose action triggered
       this YYABORT or YYACCEPT.  */
    yypop_ (yylen);
    while (1 < yystack_.size ())
      {
        yy_destroy_ ("Cleanup: popping", yystack_[0]);
        yypop_ ();
      }

    return yyresult;
  }
    catch (...)
      {
        YYCDEBUG << "Exception caught: cleaning lookahead and stack"
                 << std::endl;
        // Do not try to display the values of the reclaimed symbols,
        // as their printer might throw an exception.
        if (!yyla.empty ())
          yy_destroy_ (YY_NULLPTR, yyla);

        while (1 < yystack_.size ())
          {
            yy_destroy_ (YY_NULLPTR, yystack_[0]);
            yypop_ ();
          }
        throw;
      }
  }

  void
  asn1_parser::error (const syntax_error& yyexc)
  {
    error (yyexc.location, yyexc.what());
  }

  // Generate an error message.
  std::string
  asn1_parser::yysyntax_error_ (state_type yystate, const symbol_type& yyla) const
  {
    // Number of reported tokens (one for the "unexpected", one per
    // "expected").
    size_t yycount = 0;
    // Its maximum.
    enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
    // Arguments of yyformat.
    char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];

    /* There are many possibilities here to consider:
       - If this state is a consistent state with a default action, then
         the only way this function was invoked is if the default action
         is an error action.  In that case, don't check for expected
         tokens because there are none.
       - The only way there can be no lookahead present (in yyla) is
         if this state is a consistent state with a default action.
         Thus, detecting the absence of a lookahead is sufficient to
         determine that there is no unexpected or expected token to
         report.  In that case, just report a simple "syntax error".
       - Don't assume there isn't a lookahead just because this state is
         a consistent state with a default action.  There might have
         been a previous inconsistent state, consistent state with a
         non-default action, or user semantic action that manipulated
         yyla.  (However, yyla is currently not documented for users.)
       - Of course, the expected token list depends on states to have
         correct lookahead information, and it depends on the parser not
         to perform extra reductions after fetching a lookahead from the
         scanner and before detecting a syntax error.  Thus, state
         merging (from LALR or IELR) and default reductions corrupt the
         expected token list.  However, the list is correct for
         canonical LR with one exception: it will still contain any
         token that will not be accepted due to an error action in a
         later state.
    */
    if (!yyla.empty ())
      {
        int yytoken = yyla.type_get ();
        yyarg[yycount++] = yytname_[yytoken];
        int yyn = yypact_[yystate];
        if (!yy_pact_value_is_default_ (yyn))
          {
            /* Start YYX at -YYN if negative to avoid negative indexes in
               YYCHECK.  In other words, skip the first -YYN actions for
               this state because they are default actions.  */
            int yyxbegin = yyn < 0 ? -yyn : 0;
            // Stay within bounds of both yycheck and yytname.
            int yychecklim = yylast_ - yyn + 1;
            int yyxend = yychecklim < yyntokens_ ? yychecklim : yyntokens_;
            for (int yyx = yyxbegin; yyx < yyxend; ++yyx)
              if (yycheck_[yyx + yyn] == yyx && yyx != yyterror_
                  && !yy_table_value_is_error_ (yytable_[yyx + yyn]))
                {
                  if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                    {
                      yycount = 1;
                      break;
                    }
                  else
                    yyarg[yycount++] = yytname_[yyx];
                }
          }
      }

    char const* yyformat = YY_NULLPTR;
    switch (yycount)
      {
#define YYCASE_(N, S)                         \
        case N:                               \
          yyformat = S;                       \
        break
        YYCASE_(0, YY_("syntax error"));
        YYCASE_(1, YY_("syntax error, unexpected %s"));
        YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
        YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
        YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
        YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
#undef YYCASE_
      }

    std::string yyres;
    // Argument number.
    size_t yyi = 0;
    for (char const* yyp = yyformat; *yyp; ++yyp)
      if (yyp[0] == '%' && yyp[1] == 's' && yyi < yycount)
        {
          yyres += yytnamerr_ (yyarg[yyi++]);
          ++yyp;
        }
      else
        yyres += *yyp;
    return yyres;
  }


  const short int asn1_parser::yypact_ninf_ = -376;

  const short int asn1_parser::yytable_ninf_ = -356;

  const short int
  asn1_parser::yypact_[] =
  {
     -85,  -376,    69,    25,   -42,  -376,    91,     6,  -376,   -23,
    -376,    47,     3,  -376,  -376,     8,     6,  -376,  -376,  -376,
       0,    50,  -376,  -376,    62,    81,    88,   135,  -376,  -376,
     199,   132,    72,  -376,  -376,  -376,   147,    94,    95,  -376,
    -376,  -376,   132,    99,  -376,   197,  -376,    72,  -376,   125,
    -376,    28,   189,   173,  -376,  -376,  -376,   106,  -376,  -376,
     108,   110,  -376,  -376,  -376,  -376,   237,   202,   189,    -4,
      51,  -376,  -376,    -4,  -376,  -376,  -376,   111,    -4,  -376,
     -49,    51,  -376,  -376,  -376,   143,  1772,  -376,  -376,  -376,
    -376,   -85,  -376,  1772,  -376,  -376,  -376,  -376,   162,  -376,
    -376,   164,   145,  -376,  -376,  -376,   185,   153,  -376,  -376,
    -376,  -376,   191,   155,  -376,  -376,   211,   178,  -376,  -376,
    -376,  -376,  -376,   -15,   144,  -376,  -376,  -376,  -376,  -376,
    -376,  -376,  -376,  -376,   267,   146,   148,  -376,  -376,  -376,
    -376,  -376,   150,  -376,  -376,  -376,  -376,    33,  -376,  -376,
    -376,  -376,  -376,  -376,  -376,  -376,  -376,  -376,  -376,  -376,
    -376,  -376,  -376,  -376,  -376,  1580,  -376,  -376,  -376,  -376,
    -376,  -376,  -376,  -376,  -376,  -376,  -376,  -376,  -376,  -376,
    -376,  -376,  -376,   168,   159,   156,  -376,   -22,   167,   171,
    -376,   151,  -376,   151,    26,   151,  -376,  -376,  1772,   167,
     -33,   498,   209,   210,  1772,    -6,   216,   217,   157,     1,
     247,   247,  1234,  -376,  1772,  1772,   167,   238,  1772,    20,
      12,  -376,  -376,  -376,  -376,  -376,   169,   151,  -376,   181,
    -376,   172,  1772,  -376,   183,   187,  -376,   184,  -376,   177,
     -34,  -376,   184,   167,  -376,  1672,  -376,   235,   188,  -376,
       9,   201,  -376,   192,  -376,  -376,  -376,   272,  1772,   291,
    -376,   167,  -376,  -376,  1234,   320,  -376,   182,   871,   619,
     329,  -376,   198,  -376,  -376,  -376,  -376,  -376,  -376,  -376,
    -376,  -376,  -376,  -376,  -376,   -51,    21,  -376,  -376,  -376,
    -376,  -376,  -376,   203,  -376,  -376,   200,  -376,   -67,   -46,
     -41,   -29,  -376,   272,   280,  -376,  -376,  -376,  1772,  -376,
     219,   213,  -376,  -376,  -376,  -376,  -376,  -376,   159,   206,
    1772,  1772,   167,  -376,  -376,   214,  1772,  1772,  -376,  -376,
    -376,  -376,    16,  -376,  -376,  -376,  -376,  -376,   208,  -376,
    -376,   -51,  -376,   212,   167,   167,   257,   167,  -376,  -376,
    -376,  -376,    12,   223,    12,  -376,  -376,  -376,   225,   205,
     -12,  -376,   226,  -376,   -58,   167,  -376,   -54,     2,   328,
    -376,   151,  1772,    -8,  1234,  -376,  -376,    -1,   740,  -376,
     -25,  1234,  -376,  -376,  -376,   167,   229,   224,  -376,  -376,
    1355,  -376,  -376,   221,   228,  -376,    10,   -51,  -376,   -63,
     227,  -376,  1234,  1476,   232,   239,  -376,  -376,   740,  -376,
    -376,   740,  -376,   167,   992,  -376,    32,   167,  -376,   167,
    -376,  -376,   167,  -376,   167,  -376,  -376,  -376,   233,   220,
      49,   252,  -376,   248,  -376,  -376,    22,  -376,  -376,   151,
      24,  -376,  -376,   203,  -376,   253,   256,  -376,   167,   249,
    -376,   250,  -376,  -376,   334,  -376,  -376,  -376,   -39,  -376,
    -376,  -376,  -376,   236,   260,  -376,  -376,  -376,    43,  -376,
    -376,  -376,   251,   -41,  -376,  -376,  1113,  -376,  -376,  -376,
    -376,  -376,  -376,   296,  -376,   266,  -376,   268,   271,   263,
    -376,  -376,    -8,    -8,  1234,   269,   278,   270,   167,   283,
    -376,  1234,   619,  -376,   298,  -376,  -376,  -376,   151,   249,
    -376,   151,  -376,   151,  -376,  -376,    31,  -376,  -376,  -376,
    -376,   331,   273,   286,  -376,  -376,  -376,  -376,  -376,   346,
     151,  -376,   309,   297,   301,   379,   350,   355,   305,   337,
    -376
  };

  const unsigned short int
  asn1_parser::yydefact_[] =
  {
       0,   355,     0,     0,    54,     1,    65,     0,    51,    52,
      53,     0,    69,    62,   353,     0,    57,    60,    61,    59,
     229,     0,    56,    64,     0,     0,     0,    71,    55,    58,
       0,     0,   238,    68,    66,    67,     0,     0,     0,   239,
     240,   236,     0,     0,    70,     0,    63,   238,   235,    76,
     237,    78,    49,    80,    95,    96,    97,     0,   352,   354,
       0,    77,    90,    92,    93,    94,     0,     0,    49,    82,
       0,    75,    74,     0,     3,     2,    48,     0,    81,    83,
       0,    72,    98,   100,   101,     0,     0,    91,    50,    79,
      84,     0,    99,     0,     5,    19,     9,   181,     0,   251,
     152,     0,     0,   245,   247,   248,     0,     0,   243,   252,
     253,   254,     0,   155,   255,   256,     0,     0,   234,   257,
     173,   233,   241,     0,     0,   259,   258,   244,   246,     8,
     260,   261,   262,   263,   214,   352,     0,     4,     6,    41,
      18,   127,     0,   143,   123,   140,   102,     0,   110,   111,
     114,   124,   121,   130,   113,   129,   126,   133,   134,   135,
     136,   116,   142,   137,   208,     0,   128,   132,   125,   131,
     120,   122,   138,   117,   139,   118,   119,   115,   249,   250,
     141,   112,   267,   103,     0,     0,    85,    89,   108,   174,
     264,     0,   242,     0,     0,     0,   221,   180,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   220,
       0,     0,     0,   266,     0,     0,   209,     0,     0,     0,
       0,    86,    88,   104,    87,   105,     0,     0,   205,     0,
     202,   203,     0,   172,     0,   166,   169,   171,    43,     0,
       0,   157,     0,   195,   196,     0,   325,     0,     0,   182,
     191,     0,   184,   185,   189,   161,    34,     0,     0,     0,
     154,     0,   315,   322,     0,     0,   153,     0,     0,     0,
       0,   353,    21,    36,    22,    23,    24,    37,    33,   302,
     147,    39,   278,    44,   151,   326,   313,   145,   146,   148,
     163,   149,   150,   348,   277,   279,   280,   283,   285,     0,
     287,     0,   290,     0,   293,   301,   304,   305,     0,   306,
       0,   317,   308,   309,   307,   310,   311,   312,   164,     0,
       0,     0,   199,   200,   197,     0,     0,     0,   213,   218,
     219,   217,     0,    10,    11,    12,    13,    14,     0,    38,
      42,     0,   109,     0,   211,   210,     0,   207,     7,    20,
     106,   230,   231,     0,   224,   226,   227,   228,   229,     0,
       0,   176,     0,   201,     0,   144,   165,     0,     0,     0,
     156,     0,     0,     0,     0,   192,   183,     0,     0,   286,
      45,     0,   327,   345,   346,     0,     0,   230,    16,    17,
       0,    28,    32,     0,     0,    29,   151,    30,    31,   229,
       0,   162,     0,     0,     0,     0,   298,   297,     0,   300,
     299,     0,   294,   314,     0,   318,     0,   270,   274,   271,
     275,   198,   268,   272,   269,   273,   215,   216,     0,     0,
       0,     0,   231,     0,   222,   225,     0,   107,   175,     0,
       0,   204,   206,   348,   170,     0,     0,   158,   194,   188,
     193,   186,   190,   296,     0,    46,   330,   328,     0,   329,
     331,   332,    26,     0,     0,   303,    40,   350,     0,   349,
     347,   276,   281,   288,   291,   324,     0,   323,   316,   319,
      35,   212,    15,     0,   223,     0,   177,     0,     0,   167,
     160,   159,     0,     0,     0,     0,     0,   335,   340,     0,
      27,     0,     0,   320,     0,   232,   178,   179,     0,   187,
      47,     0,   333,     0,   339,   337,   344,    25,   351,   282,
     284,     0,   168,     0,   336,   342,   343,   341,   338,     0,
       0,   334,     0,     0,     0,     0,     0,     0,     0,     0,
     265
  };

  const short int
  asn1_parser::yypgoto_[] =
  {
    -376,  -376,  -376,   230,  -376,  -376,   160,   218,  -376,  -174,
    -376,  -260,  -376,  -376,  -376,  -376,  -376,    37,  -376,  -376,
    -376,  -376,  -376,  -376,  -376,  -376,  -376,  -376,  -376,   362,
    -376,  -376,  -376,  -376,  -376,   407,  -376,   403,  -376,  -376,
    -376,  -376,  -376,  -376,  -376,  -376,  -376,  -376,   357,  -376,
    -376,   385,   365,  -376,  -376,   358,  -376,  -113,  -376,  -376,
    -376,  -376,    -9,  -376,  -376,   -64,  -160,  -376,  -376,  -376,
    -376,  -376,  -376,  -194,  -322,  -376,  -376,  -376,   -68,  -365,
    -376,  -376,  -376,     4,  -376,  -376,  -376,   240,  -376,  -362,
    -353,  -376,  -376,  -376,  -376,  -376,  -376,  -376,  -376,  -376,
    -376,  -376,  -376,  -376,  -376,  -376,   254,  -296,  -376,   116,
      11,  -376,  -376,  -376,  -376,  -376,   395,   402,  -376,  -376,
    -376,  -376,  -376,  -376,  -376,  -376,  -376,  -376,  -376,  -376,
    -376,  -376,  -119,  -376,  -376,  -376,  -376,  -376,  -262,  -376,
    -376,    38,  -376,    39,  -376,   149,  -376,  -376,    70,  -376,
    -376,  -376,  -376,  -376,  -376,  -376,  -376,   -27,   105,  -376,
    -376,  -376,  -376,  -376,  -376,  -376,  -375,  -376,  -376,  -376,
    -376,  -376,  -376,    13,  -376,   -48,    -7,   -38,    23
  };

  const short int
  asn1_parser::yydefgoto_[] =
  {
      -1,     2,    88,   136,   137,   138,   338,   339,   391,   139,
     140,   273,   274,   275,   393,   276,   394,   395,   277,   278,
     279,   141,   280,   281,   142,   143,   144,   282,   283,    67,
      68,     3,     8,     9,    10,    15,    16,    17,    18,    12,
      27,    37,    52,    53,    60,    70,    77,    78,    79,   186,
     221,    80,    62,    63,    81,    82,   145,   284,   146,   223,
      83,    84,   341,   148,   149,   250,   286,   287,   288,   150,
     289,   151,   240,   233,   290,   291,   152,   234,   235,   236,
     153,   154,   360,   361,   155,   156,   157,   251,   252,   253,
     254,   158,   159,   160,   161,   229,   230,   231,   162,   163,
     164,   165,   209,   428,   332,   166,   292,   353,   354,   355,
     356,   357,   167,   168,    22,    32,    43,    41,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   213,   293,   294,   295,   296,   519,   297,   298,
     299,   300,   301,   302,   303,   379,   408,   411,   304,   305,
     306,   307,   308,   309,   310,   478,   311,   479,   312,   313,
     314,   315,   457,   459,   460,   461,   496,   497,   515,   516,
     528,   316,   317,   404,   470,   183,   318,   225,   185
  };

  const short int
  asn1_parser::yytable_[] =
  {
      20,   241,   444,    64,   202,   206,   255,   400,   392,    20,
      13,   449,   247,    65,   351,    91,   351,    54,    55,    56,
     426,    64,    85,     4,   452,    64,   351,   272,   487,   454,
      64,    65,    86,    85,   329,    65,  -292,   247,    24,   247,
      65,   348,   349,    86,   247,  -289,   446,    94,   409,    54,
      55,    56,   342,   348,   349,   480,   433,    96,   435,   374,
      57,   525,    25,   436,   441,     1,   406,   218,   443,     5,
     348,   349,   198,    26,   222,   201,     6,   147,  -289,   184,
     246,   469,     7,   495,   188,  -164,   184,   199,    73,   248,
     402,   370,   249,    14,   272,   272,   330,    14,   375,   407,
     433,   201,   220,   371,   383,  -292,    11,   352,   398,   200,
      21,   201,    14,   438,   187,   331,   248,   410,    14,   324,
     526,   451,    23,    19,   527,   439,    30,   228,     1,    59,
     392,   509,    19,    28,   244,  -231,   523,   129,   524,   452,
     323,   270,   382,    14,  -321,    14,    58,    59,    39,    40,
      14,  -321,     1,    59,   212,   396,   216,    14,   184,   201,
       1,   271,     1,   271,   501,   444,     1,    59,    33,   201,
      58,   350,     1,    59,     1,    59,     1,   447,    58,    59,
     -73,   -73,    58,    59,   232,    51,   237,    34,   242,   243,
      31,   245,   285,   232,    35,   322,    36,   245,   232,    58,
      59,    58,    59,    13,   272,   344,   345,   184,   184,   347,
     226,   184,    42,   358,   450,    45,   272,   239,    44,   427,
     362,   455,    46,   365,   319,   184,   385,   386,   203,   207,
     398,   204,    48,    49,   272,   343,   365,   272,   184,   432,
     520,   432,   466,   226,    66,    69,   199,    73,    71,   380,
      72,   184,    74,    89,   477,   445,   418,   420,    75,   397,
     285,   399,   423,   425,    93,   189,   456,   190,   205,   191,
     201,   333,   334,   335,   336,   337,   192,   193,   194,   195,
     196,   197,   208,   432,  -355,   217,   210,   343,   211,   218,
     467,   343,   319,   201,   219,   227,   320,   321,   328,   413,
     442,   184,    14,   326,   327,   346,   363,   359,   366,   364,
     368,   417,   419,   245,   245,   369,   477,   422,   424,   245,
     245,   437,   372,   432,   367,   373,   376,   488,   272,   377,
     378,   381,   384,   401,   510,   403,   -41,   405,  -295,   421,
     431,   518,   414,   415,   416,   358,   429,   358,   434,   348,
     430,   436,   440,   458,   465,   226,    59,   232,   463,   471,
     237,   472,   481,   448,   242,   184,   232,   482,   350,   285,
     232,   483,  -161,   484,   494,   226,   464,   226,   437,   514,
     490,   397,   350,   491,   499,   500,   492,   493,   502,   358,
     504,   226,   437,   505,   468,   506,   184,   343,   507,   285,
     508,   319,   285,   512,   343,   521,   511,   513,   517,   529,
     530,   531,   532,   343,   533,   534,   535,   536,   537,   226,
     538,   539,   540,    29,   238,   343,   343,   462,   390,   340,
      76,   319,   362,    38,   319,    90,    61,   343,    87,    92,
     522,   224,    50,   486,    47,   325,   473,   485,   453,   503,
     474,   498,   412,     0,     0,     0,   489,     0,     0,   226,
       0,     0,     0,   226,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   232,   232,     0,     0,     0,
       0,     0,     0,   285,     0,     0,     0,     0,     0,   343,
       0,   237,   255,     0,   498,     0,   498,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   343,     0,    94,
      95,   256,     0,   237,   343,   319,     0,     0,     0,    96,
     257,     0,    97,     0,     0,    98,    99,   100,     0,   101,
     102,     0,     0,     0,     0,   258,   103,   104,     0,     0,
     105,   106,   259,     0,     0,   107,     0,     0,     0,     0,
     108,   260,   261,     0,   109,   110,   111,     0,     0,     0,
       0,   262,   112,     0,   113,     0,   114,     0,   263,     0,
       0,   115,   116,     0,   117,     0,   118,     0,   264,     0,
       0,     0,   119,     0,   120,   121,   122,   123,   124,   265,
     199,     0,     0,   125,     0,   126,   127,   128,   266,   129,
       0,     0,     0,   130,     0,   131,   132,   133,   267,     0,
       0,     0,   268,   255,   269,     0,   134,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   270,     0,     0,
      94,    95,   256,     0,     0,     0,     0,     0,   135,   271,
      96,   257,     0,    97,     0,     0,    98,    99,   100,     0,
     101,   102,     0,     0,     0,     0,     0,   103,   104,     0,
       0,   105,   106,     0,     0,     0,   107,     0,     0,     0,
       0,   108,   260,   261,     0,   109,   110,   111,     0,     0,
       0,     0,   262,   112,     0,   113,     0,   114,     0,   263,
       0,     0,   115,   116,     0,   117,     0,   118,     0,   264,
       0,     0,     0,   119,     0,   120,   121,   122,   123,   124,
     265,   199,     0,     0,   125,     0,   126,   127,   128,   266,
     129,     0,     0,     0,   130,     0,   131,   132,   133,   267,
       0,     0,     0,   268,   255,   269,     0,   134,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   270,     0,
       0,    94,    95,   256,     0,     0,     0,     0,     0,   135,
     271,    96,     0,     0,    97,     0,     0,    98,    99,   100,
       0,   101,   102,     0,     0,     0,     0,     0,   103,   104,
       0,     0,   105,   106,     0,     0,     0,   107,     0,     0,
       0,     0,   108,   260,   261,     0,   109,   110,   111,     0,
       0,     0,     0,   262,   112,     0,   113,     0,   114,     0,
     263,     0,     0,   115,   116,     0,   117,     0,   118,     0,
     264,     0,     0,     0,   119,     0,   120,   121,   122,   123,
     124,   265,   199,     0,     0,   125,     0,   126,   127,   128,
     266,   129,     0,     0,     0,   130,     0,   131,   132,   133,
     267,     0,     0,     0,   268,     0,   269,     0,   134,     0,
       0,     0,     0,     0,     0,   387,     0,     0,     0,   270,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     135,   271,    94,    95,     0,   333,   334,   335,   336,   337,
     388,     0,    96,     0,     0,    97,     0,     0,    98,    99,
     100,     0,   101,   102,     0,     0,     0,     0,     0,   103,
     104,     0,     0,   105,   106,     0,     0,     0,   107,     0,
       0,     0,     0,   108,   260,     0,     0,   109,   110,   111,
       0,     0,     0,     0,     0,   112,     0,   113,     0,   114,
       0,     0,     0,     0,   115,   116,     0,   117,     0,   118,
       0,     0,     0,     0,     0,   119,     0,   120,   121,   122,
     123,   124,     0,     0,     0,     0,   125,     0,   126,   127,
     128,   266,   129,     0,     0,     0,   130,     0,   131,   132,
     133,     0,     0,     0,     0,   268,   255,     0,     0,   134,
       0,     0,     0,     0,     0,     0,     0,     0,   389,     0,
     270,     0,     0,    94,    95,     0,     0,     0,     0,     0,
       0,   135,   271,    96,     0,     0,    97,     0,     0,    98,
      99,   100,     0,   101,   102,     0,     0,     0,     0,     0,
     103,   104,     0,     0,   105,   106,     0,     0,     0,   107,
       0,     0,     0,     0,   108,   260,     0,     0,   109,   110,
     111,     0,     0,     0,     0,     0,   112,     0,   113,     0,
     114,   475,     0,     0,     0,   115,   116,     0,   117,     0,
     118,     0,     0,     0,     0,     0,   119,     0,   120,   121,
     122,   123,   124,     0,     0,     0,     0,   125,     0,   126,
     127,   128,   266,   129,     0,     0,     0,   130,     0,   131,
     132,   133,     0,     0,     0,     0,   220,   255,     0,     0,
     134,     0,   476,     0,     0,     0,     0,     0,     0,     0,
       0,   270,     0,     0,    94,    95,     0,     0,     0,     0,
       0,     0,   135,   271,    96,     0,     0,    97,     0,     0,
      98,    99,   100,     0,   101,   102,     0,     0,     0,     0,
       0,   103,   104,     0,     0,   105,   106,     0,     0,     0,
     107,     0,     0,     0,     0,   108,   260,     0,     0,   109,
     110,   111,     0,     0,     0,     0,     0,   112,     0,   113,
       0,   114,   475,     0,     0,     0,   115,   116,     0,   117,
       0,   118,     0,     0,     0,     0,     0,   119,     0,   120,
     121,   122,   123,   124,     0,     0,     0,     0,   125,     0,
     126,   127,   128,   266,   129,     0,     0,     0,   130,     0,
     131,   132,   133,     0,     0,     0,     0,   220,   255,     0,
       0,   134,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   270,     0,     0,    94,    95,     0,     0,     0,
       0,     0,     0,   135,   271,    96,     0,     0,    97,     0,
       0,    98,    99,   100,     0,   101,   102,     0,     0,     0,
       0,     0,   103,   104,     0,     0,   105,   106,     0,     0,
       0,   107,     0,     0,     0,     0,   108,   260,     0,     0,
     109,   110,   111,     0,     0,     0,     0,     0,   112,     0,
     113,     0,   114,     0,     0,     0,     0,   115,   116,     0,
     117,     0,   118,     0,     0,     0,     0,     0,   119,     0,
     120,   121,   122,   123,   124,     0,     0,     0,     0,   125,
       0,   126,   127,   128,   266,   129,     0,     0,     0,   130,
       0,   131,   132,   133,     0,     0,     0,     0,   220,   255,
       0,     0,   134,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   270,     0,     0,    94,    95,     0,     0,
       0,     0,     0,     0,   135,   271,    96,     0,     0,    97,
       0,     0,    98,    99,   100,     0,   101,   102,     0,     0,
       0,     0,     0,   103,   104,     0,     0,   105,   106,     0,
       0,     0,   107,     0,     0,     0,     0,   108,   260,     0,
       0,   109,   110,   111,     0,     0,     0,     0,     0,   112,
       0,   113,     0,   114,     0,     0,     0,     0,   115,   116,
       0,   117,     0,   118,     0,     0,     0,     0,     0,   119,
       0,   120,   121,   122,   123,   124,     0,     0,     0,     0,
     125,     0,   126,   127,   128,   266,   129,     0,     0,     0,
     130,     0,   131,   132,   133,     0,     0,     0,     0,   268,
     255,     0,     0,   134,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   270,     0,     0,    94,    95,     0,
       0,     0,     0,     0,     0,   135,   271,    96,     0,     0,
      97,     0,     0,    98,    99,   100,     0,   101,   102,     0,
       0,     0,     0,     0,   103,   104,     0,     0,   105,   106,
       0,     0,     0,   107,     0,     0,     0,     0,   108,     0,
       0,     0,   109,   110,   111,     0,     0,     0,     0,     0,
     112,     0,   113,     0,   114,     0,     0,     0,     0,   115,
     116,     0,   117,     0,   118,     0,     0,     0,     0,     0,
     119,     0,   120,   121,   122,   123,   124,     0,     0,     0,
       0,   125,     0,   126,   127,   128,     0,   129,     0,     0,
       0,   130,     0,   131,   132,   133,     0,     0,     0,     0,
       0,    94,    95,     0,   134,     0,     0,     0,     0,     0,
       0,    96,     0,     0,    97,   270,     0,    98,    99,   100,
       0,   101,   102,     0,     0,     0,   135,   271,   103,   104,
       0,     0,   105,   106,     0,     0,     0,   107,     0,   214,
       0,     0,   108,     0,     0,     0,   109,   110,   111,     0,
     215,     0,     0,     0,   112,     0,   113,     0,   114,     0,
       0,     0,     0,   115,   116,     0,   117,     0,   118,     0,
       0,     0,     0,     0,   119,     0,   120,   121,   122,   123,
     124,     0,     0,     0,     0,   125,     0,   126,   127,   128,
       0,   129,     0,    94,    95,   130,     0,   131,   132,   133,
       0,     0,     0,    96,     0,     0,    97,     0,   134,    98,
      99,   100,     0,   101,   102,     0,     0,     0,     0,     0,
     103,   104,     0,     0,   105,   106,     0,     0,     0,   107,
     135,    14,     0,     0,   108,     0,     0,     0,   109,   110,
     111,     0,     0,     0,     0,     0,   112,     0,   113,     0,
     114,     0,     0,     0,     0,   115,   116,     0,   117,     0,
     118,     0,     0,     0,     0,     0,   119,     0,   120,   121,
     122,   123,   124,     0,     0,     0,     0,   125,     0,   126,
     127,   128,     0,   129,     0,     0,     0,   130,     0,   131,
     132,   133,     0,    94,    95,     0,     0,     0,     0,     0,
     134,     0,   218,    96,     0,     0,    97,     0,     0,    98,
      99,   100,     0,   101,   102,     0,     0,     0,     0,     0,
     103,   104,   135,    14,   105,   106,     0,     0,     0,   107,
       0,     0,     0,     0,   108,     0,     0,     0,   109,   110,
     111,     0,     0,     0,     0,     0,   112,     0,   113,     0,
     114,     0,     0,     0,     0,   115,   116,     0,   117,     0,
     118,     0,     0,     0,     0,     0,   119,     0,   120,   121,
     122,   123,   124,     0,     0,     0,     0,   125,     0,   126,
     127,   128,     0,   129,     0,     0,     0,   130,     0,   131,
     132,   133,     0,     0,     0,     0,     0,     0,     0,     0,
     134,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   135,    14
  };

  const short int
  asn1_parser::yycheck_[] =
  {
       7,   195,   367,    51,   123,   124,     4,   269,   268,    16,
       4,   373,    45,    51,     4,    64,     4,    21,    22,    23,
       4,    69,    70,     0,   377,    73,     4,   201,     4,    54,
      78,    69,    70,    81,    33,    73,    77,    45,    35,    45,
      78,    21,    22,    81,    45,   112,   368,    21,    77,    21,
      22,    23,   212,    21,    22,    23,   352,    31,   354,    50,
      32,    30,    59,   126,   122,   150,   112,   130,   122,     0,
      21,    22,    87,    70,   187,   126,    51,    86,   145,    86,
     199,   403,   124,   122,    93,   148,    93,   102,   137,   122,
     141,   125,   125,   151,   268,   269,    95,   151,    89,   145,
     396,   126,   124,   137,   264,   146,    15,   220,   268,   124,
     133,   126,   151,   125,    91,   114,   122,   146,   151,   125,
      89,   122,    75,     7,    93,   137,   126,   191,   150,   151,
     390,   493,    16,   125,   198,   125,   511,   111,   513,   492,
     204,   139,   261,   151,   123,   151,   150,   151,    16,    17,
     151,   130,   150,   151,   121,   268,   165,   151,   165,   126,
     150,   151,   150,   151,   121,   530,   150,   151,   106,   126,
     150,   219,   150,   151,   150,   151,   150,   371,   150,   151,
      55,    56,   150,   151,   191,    60,   193,   106,   195,   198,
     140,   198,   201,   200,   106,   204,    61,   204,   205,   150,
     151,   150,   151,     4,   378,   214,   215,   214,   215,   218,
     187,   218,   140,   220,   374,   121,   390,   194,    71,   332,
     227,   381,   127,   232,   201,   232,    44,    45,   123,   124,
     390,    87,   133,    36,   408,   212,   245,   411,   245,   352,
     502,   354,   402,   220,    55,    72,   102,   137,   142,   258,
     142,   258,    15,   142,   414,   368,   320,   321,    56,   268,
     269,   268,   326,   327,   121,   103,   385,   103,   124,   124,
     126,    24,    25,    26,    27,    28,    91,   124,    87,   124,
      69,   103,    15,   396,   138,   117,   138,   264,   138,   130,
     403,   268,   269,   126,   138,   124,    87,    87,   141,   308,
     364,   308,   151,    87,    87,    67,   125,   138,   125,   137,
     126,   320,   321,   320,   321,   138,   476,   326,   327,   326,
     327,   359,    87,   436,   137,   137,   125,   440,   502,   137,
      58,    40,    12,     4,   494,   132,   138,   137,    58,   125,
      83,   501,   123,   130,   138,   352,   138,   354,   125,    21,
     138,   126,   126,   124,   127,   332,   151,   364,   137,   127,
     367,   122,   129,   372,   371,   372,   373,   147,   416,   378,
     377,   119,   148,   125,    40,   352,   148,   354,   416,   498,
     127,   390,   430,   127,   148,   125,   137,   137,   137,   396,
      94,   368,   430,   127,   403,   127,   403,   374,   127,   408,
     137,   378,   411,   125,   381,   107,   137,   137,   125,    78,
     137,   125,    66,   390,   105,   118,   115,    38,    68,   396,
      65,   116,    85,    16,   194,   402,   403,   390,   268,   211,
      68,   408,   439,    30,   411,    78,    51,   414,    73,    81,
     508,   187,    47,   439,    42,   205,   408,   436,   378,   476,
     411,   458,   303,    -1,    -1,    -1,   443,    -1,    -1,   436,
      -1,    -1,    -1,   440,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   492,   493,    -1,    -1,    -1,
      -1,    -1,    -1,   502,    -1,    -1,    -1,    -1,    -1,   476,
      -1,   508,     4,    -1,   511,    -1,   513,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,    -1,    21,
      22,    23,    -1,   530,   501,   502,    -1,    -1,    -1,    31,
      32,    -1,    34,    -1,    -1,    37,    38,    39,    -1,    41,
      42,    -1,    -1,    -1,    -1,    47,    48,    49,    -1,    -1,
      52,    53,    54,    -1,    -1,    57,    -1,    -1,    -1,    -1,
      62,    63,    64,    -1,    66,    67,    68,    -1,    -1,    -1,
      -1,    73,    74,    -1,    76,    -1,    78,    -1,    80,    -1,
      -1,    83,    84,    -1,    86,    -1,    88,    -1,    90,    -1,
      -1,    -1,    94,    -1,    96,    97,    98,    99,   100,   101,
     102,    -1,    -1,   105,    -1,   107,   108,   109,   110,   111,
      -1,    -1,    -1,   115,    -1,   117,   118,   119,   120,    -1,
      -1,    -1,   124,     4,   126,    -1,   128,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   139,    -1,    -1,
      21,    22,    23,    -1,    -1,    -1,    -1,    -1,   150,   151,
      31,    32,    -1,    34,    -1,    -1,    37,    38,    39,    -1,
      41,    42,    -1,    -1,    -1,    -1,    -1,    48,    49,    -1,
      -1,    52,    53,    -1,    -1,    -1,    57,    -1,    -1,    -1,
      -1,    62,    63,    64,    -1,    66,    67,    68,    -1,    -1,
      -1,    -1,    73,    74,    -1,    76,    -1,    78,    -1,    80,
      -1,    -1,    83,    84,    -1,    86,    -1,    88,    -1,    90,
      -1,    -1,    -1,    94,    -1,    96,    97,    98,    99,   100,
     101,   102,    -1,    -1,   105,    -1,   107,   108,   109,   110,
     111,    -1,    -1,    -1,   115,    -1,   117,   118,   119,   120,
      -1,    -1,    -1,   124,     4,   126,    -1,   128,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   139,    -1,
      -1,    21,    22,    23,    -1,    -1,    -1,    -1,    -1,   150,
     151,    31,    -1,    -1,    34,    -1,    -1,    37,    38,    39,
      -1,    41,    42,    -1,    -1,    -1,    -1,    -1,    48,    49,
      -1,    -1,    52,    53,    -1,    -1,    -1,    57,    -1,    -1,
      -1,    -1,    62,    63,    64,    -1,    66,    67,    68,    -1,
      -1,    -1,    -1,    73,    74,    -1,    76,    -1,    78,    -1,
      80,    -1,    -1,    83,    84,    -1,    86,    -1,    88,    -1,
      90,    -1,    -1,    -1,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,    -1,    -1,   105,    -1,   107,   108,   109,
     110,   111,    -1,    -1,    -1,   115,    -1,   117,   118,   119,
     120,    -1,    -1,    -1,   124,    -1,   126,    -1,   128,    -1,
      -1,    -1,    -1,    -1,    -1,     4,    -1,    -1,    -1,   139,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     150,   151,    21,    22,    -1,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    34,    -1,    -1,    37,    38,
      39,    -1,    41,    42,    -1,    -1,    -1,    -1,    -1,    48,
      49,    -1,    -1,    52,    53,    -1,    -1,    -1,    57,    -1,
      -1,    -1,    -1,    62,    63,    -1,    -1,    66,    67,    68,
      -1,    -1,    -1,    -1,    -1,    74,    -1,    76,    -1,    78,
      -1,    -1,    -1,    -1,    83,    84,    -1,    86,    -1,    88,
      -1,    -1,    -1,    -1,    -1,    94,    -1,    96,    97,    98,
      99,   100,    -1,    -1,    -1,    -1,   105,    -1,   107,   108,
     109,   110,   111,    -1,    -1,    -1,   115,    -1,   117,   118,
     119,    -1,    -1,    -1,    -1,   124,     4,    -1,    -1,   128,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   137,    -1,
     139,    -1,    -1,    21,    22,    -1,    -1,    -1,    -1,    -1,
      -1,   150,   151,    31,    -1,    -1,    34,    -1,    -1,    37,
      38,    39,    -1,    41,    42,    -1,    -1,    -1,    -1,    -1,
      48,    49,    -1,    -1,    52,    53,    -1,    -1,    -1,    57,
      -1,    -1,    -1,    -1,    62,    63,    -1,    -1,    66,    67,
      68,    -1,    -1,    -1,    -1,    -1,    74,    -1,    76,    -1,
      78,    79,    -1,    -1,    -1,    83,    84,    -1,    86,    -1,
      88,    -1,    -1,    -1,    -1,    -1,    94,    -1,    96,    97,
      98,    99,   100,    -1,    -1,    -1,    -1,   105,    -1,   107,
     108,   109,   110,   111,    -1,    -1,    -1,   115,    -1,   117,
     118,   119,    -1,    -1,    -1,    -1,   124,     4,    -1,    -1,
     128,    -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   139,    -1,    -1,    21,    22,    -1,    -1,    -1,    -1,
      -1,    -1,   150,   151,    31,    -1,    -1,    34,    -1,    -1,
      37,    38,    39,    -1,    41,    42,    -1,    -1,    -1,    -1,
      -1,    48,    49,    -1,    -1,    52,    53,    -1,    -1,    -1,
      57,    -1,    -1,    -1,    -1,    62,    63,    -1,    -1,    66,
      67,    68,    -1,    -1,    -1,    -1,    -1,    74,    -1,    76,
      -1,    78,    79,    -1,    -1,    -1,    83,    84,    -1,    86,
      -1,    88,    -1,    -1,    -1,    -1,    -1,    94,    -1,    96,
      97,    98,    99,   100,    -1,    -1,    -1,    -1,   105,    -1,
     107,   108,   109,   110,   111,    -1,    -1,    -1,   115,    -1,
     117,   118,   119,    -1,    -1,    -1,    -1,   124,     4,    -1,
      -1,   128,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   139,    -1,    -1,    21,    22,    -1,    -1,    -1,
      -1,    -1,    -1,   150,   151,    31,    -1,    -1,    34,    -1,
      -1,    37,    38,    39,    -1,    41,    42,    -1,    -1,    -1,
      -1,    -1,    48,    49,    -1,    -1,    52,    53,    -1,    -1,
      -1,    57,    -1,    -1,    -1,    -1,    62,    63,    -1,    -1,
      66,    67,    68,    -1,    -1,    -1,    -1,    -1,    74,    -1,
      76,    -1,    78,    -1,    -1,    -1,    -1,    83,    84,    -1,
      86,    -1,    88,    -1,    -1,    -1,    -1,    -1,    94,    -1,
      96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,   105,
      -1,   107,   108,   109,   110,   111,    -1,    -1,    -1,   115,
      -1,   117,   118,   119,    -1,    -1,    -1,    -1,   124,     4,
      -1,    -1,   128,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   139,    -1,    -1,    21,    22,    -1,    -1,
      -1,    -1,    -1,    -1,   150,   151,    31,    -1,    -1,    34,
      -1,    -1,    37,    38,    39,    -1,    41,    42,    -1,    -1,
      -1,    -1,    -1,    48,    49,    -1,    -1,    52,    53,    -1,
      -1,    -1,    57,    -1,    -1,    -1,    -1,    62,    63,    -1,
      -1,    66,    67,    68,    -1,    -1,    -1,    -1,    -1,    74,
      -1,    76,    -1,    78,    -1,    -1,    -1,    -1,    83,    84,
      -1,    86,    -1,    88,    -1,    -1,    -1,    -1,    -1,    94,
      -1,    96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,
     105,    -1,   107,   108,   109,   110,   111,    -1,    -1,    -1,
     115,    -1,   117,   118,   119,    -1,    -1,    -1,    -1,   124,
       4,    -1,    -1,   128,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   139,    -1,    -1,    21,    22,    -1,
      -1,    -1,    -1,    -1,    -1,   150,   151,    31,    -1,    -1,
      34,    -1,    -1,    37,    38,    39,    -1,    41,    42,    -1,
      -1,    -1,    -1,    -1,    48,    49,    -1,    -1,    52,    53,
      -1,    -1,    -1,    57,    -1,    -1,    -1,    -1,    62,    -1,
      -1,    -1,    66,    67,    68,    -1,    -1,    -1,    -1,    -1,
      74,    -1,    76,    -1,    78,    -1,    -1,    -1,    -1,    83,
      84,    -1,    86,    -1,    88,    -1,    -1,    -1,    -1,    -1,
      94,    -1,    96,    97,    98,    99,   100,    -1,    -1,    -1,
      -1,   105,    -1,   107,   108,   109,    -1,   111,    -1,    -1,
      -1,   115,    -1,   117,   118,   119,    -1,    -1,    -1,    -1,
      -1,    21,    22,    -1,   128,    -1,    -1,    -1,    -1,    -1,
      -1,    31,    -1,    -1,    34,   139,    -1,    37,    38,    39,
      -1,    41,    42,    -1,    -1,    -1,   150,   151,    48,    49,
      -1,    -1,    52,    53,    -1,    -1,    -1,    57,    -1,    59,
      -1,    -1,    62,    -1,    -1,    -1,    66,    67,    68,    -1,
      70,    -1,    -1,    -1,    74,    -1,    76,    -1,    78,    -1,
      -1,    -1,    -1,    83,    84,    -1,    86,    -1,    88,    -1,
      -1,    -1,    -1,    -1,    94,    -1,    96,    97,    98,    99,
     100,    -1,    -1,    -1,    -1,   105,    -1,   107,   108,   109,
      -1,   111,    -1,    21,    22,   115,    -1,   117,   118,   119,
      -1,    -1,    -1,    31,    -1,    -1,    34,    -1,   128,    37,
      38,    39,    -1,    41,    42,    -1,    -1,    -1,    -1,    -1,
      48,    49,    -1,    -1,    52,    53,    -1,    -1,    -1,    57,
     150,   151,    -1,    -1,    62,    -1,    -1,    -1,    66,    67,
      68,    -1,    -1,    -1,    -1,    -1,    74,    -1,    76,    -1,
      78,    -1,    -1,    -1,    -1,    83,    84,    -1,    86,    -1,
      88,    -1,    -1,    -1,    -1,    -1,    94,    -1,    96,    97,
      98,    99,   100,    -1,    -1,    -1,    -1,   105,    -1,   107,
     108,   109,    -1,   111,    -1,    -1,    -1,   115,    -1,   117,
     118,   119,    -1,    21,    22,    -1,    -1,    -1,    -1,    -1,
     128,    -1,   130,    31,    -1,    -1,    34,    -1,    -1,    37,
      38,    39,    -1,    41,    42,    -1,    -1,    -1,    -1,    -1,
      48,    49,   150,   151,    52,    53,    -1,    -1,    -1,    57,
      -1,    -1,    -1,    -1,    62,    -1,    -1,    -1,    66,    67,
      68,    -1,    -1,    -1,    -1,    -1,    74,    -1,    76,    -1,
      78,    -1,    -1,    -1,    -1,    83,    84,    -1,    86,    -1,
      88,    -1,    -1,    -1,    -1,    -1,    94,    -1,    96,    97,
      98,    99,   100,    -1,    -1,    -1,    -1,   105,    -1,   107,
     108,   109,    -1,   111,    -1,    -1,    -1,   115,    -1,   117,
     118,   119,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     128,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   150,   151
  };

  const unsigned short int
  asn1_parser::yystos_[] =
  {
       0,   150,   156,   186,   333,     0,    51,   124,   187,   188,
     189,    15,   194,     4,   151,   190,   191,   192,   193,   264,
     331,   133,   269,    75,    35,    59,    70,   195,   125,   190,
     126,   140,   270,   106,   106,   106,    61,   196,   192,    16,
      17,   272,   140,   271,    71,   121,   127,   272,   133,    36,
     271,    60,   197,   198,    21,    22,    23,    32,   150,   151,
     199,   206,   207,   208,   330,   332,    55,   184,   185,    72,
     200,   142,   142,   137,    15,    56,   184,   201,   202,   203,
     206,   209,   210,   215,   216,   330,   332,   207,   157,   142,
     203,    64,   210,   121,    21,    22,    31,    34,    37,    38,
      39,    41,    42,    48,    49,    52,    53,    57,    62,    66,
      67,    68,    74,    76,    78,    83,    84,    86,    88,    94,
      96,    97,    98,    99,   100,   105,   107,   108,   109,   111,
     115,   117,   118,   119,   128,   150,   158,   159,   160,   164,
     165,   176,   179,   180,   181,   211,   213,   217,   218,   219,
     224,   226,   231,   235,   236,   239,   240,   241,   246,   247,
     248,   249,   253,   254,   255,   256,   260,   267,   268,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   330,   331,   333,   204,   333,   217,   103,
     103,   124,    91,   124,    87,   124,    69,   103,    87,   102,
     124,   126,   287,   313,    87,   124,   287,   313,    15,   257,
     138,   138,   121,   287,    59,    70,   217,   117,   130,   138,
     124,   205,   212,   214,   261,   332,   333,   124,   220,   250,
     251,   252,   331,   228,   232,   233,   234,   331,   158,   333,
     227,   228,   331,   217,   220,   331,   287,    45,   122,   125,
     220,   242,   243,   244,   245,     4,    23,    32,    47,    54,
      63,    64,    73,    80,    90,   101,   110,   120,   124,   126,
     139,   151,   164,   166,   167,   168,   170,   173,   174,   175,
     177,   178,   182,   183,   212,   217,   221,   222,   223,   225,
     229,   230,   261,   288,   289,   290,   291,   293,   294,   295,
     296,   297,   298,   299,   303,   304,   305,   306,   307,   308,
     309,   311,   313,   314,   315,   316,   326,   327,   331,   333,
      87,    87,   217,   220,   125,   242,    87,    87,   141,    33,
      95,   114,   259,    24,    25,    26,    27,    28,   161,   162,
     162,   217,   221,   333,   217,   217,    67,   217,    21,    22,
     330,     4,   212,   262,   263,   264,   265,   266,   331,   138,
     237,   238,   331,   125,   137,   217,   125,   137,   126,   138,
     125,   137,    87,   137,    50,    89,   125,   137,    58,   300,
     217,    40,   287,   221,    12,    44,    45,     4,    29,   137,
     161,   163,   166,   169,   171,   172,   212,   217,   221,   331,
     293,     4,   141,   132,   328,   137,   112,   145,   301,    77,
     146,   302,   300,   217,   123,   130,   138,   217,   220,   217,
     220,   125,   217,   220,   217,   220,     4,   212,   258,   138,
     138,    83,   212,   262,   125,   262,   126,   332,   125,   137,
     126,   122,   220,   122,   234,   212,   229,   228,   217,   244,
     221,   122,   245,   303,    54,   221,   287,   317,   124,   318,
     319,   320,   172,   137,   148,   127,   221,   212,   217,   229,
     329,   127,   122,   296,   298,    79,   130,   221,   310,   312,
      23,   129,   147,   119,   125,   265,   238,     4,   212,   328,
     127,   127,   137,   137,    40,   122,   321,   322,   331,   148,
     125,   121,   137,   312,    94,   127,   127,   127,   137,   244,
     221,   137,   125,   137,   287,   323,   324,   125,   221,   292,
     293,   107,   233,   321,   321,    30,    89,    93,   325,    78,
     137,   125,    66,   105,   118,   115,    38,    68,    65,   116,
      85
  };

  const unsigned short int
  asn1_parser::yyr1_[] =
  {
       0,   155,   156,   157,   158,   158,   158,   159,   160,   160,
     161,   161,   161,   161,   161,   162,   163,   163,   164,   164,
     165,   166,   166,   167,   167,   168,   169,   170,   171,   171,
     172,   172,   172,   173,   173,   174,   175,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   183,   183,   184,   184,
     185,   186,   187,   187,   187,   188,   189,   190,   190,   191,
     191,   191,   192,   193,   194,   194,   195,   195,   195,   195,
     196,   196,   197,   197,   198,   198,   198,   199,   199,   200,
     200,   201,   201,   202,   202,   203,   204,   205,   205,   205,
     206,   206,   207,   208,   208,   208,   208,   208,   209,   209,
     210,   210,   211,   211,   212,   212,   213,   214,   215,   216,
     217,   217,   217,   218,   218,   218,   218,   218,   218,   218,
     218,   218,   218,   218,   218,   218,   218,   218,   218,   218,
     218,   218,   218,   218,   218,   218,   218,   218,   218,   218,
     219,   219,   219,   219,   220,   221,   221,   221,   222,   222,
     222,   223,   224,   225,   225,   226,   226,   227,   227,   228,
     228,   229,   229,   230,   230,   231,   232,   232,   232,   233,
     233,   234,   234,   235,   236,   236,   237,   237,   238,   238,
     239,   240,   241,   241,   242,   243,   243,   243,   243,   244,
     244,   245,   245,   245,   245,   246,   246,   247,   247,   248,
     248,   249,   250,   251,   251,   252,   252,   253,   254,   255,
     255,   255,   256,   257,   257,   258,   258,   259,   259,   259,
     259,   260,   261,   261,   262,   262,   263,   263,   263,   264,
     265,   265,   266,   267,   268,   269,   270,   271,   271,   272,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     281,   282,   282,   282,   282,   282,   282,   282,   282,   282,
     282,   282,   282,   282,   283,   284,   285,   285,   286,   286,
     286,   286,   286,   286,   286,   286,   287,   288,   288,   289,
     290,   290,   290,   291,   292,   293,   293,   294,   294,   295,
     296,   296,   297,   298,   298,   299,   300,   301,   301,   302,
     302,   303,   303,   303,   304,   304,   304,   304,   304,   304,
     304,   304,   304,   305,   306,   307,   308,   309,   309,   310,
     310,   311,   311,   312,   312,   313,   314,   315,   316,   316,
     317,   318,   318,   319,   320,   321,   321,   322,   323,   324,
     324,   325,   325,   325,   325,   326,   327,   328,   328,   329,
     329,   329,   330,   331,   332,   333
  };

  const unsigned char
  asn1_parser::yyr2_[] =
  {
       0,     2,    10,     0,     1,     1,     1,     3,     1,     1,
       1,     1,     1,     1,     1,     3,     1,     1,     1,     1,
       3,     1,     1,     1,     1,     5,     2,     4,     1,     1,
       1,     1,     1,     1,     1,     3,     1,     1,     3,     1,
       3,     1,     3,     3,     1,     2,     3,     5,     2,     0,
       3,     2,     1,     1,     0,     3,     2,     1,     2,     1,
       1,     1,     1,     4,     2,     0,     2,     2,     2,     0,
       2,     0,     3,     0,     3,     3,     0,     1,     0,     3,
       0,     1,     0,     1,     2,     3,     2,     1,     1,     0,
       1,     3,     1,     1,     1,     1,     1,     1,     1,     2,
       1,     1,     1,     1,     1,     1,     3,     3,     3,     4,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     4,     1,     3,     4,
       4,     1,     2,     1,     1,     4,     1,     4,     6,     1,
       3,     1,     1,     1,     2,     5,     1,     3,     4,     4,
       2,     1,     3,     4,     1,     1,     3,     5,     3,     1,
       3,     1,     2,     3,     3,     3,     3,     3,     4,     3,
       3,     4,     1,     1,     3,     1,     3,     3,     1,     2,
       3,     3,     5,     2,     0,     1,     1,     1,     1,     1,
       0,     2,     3,     4,     1,     2,     1,     1,     1,     1,
       1,     1,     4,     1,     1,     4,     2,     3,     0,     1,
       1,     1,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,    17,     2,     1,     4,     4,
       4,     4,     4,     4,     4,     4,     4,     1,     1,     1,
       1,     3,     5,     1,     1,     1,     2,     1,     3,     1,
       1,     3,     1,     1,     2,     1,     2,     1,     1,     1,
       1,     1,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     1,     3,     1,     2,     1,
       2,     1,     1,     1,     1,     2,     1,     2,     3,     3,
       1,     1,     1,     3,     5,     1,     3,     2,     2,     1,
       0,     1,     1,     1,     0,     2,     2,     2,     0,     1,
       1,     3,     1,     1,     1,     1
  };



  // YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
  // First, the terminals, then, starting at \a yyntokens_, nonterminals.
  const char*
  const asn1_parser::yytname_[] =
  {
  "END_OF_FILE", "error", "$undefined", "comment", "number", "realnumber",
  "bstring", "xmlbstring", "hstring", "xmlhstring", "cstring",
  "xmlcstring", "simplestring", "xmltstring", "psname",
  "encodingreference", "integerUnicodeLabel", "non-integerUnicodeLabel",
  "extended-true", "tstring", "extended-false", "objectclassreference",
  "objectreference", "objectsetreference", "typefieldreference",
  "valuefieldreference", "valuesetfieldreference", "objectfieldreference",
  "objectsetfieldreference", "word", "ABSENT", "ABSTRACT_SYNTAX", "ALL",
  "APPLICATION", "ASN_NULL", "AUTOMATIC", "BEGIN", "BIT", "BMPString",
  "BOOLEAN", "BY", "CHARACTER", "CHOICE", "CLASS", "COMPONENT",
  "COMPONENTS", "CONSTRAINED", "CONTAINING", "DATE", "DATE_TIME",
  "DEFAULT", "DEFINITIONS", "DURATION", "EMBEDDED", "ENCODED",
  "ENCODING_CONTROL", "END", "ENUMERATED", "EXCEPT", "EXPLICIT", "EXPORTS",
  "EXTENSIBILITY", "EXTERNAL", "FALSE", "FROM", "GeneralizedTime",
  "GeneralString", "GraphicString", "IA5String", "IDENTIFIER", "IMPLICIT",
  "IMPLIED", "IMPORTS", "\"INCLUDES\"", "INSTANCE", "INSTRUCTIONS",
  "INTEGER", "INTERSECTION", "ISO646String", "MAX", "MIN",
  "MINUS_INFINITY", "NOT_A_NUMBER", "NumericString", "OBJECT",
  "ObjectDescriptor", "OCTET", "OF", "OID_IRI", "OPTIONAL", "PATTERN",
  "PDV", "PLUS_INFINITY", "PRESENT", "PrintableString", "PRIVATE", "REAL",
  "RELATIVE_OID", "RELATIVE_OID_IRI", "SEQUENCE", "SET", "SETTINGS",
  "SIZE", "STRING", "SYNTAX", "T61String", "TAGS", "TeletexString", "TIME",
  "TIME_OF_DAY", "TRUE", "TYPE_IDENTIFIER", "UNION", "UNIQUE", "UNIVERSAL",
  "UniversalString", "UTCTime", "UTF8String", "VideotexString",
  "VisibleString", "WITH", "\"::=\"", "\"...\"", "\"..\"", "\"{\"",
  "\"}\"", "\"(\"", "\")\"", "\"[\"", "\"]\"", "\"<\"", "\">\"", "\"!\"",
  "\"\\\"\"", "\"&\"", "\"'\"", "\"*\"", "\",\"", "\".\"", "\"-\"",
  "\"/\"", "\":\"", "\";\"", "\"=\"", "\"@\"", "\"|\"", "\"^\"", "PLUS",
  "STAR", "QUESTION_MARK", "GENERIC_IDENTIFIER_UPPERCASE",
  "GENERIC_IDENTIFIER_LOWERCASE", "GENERIC_INTEGER", "xmlasn1typename",
  "\"@.\"", "$accept", "ModuleDefinition",
  "EncodingInstructionAssignmentList", "DefinedObjectClass",
  "ExternalObjectClassReference", "UsefulObjectClassReference",
  "PrimitiveFieldName", "FieldName", "Literal", "DefinedObject",
  "ExternalObjectReference", "Object", "ObjectDefn", "DefaultSyntax",
  "FieldSetting", "DefinedSyntax", "DefinedSyntaxToken", "Setting",
  "DefinedObjectSet", "ExternalObjectSetReference", "ObjectSetElements",
  "ObjectClassFieldType", "ObjectClassFieldValue", "OpenTypeFieldVal",
  "ReferencedObjects", "TypeFromObject", "InstanceOfType",
  "GeneralConstraint", "ContentsConstraint", "EncodingControlSections",
  "EncodingControlSection", "ModuleIdentifier", "DefinitiveIdentification",
  "DefinitiveOID", "DefinitiveOIDandIRI", "DefinitiveObjIdComponentList",
  "DefinitiveObjIdComponent", "DefinitiveNumberForm",
  "DefinitiveNameAndNumberForm", "EncodingReferenceDefault", "TagDefault",
  "ExtensionDefault", "ModuleBody", "Exports", "SymbolsExported",
  "Imports", "SymbolsImported", "SymbolsFromModuleList",
  "SymbolsFromModule", "GlobalModuleReference", "AssignedIdentifier",
  "SymbolList", "Symbol", "Reference", "AssignmentList", "Assignment",
  "DefinedType", "DefinedValue", "ExternalTypeReference",
  "ExternalValueReference", "TypeAssignment", "ValueAssignment", "Type",
  "BuiltinType", "ReferencedType", "NamedType", "Value", "BuiltinValue",
  "ReferencedValue", "BooleanType", "BooleanValue", "IntegerType",
  "NamedNumberList", "NamedNumber", "SignedNumber", "IntegerValue",
  "EnumeratedType", "Enumerations", "Enumeration", "EnumerationItem",
  "RealType", "BitStringType", "NamedBitList", "NamedBit",
  "OctetStringType", "NullType", "SequenceType", "ComponentTypeLists",
  "RootComponentTypeList", "ComponentTypeList", "ComponentType",
  "SequenceOfType", "SetType", "SetOfType", "ChoiceType",
  "AlternativeTypeLists", "RootAlternativeTypeList", "AlternativeTypeList",
  "SelectionType", "PrefixedType", "TaggedType", "Tag",
  "EncodingReference", "ClassNumber", "Class", "ObjectIdentifierType",
  "ObjectIdentifierValue", "ObjIdComponentsList", "ObjIdComponents",
  "NameForm", "NumberForm", "NameAndNumberForm", "RelativeOIDType",
  "IRIType", "IRIValue", "FirstArcIdentifier", "SubsequentArcIdentifier",
  "ArcIdentifier", "RelativeIRIType", "EmbeddedPDVType", "ExternalType",
  "TimeType", "DateType", "TimeOfDayType", "DateTimeType", "DurationType",
  "CharacterStringType", "RestrictedCharacterStringType",
  "UnrestrictedCharacterStringType", "UsefulType", "ConstrainedType",
  "TypeWithConstraint", "Constraint", "ConstraintSpec",
  "SubtypeConstraint", "ElementSetSpecs", "RootElementSetSpec",
  "AdditionalElementSetSpec", "ElementSetSpec", "Unions", "UElems",
  "Intersections", "IElems", "IntersectionElements", "Elems", "Exclusions",
  "UnionMark", "IntersectionMark", "Elements", "SubtypeElements",
  "SingleValue", "ContainedSubtype", "Includes", "ValueRange",
  "LowerEndpoint", "UpperEndpoint", "LowerEndValue", "UpperEndValue",
  "SizeConstraint", "TypeConstraint", "PermittedAlphabet",
  "InnerTypeConstraints", "SingleTypeConstraint",
  "MultipleTypeConstraints", "FullSpecification", "PartialSpecification",
  "TypeConstraints", "NamedConstraint", "ComponentConstraint",
  "ValueConstraint", "PresenceConstraint", "PatternConstraint",
  "PropertySettings", "ExceptionSpec", "ExceptionIdentification",
  "typereference", "identifier", "valuereference", "modulereference", YY_NULLPTR
  };

#if YYDEBUG
  const unsigned short int
  asn1_parser::yyrline_[] =
  {
       0,   247,   247,   266,   272,   273,   274,   277,   280,   281,
     302,   303,   304,   305,   306,   309,   360,   361,   364,   365,
     368,   374,   375,   380,   381,   384,   387,   390,   393,   394,
     397,   398,   399,   402,   403,   406,   422,   423,   428,   431,
     434,   445,   457,   466,   483,   507,   508,   509,   518,   519,
     522,   527,   534,   535,   536,   539,   542,   546,   547,   551,
     552,   553,   556,   559,   563,   564,   567,   569,   571,   573,
     577,   578,   581,   582,   585,   586,   587,   590,   591,   594,
     596,   599,   600,   603,   604,   607,   612,   616,   617,   618,
     621,   622,   626,   629,   630,   631,   632,   633,   636,   637,
     641,   643,   652,   653,   659,   660,   669,   674,   699,   705,
     712,   714,   716,   720,   721,   722,   723,   724,   725,   726,
     727,   728,   729,   730,   731,   732,   733,   734,   735,   736,
     737,   738,   739,   740,   741,   742,   743,   744,   745,   746,
     749,   750,   751,   752,   756,   760,   762,   764,   769,   775,
     778,   792,   800,   803,   804,   807,   808,   811,   812,   815,
     817,   821,   823,   827,   828,   831,   835,   838,   841,   847,
     849,   853,   855,   863,   866,   867,   870,   871,   874,   875,
     889,   897,   900,   902,   910,   914,   916,   918,   920,   924,
     926,   930,   932,   934,   936,   947,   949,   953,   955,   959,
     961,   965,   969,   973,   975,   979,   981,   988,   991,   998,
    1000,  1002,  1006,  1010,  1011,  1014,  1016,  1019,  1021,  1023,
    1025,  1035,  1038,  1040,  1044,  1046,  1050,  1052,  1054,  1058,
    1062,  1064,  1067,  1071,  1086,  1089,  1095,  1098,  1099,  1102,
    1103,  1106,  1118,  1125,  1131,  1137,  1140,  1143,  1146,  1149,
    1150,  1157,  1158,  1159,  1160,  1161,  1162,  1163,  1164,  1165,
    1166,  1167,  1168,  1169,  1175,  1181,  1200,  1201,  1204,  1205,
    1206,  1207,  1208,  1209,  1210,  1211,  1214,  1217,  1218,  1221,
    1224,  1225,  1226,  1229,  1232,  1235,  1236,  1239,  1240,  1243,
    1246,  1247,  1250,  1253,  1254,  1257,  1260,  1263,  1264,  1267,
    1268,  1271,  1272,  1273,  1276,  1277,  1278,  1279,  1280,  1281,
    1282,  1283,  1284,  1290,  1293,  1296,  1299,  1302,  1303,  1306,
    1307,  1310,  1311,  1314,  1315,  1318,  1321,  1324,  1327,  1328,
    1331,  1334,  1335,  1338,  1341,  1344,  1345,  1348,  1351,  1354,
    1355,  1358,  1359,  1360,  1361,  1364,  1367,  1370,  1371,  1374,
    1375,  1376,  1379,  1383,  1387,  1391
  };

  // Print the state stack on the debug stream.
  void
  asn1_parser::yystack_print_ ()
  {
    *yycdebug_ << "Stack now";
    for (stack_type::const_iterator
           i = yystack_.begin (),
           i_end = yystack_.end ();
         i != i_end; ++i)
      *yycdebug_ << ' ' << i->state;
    *yycdebug_ << std::endl;
  }

  // Report on the debug stream that the rule \a yyrule is going to be reduced.
  void
  asn1_parser::yy_reduce_print_ (int yyrule)
  {
    unsigned int yylno = yyrline_[yyrule];
    int yynrhs = yyr2_[yyrule];
    // Print the symbols being reduced, and their result.
    *yycdebug_ << "Reducing stack by rule " << yyrule - 1
               << " (line " << yylno << "):" << std::endl;
    // The symbols being reduced.
    for (int yyi = 0; yyi < yynrhs; yyi++)
      YY_SYMBOL_PRINT ("   $" << yyi + 1 << " =",
                       yystack_[(yynrhs) - (yyi + 1)]);
  }
#endif // YYDEBUG



} // yy
#line 6450 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re" // lalr1.cc:1167
#line 1394 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:1168



namespace yy {

    asn1_parser::symbol_type yylex(Context& context)
    {
        const char* start = context.cursor;
        const char* YYMARKER = nullptr;
        context.location.step();
        // Lexer

#line 6466 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
{
	char yych;
	yych = *context.cursor;
	switch (yych) {
	case 0x00:	goto yy2;
	case 0x08:
	case '\t':
	case '\v':
	case '\f':
	case ' ':	goto yy6;
	case '\n':	goto yy8;
	case '\r':	goto yy10;
	case '(':	goto yy11;
	case ')':	goto yy13;
	case ',':	goto yy15;
	case '-':	goto yy17;
	case '.':	goto yy19;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy21;
	case ':':	goto yy24;
	case ';':	goto yy26;
	case 'A':	goto yy28;
	case 'B':	goto yy29;
	case 'C':	goto yy30;
	case 'D':	goto yy31;
	case 'E':	goto yy32;
	case 'F':	goto yy33;
	case 'G':	goto yy34;
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'Q':
	case 'X':
	case 'Y':
	case 'Z':	goto yy35;
	case 'I':	goto yy36;
	case 'M':	goto yy37;
	case 'N':	goto yy38;
	case 'O':	goto yy39;
	case 'P':	goto yy40;
	case 'R':	goto yy41;
	case 'S':	goto yy42;
	case 'T':	goto yy43;
	case 'U':	goto yy44;
	case 'V':	goto yy45;
	case 'W':	goto yy46;
	case '[':	goto yy47;
	case ']':	goto yy49;
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy51;
	case '{':	goto yy52;
	case '}':	goto yy54;
	default:	goto yy4;
	}
yy2:
	++context.cursor;
#line 6570 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_END_OF_FILE(context.location); }
#line 6558 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy4:
	++context.cursor;
yy5:
#line 6591 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ throw(std::runtime_error(std::string("Unknown symbol!") + *start)); context.location.columns(context.cursor - start); return asn1_parser::symbol_type(asn1_parser::token_type(*start), context.location); }
#line 6564 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy6:
	++context.cursor;
#line 6574 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); context.location.columns(); return yylex(context); }
#line 6569 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy8:
	++context.cursor;
yy9:
#line 6573 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); context.location.lines();   return yylex(context); }
#line 6575 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy10:
	yych = *++context.cursor;
	switch (yych) {
	case '\n':	goto yy8;
	default:	goto yy9;
	}
yy11:
	++context.cursor;
#line 6582 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPEN_PARENTHESIS (context.location); }
#line 6586 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy13:
	++context.cursor;
#line 6583 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLOSE_PARENTHESIS (context.location); }
#line 6591 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy15:
	++context.cursor;
#line 6588 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COMMA (context.location); }
#line 6596 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy17:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy56;
	default:	goto yy18;
	}
yy18:
#line 6589 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_HYPHEN_MINUS (context.location); }
#line 6606 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy19:
	yych = *++context.cursor;
	switch (yych) {
	case '.':	goto yy59;
	default:	goto yy20;
	}
yy20:
#line 6590 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_FULL_STOP (context.location); }
#line 6616 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy21:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy21;
	default:	goto yy23;
	}
yy23:
#line 6565 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_number(std::stoll(std::string(start, context.cursor)), context.location); }
#line 6635 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy24:
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case ':':	goto yy61;
	default:	goto yy25;
	}
yy25:
#line 6586 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COLON (context.location); }
#line 6645 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy26:
	++context.cursor;
#line 6587 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SEMICOLON (context.location); }
#line 6650 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy28:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'M':
	case 'N':
	case 'O':
	case 'Q':
	case 'R':
	case 'T':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'B':	goto yy66;
	case 'L':	goto yy67;
	case 'P':	goto yy68;
	case 'S':	goto yy69;
	case 'U':	goto yy70;
	default:	goto yy5;
	}
yy29:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'F':
	case 'G':
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'N':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'E':	goto yy71;
	case 'I':	goto yy72;
	case 'M':	goto yy73;
	case 'O':	goto yy74;
	case 'Y':	goto yy75;
	default:	goto yy5;
	}
yy30:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'I':
	case 'J':
	case 'K':
	case 'M':
	case 'N':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'H':	goto yy77;
	case 'L':	goto yy78;
	case 'O':	goto yy79;
	default:	goto yy5;
	}
yy31:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'B':
	case 'C':
	case 'D':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'A':	goto yy80;
	case 'E':	goto yy81;
	case 'U':	goto yy82;
	default:	goto yy5;
	}
yy32:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'M':	goto yy83;
	case 'N':	goto yy84;
	case 'X':	goto yy85;
	default:	goto yy5;
	}
yy33:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'A':	goto yy86;
	case 'R':	goto yy87;
	default:	goto yy5;
	}
yy34:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'e':	goto yy88;
	case 'r':	goto yy89;
	default:	goto yy5;
	}
yy35:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy5;
	}
yy36:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'B':
	case 'C':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'A':	goto yy90;
	case 'D':	goto yy91;
	case 'M':	goto yy92;
	case 'N':	goto yy93;
	case 'S':	goto yy94;
	default:	goto yy5;
	}
yy37:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'A':	goto yy95;
	case 'I':	goto yy96;
	default:	goto yy5;
	}
yy38:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'O':	goto yy97;
	case 'u':	goto yy98;
	default:	goto yy5;
	}
yy39:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'D':
	case 'E':
	case 'G':
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'B':	goto yy99;
	case 'C':	goto yy100;
	case 'F':	goto yy101;
	case 'I':	goto yy103;
	case 'P':	goto yy104;
	case 'b':	goto yy105;
	default:	goto yy5;
	}
yy40:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'B':
	case 'C':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'A':	goto yy106;
	case 'D':	goto yy107;
	case 'L':	goto yy108;
	case 'R':	goto yy109;
	case 'r':	goto yy110;
	default:	goto yy5;
	}
yy41:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'E':	goto yy111;
	default:	goto yy5;
	}
yy42:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'F':
	case 'G':
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'E':	goto yy112;
	case 'I':	goto yy113;
	case 'T':	goto yy114;
	case 'Y':	goto yy115;
	default:	goto yy5;
	}
yy43:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '7':
	case '8':
	case '9':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case '6':	goto yy116;
	case 'A':	goto yy117;
	case 'I':	goto yy118;
	case 'R':	goto yy119;
	case 'Y':	goto yy120;
	case 'e':	goto yy121;
	default:	goto yy5;
	}
yy44:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'N':	goto yy122;
	case 'T':	goto yy123;
	case 'n':	goto yy124;
	default:	goto yy5;
	}
yy45:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'i':	goto yy125;
	default:	goto yy5;
	}
yy46:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'I':	goto yy126;
	default:	goto yy5;
	}
yy47:
	++context.cursor;
#line 6584 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPEN_SQUARE_BRACKET (context.location); }
#line 7966 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy49:
	++context.cursor;
#line 6585 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLOSE_SQUARE_BRACKET (context.location); }
#line 7971 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy51:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy127;
	default:	goto yy5;
	}
yy52:
	++context.cursor;
#line 6580 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPEN_BRACE (context.location); }
#line 8045 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy54:
	++context.cursor;
#line 6581 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLOSE_BRACE (context.location); }
#line 8050 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy56:
	yych = *++context.cursor;
	switch (yych) {
	case '\n':
	case '\r':	goto yy58;
	default:	goto yy56;
	}
yy58:
#line 6561 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return yylex(context); }
#line 8061 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy59:
	yych = *++context.cursor;
	switch (yych) {
	case '.':	goto yy130;
	default:	goto yy60;
	}
yy60:
#line 6579 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_RANGE (context.location); }
#line 8071 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy61:
	yych = *++context.cursor;
	switch (yych) {
	case '=':	goto yy132;
	default:	goto yy62;
	}
yy62:
	context.cursor = YYMARKER;
	goto yy25;
yy63:
	yych = *++context.cursor;
yy64:
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy65;
	}
yy65:
#line 6566 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GENERIC_IDENTIFIER_UPPERCASE(santize_name(std::string(start, context.cursor)), context.location); }
#line 8154 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy66:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy134;
	default:	goto yy64;
	}
yy67:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy135;
	default:	goto yy64;
	}
yy68:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy137;
	default:	goto yy64;
	}
yy69:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy138;
	default:	goto yy64;
	}
yy70:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy139;
	default:	goto yy64;
	}
yy71:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy140;
	default:	goto yy64;
	}
yy72:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy141;
	default:	goto yy64;
	}
yy73:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy143;
	default:	goto yy64;
	}
yy74:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy144;
	default:	goto yy64;
	}
yy75:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy76;
	}
yy76:
#line 6478 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BY (context.location); }
#line 8281 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy77:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy145;
	case 'O':	goto yy146;
	default:	goto yy64;
	}
yy78:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy147;
	default:	goto yy64;
	}
yy79:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy148;
	case 'N':	goto yy149;
	default:	goto yy64;
	}
yy80:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy150;
	default:	goto yy64;
	}
yy81:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy151;
	default:	goto yy64;
	}
yy82:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy152;
	default:	goto yy64;
	}
yy83:
	yych = *++context.cursor;
	switch (yych) {
	case 'B':	goto yy153;
	default:	goto yy64;
	}
yy84:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy154;
	case 'D':	goto yy155;
	case 'U':	goto yy157;
	default:	goto yy64;
	}
yy85:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy158;
	case 'P':	goto yy159;
	case 'T':	goto yy160;
	default:	goto yy64;
	}
yy86:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy161;
	default:	goto yy64;
	}
yy87:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy162;
	default:	goto yy64;
	}
yy88:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy163;
	default:	goto yy64;
	}
yy89:
	yych = *++context.cursor;
	switch (yych) {
	case 'a':	goto yy164;
	default:	goto yy64;
	}
yy90:
	yych = *++context.cursor;
	switch (yych) {
	case '5':	goto yy165;
	default:	goto yy64;
	}
yy91:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy166;
	default:	goto yy64;
	}
yy92:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy167;
	default:	goto yy64;
	}
yy93:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy168;
	case 'S':	goto yy169;
	case 'T':	goto yy170;
	default:	goto yy64;
	}
yy94:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy171;
	default:	goto yy64;
	}
yy95:
	yych = *++context.cursor;
	switch (yych) {
	case 'X':	goto yy172;
	default:	goto yy64;
	}
yy96:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy174;
	default:	goto yy64;
	}
yy97:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy176;
	default:	goto yy64;
	}
yy98:
	yych = *++context.cursor;
	switch (yych) {
	case 'm':	goto yy177;
	default:	goto yy64;
	}
yy99:
	yych = *++context.cursor;
	switch (yych) {
	case 'J':	goto yy178;
	default:	goto yy64;
	}
yy100:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy179;
	default:	goto yy64;
	}
yy101:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy102;
	}
yy102:
#line 6525 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OF (context.location); }
#line 8506 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy103:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy180;
	default:	goto yy64;
	}
yy104:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy181;
	default:	goto yy64;
	}
yy105:
	yych = *++context.cursor;
	switch (yych) {
	case 'j':	goto yy182;
	default:	goto yy64;
	}
yy106:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy183;
	default:	goto yy64;
	}
yy107:
	yych = *++context.cursor;
	switch (yych) {
	case 'V':	goto yy184;
	default:	goto yy64;
	}
yy108:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy186;
	default:	goto yy64;
	}
yy109:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy187;
	case 'I':	goto yy188;
	default:	goto yy64;
	}
yy110:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy189;
	default:	goto yy64;
	}
yy111:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy190;
	case 'L':	goto yy191;
	default:	goto yy64;
	}
yy112:
	yych = *++context.cursor;
	switch (yych) {
	case 'Q':	goto yy192;
	case 'T':	goto yy193;
	default:	goto yy64;
	}
yy113:
	yych = *++context.cursor;
	switch (yych) {
	case 'Z':	goto yy195;
	default:	goto yy64;
	}
yy114:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy196;
	default:	goto yy64;
	}
yy115:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy197;
	default:	goto yy64;
	}
yy116:
	yych = *++context.cursor;
	switch (yych) {
	case '1':	goto yy198;
	default:	goto yy64;
	}
yy117:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy199;
	default:	goto yy64;
	}
yy118:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy200;
	default:	goto yy64;
	}
yy119:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy201;
	default:	goto yy64;
	}
yy120:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy202;
	default:	goto yy64;
	}
yy121:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy203;
	default:	goto yy64;
	}
yy122:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy204;
	default:	goto yy64;
	}
yy123:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy205;
	case 'F':	goto yy206;
	default:	goto yy64;
	}
yy124:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy207;
	default:	goto yy64;
	}
yy125:
	yych = *++context.cursor;
	switch (yych) {
	case 'd':	goto yy208;
	case 's':	goto yy209;
	default:	goto yy64;
	}
yy126:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy210;
	default:	goto yy64;
	}
yy127:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy127;
	default:	goto yy129;
	}
yy129:
#line 6567 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GENERIC_IDENTIFIER_LOWERCASE(santize_name(std::string(start, context.cursor)), context.location); }
#line 8728 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy130:
	++context.cursor;
#line 6578 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ELIPSIS (context.location); }
#line 8733 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy132:
	++context.cursor;
#line 6577 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DEFINED_AS (context.location); }
#line 8738 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy134:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy211;
	case 'T':	goto yy212;
	default:	goto yy64;
	}
yy135:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy136;
	}
yy136:
#line 6470 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ALL (context.location); }
#line 8818 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy137:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy213;
	default:	goto yy64;
	}
yy138:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy214;
	default:	goto yy64;
	}
yy139:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy215;
	default:	goto yy64;
	}
yy140:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy216;
	default:	goto yy64;
	}
yy141:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy142;
	}
yy142:
#line 6475 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BIT (context.location); }
#line 8915 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy143:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy217;
	default:	goto yy64;
	}
yy144:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy218;
	default:	goto yy64;
	}
yy145:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy219;
	default:	goto yy64;
	}
yy146:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy220;
	default:	goto yy64;
	}
yy147:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy221;
	default:	goto yy64;
	}
yy148:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy222;
	default:	goto yy64;
	}
yy149:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy223;
	case 'T':	goto yy224;
	default:	goto yy64;
	}
yy150:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy225;
	default:	goto yy64;
	}
yy151:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy227;
	case 'I':	goto yy228;
	default:	goto yy64;
	}
yy152:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy229;
	default:	goto yy64;
	}
yy153:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy230;
	default:	goto yy64;
	}
yy154:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy231;
	default:	goto yy64;
	}
yy155:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy156;
	}
yy156:
#line 6494 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_END (context.location); }
#line 9062 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy157:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy232;
	default:	goto yy64;
	}
yy158:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy233;
	default:	goto yy64;
	}
yy159:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy234;
	case 'O':	goto yy235;
	default:	goto yy64;
	}
yy160:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy236;
	default:	goto yy64;
	}
yy161:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy237;
	default:	goto yy64;
	}
yy162:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy238;
	default:	goto yy64;
	}
yy163:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy240;
	default:	goto yy64;
	}
yy164:
	yych = *++context.cursor;
	switch (yych) {
	case 'p':	goto yy241;
	default:	goto yy64;
	}
yy165:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy242;
	default:	goto yy64;
	}
yy166:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy243;
	default:	goto yy64;
	}
yy167:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy244;
	case 'O':	goto yy245;
	default:	goto yy64;
	}
yy168:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy246;
	default:	goto yy64;
	}
yy169:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy247;
	default:	goto yy64;
	}
yy170:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy248;
	default:	goto yy64;
	}
yy171:
	yych = *++context.cursor;
	switch (yych) {
	case '6':	goto yy249;
	default:	goto yy64;
	}
yy172:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy173;
	}
yy173:
#line 6517 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_MAX (context.location); }
#line 9227 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy174:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'U':	goto yy250;
	default:	goto yy175;
	}
yy175:
#line 6518 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_MIN (context.location); }
#line 9300 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy176:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy251;
	default:	goto yy64;
	}
yy177:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy252;
	default:	goto yy64;
	}
yy178:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy253;
	default:	goto yy64;
	}
yy179:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy254;
	default:	goto yy64;
	}
yy180:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy255;
	default:	goto yy64;
	}
yy181:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy256;
	default:	goto yy64;
	}
yy182:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy257;
	default:	goto yy64;
	}
yy183:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy258;
	default:	goto yy64;
	}
yy184:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy185;
	}
yy185:
#line 6529 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PDV (context.location); }
#line 9421 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy186:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy259;
	default:	goto yy64;
	}
yy187:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy260;
	default:	goto yy64;
	}
yy188:
	yych = *++context.cursor;
	switch (yych) {
	case 'V':	goto yy261;
	default:	goto yy64;
	}
yy189:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy262;
	default:	goto yy64;
	}
yy190:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy263;
	default:	goto yy64;
	}
yy191:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy265;
	default:	goto yy64;
	}
yy192:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy266;
	default:	goto yy64;
	}
yy193:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'T':	goto yy267;
	default:	goto yy194;
	}
yy194:
#line 6538 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SET (context.location); }
#line 9536 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy195:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy268;
	default:	goto yy64;
	}
yy196:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy270;
	default:	goto yy64;
	}
yy197:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy271;
	default:	goto yy64;
	}
yy198:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy272;
	default:	goto yy64;
	}
yy199:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy273;
	default:	goto yy64;
	}
yy200:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy275;
	default:	goto yy64;
	}
yy201:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy277;
	default:	goto yy64;
	}
yy202:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy279;
	default:	goto yy64;
	}
yy203:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy280;
	default:	goto yy64;
	}
yy204:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy281;
	case 'Q':	goto yy282;
	case 'V':	goto yy283;
	default:	goto yy64;
	}
yy205:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy284;
	default:	goto yy64;
	}
yy206:
	yych = *++context.cursor;
	switch (yych) {
	case '8':	goto yy285;
	default:	goto yy64;
	}
yy207:
	yych = *++context.cursor;
	switch (yych) {
	case 'v':	goto yy286;
	default:	goto yy64;
	}
yy208:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy287;
	default:	goto yy64;
	}
yy209:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy288;
	default:	goto yy64;
	}
yy210:
	yych = *++context.cursor;
	switch (yych) {
	case 'H':	goto yy289;
	default:	goto yy64;
	}
yy211:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy291;
	default:	goto yy64;
	}
yy212:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy292;
	default:	goto yy64;
	}
yy213:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy293;
	default:	goto yy64;
	}
yy214:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy294;
	default:	goto yy64;
	}
yy215:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy295;
	default:	goto yy64;
	}
yy216:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy296;
	default:	goto yy64;
	}
yy217:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy298;
	default:	goto yy64;
	}
yy218:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy299;
	default:	goto yy64;
	}
yy219:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy300;
	default:	goto yy64;
	}
yy220:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy301;
	default:	goto yy64;
	}
yy221:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy302;
	default:	goto yy64;
	}
yy222:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy304;
	default:	goto yy64;
	}
yy223:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy305;
	default:	goto yy64;
	}
yy224:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy306;
	default:	goto yy64;
	}
yy225:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case '_':	goto yy307;
	default:	goto yy226;
	}
yy226:
#line 6486 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DATE (context.location); }
#line 9791 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy227:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy308;
	default:	goto yy64;
	}
yy228:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy309;
	default:	goto yy64;
	}
yy229:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy310;
	default:	goto yy64;
	}
yy230:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy311;
	default:	goto yy64;
	}
yy231:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy312;
	default:	goto yy64;
	}
yy232:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy313;
	default:	goto yy64;
	}
yy233:
	yych = *++context.cursor;
	switch (yych) {
	case 'P':	goto yy314;
	default:	goto yy64;
	}
yy234:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy315;
	default:	goto yy64;
	}
yy235:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy316;
	default:	goto yy64;
	}
yy236:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy317;
	case 'R':	goto yy318;
	default:	goto yy64;
	}
yy237:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy319;
	default:	goto yy64;
	}
yy238:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy239;
	}
yy239:
#line 6502 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_FROM (context.location); }
#line 9931 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy240:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy321;
	default:	goto yy64;
	}
yy241:
	yych = *++context.cursor;
	switch (yych) {
	case 'h':	goto yy322;
	default:	goto yy64;
	}
yy242:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy323;
	default:	goto yy64;
	}
yy243:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy324;
	default:	goto yy64;
	}
yy244:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy325;
	default:	goto yy64;
	}
yy245:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy326;
	default:	goto yy64;
	}
yy246:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy327;
	default:	goto yy64;
	}
yy247:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy328;
	case 'R':	goto yy329;
	default:	goto yy64;
	}
yy248:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy330;
	case 'R':	goto yy331;
	default:	goto yy64;
	}
yy249:
	yych = *++context.cursor;
	switch (yych) {
	case '4':	goto yy332;
	default:	goto yy64;
	}
yy250:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy333;
	default:	goto yy64;
	}
yy251:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy334;
	default:	goto yy64;
	}
yy252:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy335;
	default:	goto yy64;
	}
yy253:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy336;
	default:	goto yy64;
	}
yy254:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy337;
	default:	goto yy64;
	}
yy255:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy339;
	default:	goto yy64;
	}
yy256:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy340;
	default:	goto yy64;
	}
yy257:
	yych = *++context.cursor;
	switch (yych) {
	case 'c':	goto yy341;
	default:	goto yy64;
	}
yy258:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy342;
	default:	goto yy64;
	}
yy259:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy343;
	default:	goto yy64;
	}
yy260:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy344;
	default:	goto yy64;
	}
yy261:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy345;
	default:	goto yy64;
	}
yy262:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy346;
	default:	goto yy64;
	}
yy263:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy264;
	}
yy264:
#line 6534 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_REAL (context.location); }
#line 10144 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy265:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy347;
	default:	goto yy64;
	}
yy266:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy348;
	default:	goto yy64;
	}
yy267:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy349;
	default:	goto yy64;
	}
yy268:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy269;
	}
yy269:
#line 6540 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SIZE (context.location); }
#line 10235 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy270:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy350;
	default:	goto yy64;
	}
yy271:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy351;
	default:	goto yy64;
	}
yy272:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy352;
	default:	goto yy64;
	}
yy273:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy274;
	}
yy274:
#line 6544 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TAGS (context.location); }
#line 10326 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy275:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case '_':	goto yy353;
	default:	goto yy276;
	}
yy276:
#line 6546 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TIME (context.location); }
#line 10399 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy277:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy278;
	}
yy278:
#line 6548 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TRUE (context.location); }
#line 10472 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy279:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy354;
	default:	goto yy64;
	}
yy280:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy355;
	default:	goto yy64;
	}
yy281:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy356;
	default:	goto yy64;
	}
yy282:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy358;
	default:	goto yy64;
	}
yy283:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy359;
	default:	goto yy64;
	}
yy284:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy360;
	default:	goto yy64;
	}
yy285:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy361;
	default:	goto yy64;
	}
yy286:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy362;
	default:	goto yy64;
	}
yy287:
	yych = *++context.cursor;
	switch (yych) {
	case 'o':	goto yy363;
	default:	goto yy64;
	}
yy288:
	yych = *++context.cursor;
	switch (yych) {
	case 'b':	goto yy364;
	default:	goto yy64;
	}
yy289:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy290;
	}
yy290:
#line 6558 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_WITH (context.location); }
#line 10605 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy291:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy365;
	default:	goto yy64;
	}
yy292:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy367;
	default:	goto yy64;
	}
yy293:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy368;
	default:	goto yy64;
	}
yy294:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy369;
	default:	goto yy64;
	}
yy295:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy370;
	default:	goto yy64;
	}
yy296:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy297;
	}
yy297:
#line 6474 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BEGIN (context.location); }
#line 10708 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy298:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy371;
	default:	goto yy64;
	}
yy299:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy372;
	default:	goto yy64;
	}
yy300:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy373;
	default:	goto yy64;
	}
yy301:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy374;
	default:	goto yy64;
	}
yy302:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy303;
	}
yy303:
#line 6481 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLASS (context.location); }
#line 10805 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy304:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy376;
	default:	goto yy64;
	}
yy305:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy377;
	default:	goto yy64;
	}
yy306:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy378;
	default:	goto yy64;
	}
yy307:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy379;
	default:	goto yy64;
	}
yy308:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy380;
	default:	goto yy64;
	}
yy309:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy381;
	default:	goto yy64;
	}
yy310:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy382;
	default:	goto yy64;
	}
yy311:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy383;
	default:	goto yy64;
	}
yy312:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy384;
	case 'I':	goto yy385;
	default:	goto yy64;
	}
yy313:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy386;
	default:	goto yy64;
	}
yy314:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy387;
	default:	goto yy64;
	}
yy315:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy389;
	default:	goto yy64;
	}
yy316:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy390;
	default:	goto yy64;
	}
yy317:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy391;
	default:	goto yy64;
	}
yy318:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy392;
	default:	goto yy64;
	}
yy319:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy320;
	}
yy320:
#line 6501 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_FALSE (context.location); }
#line 10969 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy321:
	yych = *++context.cursor;
	switch (yych) {
	case 'a':	goto yy393;
	default:	goto yy64;
	}
yy322:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy394;
	default:	goto yy64;
	}
yy323:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy395;
	default:	goto yy64;
	}
yy324:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy396;
	default:	goto yy64;
	}
yy325:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy397;
	case 'E':	goto yy398;
	default:	goto yy64;
	}
yy326:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy399;
	default:	goto yy64;
	}
yy327:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy400;
	default:	goto yy64;
	}
yy328:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy401;
	default:	goto yy64;
	}
yy329:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy402;
	default:	goto yy64;
	}
yy330:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy403;
	default:	goto yy64;
	}
yy331:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy404;
	default:	goto yy64;
	}
yy332:
	yych = *++context.cursor;
	switch (yych) {
	case '6':	goto yy405;
	default:	goto yy64;
	}
yy333:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy406;
	default:	goto yy64;
	}
yy334:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy407;
	default:	goto yy64;
	}
yy335:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy408;
	default:	goto yy64;
	}
yy336:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy409;
	default:	goto yy64;
	}
yy337:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy338;
	}
yy338:
#line 6524 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OCTET (context.location); }
#line 11139 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy339:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy411;
	default:	goto yy64;
	}
yy340:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy412;
	default:	goto yy64;
	}
yy341:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy413;
	default:	goto yy64;
	}
yy342:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy414;
	default:	goto yy64;
	}
yy343:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy415;
	default:	goto yy64;
	}
yy344:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy416;
	default:	goto yy64;
	}
yy345:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy417;
	default:	goto yy64;
	}
yy346:
	yych = *++context.cursor;
	switch (yych) {
	case 'a':	goto yy418;
	default:	goto yy64;
	}
yy347:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy419;
	default:	goto yy64;
	}
yy348:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy420;
	default:	goto yy64;
	}
yy349:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy421;
	default:	goto yy64;
	}
yy350:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy422;
	default:	goto yy64;
	}
yy351:
	yych = *++context.cursor;
	switch (yych) {
	case 'X':	goto yy424;
	default:	goto yy64;
	}
yy352:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy426;
	default:	goto yy64;
	}
yy353:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy427;
	default:	goto yy64;
	}
yy354:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy428;
	default:	goto yy64;
	}
yy355:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy429;
	default:	goto yy64;
	}
yy356:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy357;
	}
yy357:
#line 6550 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UNION (context.location); }
#line 11314 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy358:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy430;
	default:	goto yy64;
	}
yy359:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy432;
	default:	goto yy64;
	}
yy360:
	yych = *++context.cursor;
	switch (yych) {
	case 'm':	goto yy433;
	default:	goto yy64;
	}
yy361:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy434;
	default:	goto yy64;
	}
yy362:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy435;
	default:	goto yy64;
	}
yy363:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy436;
	default:	goto yy64;
	}
yy364:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy437;
	default:	goto yy64;
	}
yy365:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy366;
	}
yy366:
#line 6468 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ABSENT (context.location); }
#line 11429 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy367:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy438;
	default:	goto yy64;
	}
yy368:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy439;
	default:	goto yy64;
	}
yy369:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy440;
	default:	goto yy64;
	}
yy370:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy441;
	default:	goto yy64;
	}
yy371:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy442;
	default:	goto yy64;
	}
yy372:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy443;
	default:	goto yy64;
	}
yy373:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy445;
	default:	goto yy64;
	}
yy374:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy375;
	}
yy375:
#line 6480 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CHOICE (context.location); }
#line 11544 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy376:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy446;
	default:	goto yy64;
	}
yy377:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy447;
	default:	goto yy64;
	}
yy378:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy448;
	default:	goto yy64;
	}
yy379:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy449;
	default:	goto yy64;
	}
yy380:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy450;
	default:	goto yy64;
	}
yy381:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy452;
	default:	goto yy64;
	}
yy382:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy453;
	default:	goto yy64;
	}
yy383:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy454;
	default:	goto yy64;
	}
yy384:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy455;
	default:	goto yy64;
	}
yy385:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy457;
	default:	goto yy64;
	}
yy386:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy458;
	default:	goto yy64;
	}
yy387:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy388;
	}
yy388:
#line 6496 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXCEPT (context.location); }
#line 11683 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy389:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy459;
	default:	goto yy64;
	}
yy390:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy460;
	default:	goto yy64;
	}
yy391:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy462;
	default:	goto yy64;
	}
yy392:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy463;
	default:	goto yy64;
	}
yy393:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy464;
	default:	goto yy64;
	}
yy394:
	yych = *++context.cursor;
	switch (yych) {
	case 'c':	goto yy465;
	default:	goto yy64;
	}
yy395:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy466;
	default:	goto yy64;
	}
yy396:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy467;
	default:	goto yy64;
	}
yy397:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy468;
	default:	goto yy64;
	}
yy398:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy469;
	default:	goto yy64;
	}
yy399:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy471;
	default:	goto yy64;
	}
yy400:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy473;
	default:	goto yy64;
	}
yy401:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy474;
	default:	goto yy64;
	}
yy402:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy475;
	default:	goto yy64;
	}
yy403:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy476;
	default:	goto yy64;
	}
yy404:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy478;
	default:	goto yy64;
	}
yy405:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy479;
	default:	goto yy64;
	}
yy406:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy480;
	default:	goto yy64;
	}
yy407:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy481;
	default:	goto yy64;
	}
yy408:
	yych = *++context.cursor;
	switch (yych) {
	case 'c':	goto yy482;
	default:	goto yy64;
	}
yy409:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy410;
	}
yy410:
#line 6522 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OBJECT (context.location); }
#line 11876 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy411:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy483;
	default:	goto yy64;
	}
yy412:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy485;
	default:	goto yy64;
	}
yy413:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy486;
	default:	goto yy64;
	}
yy414:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy487;
	default:	goto yy64;
	}
yy415:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy489;
	default:	goto yy64;
	}
yy416:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy490;
	default:	goto yy64;
	}
yy417:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy492;
	default:	goto yy64;
	}
yy418:
	yych = *++context.cursor;
	switch (yych) {
	case 'b':	goto yy494;
	default:	goto yy64;
	}
yy419:
	yych = *++context.cursor;
	switch (yych) {
	case 'V':	goto yy495;
	default:	goto yy64;
	}
yy420:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy496;
	default:	goto yy64;
	}
yy421:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy497;
	default:	goto yy64;
	}
yy422:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy423;
	}
yy423:
#line 6541 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_STRING (context.location); }
#line 12015 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy424:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy425;
	}
yy425:
#line 6542 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SYNTAX (context.location); }
#line 12088 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy426:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy498;
	default:	goto yy64;
	}
yy427:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy499;
	default:	goto yy64;
	}
yy428:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy500;
	default:	goto yy64;
	}
yy429:
	yych = *++context.cursor;
	switch (yych) {
	case 'x':	goto yy501;
	default:	goto yy64;
	}
yy430:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy431;
	}
yy431:
#line 6551 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UNIQUE (context.location); }
#line 12185 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy432:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy502;
	default:	goto yy64;
	}
yy433:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy503;
	default:	goto yy64;
	}
yy434:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy505;
	default:	goto yy64;
	}
yy435:
	yych = *++context.cursor;
	switch (yych) {
	case 's':	goto yy506;
	default:	goto yy64;
	}
yy436:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy507;
	default:	goto yy64;
	}
yy437:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy508;
	default:	goto yy64;
	}
yy438:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy509;
	default:	goto yy64;
	}
yy439:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy510;
	default:	goto yy64;
	}
yy440:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy511;
	default:	goto yy64;
	}
yy441:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy513;
	default:	goto yy64;
	}
yy442:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy514;
	default:	goto yy64;
	}
yy443:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy444;
	}
yy444:
#line 6477 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BOOLEAN (context.location); }
#line 12324 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy445:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy515;
	default:	goto yy64;
	}
yy446:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy516;
	default:	goto yy64;
	}
yy447:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy517;
	default:	goto yy64;
	}
yy448:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy518;
	default:	goto yy64;
	}
yy449:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy519;
	default:	goto yy64;
	}
yy450:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy451;
	}
yy451:
#line 6488 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DEFAULT (context.location); }
#line 12427 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy452:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy520;
	default:	goto yy64;
	}
yy453:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy521;
	default:	goto yy64;
	}
yy454:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy523;
	default:	goto yy64;
	}
yy455:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy456;
	}
yy456:
#line 6492 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ENCODED (context.location); }
#line 12518 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy457:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy525;
	default:	goto yy64;
	}
yy458:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy526;
	default:	goto yy64;
	}
yy459:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy527;
	default:	goto yy64;
	}
yy460:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy461;
	}
yy461:
#line 6498 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXPORTS (context.location); }
#line 12609 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy462:
	yych = *++context.cursor;
	switch (yych) {
	case 'B':	goto yy529;
	default:	goto yy64;
	}
yy463:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy530;
	default:	goto yy64;
	}
yy464:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy532;
	case 'i':	goto yy533;
	default:	goto yy64;
	}
yy465:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy534;
	default:	goto yy64;
	}
yy466:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy535;
	default:	goto yy64;
	}
yy467:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy536;
	default:	goto yy64;
	}
yy468:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy537;
	default:	goto yy64;
	}
yy469:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy470;
	}
yy470:
#line 6509 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IMPLIED (context.location); }
#line 12725 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy471:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy472;
	}
yy472:
#line 6510 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IMPORTS (context.location); }
#line 12798 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy473:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy539;
	default:	goto yy64;
	}
yy474:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy541;
	default:	goto yy64;
	}
yy475:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy543;
	default:	goto yy64;
	}
yy476:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy477;
	}
yy477:
#line 6514 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INTEGER (context.location); }
#line 12889 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy478:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy544;
	default:	goto yy64;
	}
yy479:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy545;
	default:	goto yy64;
	}
yy480:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy546;
	default:	goto yy64;
	}
yy481:
	yych = *++context.cursor;
	switch (yych) {
	case 'U':	goto yy547;
	default:	goto yy64;
	}
yy482:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy548;
	default:	goto yy64;
	}
yy483:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy484;
	}
yy484:
#line 6526 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OID_IRI (context.location); }
#line 12992 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy485:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy549;
	default:	goto yy64;
	}
yy486:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy551;
	default:	goto yy64;
	}
yy487:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy488;
	}
yy488:
#line 6528 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PATTERN (context.location); }
#line 13077 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy489:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy552;
	default:	goto yy64;
	}
yy490:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy491;
	}
yy491:
#line 6531 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PRESENT (context.location); }
#line 13156 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy492:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy493;
	}
yy493:
#line 6533 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PRIVATE (context.location); }
#line 13229 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy494:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy553;
	default:	goto yy64;
	}
yy495:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy554;
	default:	goto yy64;
	}
yy496:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy555;
	default:	goto yy64;
	}
yy497:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy557;
	default:	goto yy64;
	}
yy498:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy559;
	default:	goto yy64;
	}
yy499:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy560;
	default:	goto yy64;
	}
yy500:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy561;
	default:	goto yy64;
	}
yy501:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy562;
	default:	goto yy64;
	}
yy502:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy563;
	default:	goto yy64;
	}
yy503:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy504;
	}
yy504:
#line 6554 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UTCTime (context.location); }
#line 13356 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy505:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy564;
	default:	goto yy64;
	}
yy506:
	yych = *++context.cursor;
	switch (yych) {
	case 'a':	goto yy565;
	default:	goto yy64;
	}
yy507:
	yych = *++context.cursor;
	switch (yych) {
	case 'x':	goto yy566;
	default:	goto yy64;
	}
yy508:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy567;
	default:	goto yy64;
	}
yy509:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy568;
	default:	goto yy64;
	}
yy510:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy569;
	default:	goto yy64;
	}
yy511:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy512;
	}
yy512:
#line 6472 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ASN_NULL (context.location); }
#line 13465 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy513:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy570;
	default:	goto yy64;
	}
yy514:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy572;
	default:	goto yy64;
	}
yy515:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy574;
	default:	goto yy64;
	}
yy516:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy576;
	default:	goto yy64;
	}
yy517:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy578;
	default:	goto yy64;
	}
yy518:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy579;
	default:	goto yy64;
	}
yy519:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy580;
	default:	goto yy64;
	}
yy520:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy582;
	default:	goto yy64;
	}
yy521:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy522;
	}
yy522:
#line 6490 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DURATION (context.location); }
#line 13586 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy523:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy524;
	}
yy524:
#line 6491 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EMBEDDED (context.location); }
#line 13659 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy525:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy583;
	default:	goto yy64;
	}
yy526:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy584;
	default:	goto yy64;
	}
yy527:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy528;
	}
yy528:
#line 6497 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXPLICIT (context.location); }
#line 13744 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy529:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy585;
	default:	goto yy64;
	}
yy530:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy531;
	}
yy531:
#line 6500 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXTERNAL (context.location); }
#line 13823 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy532:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy586;
	default:	goto yy64;
	}
yy533:
	yych = *++context.cursor;
	switch (yych) {
	case 'z':	goto yy587;
	default:	goto yy64;
	}
yy534:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy588;
	default:	goto yy64;
	}
yy535:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy589;
	default:	goto yy64;
	}
yy536:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy591;
	default:	goto yy64;
	}
yy537:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy538;
	}
yy538:
#line 6508 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IMPLICIT (context.location); }
#line 13926 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy539:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy540;
	}
yy540:
#line 6511 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INCLUDES (context.location); }
#line 13999 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy541:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy542;
	}
yy542:
#line 6512 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INSTANCE (context.location); }
#line 14072 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy543:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy592;
	default:	goto yy64;
	}
yy544:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy593;
	default:	goto yy64;
	}
yy545:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy594;
	default:	goto yy64;
	}
yy546:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy595;
	default:	goto yy64;
	}
yy547:
	yych = *++context.cursor;
	switch (yych) {
	case 'M':	goto yy596;
	default:	goto yy64;
	}
yy548:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy597;
	default:	goto yy64;
	}
yy549:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy550;
	}
yy550:
#line 6527 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPTIONAL (context.location); }
#line 14181 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy551:
	yych = *++context.cursor;
	switch (yych) {
	case 's':	goto yy598;
	default:	goto yy64;
	}
yy552:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy599;
	default:	goto yy64;
	}
yy553:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy600;
	default:	goto yy64;
	}
yy554:
	yych = *++context.cursor;
	switch (yych) {
	case '_':	goto yy601;
	default:	goto yy64;
	}
yy555:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy556;
	}
yy556:
#line 6537 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SEQUENCE (context.location); }
#line 14278 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy557:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy558;
	}
yy558:
#line 6539 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SETTINGS (context.location); }
#line 14351 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy559:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy602;
	default:	goto yy64;
	}
yy560:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy604;
	default:	goto yy64;
	}
yy561:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy605;
	default:	goto yy64;
	}
yy562:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy606;
	default:	goto yy64;
	}
yy563:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy607;
	default:	goto yy64;
	}
yy564:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy609;
	default:	goto yy64;
	}
yy565:
	yych = *++context.cursor;
	switch (yych) {
	case 'l':	goto yy610;
	default:	goto yy64;
	}
yy566:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy611;
	default:	goto yy64;
	}
yy567:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy612;
	default:	goto yy64;
	}
yy568:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy613;
	default:	goto yy64;
	}
yy569:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy614;
	default:	goto yy64;
	}
yy570:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy571;
	}
yy571:
#line 6473 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_AUTOMATIC (context.location); }
#line 14490 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy572:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy573;
	}
yy573:
#line 6476 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BMPString (context.location); }
#line 14563 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy574:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy575;
	}
yy575:
#line 6479 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CHARACTER (context.location); }
#line 14636 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy576:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'S':	goto yy615;
	default:	goto yy577;
	}
yy577:
#line 6482 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COMPONENT (context.location); }
#line 14709 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy578:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy617;
	default:	goto yy64;
	}
yy579:
	yych = *++context.cursor;
	switch (yych) {
	case 'G':	goto yy618;
	default:	goto yy64;
	}
yy580:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy581;
	}
yy581:
#line 6487 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DATE_TIME (context.location); }
#line 14794 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy582:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy620;
	default:	goto yy64;
	}
yy583:
	yych = *++context.cursor;
	switch (yych) {
	case 'C':	goto yy621;
	default:	goto yy64;
	}
yy584:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy622;
	default:	goto yy64;
	}
yy585:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy624;
	default:	goto yy64;
	}
yy586:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy625;
	default:	goto yy64;
	}
yy587:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy626;
	default:	goto yy64;
	}
yy588:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy627;
	default:	goto yy64;
	}
yy589:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy590;
	}
yy590:
#line 6506 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IA5String (context.location); }
#line 14909 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy591:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy628;
	default:	goto yy64;
	}
yy592:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy630;
	default:	goto yy64;
	}
yy593:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy631;
	default:	goto yy64;
	}
yy594:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy632;
	default:	goto yy64;
	}
yy595:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy633;
	default:	goto yy64;
	}
yy596:
	yych = *++context.cursor;
	switch (yych) {
	case 'B':	goto yy634;
	default:	goto yy64;
	}
yy597:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy635;
	default:	goto yy64;
	}
yy598:
	yych = *++context.cursor;
	switch (yych) {
	case 'c':	goto yy636;
	default:	goto yy64;
	}
yy599:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy637;
	default:	goto yy64;
	}
yy600:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy638;
	default:	goto yy64;
	}
yy601:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy639;
	default:	goto yy64;
	}
yy602:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy603;
	}
yy603:
#line 6543 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_T61String (context.location); }
#line 15048 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy604:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy640;
	default:	goto yy64;
	}
yy605:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy641;
	default:	goto yy64;
	}
yy606:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy642;
	default:	goto yy64;
	}
yy607:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy608;
	}
yy608:
#line 6552 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UNIVERSAL (context.location); }
#line 15139 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy609:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy643;
	default:	goto yy64;
	}
yy610:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy645;
	default:	goto yy64;
	}
yy611:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy646;
	default:	goto yy64;
	}
yy612:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy647;
	default:	goto yy64;
	}
yy613:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy648;
	default:	goto yy64;
	}
yy614:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy649;
	default:	goto yy64;
	}
yy615:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy616;
	}
yy616:
#line 6483 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COMPONENTS (context.location); }
#line 15248 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy617:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy651;
	default:	goto yy64;
	}
yy618:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy619;
	}
yy619:
#line 6485 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CONTAINING (context.location); }
#line 15327 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy620:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy653;
	default:	goto yy64;
	}
yy621:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy655;
	default:	goto yy64;
	}
yy622:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy623;
	}
yy623:
#line 6495 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ENUMERATED (context.location); }
#line 15412 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy624:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy656;
	default:	goto yy64;
	}
yy625:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy657;
	default:	goto yy64;
	}
yy626:
	yych = *++context.cursor;
	switch (yych) {
	case 'd':	goto yy658;
	default:	goto yy64;
	}
yy627:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy659;
	default:	goto yy64;
	}
yy628:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy629;
	}
yy629:
#line 6507 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IDENTIFIER (context.location); }
#line 15509 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy630:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy660;
	default:	goto yy64;
	}
yy631:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy661;
	default:	goto yy64;
	}
yy632:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy662;
	default:	goto yy64;
	}
yy633:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy663;
	default:	goto yy64;
	}
yy634:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy664;
	default:	goto yy64;
	}
yy635:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy665;
	default:	goto yy64;
	}
yy636:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy666;
	default:	goto yy64;
	}
yy637:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy667;
	default:	goto yy64;
	}
yy638:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy668;
	default:	goto yy64;
	}
yy639:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy669;
	default:	goto yy64;
	}
yy640:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy670;
	default:	goto yy64;
	}
yy641:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy672;
	default:	goto yy64;
	}
yy642:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy673;
	default:	goto yy64;
	}
yy643:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy644;
	}
yy644:
#line 6555 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UTF8String (context.location); }
#line 15660 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy645:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy674;
	default:	goto yy64;
	}
yy646:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy675;
	default:	goto yy64;
	}
yy647:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy676;
	default:	goto yy64;
	}
yy648:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy677;
	default:	goto yy64;
	}
yy649:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy650;
	}
yy650:
#line 6471 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_APPLICATION (context.location); }
#line 15757 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy651:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy652;
	}
yy652:
#line 6484 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CONSTRAINED (context.location); }
#line 15830 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy653:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy654;
	}
yy654:
#line 6489 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DEFINITIONS (context.location); }
#line 15903 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy655:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy678;
	default:	goto yy64;
	}
yy656:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy679;
	default:	goto yy64;
	}
yy657:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy680;
	default:	goto yy64;
	}
yy658:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy681;
	default:	goto yy64;
	}
yy659:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy682;
	default:	goto yy64;
	}
yy660:
	yych = *++context.cursor;
	switch (yych) {
	case 'S':	goto yy683;
	default:	goto yy64;
	}
yy661:
	yych = *++context.cursor;
	switch (yych) {
	case 'N':	goto yy685;
	default:	goto yy64;
	}
yy662:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy687;
	default:	goto yy64;
	}
yy663:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy689;
	default:	goto yy64;
	}
yy664:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy690;
	default:	goto yy64;
	}
yy665:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy692;
	default:	goto yy64;
	}
yy666:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy693;
	default:	goto yy64;
	}
yy667:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy694;
	default:	goto yy64;
	}
yy668:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy695;
	default:	goto yy64;
	}
yy669:
	yych = *++context.cursor;
	switch (yych) {
	case 'D':	goto yy696;
	default:	goto yy64;
	}
yy670:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy671;
	}
yy671:
#line 6547 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TIME_OF_DAY (context.location); }
#line 16066 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy672:
	yych = *++context.cursor;
	switch (yych) {
	case 'F':	goto yy698;
	default:	goto yy64;
	}
yy673:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy699;
	default:	goto yy64;
	}
yy674:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy700;
	default:	goto yy64;
	}
yy675:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy701;
	default:	goto yy64;
	}
yy676:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy702;
	default:	goto yy64;
	}
yy677:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy703;
	default:	goto yy64;
	}
yy678:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy704;
	default:	goto yy64;
	}
yy679:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy705;
	default:	goto yy64;
	}
yy680:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy707;
	default:	goto yy64;
	}
yy681:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy709;
	default:	goto yy64;
	}
yy682:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy710;
	default:	goto yy64;
	}
yy683:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy684;
	}
yy684:
#line 6513 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INSTRUCTIONS (context.location); }
#line 16205 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy685:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy686;
	}
yy686:
#line 6515 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INTERSECTION (context.location); }
#line 16278 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy687:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy688;
	}
yy688:
#line 6516 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ISO646String (context.location); }
#line 16351 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy689:
	yych = *++context.cursor;
	switch (yych) {
	case 'T':	goto yy712;
	default:	goto yy64;
	}
yy690:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy691;
	}
yy691:
#line 6520 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_NOT_A_NUMBER (context.location); }
#line 16430 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy692:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy713;
	default:	goto yy64;
	}
yy693:
	yych = *++context.cursor;
	switch (yych) {
	case 'p':	goto yy715;
	default:	goto yy64;
	}
yy694:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy716;
	default:	goto yy64;
	}
yy695:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy718;
	default:	goto yy64;
	}
yy696:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case '_':	goto yy719;
	default:	goto yy697;
	}
yy697:
#line 6535 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_RELATIVE_OID (context.location); }
#line 16527 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy698:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy720;
	default:	goto yy64;
	}
yy699:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy721;
	default:	goto yy64;
	}
yy700:
	yych = *++context.cursor;
	switch (yych) {
	case 'i':	goto yy723;
	default:	goto yy64;
	}
yy701:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy724;
	default:	goto yy64;
	}
yy702:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy725;
	default:	goto yy64;
	}
yy703:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':	goto yy727;
	default:	goto yy64;
	}
yy704:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy728;
	default:	goto yy64;
	}
yy705:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy706;
	}
yy706:
#line 6499 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXTENSIBILITY (context.location); }
#line 16642 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy707:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy708;
	}
yy708:
#line 6504 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GeneralString (context.location); }
#line 16715 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy709:
	yych = *++context.cursor;
	switch (yych) {
	case 'm':	goto yy729;
	default:	goto yy64;
	}
yy710:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy711;
	}
yy711:
#line 6505 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GraphicString (context.location); }
#line 16794 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy712:
	yych = *++context.cursor;
	switch (yych) {
	case 'Y':	goto yy730;
	default:	goto yy64;
	}
yy713:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy714;
	}
yy714:
#line 6521 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_NumericString (context.location); }
#line 16873 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy715:
	yych = *++context.cursor;
	switch (yych) {
	case 't':	goto yy732;
	default:	goto yy64;
	}
yy716:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy717;
	}
yy717:
#line 6530 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PLUS_INFINITY (context.location); }
#line 16952 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy718:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy733;
	default:	goto yy64;
	}
yy719:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy734;
	default:	goto yy64;
	}
yy720:
	yych = *++context.cursor;
	switch (yych) {
	case 'E':	goto yy735;
	default:	goto yy64;
	}
yy721:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy722;
	}
yy722:
#line 6545 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TeletexString (context.location); }
#line 17043 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy723:
	yych = *++context.cursor;
	switch (yych) {
	case 'n':	goto yy736;
	default:	goto yy64;
	}
yy724:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy737;
	default:	goto yy64;
	}
yy725:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy726;
	}
yy726:
#line 6557 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_VisibleString (context.location); }
#line 17128 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy727:
	yych = *++context.cursor;
	switch (yych) {
	case 'X':	goto yy739;
	default:	goto yy64;
	}
yy728:
	yych = *++context.cursor;
	switch (yych) {
	case 'O':	goto yy741;
	default:	goto yy64;
	}
yy729:
	yych = *++context.cursor;
	switch (yych) {
	case 'e':	goto yy742;
	default:	goto yy64;
	}
yy730:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy731;
	}
yy731:
#line 6519 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_MINUS_INFINITY (context.location); }
#line 17219 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy732:
	yych = *++context.cursor;
	switch (yych) {
	case 'o':	goto yy744;
	default:	goto yy64;
	}
yy733:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy745;
	default:	goto yy64;
	}
yy734:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy747;
	default:	goto yy64;
	}
yy735:
	yych = *++context.cursor;
	switch (yych) {
	case 'R':	goto yy748;
	default:	goto yy64;
	}
yy736:
	yych = *++context.cursor;
	switch (yych) {
	case 'g':	goto yy750;
	default:	goto yy64;
	}
yy737:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy738;
	}
yy738:
#line 6556 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_VideotexString (context.location); }
#line 17322 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy739:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy740;
	}
yy740:
#line 6469 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ABSTRACT_SYNTAX (context.location); }
#line 17395 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy741:
	yych = *++context.cursor;
	switch (yych) {
	case 'L':	goto yy752;
	default:	goto yy64;
	}
yy742:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy743;
	}
yy743:
#line 6503 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GeneralizedTime (context.location); }
#line 17474 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy744:
	yych = *++context.cursor;
	switch (yych) {
	case 'r':	goto yy754;
	default:	goto yy64;
	}
yy745:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy746;
	}
yy746:
#line 6532 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PrintableString (context.location); }
#line 17553 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy747:
	yych = *++context.cursor;
	switch (yych) {
	case 'I':	goto yy756;
	default:	goto yy64;
	}
yy748:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy749;
	}
yy749:
#line 6549 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TYPE_IDENTIFIER (context.location); }
#line 17632 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy750:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy751;
	}
yy751:
#line 6553 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UniversalString (context.location); }
#line 17705 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy752:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy753;
	}
yy753:
#line 6493 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ENCODING_CONTROL (context.location); }
#line 17778 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy754:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy755;
	}
yy755:
#line 6523 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ObjectDescriptor (context.location); }
#line 17851 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
yy756:
	yych = *++context.cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy757;
	}
yy757:
#line 6536 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_RELATIVE_OID_IRI (context.location); }
#line 17924 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.hpp"
}
#line 6592 "/home/styler/git/fast_ber/newdsds/src/autogen/asn_compiler.re"

    }
}
